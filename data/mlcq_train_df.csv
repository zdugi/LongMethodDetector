,sample_id,severity,snippet
0,7910247.txt,none,"  public void transformKeyReferences(RefTransformer visitor) {
    configs.forEach(c -> c.transformKeyReferences(visitor));
  }"
1,3951549.txt,major,"  @SuppressWarnings(value = ""unchecked"")
  private void performCommonProcessing(Operation currentOperation, KuduExecutionContext kuduExecutionContext)
  {
    currentOperation.setExternalConsistencyMode(kuduExecutionContext.getExternalConsistencyMode());
    Long propagatedTimeStamp = kuduExecutionContext.getPropagatedTimestamp();
    if ( propagatedTimeStamp != null) { // set propagation timestamp only if enabled
      currentOperation.setPropagatedTimestamp(propagatedTimeStamp);
    }
    PartialRow partialRow = currentOperation.getRow();
    Object payload = kuduExecutionContext.getPayload();
    Set<String> doNotWriteColumns = kuduExecutionContext.getDoNotWriteColumns();
    if (doNotWriteColumns == null) {
      doNotWriteColumns = new HashSet<>();
    }
    for (String columnName: kuduColumnBasedGetters.keySet()) {
      if ( doNotWriteColumns.contains(columnName)) {
        continue;
      }
      ColumnSchema columnSchema = allColumnDefs.get(columnName);
      Type dataType = columnSchema.getType();
      try {
        switch (dataType) {
          case STRING:
            PojoUtils.Getter<Object, String> stringGetter = ((PojoUtils.Getter<Object, String>)kuduColumnBasedGetters
                .get(columnName));
            if (stringGetter != null) {
              final String stringValue = stringGetter.get(payload);
              if (stringValue != null) {
                partialRow.addString(columnName, stringValue);
              }
            }
            break;
          case BINARY:
            PojoUtils.Getter<Object, ByteBuffer> byteBufferGetter = ((PojoUtils.Getter<Object, ByteBuffer>)
                kuduColumnBasedGetters.get(columnName));
            if (byteBufferGetter != null) {
              final ByteBuffer byteBufferValue = byteBufferGetter.get(payload);
              if (byteBufferValue != null) {
                partialRow.addBinary(columnName, byteBufferValue);
              }
            }
            break;
          case BOOL:
            PojoUtils.GetterBoolean<Object> boolGetter = ((PojoUtils.GetterBoolean<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (boolGetter != null) {
              final boolean boolValue = boolGetter.get(payload);
              partialRow.addBoolean(columnName, boolValue);
            }
            break;
          case DOUBLE:
            PojoUtils.GetterDouble<Object> doubleGetter = ((PojoUtils.GetterDouble<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (doubleGetter != null) {
              final double doubleValue = doubleGetter.get(payload);
              partialRow.addDouble(columnName, doubleValue);
            }
            break;
          case FLOAT:
            PojoUtils.GetterFloat<Object> floatGetter = ((PojoUtils.GetterFloat<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (floatGetter != null) {
              final float floatValue = floatGetter.get(payload);
              partialRow.addFloat(columnName, floatValue);
            }
            break;
          case INT8:
            PojoUtils.GetterByte<Object> byteGetter = ((PojoUtils.GetterByte<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (byteGetter != null) {
              final byte byteValue = byteGetter.get(payload);
              partialRow.addByte(columnName, byteValue);
            }
            break;
          case INT16:
            PojoUtils.GetterShort<Object> shortGetter = ((PojoUtils.GetterShort<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (shortGetter != null) {
              final short shortValue = shortGetter.get(payload);
              partialRow.addShort(columnName, shortValue);
            }
            break;
          case INT32:
            PojoUtils.GetterInt<Object> intGetter = ((PojoUtils.GetterInt<Object>)
                kuduColumnBasedGetters.get(columnName));
            if (intGetter != null) {
              final int intValue = intGetter.get(payload);
              partialRow.addInt(columnName, intValue);
            }
            break;
          case INT64:
          case UNIXTIME_MICROS:
            PojoUtils.GetterLong<Object> longGetter = ((PojoUtils.GetterLong<Object>)kuduColumnBasedGetters.get(
                columnName));
            if (longGetter != null) {
              final long longValue = longGetter.get(payload);
              partialRow.addLong(columnName, longValue);
            }
            break;
          default:
            LOG.error(columnName + "" is not of the supported data type"");
            throw new UnsupportedOperationException(""Kudu does not support data type for column "" + columnName);
        }
      } catch ( Exception ex ) {
        LOG.error("" Exception while fetching the value of "" + columnName + "" because "" + ex.getMessage());
        partialRow.setNull(columnName);
      }
    }
    try {
      kuduSession.apply(currentOperation);
    } catch (KuduException e) {
      throw new RuntimeException(""Could not execute operation because "" + e.getMessage(), e);
    }
  }"
2,8095977.txt,none,"  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ComplexrewritetestPackage.ADD__ADD_OPERANDS:
        return ((InternalEList<?>)getAddOperands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }"
3,5857311.txt,none,"  static private String getText(String text) {
    int start = text.indexOf(""<TEXT>"");
    int end = text.indexOf(""</TEXT>"");
    if (start != -1 && end != -1) {
      return text.substring(start + 6, end);
    } else {
      return text;
    }
  }"
4,5548181.txt,none,"  @VisibleForTesting
   Set<MPath> getMAuthzPaths(long authzSnapshotID, String authzObj) throws Exception {
    return tm.executeTransactionWithRetry( pm -> {
      MAuthzPathsMapping mapping = null;
      pm.setDetachAllOnCommit(true); // No need to detach objects
      mapping = getMAuthzPathsMappingCore(pm, authzSnapshotID, authzObj);
      if(mapping != null) {
        Set<MPath> paths = mapping.getPathsPersisted();
        return paths;
      } else {
        return Collections.emptySet();
      }
    });
  }"
5,8497990.txt,minor,"    protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc) {
        if (dc.getNetworkType() != NetworkType.Advanced) {
            throw new CloudRuntimeException(""Zone "" + dc + "" is not advanced."");
        }

        if (dc.isSecurityGroupEnabled()) {
            List<NetworkVO> networks = _networkDao.listByZoneSecurityGroup(dc.getId());
            if (CollectionUtils.isEmpty(networks)) {
                throw new CloudRuntimeException(""Can not found security enabled network in SG Zone "" + dc);
            }

            return networks.get(0);
        }
        else {
            TrafficType defaultTrafficType = TrafficType.Public;
            List<NetworkVO> defaultNetworks = _networkDao.listByZoneAndTrafficType(dc.getId(), defaultTrafficType);

            // api should never allow this situation to happen
            if (defaultNetworks.size() != 1) {
                throw new CloudRuntimeException(""Found "" + defaultNetworks.size() + "" networks of type "" + defaultTrafficType + "" when expect to find 1"");
            }

            return defaultNetworks.get(0);
        }
    }"
6,5041287.txt,none,"    @Override
    public void endIterator(Iterator<?> iterator)
    {
        checkIfClosed() ; 
        transaction.removeIterator(iterator) ;
        // Don't pass down the beginIterator call - we track and manage here, not lower down.  
        //blockMgr.endIterator(iterator) ;
    }"
7,6577272.txt,minor,"    public final EObject entryRuleXMultiplicativeExpression() throws RecognitionException {
        EObject current = null;

        EObject iv_ruleXMultiplicativeExpression = null;


        try {
            // InternalEntities.g:1696:66: (iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF )
            // InternalEntities.g:1697:2: iv_ruleXMultiplicativeExpression= ruleXMultiplicativeExpression EOF
            {
            if ( state.backtracking==0 ) {
               newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {
               current =iv_ruleXMultiplicativeExpression; 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return current;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
8,8423865.txt,none,"    public void setSslContextParameters(String sslContextParameters) {
        this.sslContextParameters = sslContextParameters;
    }"
9,6957824.txt,none,"  @VisibleForTesting
  static String getClassName(String filename) {
    int classNameEnd = filename.length() - CLASS_FILE_NAME_EXTENSION.length();
    return filename.substring(0, classNameEnd).replace('/', '.');
  }"
10,9036731.txt,major,"	@Override
	public TypeBinding substitute(TypeVariableBinding typeVariable) {
		ReferenceBinding superclass = typeVariable.superclass;
		ReferenceBinding[] superInterfaces = typeVariable.superInterfaces;
		boolean hasSubstituted = false;
		variableLoop: for (int i = 0; i < this.variables.length; i++) {
			InferenceVariable variable = this.variables[i];
			TypeBinding pi = getP(i);
			if (TypeBinding.equalsEquals(pi, typeVariable))
				return variable;
			if (TypeBinding.equalsEquals(pi, superclass)) {
				superclass = variable;
				hasSubstituted = true;
				continue;
			}
			if (superInterfaces != null) {
				int ifcLen = superInterfaces.length; 
				for (int j = 0; j < ifcLen; j++) {
					if (TypeBinding.equalsEquals(pi, superInterfaces[j])) {
						if (superInterfaces == typeVariable.superInterfaces)
							System.arraycopy(superInterfaces, 0, superInterfaces = new ReferenceBinding[ifcLen], 0, ifcLen);
						superInterfaces[j] = variable;
						hasSubstituted = true;
						continue variableLoop;
					}
				}
			}
		}
		if (hasSubstituted) {
			typeVariable = new TypeVariableBinding(typeVariable.sourceName, typeVariable.declaringElement, typeVariable.rank, this.environment);
			typeVariable.superclass = superclass;
			typeVariable.superInterfaces = superInterfaces;
			typeVariable.firstBound = superclass != null ? superclass : superInterfaces[0];
			if (typeVariable.firstBound.hasNullTypeAnnotations())
				typeVariable.tagBits |= TagBits.HasNullTypeAnnotation;
		}
		return typeVariable;
	}"
11,6537106.txt,none,"    @Override
    public boolean supportsSensorType(SensorEnum sensorType) {
        if (sensorType != null) {
            return getSensorTypes().contains(sensorType);
        }
        return false;
    }"
12,8644476.txt,none,"    ZkDiscoveryNodeJoinEventData(
        long evtId,
        long topVer,
        List<ZkJoinedNodeEvtData> joinedNodes,
        int dataForJoinedPartCnt)
    {
        super(evtId, ZK_EVT_NODE_JOIN, topVer);

        this.joinedNodes = joinedNodes;
        this.dataForJoinedPartCnt = dataForJoinedPartCnt;
    }"
13,6009570.txt,none,"    public JedisPool(final GenericObjectPoolConfig poolConfig, final String host, final int port) {
        this(poolConfig, host, port, Protocol.DEFAULT_TIMEOUT, null);
    }"
14,3818939.txt,none,"   public InMemoryDirectoryServiceFactory() {
      try {
         directoryService = new DefaultDirectoryService();
      } catch (Exception e) {
         throw new RuntimeException(e);
      }
      directoryService.setShutdownHookEnabled(false);
      partitionFactory = new AvlPartitionFactory();
   }"
15,5775855.txt,none,"    @Override
    public List<PlainSchema> findByKeyword(final String keyword) {
        TypedQuery<PlainSchema> query = entityManager().createQuery(
                ""SELECT e FROM "" + JPAPlainSchema.class.getSimpleName() + "" e""
                + "" WHERE e.id LIKE :keyword"", PlainSchema.class);
        query.setParameter(""keyword"", keyword);
        return query.getResultList();
    }"
16,8631904.txt,none,"    private BPlusTree.TreeRowClosure<H2Row, H2Row> filter(QueryContext qctx) {
        if (qctx == null) {
            assert !cctx.mvccEnabled();

            return null;
        }

        IndexingQueryFilter f = qctx.filter();
        IndexingQueryCacheFilter p = f == null ? null : f.forCache(getTable().cacheName());
        MvccSnapshot v = qctx.mvccSnapshot();

        assert !cctx.mvccEnabled() || v != null;

        if(p == null && v == null)
            return null;

        return new H2TreeFilterClosure(p, v, cctx, log);
    }"
17,6589858.txt,none,"    protected void inputChanged(Object newInput, Object newSelection) {
        fFilterText.setText(""""); //$NON-NLS-1$
        fTableViewer.setInput(newInput);
		selectFirstMatch();

        // Resize the table's height accordingly to the new input
        Table viewerTable = fTableViewer.getTable();
        Point tableSize = viewerTable.computeSize(SWT.DEFAULT, SWT.DEFAULT);
        int tableMaxHeight = fComposite.getDisplay().getBounds().height / 2;
        // removes padding if necessary
        int tableHeight = (tableSize.y <= tableMaxHeight) ? tableSize.y
                - viewerTable.getItemHeight() - viewerTable.getItemHeight() / 2
                : tableMaxHeight;
        ((GridData) viewerTable.getLayoutData()).heightHint = tableHeight;
        Point fCompSize = fComposite.computeSize(SWT.DEFAULT, SWT.DEFAULT);
        fComposite.setSize(fCompSize);
        fComposite.getShell().setSize(fCompSize);
    }"
18,4242529.txt,none,"    @Override
    public void interpretPixel(final ImageBuilder imageBuilder, final int[] samples, final int x,
            final int y) throws ImageReadException, IOException {

        final int sc = samples[0];
        final int sm = samples[1];
        final int sy = samples[2];
        final int sk = samples[3];

        final int rgb = ColorConversions.convertCMYKtoRGB(sc, sm, sy, sk);
        imageBuilder.setRGB(x, y, rgb);
    }"
19,5445165.txt,none,"    CompletableFuture<MessageId> getLastMessageIdAsync() {
        if (getState() == State.Closing || getState() == State.Closed) {
            return FutureUtil
                .failedFuture(new PulsarClientException.AlreadyClosedException(""Consumer was already closed""));
        }

        AtomicLong opTimeoutMs = new AtomicLong(client.getConfiguration().getOperationTimeoutMs());
        Backoff backoff = new Backoff(100, TimeUnit.MILLISECONDS,
            opTimeoutMs.get() * 2, TimeUnit.MILLISECONDS,
            0 , TimeUnit.MILLISECONDS);
        CompletableFuture<MessageId> getLastMessageIdFuture = new CompletableFuture<>();

        internalGetLastMessageIdAsync(backoff, opTimeoutMs, getLastMessageIdFuture);
        return getLastMessageIdFuture;
    }"
20,9000671.txt,minor,"  OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output> arc, long fp, int length, long termOrd) throws IOException {
    final OrdsSegmentTermsEnumFrame f = getFrame(1+currentFrame.ord);
    f.arc = arc;
    // System.out.println(""pushFrame termOrd= "" + termOrd + "" fpOrig="" + f.fpOrig + "" fp="" + fp + "" nextEnt="" + f.nextEnt);
    if (f.fpOrig == fp && f.nextEnt != -1) {
      //if (DEBUG) System.out.println(""      push reused frame ord="" + f.ord + "" fp="" + f.fp + "" isFloor?="" + f.isFloor + "" hasTerms="" + f.hasTerms + "" pref="" + term + "" nextEnt="" + f.nextEnt + "" targetBeforeCurrentLength="" + targetBeforeCurrentLength + "" term.length="" + term.length + "" vs prefix="" + f.prefix);
      if (f.prefix > targetBeforeCurrentLength) {
        // System.out.println(""        do rewind!"");
        f.rewind();
      } else {
        // if (DEBUG) {
        // System.out.println(""        skip rewind!"");
        // }
      }
      assert length == f.prefix;
      assert termOrd == f.termOrdOrig;
    } else {
      f.nextEnt = -1;
      f.prefix = length;
      f.state.termBlockOrd = 0;
      f.termOrdOrig = termOrd;
      // System.out.println(""set termOrdOrig="" + termOrd);
      f.termOrd = termOrd;
      f.fpOrig = f.fp = fp;
      f.lastSubFP = -1;
      // if (DEBUG) {
      //   final int sav = term.length;
      //   term.length = length;
      //   System.out.println(""      push new frame ord="" + f.ord + "" fp="" + f.fp + "" hasTerms="" + f.hasTerms + "" isFloor="" + f.isFloor + "" pref="" + brToString(term));
      //   term.length = sav;
      // }
    }

    return f;
  }"
21,8404033.txt,none,"    public void setHeight(Integer height) {
        this.height = height;
    }"
22,8766133.txt,none,"  @SuppressWarnings(""unchecked"")
  private static Class<? extends Principal> getOsPrincipalClass() {
    ClassLoader cl = ClassLoader.getSystemClassLoader();
    try {
      String principalClass = null;
      if (IBM_JAVA) {
        if (is64Bit) {
          principalClass = ""com.ibm.security.auth.UsernamePrincipal"";
        } else {
          if (windows) {
            principalClass = ""com.ibm.security.auth.NTUserPrincipal"";
          } else if (aix) {
            principalClass = ""com.ibm.security.auth.AIXPrincipal"";
          } else {
            principalClass = ""com.ibm.security.auth.LinuxPrincipal"";
          }
        }
      } else {
        principalClass = windows ? ""com.sun.security.auth.NTUserPrincipal""
            : ""com.sun.security.auth.UnixPrincipal"";
      }
      return (Class<? extends Principal>) cl.loadClass(principalClass);
    } catch (ClassNotFoundException e) {
      LOG.error(""Unable to find JAAS classes:"" + e.getMessage());
    }
    return null;
  }"
23,6209901.txt,none,"        @Override
        public void onNodeSelected(TreeNodeElement<D> node, SignalEvent event) {
          getSelectionModel().setTreeActive(true);
          selectNode(node.getData(), event, true);
        }"
24,6431594.txt,none,"    @Override
    public Integer getOkResponse() {
        Optional<Integer> propertyValue = getProperty(DialogConditionType.OK_RESPONSE);
        return propertyValue.orElse(null);
    }"
25,8118314.txt,none,"	@Override
	public void configure(Binder binder) {
		properties = tryBindProperties(binder, ""org/eclipse/xtext/grammarinheritance/BaseInheritanceTestLanguage.properties"");
		super.configure(binder);
	}"
26,3857363.txt,none,"    public void setTmfeIsSet(boolean value) {
      if (!value) {
        this.tmfe = null;
      }
    }"
27,8949635.txt,none,"  public void setWmCountersDone() {
    if (wmCounters != null) {
      wmCounters.changeStateDone();
    }
  }"
28,4471454.txt,none,"    @Override
    public void write(byte[] b) throws IOException {
      count += b.length;
      out.write(b);
    }"
29,9192024.txt,none,"	public void removeModifyListener( ModifyListener listener )
	{
		checkWidget( );
		if ( listener == null )
			SWT.error( SWT.ERROR_NULL_ARGUMENT );
		removeListener( SWT.Modify, listener );
	}"
30,5186909.txt,none,"  public static String getMessageHash(JSONObject message, Collection<String> hashFields) {
    List<String> hashElements = hashFields.stream().map(errorField ->
            String.format(""%s-%s"", errorField, message.get(errorField))).collect(Collectors.toList());
    return DigestUtils.sha256Hex(String.join(""|"", hashElements).getBytes(UTF_8));
  }"
31,7883291.txt,none,"  @Override
  public void clear() {
    this.path = null;
  }"
32,7540312.txt,none,"	public String run() throws Exception {
		Method m = Class.class.getMethod(""getDeclaredMethods"");
		Method[] m2 = (Method[]) m.invoke(JLCGetDecMethods.class);
		//		Method m2 = (Method) m.invoke(JLCGetDecMethod.class, ""foo"", new Class[] { String.class, Integer.TYPE });
		return format(m2);
	}"
33,9503296.txt,none,"  public synchronized void removePipeline(Pipeline pipeline) {
    for (DatanodeDetails details : pipeline.getNodes()) {
      UUID dnId = details.getUuid();
      dn2ObjectMap.computeIfPresent(dnId,
          (k, v) -> {
            v.remove(pipeline.getId());
            return v;
          });
    }
  }"
34,3981428.txt,none,"    public ConstraintModel( Annotation annotation, Class<? extends Constraint<?, ?>> constraintClass )
    {
        super( annotation );
        this.constraintClass = constraintClass;
    }"
35,6746974.txt,none,"  public Object getFieldMostRecentImportStatus() {
    return mMostRecentImportStatus;
  }"
36,4671530.txt,none,"		@Nonnull
		@Override
		public TypeSerializerSchemaCompatibility<T> setPreviousSerializerSnapshotForRestoredState(
				TypeSerializerSnapshot<T> previousSerializerSnapshot) {
			throw new UnsupportedOperationException(""The snapshot of the state's previous serializer has already been set; cannot reset."");
		}"
37,7416098.txt,none,"	private void destroyBeanFactoryLocator() {
		Optional.ofNullable(getBeanFactoryLocator()).ifPresent(GemfireBeanFactoryLocator::destroy);
		this.beanFactoryLocator = null;
	}"
38,5361443.txt,none,"    @SuppressWarnings(""unchecked"")
    public <T extends Enum<T>> T get(final String property, final T defaultValue) {
        final String value = properties.getProperty(property);

        if (value == null || value.equals(""""))
            return parent.get(property, defaultValue);

        if (defaultValue == null)
            throw new IllegalArgumentException(""Must supply a default for property "" + property);

        final Class<T> enumType = (Class<T>) defaultValue.getClass();

        try {
            return log(property, valueOf(enumType, value.toUpperCase()));
        } catch (IllegalArgumentException e) {
            warn(property, value);
            return parent.get(property, defaultValue);
        }
    }"
39,6207748.txt,none,"    public final void mT__122() throws RecognitionException {
        try {
            int _type = T__122;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalMetaData.g:120:8: ( '|' )
            // InternalMetaData.g:120:10: '|'
            {
            match('|'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
40,8243636.txt,none,"    public Call(ParsingContext parsingContext, StartElement raw, Attributes attrs, Stack stack)
            throws SAXException {
        super(raw);
        this.parameters = new HashMap();
        Locator locator = getLocation();

        String name = attrs.getValue(""macro"");
        if (name == null) {
            throw new SAXParseException(""if: \""test\"" is required"", locator,
                    null);
        }
        this.macro = parsingContext.getStringTemplateParser().compileExpr(name, ""call: \""macro\"": "",
                locator);

        String namespace = StringUtils.defaultString(attrs
                .getValue(""targetNamespace""));
        this.targetNamespace = parsingContext.getStringTemplateParser().compileExpr(namespace,
                ""call: \""targetNamespace\"": "", locator);
    }"
41,4298894.txt,none,"    private LdapConnectionProvider()
    {
        init();
    }"
42,3986717.txt,major,"    @SuppressWarnings( ""raw"" )
    private static void simpleGenericNameOf( StringBuilder sb, Type type )
    {
        if( type instanceof Class )
        {
            sb.append( ( (Class) type ).getSimpleName() );
        }
        else if( type instanceof ParameterizedType )
        {
            ParameterizedType pt = (ParameterizedType) type;
            simpleGenericNameOf( sb, pt.getRawType() );
            sb.append( ""<"" );
            boolean atLeastOne = false;
            for( Type typeArgument : pt.getActualTypeArguments() )
            {
                if( atLeastOne )
                {
                    sb.append( "", "" );
                }
                simpleGenericNameOf( sb, typeArgument );
                atLeastOne = true;
            }
            sb.append( "">"" );
        }
        else if( type instanceof GenericArrayType )
        {
            GenericArrayType gat = (GenericArrayType) type;
            simpleGenericNameOf( sb, gat.getGenericComponentType() );
            sb.append( ""[]"" );
        }
        else if( type instanceof TypeVariable )
        {
            TypeVariable tv = (TypeVariable) type;
            sb.append( tv.getName() );
        }
        else if( type instanceof WildcardType )
        {
            WildcardType wt = (WildcardType) type;
            sb.append( ""? extends "" );
            boolean atLeastOne = false;
            for( Type typeArgument : wt.getUpperBounds() )
            {
                if( atLeastOne )
                {
                    sb.append( "", "" );
                }
                simpleGenericNameOf( sb, typeArgument );
                atLeastOne = true;
            }
        }
        else
        {
            throw new IllegalArgumentException( ""Don't know how to deal with type:"" + type );
        }
    }"
43,8976668.txt,none,"  @Override
  protected void securityConfEdited() {
    // Need to call explicitly since we will not get notified of changes to local security.json
    cores.securityNodeChanged();
  }"
44,7763232.txt,none,"  public StorageAdapter getAdapter()
  {
    return adapter;
  }"
45,7074773.txt,none,"  public static void main(String[] args) throws Exception {
    new DegradedExperienceExample().runExample();
  }"
46,4435454.txt,none,"    @Override
    public FSDataInputStream open(Path f, int bufferSize) throws IOException {
        return localFS.open(toLocalPath(f), bufferSize);
    }"
47,7875037.txt,minor,"  private static void doRawReceiveFile(File path, int size, InputStream clientInput)
      throws IOException {
    // Create a temp file to receive the payload, so we don't need to worry about
    // partially-received files.  The host takes care of deleting temp files.
    File tempfile =
        File.createTempFile(
            AgentUtil.TEMP_PREFIX + path.getName() + ""-"", "".tmp"", path.getParentFile());
    FileOutputStream output = new FileOutputStream(tempfile);

    // Keep track of our starting time so we can enforce a timeout on slow but steady uploads.
    long receiveStartMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
    // Keep track of the total received size to verify the payload.
    long totalSize = 0;
    long totalReceiveTimeoutMs =
        RECEIVE_TIMEOUT_MS + TOTAL_RECEIVE_TIMEOUT_MS_PER_MB * (size / 1024 / 1024);
    try {
      int bufferSize = 128 * 1024;
      byte[] buf = new byte[bufferSize];
      while (true) {
        long currentTimeMs = TimeUnit.NANOSECONDS.toMillis(System.nanoTime());
        if (currentTimeMs - receiveStartMs > totalReceiveTimeoutMs) {
          throw new RuntimeException(""Receive failed to complete before timeout."");
        }
        int remaining = size - (int) totalSize;
        if (remaining == 0) {
          break;
        }
        int want = bufferSize;
        if (want > remaining) {
          want = remaining;
        }
        int got = clientInput.read(buf, 0, want);
        if (got == -1) {
          break;
        }
        output.write(buf, 0, got);
        totalSize += got;
      }
    } finally {
      output.close();
    }
    if (totalSize != size) {
      throw new RuntimeException(""Received only "" + totalSize + "" of "" + size + "" bytes."");
    }
    boolean success = tempfile.renameTo(path);
    if (!success) {
      throw new RuntimeException(""Failed to rename temp file."");
    }
  }"
48,8725125.txt,none,"void createItem (TaskItem item, int index) {
	if (index == -1) index = itemCount;
	if (!(0 <= index && index <= itemCount)) error (SWT.ERROR_INVALID_RANGE);
	if (itemCount == items.length) {
		TaskItem [] newItems = new TaskItem [items.length + 4];
		System.arraycopy (items, 0, newItems, 0, items.length);
		items = newItems;
	}
	System.arraycopy (items, index, items, index + 1, itemCount++ - index);
	items [index] = item;
}"
49,6839392.txt,none,"	public void markAsToHoist(FunctionDeclaration element) {
		tag(Tag.toHoist, element);
	}"
50,6923170.txt,none,"    @Override
    public State computeBreaks(CommentsHelper commentsHelper, int maxWidth, State state) {
      text = commentsHelper.rewrite(tok, maxWidth, state.column);
      int firstLineLength = text.length() - Iterators.getLast(Newlines.lineOffsetIterator(text));
      return state.withColumn(state.column + firstLineLength);
    }"
51,8916223.txt,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_o1 = true && (isSetO1());
      list.add(present_o1);
      if (present_o1)
        list.add(o1);

      boolean present_o2 = true && (isSetO2());
      list.add(present_o2);
      if (present_o2)
        list.add(o2);

      return list.hashCode();
    }"
52,8501404.txt,none,"    @Override
    public boolean start() {
        return true;
    }"
53,8039539.txt,none,"	public ParserRule getCollectionTypeIdentifierRule() {
		return getCollectionTypeIdentifierAccess().getRule();
	}"
54,5423009.txt,none,"    private ClearCacheResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              unfreedBytes_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }"
55,7197234.txt,none,"        public Builder freeformTags(java.util.Map<String, String> freeformTags) {
            this.freeformTags = freeformTags;
            this.__explicitlySet__.add(""freeformTags"");
            return this;
        }"
56,8051310.txt,none,"	@Override
	protected InternalExBacktrackingBug325745TestLanguageParser createParser(XtextTokenStream stream) {
		return new InternalExBacktrackingBug325745TestLanguageParser(stream, getGrammarAccess());
	}"
57,4753103.txt,none,"  @Override
  public String convertSchema(String inputSchema, WorkUnitState workUnit)
      throws SchemaConversionException {
    return inputSchema;
  }"
58,3823798.txt,none,"   public TransactionDetail(Xid xid, Transaction tx, Long creation) {
      this.xid = xid;
      this.transaction = tx;
      this.creationTime = creation;
   }"
59,5176784.txt,none,"    @Override
    public Object apply(List<Object> args, Context context) throws ParseException {
      if(!initialized) {
        return null;
      }
      if(args.size() > 2) {
        throw new IllegalArgumentException(""GEO_GET received more arguments than expected: "" + args.size());
      }

      if(args.size() == 1 && args.get(0) instanceof String) {
        // If no fields are provided, return everything
        String ip = (String) args.get(0);
        if(ip == null || ip.trim().isEmpty()) {
          return null;
        }

        Optional<Map<String, String>> result = GeoLiteCityDatabase.INSTANCE.get(ip);
        return result.orElse(Collections.emptyMap());
      } else if (args.size() == 2 && args.get(1) instanceof List) {
        // If fields are provided, return just those fields.
        String ip = (String) args.get(0);
        @SuppressWarnings(""unchecked"")
        List<String> fields = (List) args.get(1);
        Optional<Map<String, String>> result = GeoLiteCityDatabase.INSTANCE.get(ip);

        // If only one field is requested, just return it directly
        if(fields.size() == 1 && result.isPresent()) {
          return result.get().get(fields.get(0));
        } else if (result.isPresent()) {
          // If multiple fields are requested, return all of them
          Map<String, String> filteredInfo = new HashMap<>();
          for(String field : fields) {
            Map<String, String> geoInfo = result.get();
            filteredInfo.put(field, geoInfo.get(field));
          }
          return filteredInfo;
        }
      }

      return null;
    }"
60,8653310.txt,major,"    @Override public Iterator<Row> getRows(Session ses, SearchRow first, SearchRow last) {
        List<Row> rows = new ArrayList<>();

        Collection<ClusterNode> nodes;

        SqlSystemViewColumnCondition idCond = conditionForColumn(""NODE_ID"", first, last);

        if (idCond.isEquality()) {
            try {
                UUID nodeId = uuidFromValue(idCond.valueForEquality());

                ClusterNode node = nodeId == null ? null : ctx.discovery().node(nodeId);

                if (node != null)
                    nodes = Collections.singleton(node);
                else
                    nodes = Collections.emptySet();
            }
            catch (Exception e) {
                nodes = Collections.emptySet();
            }
        }
        else
            nodes = F.concat(false, ctx.discovery().allNodes(), ctx.discovery().daemonNodes());

        for (ClusterNode node : nodes) {
            if (node != null) {
                ClusterMetrics metrics = node.metrics();

                rows.add(
                    createRow(
                        ses,
                        node.id(),
                        valueTimestampFromMillis(metrics.getLastUpdateTime()),
                        metrics.getMaximumActiveJobs(),
                        metrics.getCurrentActiveJobs(),
                        metrics.getAverageActiveJobs(),
                        metrics.getMaximumWaitingJobs(),
                        metrics.getCurrentWaitingJobs(),
                        metrics.getAverageWaitingJobs(),
                        metrics.getMaximumRejectedJobs(),
                        metrics.getCurrentRejectedJobs(),
                        metrics.getAverageRejectedJobs(),
                        metrics.getTotalRejectedJobs(),
                        metrics.getMaximumCancelledJobs(),
                        metrics.getCurrentCancelledJobs(),
                        metrics.getAverageCancelledJobs(),
                        metrics.getTotalCancelledJobs(),
                        metrics.getMaximumJobWaitTime(),
                        metrics.getCurrentJobWaitTime(),
                        (long)metrics.getAverageJobWaitTime(),
                        metrics.getMaximumJobExecuteTime(),
                        metrics.getCurrentJobExecuteTime(),
                        (long)metrics.getAverageJobExecuteTime(),
                        metrics.getTotalJobsExecutionTime(),
                        metrics.getTotalExecutedJobs(),
                        metrics.getTotalExecutedTasks(),
                        metrics.getTotalBusyTime(),
                        metrics.getTotalIdleTime(),
                        metrics.getCurrentIdleTime(),
                        metrics.getBusyTimePercentage(),
                        metrics.getIdleTimePercentage(),
                        metrics.getTotalCpus(),
                        metrics.getCurrentCpuLoad(),
                        metrics.getAverageCpuLoad(),
                        metrics.getCurrentGcCpuLoad(),
                        metrics.getHeapMemoryInitialized(),
                        metrics.getHeapMemoryUsed(),
                        metrics.getHeapMemoryCommitted(),
                        metrics.getHeapMemoryMaximum(),
                        metrics.getHeapMemoryTotal(),
                        metrics.getNonHeapMemoryInitialized(),
                        metrics.getNonHeapMemoryUsed(),
                        metrics.getNonHeapMemoryCommitted(),
                        metrics.getNonHeapMemoryMaximum(),
                        metrics.getNonHeapMemoryTotal(),
                        metrics.getUpTime(),
                        valueTimestampFromMillis(metrics.getStartTime()),
                        valueTimestampFromMillis(metrics.getNodeStartTime()),
                        metrics.getLastDataVersion(),
                        metrics.getCurrentThreadCount(),
                        metrics.getMaximumThreadCount(),
                        metrics.getTotalStartedThreadCount(),
                        metrics.getCurrentDaemonThreadCount(),
                        metrics.getSentMessagesCount(),
                        metrics.getSentBytesCount(),
                        metrics.getReceivedMessagesCount(),
                        metrics.getReceivedBytesCount(),
                        metrics.getOutboundMessagesQueueSize()
                    )
                );
            }
        }

        return rows.iterator();
    }"
61,5883695.txt,none,"    @Override
    public Set<String> getCounterNames() throws Exception {
        Set<String> names = new TreeSet<String>( CASE_INSENSITIVE_ORDER );
        Set<String> nameSet = cast( getDictionaryAsSet( getApplicationRef(), Schema.DICTIONARY_COUNTERS ) );
        names.addAll( nameSet );
        return names;
    }"
62,4786049.txt,none,"  @Override
  public void clear() {
    this.status = null;
    this.privileges = null;
  }"
63,5989938.txt,none,"    protected MethodSpec.Builder resumeMethodBuilder() {
        return MethodSpec.methodBuilder(RESUME_METHOD)
                         .addModifiers(Modifier.PRIVATE, Modifier.FINAL)
                         .addParameter(responseType(), LAST_SUCCESSFUL_PAGE_LITERAL)
                         .returns(className())
                         .addCode(CodeBlock.builder()
                                           .beginControlFlow(""if ($L.$L($L))"", NEXT_PAGE_FETCHER_MEMBER,
                                                             HAS_NEXT_PAGE_METHOD, LAST_SUCCESSFUL_PAGE_LITERAL)
                                           .addStatement(""return new $T($L, $L)"", className(), CLIENT_MEMBER,
                                                         constructRequestFromLastPage(LAST_SUCCESSFUL_PAGE_LITERAL))
                                           .endControlFlow()
                                           .build())
                         .addJavadoc(CodeBlock.builder()
                                              .add(""<p>A helper method to resume the pages in case of unexpected failures. ""
                                                   + ""The method takes the last successful response page as input and returns an ""
                                                   + ""instance of {@link $T} that can be used to retrieve the consecutive pages ""
                                                   + ""that follows the input page.</p>"", className())
                                              .build());
    }"
64,8845236.txt,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (authzToken == null) {
        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'authzToken' was not present! Struct: "" + toString());
      }
      if (gatewayId == null) {
        throw new org.apache.thrift.protocol.TProtocolException(""Required field 'gatewayId' was not present! Struct: "" + toString());
      }
      // check for sub-struct validity
      if (authzToken != null) {
        authzToken.validate();
      }
    }"
65,6287432.txt,none,"    @Override
    public DocumentDeleteQuery getQuery() {
        return query;
    }"
66,8090357.txt,none,"  public T caseNestedTypeTest(NestedTypeTest object)
  {
    return null;
  }"
67,5907756.txt,minor,"    static ClassLoader findClassLoader()
        throws ConfigurationError
    { 
        // Figure out which ClassLoader to use for loading the provider
        // class.  If there is a Context ClassLoader then use it.
        ClassLoader context = SecuritySupport.getContextClassLoader();
        ClassLoader system = SecuritySupport.getSystemClassLoader();

        ClassLoader chain = system;
        while (true) {
            if (context == chain) {
                // Assert: we are on JDK 1.1 or we have no Context ClassLoader
                // or any Context ClassLoader in chain of system classloader
                // (including extension ClassLoader) so extend to widest
                // ClassLoader (always look in system ClassLoader if Xalan
                // is in boot/extension/system classpath and in current
                // ClassLoader otherwise); normal classloaders delegate
                // back to system ClassLoader first so this widening doesn't
                // change the fact that context ClassLoader will be consulted
                ClassLoader current = ObjectFactory.class.getClassLoader();

                chain = system;
                while (true) {
                    if (current == chain) {
                        // Assert: Current ClassLoader in chain of
                        // boot/extension/system ClassLoaders
                        return system;
                    }
                    if (chain == null) {
                        break;
                    }
                    chain = SecuritySupport.getParentClassLoader(chain);
                }

                // Assert: Current ClassLoader not in chain of
                // boot/extension/system ClassLoaders
                return current;
            }

            if (chain == null) {
                // boot ClassLoader reached
                break;
            }

            // Check for any extension ClassLoaders in chain up to
            // boot ClassLoader
            chain = SecuritySupport.getParentClassLoader(chain);
        };

        // Assert: Context ClassLoader not in chain of
        // boot/extension/system ClassLoaders
        return context;
    } // findClassLoader():ClassLoader"
68,4843205.txt,none,"    public int from(MemberGroupLayout.ColumnSpans columnSpans) {
        if (this == LEFT)
            return columnSpans.getLeft();
        if (this == MIDDLE)
            return columnSpans.getMiddle();
        if (this == RIGHT)
            return columnSpans.getRight();
        throw new IllegalStateException();
    }"
69,7896708.txt,none,"    public static Rop opInvokeDirect(Prototype meth) {
        return new Rop(RegOps.INVOKE_DIRECT,
                       meth.getParameterFrameTypes(),
                       StdTypeList.THROWABLE);
    }"
70,6606189.txt,none,"    public String myCacheKey() {
        if (getChromosome() == null || getChromosome().getId() == null ||
                getStartIndex() == null || getEndIndex() == null || getId() == null) {
            throw new IllegalArgumentException(MessageHelper.getMessage(""error.hash""));
        }

        StringBuilder sb = new StringBuilder();
        sb = sb.append(getId())
                .append(HASH_DELIMITER)
                .append(getChromosome().getId())
                .append(HASH_DELIMITER)
                .append(getStartIndex())
                .append(HASH_DELIMITER)
                .append(getEndIndex());
        return sb.toString();
    }"
71,4210356.txt,none,"    @Override
    public String shortDisplay()
    {
        return (happy() ? ""["" : """") + name + ""(?)"" + (happy() ? ""]"" : """");
    }"
72,6964408.txt,none,"    @Override
    public void forEach(Consumer<? super E> action) {
      synchronized (mutex) {
        delegate().forEach(action);
      }
    }"
73,6536605.txt,none,"    public static String executeUrl(String httpMethod, String url, Properties httpHeaders, InputStream content,
            String contentType, int timeout) throws IOException {
        final ProxyParams proxyParams = prepareProxyParams();

        return executeUrl(httpMethod, url, httpHeaders, content, contentType, timeout, proxyParams.proxyHost,
                proxyParams.proxyPort, proxyParams.proxyUser, proxyParams.proxyPassword, proxyParams.nonProxyHosts);
    }"
74,8972057.txt,none,"  @Override
  public void deleteDocByQuery(String query) {
    if(docBuilder != null){
      docBuilder.writer.deleteByQuery(query);
    } 
  }"
75,6073975.txt,none,"        @Override
        public int length() {
            return 2;
        }"
76,5508642.txt,none,"    @Override
    public String toString() {
        return ""OffsetMovedEvent [consumerGroup="" + consumerGroup + "", messageQueue="" + messageQueue
            + "", offsetRequest="" + offsetRequest + "", offsetNew="" + offsetNew + ""]"";
    }"
77,9458075.txt,none,"  private void printCommaUnlessFirst() {
    if (!isFirst) {
      stream.print("","");
    }
    isFirst = false;
  }"
78,6823557.txt,none,"    public final void norm3_RelationalExpression__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getRelationalExpressionAccess().getGroup_1()); 
            }
            loop421:
            do {
                int alt421=2;
                int LA421_0 = input.LA(1);

                if ( (LA421_0==GreaterThanSign) ) {
                    int LA421_2 = input.LA(2);

                    if ( ((LA421_2>=Intersection && LA421_2<=Implements)||(LA421_2>=Promisify && LA421_2<=Abstract)||(LA421_2>=External && LA421_2<=Function)||(LA421_2>=Private && LA421_2<=Delete)||LA421_2==Public||LA421_2==Static||(LA421_2>=Target && LA421_2<=Await)||LA421_2==Class||(LA421_2>=False && LA421_2<=Super)||LA421_2==Union||LA421_2==This||(LA421_2>=From && LA421_2<=Void)||(LA421_2>=Get && LA421_2<=Set)||LA421_2==PlusSignPlusSign||LA421_2==HyphenMinusHyphenMinus||LA421_2==SolidusEqualsSign||LA421_2==As||LA421_2==Of||LA421_2==ExclamationMark||LA421_2==LeftParenthesis||LA421_2==PlusSign||LA421_2==HyphenMinus||LA421_2==Solidus||(LA421_2>=LessThanSign && LA421_2<=EqualsSign)||(LA421_2>=CommercialAt && LA421_2<=LeftSquareBracket)||LA421_2==LeftCurlyBracket||LA421_2==Tilde||LA421_2==RULE_DOUBLE||(LA421_2>=RULE_HEX_INT && LA421_2<=RULE_LEGACY_OCTAL_INT)||LA421_2==RULE_SCIENTIFIC_INT||LA421_2==RULE_IDENTIFIER||LA421_2==RULE_STRING||(LA421_2>=RULE_TEMPLATE_HEAD && LA421_2<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA421_2==RULE_INT) ) {
                        alt421=1;
                    }


                }
                else if ( (LA421_0==Instanceof||LA421_0==LessThanSignEqualsSign||LA421_0==In||LA421_0==LessThanSign) ) {
                    alt421=1;
                }


                switch (alt421) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_126);
            	    norm3_RelationalExpression__Group_1__0();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop421;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getRelationalExpressionAccess().getGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
79,6785745.txt,none,"    @Override
    public APIRequestGetAppInstalledGroups requestFields (List<String> fields, boolean value) {
      for (String field : fields) {
        this.requestField(field, value);
      }
      return this;
    }"
80,7375581.txt,none,"	private LogLevel coerceLogLevel(String level) {
		String trimmedLevel = level.trim();
		if (""false"".equalsIgnoreCase(trimmedLevel)) {
			return LogLevel.OFF;
		}
		return LogLevel.valueOf(trimmedLevel.toUpperCase(Locale.ENGLISH));
	}"
81,7627967.txt,none,"	@SuppressWarnings(""unchecked"")
	public static <T> T getParentOfClass(IModelElement child, Class<T> parentType) {
		if (child != null) {
			IModelElement parent = child.getElementParent();
			while (parent != null) {
				if (parentType.isAssignableFrom(parent.getClass())) {
					return (T) parent;
				}
				parent = parent.getElementParent();
			}
		}
		return null;
	}"
82,8999751.txt,critical,"                private boolean r_prelude() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
                    // (, line 34
                    // test, line 35
                    v_1 = cursor;
                    // repeat, line 35
                    replab0: while(true)
                    {
                        v_2 = cursor;
                        lab1: do {
                            // (, line 35
                            // [, line 36
                            bra = cursor;
                            // substring, line 36
                            among_var = find_among(a_0, 7);
                            if (among_var == 0)
                            {
                                break lab1;
                            }
                            // ], line 36
                            ket = cursor;
                            switch(among_var) {
                                case 0:
                                    break lab1;
                                case 1:
                                    // (, line 37
                                    // <-, line 37
                                    slice_from(""\u00E0"");
                                    break;
                                case 2:
                                    // (, line 38
                                    // <-, line 38
                                    slice_from(""\u00E8"");
                                    break;
                                case 3:
                                    // (, line 39
                                    // <-, line 39
                                    slice_from(""\u00EC"");
                                    break;
                                case 4:
                                    // (, line 40
                                    // <-, line 40
                                    slice_from(""\u00F2"");
                                    break;
                                case 5:
                                    // (, line 41
                                    // <-, line 41
                                    slice_from(""\u00F9"");
                                    break;
                                case 6:
                                    // (, line 42
                                    // <-, line 42
                                    slice_from(""qU"");
                                    break;
                                case 7:
                                    // (, line 43
                                    // next, line 43
                                    if (cursor >= limit)
                                    {
                                        break lab1;
                                    }
                                    cursor++;
                                    break;
                            }
                            continue replab0;
                        } while (false);
                        cursor = v_2;
                        break replab0;
                    }
                    cursor = v_1;
                    // repeat, line 46
                    replab2: while(true)
                    {
                        v_3 = cursor;
                        lab3: do {
                            // goto, line 46
                            golab4: while(true)
                            {
                                v_4 = cursor;
                                lab5: do {
                                    // (, line 46
                                    if (!(in_grouping(g_v, 97, 249)))
                                    {
                                        break lab5;
                                    }
                                    // [, line 47
                                    bra = cursor;
                                    // or, line 47
                                    lab6: do {
                                        v_5 = cursor;
                                        lab7: do {
                                            // (, line 47
                                            // literal, line 47
                                            if (!(eq_s(1, ""u"")))
                                            {
                                                break lab7;
                                            }
                                            // ], line 47
                                            ket = cursor;
                                            if (!(in_grouping(g_v, 97, 249)))
                                            {
                                                break lab7;
                                            }
                                            // <-, line 47
                                            slice_from(""U"");
                                            break lab6;
                                        } while (false);
                                        cursor = v_5;
                                        // (, line 48
                                        // literal, line 48
                                        if (!(eq_s(1, ""i"")))
                                        {
                                            break lab5;
                                        }
                                        // ], line 48
                                        ket = cursor;
                                        if (!(in_grouping(g_v, 97, 249)))
                                        {
                                            break lab5;
                                        }
                                        // <-, line 48
                                        slice_from(""I"");
                                    } while (false);
                                    cursor = v_4;
                                    break golab4;
                                } while (false);
                                cursor = v_4;
                                if (cursor >= limit)
                                {
                                    break lab3;
                                }
                                cursor++;
                            }
                            continue replab2;
                        } while (false);
                        cursor = v_3;
                        break replab2;
                    }
                    return true;
                }"
83,7920669.txt,none,"	public String getTextValue() {
		ExtendedPropertiesAdapter adapter = ExtendedPropertiesAdapter.adapt(object);
		if (adapter!=null) {
			return adapter.getFeatureDescriptor(feature).getTextValue();
		}
		return getValue().toString();
	}"
84,4246529.txt,none,"    protected String getTableStatus( Statement sStatement )
        throws SQLException
    {
        ResultSet statusResultSet = sStatement.executeQuery( ""show table status"" );
        StringBuilder statusString = new StringBuilder();
        int numColumns = statusResultSet.getMetaData().getColumnCount();
        while ( statusResultSet.next() )
        {
            statusString.append( ""\n"" );
            for ( int i = 1; i <= numColumns; i++ )
            {
                statusString.append( statusResultSet.getMetaData().getColumnLabel( i ) + "" [""
                    + statusResultSet.getString( i ) + ""]  |  "" );
            }
        }
        return statusString.toString();
    }"
85,6889571.txt,none,"	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case TypesPackage.TCONSTABLE_ELEMENT__CONST:
				setConst(CONST_EDEFAULT);
				return;
			case TypesPackage.TCONSTABLE_ELEMENT__COMPILE_TIME_VALUE:
				setCompileTimeValue(COMPILE_TIME_VALUE_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}"
86,9516656.txt,none,"  @Override
  public boolean equals(Object other) {
    if (other == null)
      return false;
    if (other.getClass().isAssignableFrom(this.getClass())) {
      return this.getProto().equals(this.getClass().cast(other).getProto());
    }
    return false;
  }"
87,7792356.txt,none,"	@Override
	protected final Iterator<IModel<T>> getItemModels(long offset, long count)
	{
		return new ModelIterator<T>(internalGetDataProvider(), offset, count);
	}"
88,7343807.txt,none,"    @Override
    protected void fillMenuBeforeShow(final IMenuManager manager) {
        manager.add(openAction);
        manager.add(downloadToAction);
        manager.add(addAttachmentAction);
        manager.add(deleteAttachmentAction);

        manager.add(new Separator());

        final DownloadAttachmentOpenType preferredOpenType = DownloadAttachmentOpenType.getPreferredOpenType();
        if (DownloadAttachmentOpenType.BROWSER == preferredOpenType) {
            manager.add(openLocallyAction);
        } else {
            manager.add(openInBrowserAction);
        }

        manager.add(copyUrlToClipboardAction);
    }"
89,7400506.txt,none,"    public int rewindUpTo(VirtualFrame frame, int length) {
        if (props.isForward()) {
            final int offset = Math.min(getIndex(frame), length);
            setIndex(frame, getIndex(frame) - offset);
            return offset;
        } else {
            assert length == 0;
            return 0;
        }
    }"
90,6396521.txt,none,"	private MCoreExpression createVisibleWhen() {
		if (visibleWhen == null) {
			return null;
		}
		MCoreExpression exp = UiFactoryImpl.eINSTANCE.createCoreExpression();
		exp.setCoreExpressionId(""programmatic."" + MenuHelper.getId(configElement)); //$NON-NLS-1$
		exp.setCoreExpression(visibleWhen);
		return exp;
	}"
91,8281103.txt,none,"        public String getUsername() {
            return username;
        }"
92,9060510.txt,none,"	public void test005() throws Exception {
		this.runConformTest(
			new String[] {
				""X.java"",
				""import java.lang.annotation.*;\n"" +
				""import java.util.List;\n"" +
				""import static java.lang.annotation.ElementType.*; \n"" +
				""@Target(TYPE_USE)\n"" +
				""@interface Critical {}\n"" +
				""@Target(TYPE_USE)\n"" +
				""@interface NonEmpty {}\n"" +
				""@Target(TYPE_USE)\n"" +
				""@interface Readonly {}\n"" +
				""class TemperatureException extends RuntimeException{}\n"" +
				""class X {\n"" +
				""	void monitorTemperature() throws @Critical TemperatureException {}\n"" +
				""}\n"",
		},
		"""");
		String expectedOutput =
				""    RuntimeInvisibleTypeAnnotations: \n"" + 
				""      #19 @Critical(\n"" + 
				""        target type = 0x17 THROWS\n"" + 
				""        throws index = 0\n"" + 
				""      )\n"";
		checkDisassembledClassFile(OUTPUT_DIR + File.separator + ""X.class"", ""X"", expectedOutput, ClassFileBytesDisassembler.SYSTEM);
	}"
93,8873169.txt,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, add_check_constraint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o1 = new NoSuchObjectException();
                struct.o1.read(iprot);
                struct.setO1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o2 = new MetaException();
                struct.o2.read(iprot);
                struct.setO2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
94,8907524.txt,none,"  @Override public boolean nextKeyValue() {
    if (values.hasNext()) {
      return true;
    }
    if (queryResultsIterator.hasNext()) {
      current = queryResultsIterator.next();
      values = current.getValue().getValue().iterator();
      return nextKeyValue();
    }
    return false;
  }"
95,8436618.txt,none,"    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        BeanValidatorEndpoint endpoint = new BeanValidatorEndpoint(uri, this);
        endpoint.setLabel(remaining);
        setProperties(endpoint, parameters);
        return endpoint;
    }"
96,7563653.txt,none,"		@Override
		@Nullable
		public Class<?> getBeanType() {
			return this.adviceBean.getBeanType();
		}"
97,8334605.txt,none,"	void m1(C7 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
98,7267070.txt,none,"        boolean hasClasses() {
            Enumeration<? extends FileObject> e = pkg.getData(false);
            while (e.hasMoreElements())
                if (e.nextElement().getExt().equalsIgnoreCase(""class"")) // NOI18N
                    return true;
            return false;
        }"
99,3975605.txt,none,"  private static JsonNode validateDefault(String fieldName, Schema schema,
                                          JsonNode defaultValue) {
    if (VALIDATE_DEFAULTS.get() && (defaultValue != null)
        && !isValidDefault(schema, defaultValue)) { // invalid default
      String message = ""Invalid default for field ""+fieldName
        +"": ""+defaultValue+"" not a ""+schema;
      throw new AvroTypeException(message);     // throw exception
    }
    return defaultValue;
  }"
100,5800930.txt,none,"  @Override
  public int getSize() {
    return size;
  }"
101,5903677.txt,none,"    public boolean equals(ExtendedType other)
    {
      try
      {
        return other.nodetype == this.nodetype &&
                other.localName.equals(this.localName) &&
                other.namespace.equals(this.namespace);
      }
      catch(NullPointerException e)
      {
        return false;
      }
    }"
102,9474427.txt,none,"    @Override
    public BODY<T> $onclick(String value) {
      addAttr(""onclick"", value);
      return this;
    }"
103,7436139.txt,none,"    private static void registerUnaryMath(Registration r, String name, UnaryOperation operation) {
        r.register1(name, Double.TYPE, new InvocationPlugin() {
            @Override
            public boolean apply(GraphBuilderContext b, ResolvedJavaMethod targetMethod, Receiver receiver, ValueNode value) {
                b.push(JavaKind.Double, b.append(UnaryMathIntrinsicNode.create(value, operation)));
                return true;
            }
        });
    }"
104,6328926.txt,none,"    public boolean hasPermission(String domain, GwtSessionPermissionAction action, GwtSessionPermissionScope targetScope) {
        return hasPermission(new GwtSessionPermission(domain, action, targetScope));
    }"
105,4512609.txt,none,"    public void addBundleListener(BundleListener l)
    {
        checkValidity();

        // CONCURRENCY NOTE: This is a check-then-act situation, but
        // internally the event dispatcher double checks whether or not
        // the bundle context is valid before adding the service listener
        // while holding the event queue lock, so it will either succeed
        // or fail.

        Object sm = System.getSecurityManager();

        if (sm != null)
        {
            if (l instanceof SynchronousBundleListener)
            {
                ((SecurityManager) sm).checkPermission(new AdminPermission(m_bundle,
                    AdminPermission.LISTENER));
            }
        }

        m_felix.addBundleListener(m_bundle, l);
    }"
106,8890241.txt,none,"  @Override
  public void clear() {
    this.type = null;
    this.typeQualifiers = null;
  }"
107,5939954.txt,critical,"    public JsonGenerator(LogIterator iter) {
	servers = new HashSet<Integer>();

	Pattern stateChangeP = Pattern.compile(""- (LOOKING|FOLLOWING|LEADING)"");
	Pattern newElectionP = Pattern.compile(""New election. My id =  (\\d+), Proposed zxid = (\\d+)"");
	Pattern receivedProposalP = Pattern.compile(""Notification: (\\d+) \\(n.leader\\), (\\d+) \\(n.zxid\\), (\\d+) \\(n.round\\), .+ \\(n.state\\), (\\d+) \\(n.sid\\), .+ \\(my state\\)"");
	Pattern exceptionP = Pattern.compile(""xception"");
	
	root = new JSONObject();
	Matcher m = null;
	JSONArray events = new JSONArray();
	root.put(""events"", events);
	
	long starttime = Long.MAX_VALUE;
	long endtime = 0;

	int leader = 0;
	long curEpoch = 0;
	boolean newEpoch = false;

	while (iter.hasNext()) {
	    LogEntry ent = iter.next();
	    
	    if (ent.getTimestamp() < starttime) {
		starttime = ent.getTimestamp();
	    }
	    if (ent.getTimestamp() > endtime) {
		endtime = ent.getTimestamp();
	    }
	    
	    if (ent.getType() == LogEntry.Type.TXN) {
		events.add(txnEntry((TransactionEntry)ent));
	    } else {
		Log4JEntry e = (Log4JEntry)ent;
		servers.add(e.getNode());
		
		if ((m = stateChangeP.matcher(e.getEntry())).find()) {
		    JSONObject stateChange = new JSONObject();
		    stateChange.put(""type"", ""stateChange"");
		    stateChange.put(""time"", e.getTimestamp());
		    stateChange.put(""server"", e.getNode());
		    stateChange.put(""state"", m.group(1));
		    events.add(stateChange);
		    
		    if (m.group(1).equals(""LEADING"")) {
			leader = e.getNode();
		    }
		} else if ((m = newElectionP.matcher(e.getEntry())).find()) {
		    Iterator<Integer> iterator = servers.iterator();
		    long zxid = Long.valueOf(m.group(2));
		    int count = (int)zxid;// & 0xFFFFFFFFL;
		    int epoch = (int)Long.rotateRight(zxid, 32);// >> 32;
		    
		    if (leader != 0 && epoch > curEpoch) {
			JSONObject stateChange = new JSONObject();
			stateChange.put(""type"", ""stateChange"");
			stateChange.put(""time"", e.getTimestamp());
			stateChange.put(""server"", leader);
			stateChange.put(""state"", ""INIT"");
			events.add(stateChange);
			leader = 0;
		    }
		    
		    while (iterator.hasNext()) {
			int dst = iterator.next();
			if (dst != e.getNode()) {
			    JSONObject msg = new JSONObject();
			    msg.put(""type"", ""postmessage"");
			    msg.put(""src"", e.getNode());
			    msg.put(""dst"", dst);
			    msg.put(""time"", e.getTimestamp());
			    msg.put(""zxid"", m.group(2));
			    msg.put(""count"", count);
			    msg.put(""epoch"", epoch);
			    
			    events.add(msg);
			}
		    }
		} else if ((m = receivedProposalP.matcher(e.getEntry())).find()) {
		    // Pattern.compile(""Notification: \\d+, (\\d+), (\\d+), \\d+, [^,]*, [^,]*, (\\d+)"");//, LOOKING, LOOKING, 2
		    int src = Integer.valueOf(m.group(4));
		    long zxid = Long.valueOf(m.group(2));
		    int dst = e.getNode();
		    long epoch2 = Long.valueOf(m.group(3));
		    
		    int count = (int)zxid;// & 0xFFFFFFFFL;
		    int epoch = (int)Long.rotateRight(zxid, 32);// >> 32;
		    
		    if (leader != 0 && epoch > curEpoch) {
			JSONObject stateChange = new JSONObject();
			stateChange.put(""type"", ""stateChange"");
			stateChange.put(""time"", e.getTimestamp());
			stateChange.put(""server"", leader);
			stateChange.put(""state"", ""INIT"");
			events.add(stateChange);
			leader = 0;
		    }
		    
		    if (src != dst) {
			JSONObject msg = new JSONObject();
			msg.put(""type"", ""delivermessage"");
			msg.put(""src"", src);
			msg.put(""dst"", dst);
			msg.put(""time"", e.getTimestamp());
			msg.put(""zxid"", zxid);
			msg.put(""epoch"", epoch);
			msg.put(""count"", count);
			msg.put(""epoch2"", epoch2);
			
			events.add(msg);
		    }
		} else if ((m = exceptionP.matcher(e.getEntry())).find()) {
		    JSONObject ex = new JSONObject();
		    ex.put(""type"", ""exception"");
		    ex.put(""server"", e.getNode());
		    ex.put(""time"", e.getTimestamp());
		    ex.put(""text"", e.getEntry());
		    events.add(ex);
		} 
	    }
	    JSONObject ex = new JSONObject();
	    ex.put(""type"", ""text"");
	    ex.put(""time"", ent.getTimestamp());
	    String txt = ent.toString();
	    ex.put(""text"", txt);
	    events.add(ex);
	}
	//	System.out.println(""pending messages: ""+pendingMessages.size());
	root.put(""starttime"", starttime);
	root.put(""endtime"", endtime);

	JSONArray serversarray = new JSONArray();
	root.put(""servers"", serversarray);
	
	Iterator<Integer> iterator = servers.iterator();
	while (iterator.hasNext()) {
	    serversarray.add(iterator.next());
	}
    }"
108,7377589.txt,none,"	@Override
	public Supplier<MultiValueMap<K, V>> supplier() {
		return () -> CollectionUtils.toMultiValueMap(new HashMap<>());
	}"
109,6917328.txt,none,"  public String readNullTerminatedString(int length) {
    if (length == 0) {
      return """";
    }
    int stringLength = length;
    int lastIndex = position + length - 1;
    if (lastIndex < limit && data[lastIndex] == 0) {
      stringLength--;
    }
    String result = Util.fromUtf8Bytes(data, position, stringLength);
    position += length;
    return result;
  }"
110,8904678.txt,none,"  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NS:
      return isSetNs();
    }
    throw new IllegalStateException();
  }"
111,7205348.txt,none,"        public GetRouteTableRequest build() {
            GetRouteTableRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
112,7038229.txt,none,"  public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy) {
    this.fieldNamingPolicy = fieldNamingStrategy;
    return this;
  }"
113,5895731.txt,none,"    public static <S, T> HashMapBuilder<S, T> hashMap( S key, T value ) {
        return new HashMapBuilder<S, T>().map( key, value );
    }"
114,6329948.txt,none,"    public void onKapuaEvent(ServiceEvent kapuaEvent) throws KapuaException {
        if (kapuaEvent == null) {
            //service bus error. Throw some exception?
        }

        LOG.info(""GroupService: received kapua event from {}, operation {}"", kapuaEvent.getService(), kapuaEvent.getOperation());
        if (""account"".equals(kapuaEvent.getService()) && ""delete"".equals(kapuaEvent.getOperation())) {
            deleteGroupByAccountId(kapuaEvent.getScopeId(), kapuaEvent.getEntityId());
        }
    }"
115,7196784.txt,none,"        @com.fasterxml.jackson.annotation.JsonValue
        public String getValue() {
            return value;
        }"
116,8151239.txt,none,"        private void write(NIOConnection c) {
            try {
                c.writeByQueue();
            } catch (Throwable e) {
                c.error(ErrorCode.ERR_WRITE_BY_QUEUE, e);
            }
        }"
117,9371099.txt,none,"    public Dimension getMinimumSize(int rows) {
        FontMetrics fm = getFontMetrics(getFont());
        initFontMetrics();
        return new Dimension(20 + fm.stringWidth(""0123456789abcde""),
                             getItemHeight() * rows + (2*MARGIN));
    }"
118,4756088.txt,none,"  private static Optional<Schema> removeUncomparableFieldsFromRecord(Schema record, Set<Schema> processed) {
    Preconditions.checkArgument(record.getType() == Schema.Type.RECORD);

    if (processed.contains(record)) {
      return Optional.absent();
    }
    processed.add(record);

    List<Field> fields = Lists.newArrayList();
    for (Field field : record.getFields()) {
      Optional<Schema> newFieldSchema = removeUncomparableFields(field.schema(), processed);
      if (newFieldSchema.isPresent()) {
        fields.add(new Field(field.name(), newFieldSchema.get(), field.doc(), field.defaultValue()));
      }
    }

    Schema newSchema = Schema.createRecord(record.getName(), record.getDoc(), record.getNamespace(), false);
    newSchema.setFields(fields);
    return Optional.of(newSchema);
  }"
119,5942839.txt,none,"    public byte[] element() throws NoSuchElementException, KeeperException, InterruptedException {
        Map<Long,String> orderedChildren;

        // element, take, and remove follow the same pattern.
        // We want to return the child node with the smallest sequence number.
        // Since other clients are remove()ing and take()ing nodes concurrently, 
        // the child with the smallest sequence number in orderedChildren might be gone by the time we check.
        // We don't call getChildren again until we have tried the rest of the nodes in sequence order.
        while(true){
            try{
                orderedChildren = orderedChildren(null);
            }catch(KeeperException.NoNodeException e){
                throw new NoSuchElementException();
            }
            if(orderedChildren.size() == 0 ) throw new NoSuchElementException();

            for(String headNode : orderedChildren.values()){
                if(headNode != null){
                    try{
                        return zookeeper.getData(dir+""/""+headNode, false, null);
                    }catch(KeeperException.NoNodeException e){
                        //Another client removed the node first, try next
                    }
                }
            }

        }
    }"
120,5760043.txt,none,"    private void declareFrameTypes(final int n, final Object[] o) {
        for (int i = 0; i < n; ++i) {
            if (o[i] instanceof Label) {
                declareLabel((Label) o[i]);
            }
        }
    }"
121,3724040.txt,none,"    public static String getCauseMessage(Throwable t) {
        if (null != t.getCause()) {
            return getCauseMessage(t.getCause());
        }
        return t.getMessage();
    }"
122,8706829.txt,none,"	public static final boolean gdk_event_get_scroll_direction(long /*int*/ event, int [] direction) {
		lock.lock();
		try {
			return _gdk_event_get_scroll_direction(event, direction);
		} finally {
			lock.unlock();
		}
	}"
123,8457702.txt,none,"    public static void changeFunctionEndToken(String... endToken) {
        for (SimpleTokenType type : KNOWN_TOKENS) {
            if (type.getType() == TokenType.functionEnd) {
                KNOWN_TOKENS.remove(type);
            }
        }

        // add after the start tokens
        int pos = 0;
        for (SimpleTokenType type : KNOWN_TOKENS) {
            if (type.getType() == TokenType.functionStart) {
                pos++;
            }
        }

        // add after function start of list as its a more common token to be used
        for (String token : endToken) {
            KNOWN_TOKENS.add(pos, new SimpleTokenType(TokenType.functionEnd, token));
        }
    }"
124,7581965.txt,minor,"	@Nullable
	public static PropertyEditor findEditorByConvention(@Nullable Class<?> targetType) {
		if (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) {
			return null;
		}
		ClassLoader cl = targetType.getClassLoader();
		if (cl == null) {
			try {
				cl = ClassLoader.getSystemClassLoader();
				if (cl == null) {
					return null;
				}
			}
			catch (Throwable ex) {
				// e.g. AccessControlException on Google App Engine
				if (logger.isDebugEnabled()) {
					logger.debug(""Could not access system ClassLoader: "" + ex);
				}
				return null;
			}
		}
		String editorName = targetType.getName() + ""Editor"";
		try {
			Class<?> editorClass = cl.loadClass(editorName);
			if (!PropertyEditor.class.isAssignableFrom(editorClass)) {
				if (logger.isInfoEnabled()) {
					logger.info(""Editor class ["" + editorName +
							""] does not implement [java.beans.PropertyEditor] interface"");
				}
				unknownEditorTypes.add(targetType);
				return null;
			}
			return (PropertyEditor) instantiateClass(editorClass);
		}
		catch (ClassNotFoundException ex) {
			if (logger.isTraceEnabled()) {
				logger.trace(""No property editor ["" + editorName + ""] found for type "" +
						targetType.getName() + "" according to 'Editor' suffix convention"");
			}
			unknownEditorTypes.add(targetType);
			return null;
		}
	}"
125,6757343.txt,none,"    @Override
    public APIRequestCreateSpacoDataSetCollection setParams(Map<String, Object> params) {
      setParamsInternal(params);
      return this;
    }"
126,3945199.txt,none,"  @Override
  public void endWindow()
  {
  }"
127,7518556.txt,none,"    public static boolean isDeprecated(TypeMirror baseType) {
        if (baseType instanceof DeclaredType) {
            return isDeprecated((TypeElement) ((DeclaredType) baseType).asElement());
        }
        return false;
    }"
128,4778425.txt,none,"  @Override
  public UpdateIndexAuthorizationProcessor getInstance(SolrQueryRequest req,
      SolrQueryResponse rsp, UpdateRequestProcessor next) {
    return new UpdateIndexAuthorizationProcessor(req, rsp, next);
  }"
129,6179494.txt,none,"  public SearchResultEntry(String filePath, List<OffsetData> data) {
    this.filePath = filePath;
    this.data = data;
  }"
130,4089742.txt,none,"    private static String extractErrorMessage(Throwable e) {
        Throwable cause = getRootCause(e);
        String fullyQualifiedExceptionClassName = cause.getClass().getName();
        String[] hierarchySplits = fullyQualifiedExceptionClassName.split(""\\."");
        //try returning the class without package qualification
        String exceptionClassName = hierarchySplits[hierarchySplits.length - 1];
        String localizedMessage = cause.getLocalizedMessage();
        if (localizedMessage == null) {
            localizedMessage = ""Internal error. Please check instance logs for further details."";
        }
        return localizedMessage + "" ["" + exceptionClassName + ""]"";
    }"
131,7923456.txt,critical,"	@Override
	public ListCompositeContentProvider getContentProvider(EObject object, EStructuralFeature feature, EList<EObject>list) {
		if (contentProvider==null) {
			contentProvider = new ListCompositeContentProvider(this, object, feature, list) {
				@Override
				public Object[] getElements(Object inputElement) {
					
					Object elements[] = super.getElements(inputElement);
					List<Property> props = null;
					ModelExtensionDescriptor med = null;
					ExtendedPropertiesAdapter<?> adapter = ExtendedPropertiesAdapter.adapt(activity);
					if (adapter!=null) {
						// look for it in the property adapter first
						med = adapter.getProperty(ModelExtensionDescriptor.class);
					}

					if (med==null) {
						// not found? get the Custom Task ID from the Task object
						String id = CustomElementFeatureContainer.findId(activity);
						if (id!=null) {
							// and look it up in the Target Runtime's list of
							// Custom Task Descriptors
					    	TargetRuntime rt = TargetRuntime.getRuntime(activity);
					    	med = rt.getCustomTask(id);
						}
					}
					if (med!=null) {
						if (JbpmIoParametersListComposite.this.isInput)
							props = med.getProperties(""ioSpecification/dataInputs/name""); //$NON-NLS-1$
						else
							props = med.getProperties(""ioSpecification/dataOutputs/name""); //$NON-NLS-1$
					}
					
					List<Object> filtered = new ArrayList<Object>();
					for (Object e : elements) {
						boolean skip = false;
						EStructuralFeature f = ((EObject)e).eClass().getEStructuralFeature(""name""); //$NON-NLS-1$
						if (f!=null) {
							Object elementName = (String) ((EObject)e).eGet(f);
							if (props!=null) {
								for (Property p : props) {
									Object propName = p.getFirstStringValue();
									if (elementName!=null && propName!=null && elementName.equals(propName)) {
										skip = true;
										break;
									}
								}
							}
							if (activity instanceof SendTask) {
								if (""Message"".equals(elementName)) {
									skip = true;
								}
							}
							else if (activity instanceof ReceiveTask) {
								if (""Message"".equals(elementName)) {
									skip = true;
								}
//								else if (""MessageId"".equals(elementName)) {
//									skip = true;
//								}
							}
							else if (activity instanceof ServiceTask) {
								if (""Parameter"".equals(elementName)) {
									skip = true;
								}
								else if (""Result"".equals(elementName)) {
									skip = true;
								}
								// TODO: these should be automatically added by the ""Service Task"" tab...
//								else if (""Interface"".equals(elementName)) {
//									skip = true;
//								}
//								else if (""Operation"".equals(elementName)) {
//									skip = true;
//								}
//								else if (""ParameterType"".equals(elementName)) {
//									skip = true;
//								}
							}
						}
						if (!skip)
							filtered.add(e);
					}
					return filtered.toArray();
				}
			};
		}
		return contentProvider;
	}"
132,4043104.txt,none,"    public int getMaxFramesForWindow() {
        int frameSize = getFrameSize();
        return getInt(MAX_FRAMES_FOR_WINDOW, (int) (((long) 4 * MB) / frameSize));
    }"
133,8904560.txt,none,"  @Override
  public SerDeStats getSerDeStats() {
    // No support for statistics. That seems to be a popular answer.
    return null;
  }"
134,3794102.txt,none,"  @Override
  public void seekTo(int windowIndex, long positionMs) {
    verifyApplicationThread();
    analyticsCollector.notifySeekStarted();
    player.seekTo(windowIndex, positionMs);
  }"
135,7356984.txt,major,"    private String formatQueryString(final String projectUri, final String[] args) {
        final StringBuffer result = new StringBuffer();

        if (projectUri != null) {
            if (isCompatibleMode) {
                result.append(""puri=""); //$NON-NLS-1$
                result.append(URLEncode.encode(projectUri.toString()));
            } else {
                final ArtifactID artifactID = new ArtifactID(projectUri);
                result.append(""pguid=""); //$NON-NLS-1$
                result.append(URLEncode.encode(artifactID.getToolSpecificID()));
            }
        } else if (!isCompatibleMode) {
            result.append(""pcguid=""); //$NON-NLS-1$
            result.append(URLEncode.encode(collectionId.toString()));
        }

        for (int i = 0; i < args.length - 1; i += 2) {
            final String name = args[i];
            final String value = args[i + 1];

            if (name != null) {
                if (result.length() > 0) {
                    result.append('&');
                }

                result.append(URLEncode.encode(name));
            }

            if (value != null) {
                if (name != null) {
                    result.append('=');
                } else if (result.length() > 0) {
                    result.append('&');
                }

                result.append(URLEncode.encode(value));
            }
        }

        return result.toString();
    }"
136,5393638.txt,none,"        @Override
        public Object instantiate(String className) throws ReflectionException, MBeanException {
            return null;
        }"
137,3918920.txt,major,"    public void removeDependentService(
        CachingServiceReference<?> serviceReference) {

        _dependentServices.remove(serviceReference);
    }"
138,6943892.txt,none,"    private void applyAttributes(@NonNull AttributeSet attrs) {
        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.HoverView);
        try {
            createCollapsedDockFromAttrs(a);
        } finally {
            a.recycle();
        }
    }"
139,7476486.txt,none,"	public Customer1935(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}"
140,8443434.txt,none,"    private Region messageToRegion(Message message) {
        Region region = message.getBody(Region.class);
        if (region == null) {
            Map headers = message.getHeaders();
            RegionBuilder builder = Builders.region();

            if (headers.containsKey(KeystoneConstants.DESCRIPTION)) {
                builder.description(message.getHeader(KeystoneConstants.DESCRIPTION, String.class));
            }

            region = builder.build();
        }

        return region;
    }"
141,6824306.txt,none,"    public final void norm1_LogicalORExpression__Group_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            norm1_LogicalORExpression__Group_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
142,6730087.txt,major,"  private boolean isValidXML10Name() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return false; /* matched wild */
          }
        case 4: break;
        case 2: 
          { return true; /* exact name */
          }
        case 5: break;
        case 3: 
          { return false; /* more than name */
          }
        case 6: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { {return false; /* hit end with no match */} }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }"
143,4195038.txt,none,"    public boolean matchesEndpoints(Set<InetAddressAndPort> endpoints, Set<InetAddressAndPort> transEndpoints)
    {
        // Use strict equality here, as worst thing that can happen is we generate one more stream
        return this.endpoints.equals(endpoints) && this.transEndpoints.equals(transEndpoints);
    }"
144,9127614.txt,none,"	@Override
	public boolean mkdirs( )
	{
		return file.mkdirs( );
	}"
145,6044730.txt,none,"	public double[] getAnglesDegrees() {
		double[] angles = new double[] { Math.toDegrees(ang[0]), Math.toDegrees(ang[1]) };
		return angles;
	}"
146,6579891.txt,none,"    public void setEditorAreaVisible(boolean showEditorArea) {
        editorVisible = showEditorArea;
    }"
147,8905843.txt,none,"  private static String applyTimestampFormat(String arg, String format, TimeZone timeZone) {
    return DruidExpressions.functionCall(""timestamp_format"",
        ImmutableList.of(arg, DruidExpressions.stringLiteral(format), DruidExpressions.stringLiteral(timeZone.getID()))
    );
  }"
148,4735672.txt,none,"    private static void validateArguments(final int p, final int sp) throws UDFArgumentException {
        if (p < 4 || p > sp) {
            throw new UDFArgumentException(""p must be between 4 and sp (inclusive)"");
        }
        if (sp > 32) {
            throw new UDFArgumentException(""sp values greater than 32 not supported"");
        }
    }"
149,8424288.txt,none,"    public DnsDigProducer(Endpoint endpoint) {
        super(endpoint);
    }"
150,4634262.txt,none,"  public String toString() {
    return String.valueOf(layoutVersion) + FIELD_SEPARATOR
         + String.valueOf(namespaceID) + FIELD_SEPARATOR
         + String.valueOf(cTime) + FIELD_SEPARATOR
         + String.valueOf(editsTime) + FIELD_SEPARATOR
         + String.valueOf(checkpointTime) + FIELD_SEPARATOR
         + imageDigest.toString() + FIELD_SEPARATOR
         + clusterID + FIELD_SEPARATOR
         + blockpoolID ;
  }"
151,4919453.txt,none,"    private JPanel createPortPanel() {
        portField = new JTextField(HttpMirrorControl.DEFAULT_PORT_S, 8);
        portField.setName(HttpMirrorControl.PORT);

        JLabel label = new JLabel(JMeterUtils.getResString(""port"")); // $NON-NLS-1$
        label.setLabelFor(portField);

        maxPoolSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE), 8);
        maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);

        JLabel mpsLabel = new JLabel(JMeterUtils.getResString(""httpmirror_max_pool_size"")); // $NON-NLS-1$
        mpsLabel.setLabelFor(maxPoolSizeField);

        maxQueueSizeField = new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE), 8);
        maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);

        JLabel mqsLabel = new JLabel(JMeterUtils.getResString(""httpmirror_max_queue_size"")); // $NON-NLS-1$
        mqsLabel.setLabelFor(maxQueueSizeField);

        HorizontalPanel panel = new HorizontalPanel();
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),
                JMeterUtils.getResString(""httpmirror_settings""))); // $NON-NLS-1$
        
        panel.add(label);
        panel.add(portField);

        panel.add(mpsLabel);
        panel.add(maxPoolSizeField);

        panel.add(mqsLabel);
        panel.add(maxQueueSizeField);
        
        panel.add(Box.createHorizontalStrut(10));

        return panel;
    }"
152,5226222.txt,none,"  @Override
  public BatchResponsePart executeChangeSet(final BatchHandler handler, final List<ODataRequest> requests)
      throws ODataException {
    List<ODataResponse> responses = new ArrayList<ODataResponse>();
    try {
      oDataJPAContext.getODataJPATransaction().begin();

      for (ODataRequest request : requests) {
        oDataJPAContext.setODataContext(getContext());
        ODataResponse response = handler.handleRequest(request);
        if (response.getStatus().getStatusCode() >= HttpStatusCodes.BAD_REQUEST.getStatusCode()) {
          // Rollback
          oDataJPAContext.getODataJPATransaction().rollback();
          List<ODataResponse> errorResponses = new ArrayList<ODataResponse>(1);
          errorResponses.add(response);
          return BatchResponsePart.responses(errorResponses).changeSet(false).build();
        }
        responses.add(response);
      }
      oDataJPAContext.getODataJPATransaction().commit();

      return BatchResponsePart.responses(responses).changeSet(true).build();
    } catch (Exception e) {
      throw new ODataException(""Error on processing request content:"" + e.getMessage(), e);
    } finally {
      close(true);
    }
  }"
153,6517482.txt,none,"		public Image getImage(Object obj) {
			return PlatformUI.getWorkbench().
					getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
		}"
154,6600350.txt,none,"    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mSpinner = (Spinner) view.findViewById(R.id.spinner);
        mResult = (TextView) view.findViewById(R.id.result);
        mSeekBar = (SeekBar) view.findViewById(R.id.seekBar);
        mRatingBar = (RatingBar) view.findViewById(R.id.ratingBar);
        mSwitchBtn = (Switch) view.findViewById(R.id.switchBtn);

        mSeekBar.setOnSeekBarChangeListener(this);
        mRatingBar.setOnRatingBarChangeListener(this);
        mSpinner.setOnItemSelectedListener(this);
        mSwitchBtn.setOnCheckedChangeListener(this);

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(getContext(), android.R.layout.simple_spinner_item, data);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);

        mSpinner.setAdapter(adapter);
        mSpinner.setSelection(2);


    }"
155,8971685.txt,none,"    @Override
    public Explanation explain(LeafReaderContext context, int doc) throws IOException {
      Scorer scorer = scorer(context);
      if (scorer != null) {
        int newDoc = scorer.iterator().advance(doc);
        if (newDoc == doc) {
          final float freq;
          if (scorer instanceof BM25FScorer) {
            freq = ((BM25FScorer) scorer).freq();
          } else {
            assert scorer instanceof TermScorer;
            freq = ((TermScorer) scorer).freq();
          }
          final MultiNormsLeafSimScorer docScorer =
              new MultiNormsLeafSimScorer(simWeight, context.reader(), fieldAndWeights.values(), true);
          Explanation freqExplanation = Explanation.match(freq, ""termFreq="" + freq);
          Explanation scoreExplanation = docScorer.explain(doc, freqExplanation);
          return Explanation.match(
              scoreExplanation.getValue(),
              ""weight("" + getQuery() + "" in "" + doc + "") [""
                  + similarity.getClass().getSimpleName() + ""], result of:"",
              scoreExplanation);
        }
      }
      return Explanation.noMatch(""no matching term"");
    }"
156,7108130.txt,major,"        private int encode0(byte[] src, int off, int end, byte[] dst) {
            char[] base64 = isURL ? toBase64URL : toBase64;
            int sp = off;
            int slen = (end - off) / 3 * 3;
            int sl = off + slen;
            if (linemax > 0 && slen  > linemax / 4 * 3)
                slen = linemax / 4 * 3;
            int dp = 0;
            while (sp < sl) {
                int sl0 = Math.min(sp + slen, sl);
                for (int sp0 = sp, dp0 = dp ; sp0 < sl0; ) {
                    int bits = (src[sp0++] & 0xff) << 16 |
                               (src[sp0++] & 0xff) <<  8 |
                               (src[sp0++] & 0xff);
                    dst[dp0++] = (byte)base64[(bits >>> 18) & 0x3f];
                    dst[dp0++] = (byte)base64[(bits >>> 12) & 0x3f];
                    dst[dp0++] = (byte)base64[(bits >>> 6)  & 0x3f];
                    dst[dp0++] = (byte)base64[bits & 0x3f];
                }
                int dlen = (sl0 - sp) / 3 * 4;
                dp += dlen;
                sp = sl0;
                if (dlen == linemax && sp < end) {
                    for (byte b : newline){
                        dst[dp++] = b;
                    }
                }
            }
            if (sp < end) {               // 1 or 2 leftover bytes
                int b0 = src[sp++] & 0xff;
                dst[dp++] = (byte)base64[b0 >> 2];
                if (sp == end) {
                    dst[dp++] = (byte)base64[(b0 << 4) & 0x3f];
                    if (doPadding) {
                        dst[dp++] = '=';
                        dst[dp++] = '=';
                    }
                } else {
                    int b1 = src[sp++] & 0xff;
                    dst[dp++] = (byte)base64[(b0 << 4) & 0x3f | (b1 >> 4)];
                    dst[dp++] = (byte)base64[(b1 << 2) & 0x3f];
                    if (doPadding) {
                        dst[dp++] = '=';
                    }
                }
            }
            return dp;
        }"
157,5102890.txt,none,"    protected Item parseItem(Element rssRoot, Element eItem) {
        Item item = super.parseItem(rssRoot,eItem);
        Element e = eItem.getChild(""description"", getRSSNamespace());
        if (e!=null) {
            item.setDescription(parseItemDescription(rssRoot,e));
        }
        Element ce = eItem.getChild(""encoded"", getContentNamespace());
        if (ce != null) {
            Content content = new Content();
            content.setType(Content.HTML);
            content.setValue(ce.getText());
            item.setContent(content);
        }
        return item;
    }"
158,8961619.txt,none,"  @Override
  public String serialize(EventMessage message) {
    String messageAsString = MessageSerializer.super.serialize(message);
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
      GZIPOutputStream gout = new GZIPOutputStream(baos);
      gout.write(messageAsString.getBytes(StandardCharsets.UTF_8));
      gout.close();
      byte[] compressed = baos.toByteArray();
      return new String(Base64.getEncoder().encode(compressed), StandardCharsets.UTF_8);
    } catch (IOException e) {
      LOG.error(""could not use gzip output stream"", e);
      LOG.debug(""message "" + messageAsString);
      throw new RuntimeException(""could not use the gzip output Stream"", e);
    }
  }"
159,5784280.txt,none,"    public InputInitializerCallback(InitializerWrapper initializer,
        EventHandler eventHandler, TezVertexID vertexID) {
      this.initializer = initializer;
      this.eventHandler = eventHandler;
      this.vertexID = vertexID;
    }"
160,5476959.txt,none,"    @Override
    public final String getType()
    {
        return ConfiguredObjectTypeRegistry.getType(_clazz);
    }"
161,4460754.txt,none,"      public org.apache.drill.exec.proto.BitControl.PlanFragment.Builder addFragmentBuilder() {
        return getFragmentFieldBuilder().addBuilder(
            org.apache.drill.exec.proto.BitControl.PlanFragment.getDefaultInstance());
      }"
162,6342054.txt,none,"  public void setBreakpoints(@NonNull final Breakpoint[] breakpoints) {
    if (breakpoints == null) {
      throw new IllegalArgumentException(""Property must not be null: breakpoints"");
    }
    this.breakpoints = breakpoints;
  }"
163,4758737.txt,none,"  private static Method getMethod(String className, String methodName, Class<?>... parameterTypes)
      throws ClassNotFoundException, NoSuchMethodException {
    Class<?> clazz = Class.forName(className);
    return clazz.getMethod(methodName, parameterTypes);
  }"
164,8328444.txt,none,"	void m54(C17 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
165,7234731.txt,none,"  public final int colorModeWideColorGamut() {
    return colorMode & COLOR_MODE_WIDE_COLOR_GAMUT_MASK;
  }"
166,6462487.txt,none,"    public static SignatureProcessor payloadSize ()
    {
        return new SignatureProcessor () {

            private long archiveSize;

            @Override
            public void init ( final long archiveSize )
            {
                this.archiveSize = archiveSize;
            }

            @Override
            public void feedHeader ( final ByteBuffer header )
            {
            }

            @Override
            public void feedPayloadData ( final ByteBuffer data )
            {
            }

            @Override
            public void finish ( final Header<RpmSignatureTag> signature )
            {
                signature.putSize ( this.archiveSize, RpmSignatureTag.PAYLOAD_SIZE, RpmSignatureTag.LONGARCHIVESIZE );
            }
        };
    }"
167,5799553.txt,none,"        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable
        {
            // args is null for no-arguments methods
            if (args == null)
            {
                String attributeName = method.getName();

                if (attributes.containsKey(attributeName)) { return attributes.get(attributeName); }
            }

            // TODO: Handling of equals() and hashCode() and toString(), plus other methods
            // inherited from Object

            throw new RuntimeException(String.format(""Annotation proxy for class %s does not handle method %s."",
                    annotationType.getName(), method));
        }"
168,5798489.txt,none,"    public Html5MarkupModel(boolean useApostropheForAttributes)
    {
        super(useApostropheForAttributes);
    }"
169,4384349.txt,none,"    public String getText()
    {
        // entry/searchresult/bookmark
        IEntry[] entries = getEntries();
        if ( entries != null )
        {
            return entries.length > 1 ? Messages.getString( ""CopyAction.CopyEntriesDNs"" ) : Messages.getString( ""CopyAction.CopyEntryDN"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        // searches
        ISearch[] searches = getSearches();
        if ( searches != null )
        {
            return searches.length > 1 ? Messages.getString( ""CopyAction.CopySearches"" ) : Messages.getString( ""CopyAction.CopySearch"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        // values
        IValue[] values = getValues();
        if ( values != null )
        {
            return values.length > 1 ? Messages.getString( ""CopyAction.CopyValues"" ) : Messages.getString( ""CopyAction.CopyValue"" ); //$NON-NLS-1$ //$NON-NLS-2$
        }

        return Messages.getString( ""CopyAction.Copy"" ); //$NON-NLS-1$
    }"
170,8145522.txt,none,"  public boolean needsTychoBuild() {
    return (this.needsMavenBuild() && this.runtimeProject.isEclipsePluginProject());
  }"
171,5503308.txt,major,"    public static byte[] getIP() {
        try {
            Enumeration allNetInterfaces = NetworkInterface.getNetworkInterfaces();
            InetAddress ip = null;
            byte[] internalIP = null;
            while (allNetInterfaces.hasMoreElements()) {
                NetworkInterface netInterface = (NetworkInterface) allNetInterfaces.nextElement();
                Enumeration addresses = netInterface.getInetAddresses();
                while (addresses.hasMoreElements()) {
                    ip = (InetAddress) addresses.nextElement();
                    if (ip != null && ip instanceof Inet4Address) {
                        byte[] ipByte = ip.getAddress();
                        if (ipByte.length == 4) {
                            if (ipCheck(ipByte)) {
                                if (!isInternalIP(ipByte)) {
                                    return ipByte;
                                } else if (internalIP == null) {
                                    internalIP = ipByte;
                                }
                            }
                        }
                    }
                }
            }
            if (internalIP != null) {
                return internalIP;
            } else {
                throw new RuntimeException(""Can not get local ip"");
            }
        } catch (Exception e) {
            throw new RuntimeException(""Can not get local ip"", e);
        }
    }"
172,8685299.txt,major,"    public static List<Map<String, Object>> getFacilityContactMechValueMaps(Delegator delegator, String facilityId, boolean showOld, String contactMechTypeId) {
        List<Map<String, Object>> facilityContactMechValueMaps = new LinkedList<Map<String,Object>>();

        List<GenericValue> allFacilityContactMechs = null;

        try {
            List<GenericValue> tempCol = EntityQuery.use(delegator).from(""FacilityContactMech"").where(""facilityId"", facilityId).queryList();
            if (contactMechTypeId != null) {
                List<GenericValue> tempColTemp = new LinkedList<GenericValue>();
                for (GenericValue partyContactMech: tempCol) {
                    GenericValue contactMech = delegator.getRelatedOne(""ContactMech"", partyContactMech, false);
                    if (contactMech != null && contactMechTypeId.equals(contactMech.getString(""contactMechTypeId""))) {
                        tempColTemp.add(partyContactMech);
                    }

                }
                tempCol = tempColTemp;
            }
            if (!showOld) tempCol = EntityUtil.filterByDate(tempCol, true);
            allFacilityContactMechs = tempCol;
        } catch (GenericEntityException e) {
            Debug.logWarning(e, module);
        }

        if (allFacilityContactMechs == null) return facilityContactMechValueMaps;

        for (GenericValue facilityContactMech: allFacilityContactMechs) {
            GenericValue contactMech = null;

            try {
                contactMech = facilityContactMech.getRelatedOne(""ContactMech"", false);
            } catch (GenericEntityException e) {
                Debug.logWarning(e, module);
            }
            if (contactMech != null) {
                Map<String, Object> facilityContactMechValueMap = new HashMap<String, Object>();

                facilityContactMechValueMaps.add(facilityContactMechValueMap);
                facilityContactMechValueMap.put(""contactMech"", contactMech);
                facilityContactMechValueMap.put(""facilityContactMech"", facilityContactMech);

                try {
                    facilityContactMechValueMap.put(""contactMechType"", contactMech.getRelatedOne(""ContactMechType"", true));
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }

                try {
                    List<GenericValue> facilityContactMechPurposes = facilityContactMech.getRelated(""FacilityContactMechPurpose"", null, null, false);

                    if (!showOld) facilityContactMechPurposes = EntityUtil.filterByDate(facilityContactMechPurposes, true);
                    facilityContactMechValueMap.put(""facilityContactMechPurposes"", facilityContactMechPurposes);
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }

                try {
                    if (""POSTAL_ADDRESS"".equals(contactMech.getString(""contactMechTypeId""))) {
                        facilityContactMechValueMap.put(""postalAddress"", contactMech.getRelatedOne(""PostalAddress"", false));
                    } else if (""TELECOM_NUMBER"".equals(contactMech.getString(""contactMechTypeId""))) {
                        facilityContactMechValueMap.put(""telecomNumber"", contactMech.getRelatedOne(""TelecomNumber"", false));
                    }
                } catch (GenericEntityException e) {
                    Debug.logWarning(e, module);
                }
            }
        }

        return facilityContactMechValueMaps;
    }"
173,6306509.txt,none,"    public String getDeviceDisplayName() {
        String displayName = """";
        if (this.properties == null) {
            return displayName;
        }
        String deviceDisplayNameOption = (String) this.properties.get(DEVICE_DISPLAY_NAME);

        // Use the device name from SystemService. This should be kura.device.name from
        // the properties file.
        if (""device-name"".equals(deviceDisplayNameOption)) {
            displayName = this.systemService.getDeviceName();
        }
        // Try to get the device hostname
        else if (""hostname"".equals(deviceDisplayNameOption)) {
            displayName = this.systemService.getHostname();
        }
        // Return the custom field defined by the user
        else if (""custom"".equals(deviceDisplayNameOption)
                && this.properties.get(DEVICE_CUSTOM_NAME) instanceof String) {
            displayName = (String) this.properties.get(DEVICE_CUSTOM_NAME);
        }
        // Return empty string to the server
        else if (""server"".equals(deviceDisplayNameOption)) {
            displayName = """";
        }

        return displayName;
    }"
174,6029853.txt,none,"	public CertificateMessage(X509Certificate[] certificateChain, InetSocketAddress peerAddress) {
		super(peerAddress);
		if (certificateChain == null) {
			throw new NullPointerException(""Certificate chain must not be null"");
		} else {
			setCertificateChain(certificateChain);
			calculateLength();
		}
	}"
175,6624087.txt,none,"  public static void main(String[] args) {

    Application.launch(args);
  }"
176,5596509.txt,none,"    @Override
    public void emitPackageContents(IPackageDefinition definition)
    {
        IASScope containedScope = definition.getContainedScope();
        ITypeDefinition type = findType(containedScope.getAllLocalDefinitions());
        if (type == null)
            return;

        write(""function($exports"");

        exportWriter.queueExports(type, false);

        write("") {"");
        indentPush();
        writeNewline();
        write(""\""use strict\""; "");
        writeNewline();

        ITypeNode tnode = findTypeNode(definition.getNode());
        if (tnode != null)
        {
            getWalker().walk(tnode); // IClassNode | IInterfaceNode
        }

        indentPop();
        writeNewline();
        write(""}""); // end returned function
    }"
177,5939683.txt,none,"    public void setPortStartup(final int portStartup) {
        this.portStartup = portStartup;
    }"
178,9079227.txt,none,"@Override
public void tagAsHavingErrors() {
	this.ignoreFurtherInvestigation = true;
}"
179,7113719.txt,none,"    public static StringBuffer formatInput(StringBuffer appendTo,
                                           Replaceable input,
                                           Transliterator.Position pos) {
        return formatInput(appendTo, (ReplaceableString) input, pos);
    }"
180,3791275.txt,none,"  @Override
  protected void onStopped() {
    updateCurrentPosition();
    audioSink.pause();
    super.onStopped();
  }"
181,7989222.txt,none,"    public final void mT__74() throws RecognitionException {
        try {
            int _type = T__74;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalBug462047Lang.g:72:7: ( 'null' )
            // InternalBug462047Lang.g:72:9: 'null'
            {
            match(""null""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
182,4617521.txt,none,"    public static double multiply(int op1, float op2) {
        if (instance.int_multiply) {
            return multiplySlow(op1, op2);
        } else {
            return ((double) op1) * ((double) op2);
        }
    }"
183,5328888.txt,minor,"    @Override
    public Collection<ValidationResult> validate(final ValidationContext validationContext,
                                                 final CredentialsStrategy primaryStrategy) {
        boolean thisIsSelectedStrategy = this == primaryStrategy;
        Boolean useStrategy = validationContext.getProperty(strategyProperty).asBoolean();
        if (!thisIsSelectedStrategy && useStrategy) {
            String failureFormat = ""property %1$s cannot be used with %2$s"";
            Collection<ValidationResult> validationFailureResults = new ArrayList<ValidationResult>();
            String message = String.format(failureFormat, strategyProperty.getDisplayName(),
                    primaryStrategy.getName());
            validationFailureResults.add(new ValidationResult.Builder()
                    .subject(strategyProperty.getDisplayName())
                    .valid(false)
                    .explanation(message).build());
            return  validationFailureResults;
        }
        return null;
    }"
184,7885799.txt,none,"  @Override
  public void close() throws SecurityException {
    inner.close();
  }"
185,4672583.txt,none,"  private int getMatchingLevelForNodes(Node n1, Node n2) {
    int count = 0;
    do {
      if (n1.equals(n2)) {
        return count;
      }
      ++count;
      n1 = n1.getParent();
      n2 = n2.getParent();
    } while (n1 != null);
    return this.maxLevel;
  }"
186,7783504.txt,none,"	public FilteredHeaderItem(HeaderItem wrapped, String filterName)
	{
		this.wrapped = wrapped;
		this.filterName = filterName;
	}"
187,6291892.txt,none,"        private boolean notifyContent(ByteBuffer buffer)
        {
            try
            {
                return listener.onContent(request, FCGI.StreamType.STD_OUT, buffer);
            }
            catch (Throwable x)
            {
                if (LOG.isDebugEnabled())
                    LOG.debug(""Exception while invoking listener "" + listener, x);
                return false;
            }
        }"
188,9515902.txt,none,"    InetSocketAddress getAddress() {
      return (InetSocketAddress)acceptChannel.socket().getLocalSocketAddress();
    }"
189,8430551.txt,none,"    public RouteDefinition from(String uri) {
        getRouteCollection().setCamelContext(getContext());
        RouteDefinition answer = getRouteCollection().from(uri);
        configureRoute(answer);
        return answer;
    }"
190,7156819.txt,none,"    @Override
    public boolean supportsSubqueriesInQuantifieds() throws SQLServerException {
        checkClosed();
        return true;
    }"
191,5972104.txt,minor,"    public static void copyDirectory(final File srcDir, final File destDir) throws IOException {
        if (srcDir == null) {
            throw new NullPointerException(""Source must not be null"");
        }
        if (destDir == null) {
            throw new NullPointerException(""Destination must not be null"");
        }
        if (!srcDir.exists()) {
            throw new FileNotFoundException(""Source '"" + srcDir + ""' does not exist"");
        }
        if (!srcDir.isDirectory()) {
            throw new IOException(""Source '"" + srcDir + ""' exists but is not a directory"");
        }
        if (srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())) {
            throw new IOException(""Source '"" + srcDir + ""' and destination '"" + destDir + ""' are the same"");
        }

        // Cater for destination being directory within the source directory (see IO-141)
        List<String> exclusionList = null;
        if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {
            final File[] srcFiles = srcDir.listFiles();
            if (srcFiles != null && srcFiles.length > 0) {
                exclusionList = new ArrayList<>(srcFiles.length);
                for (final File srcFile : srcFiles) {
                    final File copiedFile = new File(destDir, srcFile.getName());
                    exclusionList.add(copiedFile.getCanonicalPath());
                }
            }
        }
        doCopyDirectory(srcDir, destDir, exclusionList);
    }"
192,6515344.txt,none,"    @Override
    public boolean removeInstallableUnits(Collection<IInstallableUnit> installableUnits) {
        throw new UnsupportedOperationException();
    }"
193,4371699.txt,none,"    public void writeEntityRef(String ent) throws XMLStreamException {
        delegate.writeEntityRef(ent);
    }"
194,8219824.txt,none,"    public final void mKW_Import() throws RecognitionException {
        try {
            int _type = KW_Import;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            {
            match(""import""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
195,7341500.txt,none,"    @Override
    public char[] getRawScheme() {
        return (_scheme == null) ? null : HttpURL.DEFAULT_SCHEME;
    }"
196,9539712.txt,none,"  @Override
  protected void serviceInit(Configuration conf) throws Exception {
    this.conf = conf;

    // create scheduler executor service that services the cleaner tasks
    // use 2 threads to accommodate the on-demand tasks and reduce the chance of
    // back-to-back runs
    ThreadFactory tf =
        new ThreadFactoryBuilder().setNameFormat(""Shared cache cleaner"").build();
    scheduledExecutor = HadoopExecutors.newScheduledThreadPool(2, tf);
    super.serviceInit(conf);
  }"
197,7131047.txt,none,"    @Override
    public boolean equals(Object obj)
    {
      if (this == obj)
      {
        return true;
      }

      if (obj == null)
      {
        return false;
      }

      if (getClass() != obj.getClass())
      {
        return false;
      }

      final MethodIdentity other = (MethodIdentity) obj;
      return new EqualsBuilder().
          append(_methodQualifiedName, other._methodQualifiedName).
          append(_parameterTypeNames, other._parameterTypeNames).
          isEquals();
    }"
198,8636574.txt,none,"        private static List<Locale> getAvailableLocaleList() {
            TreeMap<String, Locale> localeMap = new TreeMap<>();
            String localesString = UtilProperties.getPropertyValue(""general"", ""locales.available"");
            if (UtilValidate.isNotEmpty(localesString)) {
                List<String> idList = StringUtil.split(localesString, "","");
                for (String id : idList) {
                    Locale curLocale = parseLocale(id);
                    localeMap.put(curLocale.getDisplayName(), curLocale);
                }
            } else {
                Locale[] locales = Locale.getAvailableLocales();
                for (int i = 0; i < locales.length && locales[i] != null; i++) {
                    String displayName = locales[i].getDisplayName();
                    if (!displayName.isEmpty()) {
                        localeMap.put(displayName, locales[i]);
                    }
                }
            }
            return Collections.unmodifiableList(new ArrayList<>(localeMap.values()));
        }"
199,4128743.txt,none,"    @Override public boolean equals(Object obj) {
      return obj == this
          || obj instanceof Measure
          && this.agg.equals(((Measure) obj).agg)
          && this.args.equals(((Measure) obj).args)
          && this.distinct == ((Measure) obj).distinct;
    }"
200,6442583.txt,major,"			public Builder mergeFrom(com.google.protobuf.CodedInputStream input, com.google.protobuf.ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
				com.google.protobuf.UnknownFieldSet.Builder unknownFields = com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());
				while (true) {
					int tag = 0;
					try {
						tag = input.readTag();
					} catch (Exception e) {
						// do nothing
					}
					switch (tag) {
						case 0 :
							this.setUnknownFields(unknownFields.build());
							onChanged();
							return this;
						default : {
							if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
								this.setUnknownFields(unknownFields.build());
								onChanged();
								return this;
							}
							break;
						}
						case 10 : {
							bitField0_ |= 0x00000001;
							message_ = input.readBytes();
							break;
						}
						case 16 : {
							int rawValue = input.readEnum();
							org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType value = org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType.valueOf(rawValue);
							if (value == null) {
								unknownFields.mergeVarintField(2, rawValue);
							} else {
								bitField0_ |= 0x00000002;
								messageType_ = value;
							}
							break;
						}
						case 24 : {
							bitField0_ |= 0x00000004;
							timestamp_ = input.readSInt64();
							break;
						}
						case 34 : {
							bitField0_ |= 0x00000008;
							appId_ = input.readBytes();
							break;
						}
						case 50 : {
							bitField0_ |= 0x00000010;
							sourceId_ = input.readBytes();
							break;
						}
						case 58 : {
							ensureDrainUrlsIsMutable();
							drainUrls_.add(input.readBytes());
							break;
						}
						case 66 : {
							bitField0_ |= 0x00000040;
							sourceName_ = input.readBytes();
							break;
						}
					}
				}
			}"
201,6782933.txt,none,"  private static InputStream inputStreamFromJar(URL resourceUrl)
      throws URISyntaxException, IOException {
    // Jar URLs look like this: jar:file:/path/to/file.jar!/entry/within/jar
    // So take apart the URL to open the jar /path/to/file.jar and read the entry
    // entry/within/jar from it.
    String resourceUrlString = resourceUrl.toString().substring(""jar:"".length());
    int bang = resourceUrlString.lastIndexOf('!');
    String entryName = resourceUrlString.substring(bang + 1);
    if (entryName.startsWith(""/"")) {
      entryName = entryName.substring(1);
    }
    URI jarUri = new URI(resourceUrlString.substring(0, bang));
    JarFile jar = new JarFile(new File(jarUri));
    JarEntry entry = jar.getJarEntry(entryName);
    InputStream in = jar.getInputStream(entry);
    // We have to be careful not to close the JarFile before the stream has been read, because
    // that would also close the stream. So we defer closing the JarFile until the stream is closed.
    return new FilterInputStream(in) {
      @Override
      public void close() throws IOException {
        super.close();
        jar.close();
      }
    };
  }"
202,5678475.txt,none,"    @Override
    public String execute(Job job) {
        String id = JobManagerImpl.buildId(job);
        Future<?> future = this.pool.submit(job);
        synchronized (taskMap) {
            taskMap.put(id, future);
            locations.put(id, job.buildResultLocation(id));
            return id;
        }
    }"
203,5403624.txt,minor,"    private static Class<?> stringToClass(String klass) throws FrontendException {
        if (""string"".equalsIgnoreCase(klass)) {
            return String.class;
        } else if (""int"".equalsIgnoreCase(klass)) {
            return Integer.TYPE;
        } else if (""double"".equalsIgnoreCase(klass)) {
            return Double.TYPE;
        } else if (""float"".equalsIgnoreCase(klass)){
            return Float.TYPE;
        } else if (""long"".equalsIgnoreCase(klass)) {
            return Long.TYPE;
        } else if (""double[]"".equalsIgnoreCase(klass)) {
          return DOUBLE_ARRAY_CLASS;
        } else if (""int[]"".equalsIgnoreCase(klass)) {
          return INT_ARRAY_CLASS;
        } else if (""long[]"".equalsIgnoreCase(klass)) {
          return LONG_ARRAY_CLASS;
        } else if (""float[]"".equalsIgnoreCase(klass)) {
          return FLOAT_ARRAY_CLASS;
        } else if (""string[]"".equalsIgnoreCase(klass)) {
          return STRING_ARRAY_CLASS;
        } else {
            throw new FrontendException(""unable to find matching class for "" + klass);
        }

    }"
204,5737047.txt,none,"    public SimpleFileNameFormat withTimeFormat(String timeFormat) {
        //check format
        try {
            new SimpleDateFormat(timeFormat);
        } catch (Exception e) {
            throw new IllegalArgumentException(""invalid timeFormat: "" + e.getMessage());
        }
        this.timeFormat = timeFormat;
        return this;
    }"
205,8690430.txt,none,"    public static String getUserPasswordDefault() {
        return userPasswordDefault;
    }"
206,3801914.txt,none,"    public static void main(String[] args) throws Exception {
        isLocal = false;
        conf = JStormHelper.getConfig(args);
        if (args.length != 0) {
            spoutSingle = false;
        }
        test();
    }"
207,4568919.txt,minor,"    public boolean readFont(FontFileReader in, String header, String name) throws IOException {
        initializeFont(in);
        /*
         * Check if TrueType collection, and that the name
         * exists in the collection
         */
        if (!checkTTC(header, name)) {
            if (name == null) {
                throw new IllegalArgumentException(
                    ""For TrueType collection you must specify which font ""
                    + ""to select (-ttcname)"");
            } else {
                throw new IOException(
                    ""Name does not exist in the TrueType collection: "" + name);
            }
        }

        readDirTabs();
        readFontHeader();
        getNumGlyphs();
        if (log.isDebugEnabled()) {
            log.debug(""Number of glyphs in font: "" + numberOfGlyphs);
        }
        readHorizontalHeader();
        readHorizontalMetrics();
        initAnsiWidths();
        readPostScript();
        readOS2();
        determineAscDesc();

        readName();
        boolean pcltFound = readPCLT();
        // Read cmap table and fill in ansiwidths
        boolean valid = readCMAP();
        if (!valid) {
            return false;
        }

        // Create cmaps for bfentries
        createCMaps();
        updateBBoxAndOffset();

        if (useKerning) {
            readKerning();
        }
        handleCharacterSpacing(in);

        guessVerticalMetricsFromGlyphBBox();
        return true;
    }"
208,4417149.txt,none,"    private void initWS()
    {
        // create new instance of the service implmentation
        EmployeeService impl = new EmployeeServiceImpl(db, conn);

        // construct/configure factory to create our specific service
        svrFactory = new JaxWsServerFactoryBean();
        //svrFactory.getInInterceptors().add(new LoggingInInterceptor());
        //svrFactory.getOutInterceptors().add(new LoggingOutInterceptor());
        // specify our implementation class
        svrFactory.setServiceClass(EmployeeService.class);
        // specify the address
        svrFactory.setAddress(serviceAddress);
        // set the instance to be used
        svrFactory.setServiceBean(impl);
    }"
209,3701394.txt,none,"    public final int getBeUint24(final int pos) {
        final int position = origin + pos;

        if (pos + 2 >= limit || pos < 0) throw new IllegalArgumentException(""limit excceed: ""
                                                                            + (pos < 0 ? pos : (pos + 2)));

        byte[] buf = buffer;
        return (0xff & buf[position + 2]) | ((0xff & buf[position + 1]) << 8) | ((0xff & buf[position]) << 16);
    }"
210,4927730.txt,none,"    public GraphVisualizer() {
        model = new CachingStatCalculator(""Graph"");
        graph = new Graph(model);
        init();
    }"
211,7728166.txt,minor,"    private void log(Operation op, OperationProcessingContext context, String msg, Level logLevel) {
        String hostId = context.host != null ? context.host.getId() : """";
        String path = op.getUri() != null ? op.getUri().getPath() : """";
        Filter filter = this.filters.get(context.currentFilterPosition);
        String filterName = filter != null ? filter.getClass().getSimpleName() : """";
        String logMsg = String.format(""(host: %s, op %d %s %s) filter %s: %s"",
                hostId, op.getId(), op.getAction(),  path, filterName, msg);
        Level level = logLevel != null ? logLevel : Level.INFO;
        Utils.log(getClass(), op.getUri().getPath(), level, logMsg);
    }"
212,7278060.txt,none,"  public JPAExpandItemWrapper(final ExpandItem item, final JPAEntityType jpaEntityType) {
    super();
    this.item = item;
    this.jpaEntityType = jpaEntityType;
  }"
213,6772849.txt,none,"    public ListenableFuture<APINodeList<Comment>> executeAsync(Map<String, Object> extraParams) throws APIException {
      return Futures.transform(
        executeAsyncInternal(extraParams),
        new Function<ResponseWrapper, APINodeList<Comment>>() {
           public APINodeList<Comment> apply(ResponseWrapper result) {
             try {
               return APIRequestGetComments.this.parseResponse(result.getBody(), result.getHeader());
             } catch (Exception e) {
               throw new RuntimeException(e);
             }
           }
         }
      );
    };"
214,4357598.txt,none,"    private  static  Object bootServiceModule
        (
         final boolean create, final Object serviceModule,
         final String factoryInterface, final Properties properties
         )
        throws StandardException
    {
        try {
            return AccessController.doPrivileged
                (
                 new PrivilegedExceptionAction<Object>()
                 {
                     public Object run()
                         throws StandardException
                     {
                         return Monitor.bootServiceModule( create, serviceModule, factoryInterface, properties );
                     }
                 }
                 );
        } catch (PrivilegedActionException pae)
        {
            throw StandardException.plainWrapException( pae );
        }
    }"
215,4266432.txt,none,"    public Integer getThreshold() {
        return threshold;
    }"
216,6479689.txt,none,"	protected MqttDeliveryToken restoreToken(MqttPublish message) {
		final String methodName = ""restoreToken"";
		MqttDeliveryToken token;
		synchronized(tokens) {
			String key = Integer.toString(message.getMessageId());
			if (this.tokens.containsKey(key)) {
				token = (MqttDeliveryToken)this.tokens.get(key);
				//@TRACE 302=existing key={0} message={1} token={2}
				log.fine(CLASS_NAME,methodName, ""302"",new Object[]{key, message,token});
			} else {
				token = new MqttDeliveryToken(logContext);
				token.internalTok.setKey(key);
				this.tokens.put(key, token);
				//@TRACE 303=creating new token key={0} message={1} token={2}
				log.fine(CLASS_NAME,methodName,""303"",new Object[]{key, message, token});
			}
		}
		return token;
	}"
217,5445152.txt,none,"    int getPartitionIndex() {
        return partitionIndex;
    }"
218,5310114.txt,critical,"    protected SQLBuffer toBulkOperation(ClassMapping mapping, Select sel,
        JDBCStore store, Object[] params, Map updateParams) {
        SQLBuffer sql = new SQLBuffer(this);
        if (updateParams == null) {
          if (requiresTargetForDelete) {
            sql.append(""DELETE "");
            SQLBuffer deleteTargets = getDeleteTargets(sel);
            sql.append(deleteTargets);
            sql.append("" FROM "");
          } else {
            sql.append(""DELETE FROM "");
          }
        }
        else
            sql.append(""UPDATE "");
        sel.addJoinClassConditions();

        // if there is only a single table in the select, then we can
        // just issue a single DELETE FROM TABLE WHERE <conditions>
        // statement; otherwise, since SQL doesn't allow deleting
        // from one of a multi-table select, we need to issue a subselect
        // like DELETE FROM TABLE WHERE EXISTS
        // (SELECT 1 FROM TABLE t0 WHERE t0.ID = TABLE.ID); also, some
        // databases do not allow aliases in delete statements, which
        // also causes us to use a subselect
        Collection<String> selectedTables = getSelectTableAliases(sel);
        if (selectedTables.size() == 1 && supportsSubselect
            && allowsAliasInBulkClause) {
            SQLBuffer from;
            if (sel.getFromSelect() != null)
                from = getFromSelect(sel, false);
            else
                from = getFrom(sel, false);

            sql.append(from);
            appendUpdates(sel, store, sql, params, updateParams,
                allowsAliasInBulkClause);

            SQLBuffer where = sel.getWhere();
            if (where != null && !where.isEmpty()) {
                sql.append("" WHERE "");
                sql.append(where);
            }
            return sql;
        }

        Table table = mapping.getTable();
        String tableName = getFullName(table, false);

        // only use a  subselect if the where is not empty; otherwise
        // an unqualified delete or update will work
        if (sel.getWhere() == null || sel.getWhere().isEmpty()) {
            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            return sql;
        }

        // we need to use a subselect if we are to bulk delete where
        // the select includes multiple tables; if the database
        // doesn't support it, then we need to signal this by returning null
        if (!supportsSubselect || !supportsCorrelatedSubselect)
            return null;

        Column[] pks = mapping.getPrimaryKeyColumns();
        sel.clearSelects();
        sel.setDistinct(true);

        // if we have only a single PK, we can use a non-correlated
        // subquery (using an IN statement), which is much faster than
        // a correlated subquery (since a correlated subquery needs
        // to be executed once for each row in the table)
        if (pks.length == 1) {
            sel.select(pks[0]);
            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            sql.append("" WHERE "").
                append(pks[0]).append("" IN ("").
                append(sel.toSelect(false, null)).append("")"");
        } else {
            sel.clearSelects();
            sel.setDistinct(false);

            // since the select is using a correlated subquery, we
            // only need to select a bogus virtual column
            sel.select(""1"", null);

            // add in the joins to the table
            Column[] cols = table.getPrimaryKey().getColumns();
            SQLBuffer buf = new SQLBuffer(this);
            buf.append(""("");
            for (int i = 0; i < cols.length; i++) {
                if (i > 0)
                    buf.append("" AND "");

                // add in ""t0.PK = MYTABLE.PK""
                buf.append(sel.getColumnAlias(cols[i])).append("" = "").
                    append(table).append(catalogSeparator).append(cols[i]);
            }
            buf.append("")"");
            sel.where(buf, null);

            sql.append(tableName);
            appendUpdates(sel, store, sql, params, updateParams, false);
            sql.append("" WHERE EXISTS ("").
                append(sel.toSelect(false, null)).append("")"");
        }
        return sql;
    }"
219,9022587.txt,none,"  void doAdd(int line, String[] vals, SolrInputDocument doc, AddUpdateCommand template) throws IOException {
    // the line number is passed for error reporting in MT mode as well as for optional rowId.
    // first, create the lucene document
    for (int i=0; i<vals.length; i++) {
      if (adders[i]==null) continue;  // skip this field
      String val = vals[i];
      adders[i].add(doc, line, i, val);
    }

    // add any literals
    for (String fname : literals.keySet()) {
      String val = literals.get(fname);
      doc.addField(fname, val);
    }
    if (rowId != null){
      doc.addField(rowId, line + rowIdOffset);
    }
    template.solrDoc = doc;
    processor.processAdd(template);
  }"
220,4561905.txt,none,"    public boolean isCompatible(RenderingContext targetContext, Image image) {
        return (image == null || image instanceof ImageRawJPEG)
                && targetContext instanceof PDFRenderingContext;
    }"
221,8437389.txt,none,"    public boolean matches(Exchange exchange) {
        if (predicate == null) {
            predicate = createPredicate(exchange);
        }
        return predicate.matches(exchange);
    }"
222,7222257.txt,none,"		@Override
		public void onSubscribe(Subscription s) {
			if (Operators.validate(this.s, s)) {
				this.s = s;

				actual.onSubscribe(this);

				s.request(Long.MAX_VALUE);
			}
		}"
223,6458156.txt,none,"    public InstantTypeAdapter ( final DateTimeFormatter formatter )
    {
        this.formatter = formatter.withLocale ( Locale.US );
    }"
224,7538101.txt,none,"    @Override
	public <T> List<T> search(Name base, String filter, int searchScope, ContextMapper<T> mapper) {
		return search(base, filter, searchScope, ALL_ATTRIBUTES, mapper);
	}"
225,6060474.txt,major,"    @Override
    public void main(List<JCCompilationUnit> trees) {
        // complete the javac AST with a completed ceylon model
        timer.startTask(""prepareForTypeChecking"");
        prepareForTypeChecking(trees);
        timer.endTask();
        List<JCCompilationUnit> javaTrees = List.nil();
        List<JCCompilationUnit> ceylonTrees = List.nil();
        // split them in two sets: java and ceylon
        for(JCCompilationUnit tree : trees){
            if(tree instanceof CeylonCompilationUnit)
                ceylonTrees = ceylonTrees.prepend(tree);
            else
                javaTrees = javaTrees.prepend(tree);
        }
        timer.startTask(""Enter on Java trees"");
        boolean needsModelReset = isBootstrap;
        // enter java trees first to set up their ClassSymbol objects for ceylon trees to use during type-checking
        if(!javaTrees.isEmpty()){
            setupImportedPackagesForJavaTrees(javaTrees);
            hasJavaAndCeylonSources = true;
            needsModelReset = true;
        }
        // this is false if we're in an APT round where we did not generate the trees
        if(!compiler.isAddModuleTrees()){
            setupImportedPackagesForJavaTrees(ceylonTrees);
        }
        if(isBootstrap || hasJavaAndCeylonSources){
            super.main(trees);
        }
        // now we can type-check the Ceylon code
        List<JCCompilationUnit> packageInfo = completeCeylonTrees(trees);
        trees = trees.prependList(packageInfo);
        ceylonTrees = ceylonTrees.prependList(packageInfo);
        
        if(compiler.isHadRunTwiceException()){
            needsModelReset = true;
        }
        if(needsModelReset){
            // bootstrapping the language module is a bit more complex
            resetAndRunEnterAgain(trees);
        }else{
            timer.startTask(""Enter on Ceylon trees"");
            // and complete their new trees
            try {
                sourceLanguage.push(Language.CEYLON);
                super.main(ceylonTrees);
            } finally {
                sourceLanguage.pop();
            }
            timer.endTask();
        }
    }"
226,7272610.txt,none,"        public String formatValue(long value, int format) {
            switch (format) {
                case FORMAT_TOOLTIP:
                case FORMAT_UNITS:
                    return PERCENT_FORMAT.format(value / factor);
                case FORMAT_DETAILS:
                case FORMAT_EXPORT:
                    return NUMBER_FORMAT.format(value * 100 / factor);
                default:
                    return null;
            }
        }"
227,6637469.txt,none,"    private static void validateVideo(ShareVideo video, Validator validator) {
        if (video == null) {
            throw new FacebookException(""Cannot share a null ShareVideo"");
        }

        Uri localUri = video.getLocalUrl();
        if (localUri == null) {
            throw new FacebookException(""ShareVideo does not have a LocalUrl specified"");
        }

        if (!Utility.isContentUri(localUri) && !Utility.isFileUri(localUri)) {
            throw new FacebookException(""ShareVideo must reference a video that is on the device"");
        }
    }"
228,6553535.txt,none,"    public ComboBoxPropertyDescriptor(Object id, String displayName,
            String[] labelsArray) {
        super(id, displayName);
        labels = labelsArray;
    }"
229,7320330.txt,none,"    public StringInputDialog(
        final Shell parentShell,
        final String label,
        final String initialValue,
        final String dialogTitle,
        final String purpose) {
        super(parentShell);
        this.label = label;
        text = initialValue;
        this.dialogTitle = dialogTitle;

        /*
         * Set the dialog settings key to be ""purpose"" This allows different
         * uses of the generic DlgInputString to have different settings
         */
        setOptionDialogSettingsKey(StringInputDialog.class.getName() + ""."" + purpose); //$NON-NLS-1$
    }"
230,8866735.txt,minor,"    private static void walker(List<List<String>> finalResult, final List<List<String>> input,
        List<String> listSoFar, final int level) throws SemanticException {
      // Base case.
      if (level == (input.size() - 1)) {
        assert (input.get(level) != null) : ""Unique skewed element list has null list in "" + level
            + ""th position."";
        for (String v : input.get(level)) {
          List<String> oneCompleteIndex = new ArrayList<String>(listSoFar);
          oneCompleteIndex.add(v);
          finalResult.add(oneCompleteIndex);
        }
        return;
      }

      // Recursive.
      for (String v : input.get(level)) {
        List<String> clonedListSoFar = new ArrayList<String>(listSoFar);
        clonedListSoFar.add(v);
        int nextLevel = level + 1;
        walker(finalResult, input, clonedListSoFar, nextLevel);
      }
    }"
231,8756041.txt,none,"  boolean isProcessTreeOverLimit(String containerId,
                                  long currentMemUsage,
                                  long curMemUsageOfAgedProcesses,
                                  long vmemLimit) {
    boolean isOverLimit = false;

    if (currentMemUsage > (2 * vmemLimit)) {
      LOG.warn(""Process tree for container: "" + containerId
          + "" running over twice "" + ""the configured limit. Limit="" + vmemLimit
          + "", current usage = "" + currentMemUsage);
      isOverLimit = true;
    } else if (curMemUsageOfAgedProcesses > vmemLimit) {
      LOG.warn(""Process tree for container: "" + containerId
          + "" has processes older than 1 ""
          + ""iteration running over the configured limit. Limit="" + vmemLimit
          + "", current usage = "" + curMemUsageOfAgedProcesses);
      isOverLimit = true;
    }

    return isOverLimit;
  }"
232,4887547.txt,none,"        public InputStream getStream() throws RepositoryException {
            // if the value has not yet been loaded -> retrieve it first in
            // order to make sure that either 'file' or 'buffer' is set.
            if (file == null && buffer == null) {
                try {
                    loadBinary();
                } catch (IOException e) {
                    throw new RepositoryException(e);
                }
            }

            // always return a 'fresh' stream
            if (file != null) {
                // this instance is backed by a 'real' file
                try {
                    return new FileInputStream(file);
                } catch (FileNotFoundException fnfe) {
                    throw new RepositoryException(""file backing binary value not found"",
                        fnfe);
                }
            } else {
                return new ByteArrayInputStream(buffer);
            }
        }"
233,9249980.txt,none,"    @Override
    public int hashCode() {
        return isPresent ? Double.hashCode(value) : 0;
    }"
234,9114817.txt,none,"		public void visitOdaMeasure( OdaMeasure obj )
		{
			DesignVisitorImpl.this.visitOdaMeasure( obj.handle( module ) );
		}"
235,5638052.txt,none,"	public static ConfigurationInfo getAdjustOpdebuglineInfo()
	{
	    return new AdvancedConfigurationInfo()
	    {
		    public boolean isHidden()
		    {
			    return true;
		    }
	    };
	}"
236,8604349.txt,none,"        private void advance() {
            while (nextIdx < locParts.length()) {
                GridDhtLocalPartition part = locParts.get(nextIdx);

                if (part != null && part.state().active()) {
                    nextPart = part;
                    return;
                }

                nextIdx++;
            }
        }"
237,4297095.txt,none,"    @Override
    public List<Permission> sessionPermissions(Session session)
        throws SecurityException
    {
        VUtil.assertNotNull(session, GlobalErrIds.USER_SESS_NULL, CLS_NM + "".sessionPermissions"");
        List<Permission> retPerms;
        FortRequest request = new FortRequest();
        request.setContextId(this.contextId);
        request.setSession(session);
        String szRequest = RestUtils.marshal(request);
        String szResponse = RestUtils.getInstance().post(szRequest, HttpIds.ADMIN_PERMS);
        FortResponse response = RestUtils.unmarshall(szResponse);
        if (response.getErrorCode() == 0)
        {
            retPerms = response.getEntities();
            Session outSession = response.getSession();
            session.copy(outSession);
        }
        else
        {
            throw new SecurityException(response.getErrorCode(), response.getErrorMessage());
        }
        return retPerms;
    }"
238,7221713.txt,none,"		@Override
		public void onComplete() {
			if (done) {
				return;
			}
			done = true;

			C b = buffer;

			if (b != null && !b.isEmpty()) {
				actual.onNext(b);
			}
			actual.onComplete();
		}"
239,4468174.txt,none,"    public Collector setIncomingMinorFragmentList(List<Integer> incomingMinorFragment)
    {
        this.incomingMinorFragment = incomingMinorFragment;
        return this;
    }"
240,4371297.txt,none,"        MtomValidationErrorHandler(ErrorHandler origErrorHandler, Node node) {
            this.origErrorHandler = origErrorHandler;
            this.node = node;
        }"
241,7231995.txt,none,"    @Implementation(minSdk = JELLY_BEAN_MR1)
    @SuppressWarnings(""robolectric.ShadowReturnTypeMismatch"")
    protected static boolean setLocationProviderEnabledForUser(
        ContentResolver cr, String provider, boolean enabled, int uid) {
      return updateEnabledProviders(cr, provider, enabled);
    }"
242,4500366.txt,major,"  @Override
  public void configure(Context context) {
    this.headerName = context.getString(CONFIG_MULTIPLEX_HEADER_NAME,
        DEFAULT_MULTIPLEX_HEADER);

    Map<String, Channel> channelNameMap = getChannelNameMap();

    defaultChannels = getChannelListFromNames(
        context.getString(CONFIG_DEFAULT_CHANNEL), channelNameMap);

    Map<String, String> mapConfig =
        context.getSubProperties(CONFIG_PREFIX_MAPPING);

    channelMapping = new HashMap<String, List<Channel>>();

    for (String headerValue : mapConfig.keySet()) {
      List<Channel> configuredChannels = getChannelListFromNames(
          mapConfig.get(headerValue),
          channelNameMap);

      //This should not go to default channel(s)
      //because this seems to be a bad way to configure.
      if (configuredChannels.size() == 0) {
        throw new FlumeException(""No channel configured for when ""
            + ""header value is: "" + headerValue);
      }

      if (channelMapping.put(headerValue, configuredChannels) != null) {
        throw new FlumeException(""Selector channel configured twice"");
      }
    }
    //If no mapping is configured, it is ok.
    //All events will go to the default channel(s).
    Map<String, String> optionalChannelsMapping =
        context.getSubProperties(CONFIG_PREFIX_OPTIONAL + ""."");

    optionalChannels = new HashMap<String, List<Channel>>();
    for (String hdr : optionalChannelsMapping.keySet()) {
      List<Channel> confChannels = getChannelListFromNames(
              optionalChannelsMapping.get(hdr), channelNameMap);
      if (confChannels.isEmpty()) {
        confChannels = EMPTY_LIST;
      }
      //Remove channels from optional channels, which are already
      //configured to be required channels.

      List<Channel> reqdChannels = channelMapping.get(hdr);
      //Check if there are required channels, else defaults to default channels
      if (reqdChannels == null || reqdChannels.isEmpty()) {
        reqdChannels = defaultChannels;
      }
      for (Channel c : reqdChannels) {
        if (confChannels.contains(c)) {
          confChannels.remove(c);
        }
      }

      if (optionalChannels.put(hdr, confChannels) != null) {
        throw new FlumeException(""Selector channel configured twice"");
      }
    }

  }"
243,7540579.txt,none,"    public static int run() {
        List<Integer> integers = Arrays.asList(1, 2, 3, 4);
        List<Integer> mapped = integers.stream().map(n -> n).collect(Collectors.toList());
        return mapped.size();
    }"
244,8703330.txt,major,"	public static void main(String[] args) {
		Random random = new Random();
		final int[][] data = new int[COUNT][];
		for (int i = 0; i < data.length; i++) {
			data[i] = new int[] {i, random.nextInt()};
		}

		Display display = new Display ();
		final Shell shell = new Shell (display);
		shell.setLayout (new RowLayout (SWT.VERTICAL));
		final Table table = new Table (shell, SWT.VIRTUAL | SWT.MULTI);
		table.setHeaderVisible(true);
		table.setLinesVisible(true);
		table.setItemCount(COUNT);
		TableColumn eventColumn = new TableColumn(table, SWT.NONE);
		eventColumn.setText(""Event"");
		eventColumn.setWidth(200);
		TableColumn dataColumn = new TableColumn(table, SWT.NONE);
		dataColumn.setText(""Data"");
		dataColumn.setWidth(200);
		table.addListener (SWT.SetData, event -> {
			TableItem item = (TableItem) event.item;
			int index = table.indexOf (item);
			int[] datum = data[index + 1];
			item.setText(new String[] {Integer.toString(datum[0]),
					Integer.toString(datum[1]) });
		});
		table.setLayoutData (new RowData (400, 300));
		Button button = new Button (shell, SWT.PUSH);
		button.setText (""Add Items"");
		button.addListener (SWT.Selection, event -> {
			table.setItemCount (COUNT);
			shell.layout ();
		});
		Button removeButton;
		removeButton = new Button(shell, SWT.PUSH);
		removeButton.setText(""Remove All"");
		final Label label = new Label(shell, SWT.NONE);
		label.setLayoutData(new RowData (400, 30));
		removeButton.addListener(SWT.Selection, e -> {
			long t1 = System.currentTimeMillis ();
			table.removeAll();
			long t2 = System.currentTimeMillis ();
			label.setText (""Items: "" + COUNT + "", Time to remove: "" + (t2 - t1) + "" (ms)"");
		});
		shell.pack ();
		shell.open ();
		while (!shell.isDisposed ()) {
			if (!display.readAndDispatch ()) display.sleep ();
		}
		display.dispose ();
	}"
245,7205731.txt,none,"        public Builder cfBackupHandle(String cfBackupHandle) {
            this.cfBackupHandle = cfBackupHandle;
            this.__explicitlySet__.add(""cfBackupHandle"");
            return this;
        }"
246,7389374.txt,none,"		@Bean
		public ClassPathFileSystemWatcher classPathFileSystemWatcher(
				FileSystemWatcherFactory fileSystemWatcherFactory,
				ClassPathRestartStrategy classPathRestartStrategy) {
			DefaultRestartInitializer restartInitializer = new DefaultRestartInitializer();
			URL[] urls = restartInitializer.getInitialUrls(Thread.currentThread());
			if (urls == null) {
				urls = new URL[0];
			}
			return new ClassPathFileSystemWatcher(fileSystemWatcherFactory,
					classPathRestartStrategy, urls);
		}"
247,9502340.txt,none,"  public void removeFileBeingWritten(final long inodeId) {
    synchronized(filesBeingWritten) {
      filesBeingWritten.remove(inodeId);
      if (filesBeingWritten.isEmpty()) {
        lastLeaseRenewal = 0;
      }
    }
  }"
248,6914478.txt,none,"    public PrepareSource(String tag, MediaSource mediaSource, boolean resetPosition,
        boolean resetState) {
      super(tag, ""PrepareSource"");
      this.mediaSource = mediaSource;
      this.resetPosition = resetPosition;
      this.resetState = resetState;
    }"
249,6613457.txt,minor,"  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    // define symbols
    mPointSymbol = new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.SQUARE, 0xFFFF0000, 20);
    mLineSymbol = new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID, 0xFFFF8800, 4);
    mFillSymbol = new SimpleFillSymbol(SimpleFillSymbol.Style.CROSS, 0x40FFA9A9, mLineSymbol);

    // inflate map view from layout
    mMapView = findViewById(R.id.mapView);
    // create a map with the Basemap Type topographic
    ArcGISMap map = new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS, 34.056295, -117.195800, 16);
    // set the map to be displayed in this view
    mMapView.setMap(map);

    mGraphicsOverlay = new GraphicsOverlay();
    mMapView.getGraphicsOverlays().add(mGraphicsOverlay);

    // create a new sketch editor and add it to the map view
    mSketchEditor = new SketchEditor();
    mMapView.setSketchEditor(mSketchEditor);

    // get buttons from layouts
    mPointButton = findViewById(R.id.pointButton);
    mMultiPointButton = findViewById(R.id.pointsButton);
    mPolylineButton = findViewById(R.id.polylineButton);
    mPolygonButton = findViewById(R.id.polygonButton);
    mFreehandLineButton = findViewById(R.id.freehandLineButton);
    mFreehandPolygonButton = findViewById(R.id.freehandPolygonButton);

    // add click listeners
    mPointButton.setOnClickListener(view -> createModePoint());
    mMultiPointButton.setOnClickListener(view -> createModeMultipoint());
    mPolylineButton.setOnClickListener(view -> createModePolyline());
    mPolygonButton.setOnClickListener(view -> createModePolygon());
    mFreehandLineButton.setOnClickListener(view -> createModeFreehandLine());
    mFreehandPolygonButton.setOnClickListener(view -> createModeFreehandPolygon());
  }"
250,5904455.txt,none,"  public boolean hasAttribute(String name)
  {

    error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  //""hasAttribute not supported!"");

    return false;
  }"
251,3699227.txt,none,"    public String getClassName() {
        return className;
    }"
252,7207869.txt,none,"        public Builder backendName(String backendName) {
            this.backendName = backendName;
            this.__explicitlySet__.add(""backendName"");
            return this;
        }"
253,9194605.txt,none,"		public ColumnDefn( ResultSetColumnHandle rsHandle, ColumnHintHandle colHintHandle )
		{
			this.rsColumnHandle = rsHandle;
			this.columnHintHandle = colHintHandle;
		}"
254,9532191.txt,none,"  protected String getContainerPrivateDir(String appIdStr,
      String containerIdStr) {
    return getAppPrivateDir(appIdStr) + Path.SEPARATOR + containerIdStr
        + Path.SEPARATOR;
  }"
255,3924473.txt,none,"    public hasNamespacePermission_args setTblNspcPerm(byte tblNspcPerm) {
      this.tblNspcPerm = tblNspcPerm;
      setTblNspcPermIsSet(true);
      return this;
    }"
256,4095182.txt,none,"        private void processSelectedKeys() {
            for (Iterator<SelectionKey> i = selector.selectedKeys().iterator(); i.hasNext();) {
                SelectionKey key = i.next();
                i.remove();
                final SelectableChannel sc = key.channel();
                // do not attempt to read/write until handle is set (e.g. after handshake is completed)
                if (key.isReadable() && key.attachment() != null) {
                    read(key);
                } else if (key.isWritable() && key.attachment() != null) {
                    write(key);
                } else if (key.isAcceptable()) {
                    assert sc == serverSocketChannel;
                    accept();
                } else if (key.isConnectable()) {
                    finishConnect(key);
                }
            }
        }"
257,6427852.txt,minor,"	public static Point computeWrapSize(GC gc, String text, int wHint) {
		BreakIterator wb = BreakIterator.getWordInstance();
		wb.setText(text);
		FontMetrics fm = gc.getFontMetrics();
		int lineHeight = fm.getHeight();

		int saved = 0;
		int last = 0;
		int height = lineHeight;
		int maxWidth = 0;
		for (int loc = wb.first(); loc != BreakIterator.DONE; loc = wb.next()) {
			String word = text.substring(saved, loc);
			Point extent = gc.textExtent(word);
			if (extent.x > wHint) {
				// overflow
				saved = last;
				height += extent.y;
				// switch to current word so maxWidth will accommodate very long single words
				word = text.substring(last, loc);
				extent = gc.textExtent(word);
			}
			maxWidth = Math.max(maxWidth, extent.x);
			last = loc;
		}
		/*
		 * Correct the height attribute in case it was calculated wrong due to wHint being less than maxWidth.
		 * The recursive call proved to be the only thing that worked in all cases. Some attempts can be made
		 * to estimate the height, but the algorithm needs to be run again to be sure.
		 */
		if (maxWidth > wHint)
			return computeWrapSize(gc, text, maxWidth);
		return new Point(maxWidth, height);
	}"
258,7422066.txt,none,"            @Override
            public boolean isOpen() {
                return true;
            }"
259,7097449.txt,none,"    public synchronized Enumeration<V> elements() {
        return this.<V>getEnumeration(VALUES);
    }"
260,8332859.txt,none,"    public void showSourceLine(ISourceLocation sourceLocation, boolean highlight) {
    	try {
    		showSourceLine(sourceLocation.getSourceFile().getAbsolutePath(), sourceLocation.getLine(), highlight);
    	} catch (NullPointerException npe) {
    		Ajde.getDefault().getIdeUIAdapter().displayStatusInformation("" no corresponding source line to seek to"");
    	}
    }"
261,5605416.txt,none,"    @Override
    public IMXMLEventSpecifierNode getEventSpecifierNode(String name)
    {
        return eventNodeMap != null ? eventNodeMap.get(name) : null;
    }"
262,6941861.txt,none,"    @Override
    public void bindInterceptor(
        Matcher<? super Class<?>> classMatcher,
        Matcher<? super Method> methodMatcher,
        org.aopalliance.intercept.MethodInterceptor... interceptors) {
      elements.add(
          new InterceptorBinding(getElementSource(), classMatcher, methodMatcher, interceptors));
    }"
263,4688226.txt,none,"  @Override
  public void writeByte(int v) throws IOException {
    ensureSize(ByteUtils.SIZE_OF_BYTE);
    UNSAFE.putByte(buf, BYTE_ARRAY_OFFSET + pos, (byte) v);
    pos += ByteUtils.SIZE_OF_BYTE;
  }"
264,7747898.txt,none,"    protected Integer getPortIncrement() {
        return entity.getAttribute(JBoss6Server.PORT_INCREMENT);
    }"
265,7589426.txt,none,"	public TypeMismatchException(@Nullable Object value, @Nullable Class<?> requiredType, @Nullable Throwable cause) {
		super(""Failed to convert value of type '"" + ClassUtils.getDescriptiveType(value) + ""'"" +
				(requiredType != null ? "" to required type '"" + ClassUtils.getQualifiedName(requiredType) + ""'"" : """"),
				cause);
		this.value = value;
		this.requiredType = requiredType;
	}"
266,5828765.txt,none,"    public Map<String, Object> getPropertyMapping(String property, String itemType) {
        Map<String, Map<String, Object>> mappings = knownMappings.get(itemType);
        Map<String, Object> result = getPropertyMapping(property, mappings);
        if (result == null) {
            mappings = getPropertiesMapping(itemType);
            knownMappings.put(itemType, mappings);
            result = getPropertyMapping(property, mappings);
        }
        return result;
    }"
267,8991538.txt,none,"  private void refill() throws IOException {
    offset += usableLength;
    int leftover = length - usableLength;
    System.arraycopy(buffer, usableLength, buffer, 0, leftover);
    int requested = buffer.length - leftover;
    int returned = read(input, buffer, leftover, requested);
    length = returned + leftover;
    if (returned < requested) /* reader has been emptied, process the rest */
      usableLength = length;
    else { /* still more data to be read, find a safe-stopping place */
      usableLength = findSafeEnd();
      if (usableLength < 0)
        usableLength = length; /*
                                * more than IOBUFFER of text without space,
                                * gonna possibly truncate tokens
                                */
    }

    breaker.setText(buffer, 0, Math.max(0, usableLength));
  }"
268,9009111.txt,none,"    @Override
    public Weight createWeight(IndexSearcher searcher, org.apache.lucene.search.ScoreMode scoreMode, float boost) throws IOException {
      SolrRequestInfo info = SolrRequestInfo.getRequestInfo();

      CoreContainer container = info.getReq().getCore().getCoreContainer();

      final SolrCore fromCore = container.getCore(fromIndex);

      if (fromCore == null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, ""Cross-core join: no such core "" + fromIndex);
      }
      RefCounted<SolrIndexSearcher> fromHolder = null;
      fromHolder = fromCore.getRegisteredSearcher();
      final Query joinQuery;
      try {
        joinQuery = JoinUtil.createJoinQuery(fromField, true,
            toField, fromQuery, fromHolder.get(), this.scoreMode);
      } finally {
        fromCore.close();
        fromHolder.decref();
      }
      return joinQuery.rewrite(searcher.getIndexReader()).createWeight(searcher, scoreMode, boost);
    }"
269,6287167.txt,none,"    @Deprecated
    public void setExecutor(Executor executor)
    {
        this.httpClient.setExecutor(executor);
    }"
270,6009473.txt,none,"    public Integer getCompressType() {
        if (compressType == null) {
            compressType = 0;
        }
        return compressType;
    }"
271,4184807.txt,none,"    @Override
    public Term fromJSONObject(Object parsed) throws MarshalException
    {
        return baseType.fromJSONObject(parsed);
    }"
272,6471435.txt,none,"        SDEInstaller(File inClassFile, byte[] sdeAttr, File outClassFile)
            throws IOException {
            if (!inClassFile.exists()) {
                throw new FileNotFoundException(""no such file: "" + inClassFile);
            }

            this.sdeAttr = sdeAttr;
            // get the bytes
            orig = readWhole(inClassFile);
            gen = new byte[orig.length + sdeAttr.length + 100];

            // do it
            addSDE();

            // write result
            FileOutputStream outStream = new FileOutputStream(outClassFile);
            outStream.write(gen, 0, genPos);
            outStream.close();
        }"
273,9045965.txt,minor,"public void testSuperTypeHierarchyWithMissingBinary() throws JavaModelException {
	IJavaProject project = getJavaProject(""TypeHierarchy"");
	IClasspathEntry[] originalClasspath = project.getRawClasspath();
	try {
		int length = originalClasspath.length;
		IClasspathEntry[] newClasspath = new IClasspathEntry[length+1];
		System.arraycopy(originalClasspath, 0, newClasspath, 0, length);
		newClasspath[length] = JavaCore.newLibraryEntry(new Path(""/TypeHierarchy/test49809.jar""), null, null);
		project.setRawClasspath(newClasspath, null);
		ICompilationUnit cu = getCompilationUnit(""/TypeHierarchy/src/q3/Z.java"");
		IType type = cu.getType(""Z"");
		ITypeHierarchy hierarchy = type.newSupertypeHierarchy(null);
		assertHierarchyEquals(
				""Focus: Z [in Z.java [in q3 [in src [in TypeHierarchy]]]]\n"" +
				""Super types:\n"" +
				""  Y49809 [in Y49809.class [in p49809 [in test49809.jar [in TypeHierarchy]]]]\n"" +
				""Sub types:\n"",
			hierarchy
		);
	} finally {
		project.setRawClasspath(originalClasspath, null);
	}
}"
274,5752009.txt,none,"  public void visit(SQLBuilderContext context, LogicalNode node, Stack<LogicalNode> stack) {
    stack.push(node);

    switch (node.getType()) {
    case SCAN:
      visitScan(context, (ScanNode) node, stack);
      break;

    case GROUP_BY:
      visitGroupBy(context, (GroupbyNode) node, stack);
      break;

    case SELECTION:
      visitFilter(context, (SelectionNode) node, stack);
      break;

    case PROJECTION:
      visitProjection(context, (ProjectionNode) node, stack);
      break;

    case TABLE_SUBQUERY:
      visitDerivedSubquery(context, (TableSubQueryNode) node, stack);
      break;

    default:
      throw new TajoRuntimeException(new UnsupportedException(""plan node '"" + node.getType().name() + ""'""));
    }

    stack.pop();
  }"
275,4875906.txt,none,"  public static void updateResourceConfigsFor(Map<String, String> newConfigs, String resourceName, String clusterName,
      HelixAdmin admin) {
    final HelixConfigScope scope = getResourceScopeFor(clusterName, resourceName);
    admin.setConfig(scope, newConfigs);
  }"
276,5959185.txt,none,"    public void open(final boolean remove) {
        if (remove) {
            rolePermissionsMap.clear();
            unchecked = null;
            excluded = null;
        }
        state = OPEN;
    }"
277,7451069.txt,none,"    @Override
    @Uninterruptible(reason = ""May be called from uninterruptible code."", mayBeInlined = true)
    public Pointer mapFile(PointerBase start, UnsignedWord nbytes, WordBase fileHandle, UnsignedWord offset, int access) {
        int flags = MAP_PRIVATE();
        if (start.isNonNull()) {
            flags |= MAP_FIXED();
        }
        int fd = (int) fileHandle.rawValue();
        Pointer result = mmap(start, nbytes, accessAsProt(access), flags, fd, offset.rawValue());
        return result.notEqual(MAP_FAILED()) ? result : WordFactory.nullPointer();
    }"
278,7026916.txt,none,"  public Transmission(String connectionId, SocketChannel socketChannel, SelectionKey key, Time time,
      NetworkMetrics metrics) {
    this.connectionId = connectionId;
    this.socketChannel = socketChannel;
    this.key = key;
    this.time = time;
    this.metrics = metrics;
  }"
279,4433943.txt,none,"    public static Set<String> getAllColos() {
        if (DeploymentUtil.isEmbeddedMode()) {
            return DeploymentUtil.getDefaultColos();
        }
        String[] colos = RuntimeProperties.get().getProperty(""all.colos"", DeploymentUtil.getDefaultColo()).split("","");
        for (int i = 0; i < colos.length; i++) {
            colos[i] = colos[i].trim();
        }
        return new HashSet<String>(Arrays.asList(colos));
    }"
280,6764592.txt,none,"  public static PageInsightsAsyncExportRun fetchById(String id, APIContext context) throws APIException {
    return
      new APIRequestGet(id, context)
      .requestAllFields()
      .execute();
  }"
281,3812099.txt,none,"   @Override
   public boolean equals(final Object other) {
      if (this == other) {
         return true;
      }
      if (!(other instanceof Xid)) {
         return false;
      }
      Xid xother = (Xid) other;
      if (xother.getFormatId() != formatId) {
         return false;
      }
      if (xother.getBranchQualifier().length != branchQualifier.length) {
         return false;
      }
      if (xother.getGlobalTransactionId().length != globalTransactionId.length) {
         return false;
      }
      for (int i = 0; i < branchQualifier.length; i++) {
         byte[] otherBQ = xother.getBranchQualifier();
         if (branchQualifier[i] != otherBQ[i]) {
            return false;
         }
      }
      for (int i = 0; i < globalTransactionId.length; i++) {
         byte[] otherGtx = xother.getGlobalTransactionId();
         if (globalTransactionId[i] != otherGtx[i]) {
            return false;
         }
      }
      return true;
   }"
282,8678273.txt,none,"    protected final void unregisterMBean() throws IgniteSpiException {
        // Unregister SPI MBean.
        if (spiMBean != null && ignite != null) {
            assert !U.IGNITE_MBEANS_DISABLED;

            MBeanServer jmx = ignite.configuration().getMBeanServer();

            assert jmx != null;

            try {
                jmx.unregisterMBean(spiMBean);

                if (log.isDebugEnabled())
                    log.debug(""Unregistered SPI MBean: "" + spiMBean);
            }
            catch (JMException e) {
                throw new IgniteSpiException(""Failed to unregister SPI MBean: "" + spiMBean, e);
            }
        }
    }"
283,6034374.txt,none,"		@Override
		protected IStatus run(IProgressMonitor monitor) {
			try {
				cloudServer.getBehaviour().connect(monitor);
				
				return Status.OK_STATUS;
				
			} catch (CoreException e) {
				e.printStackTrace();
				return e.getStatus();
			}
			
		}"
284,5991696.txt,none,"    public void info(Supplier<String> msg) {
        if (log.isInfoEnabled()) {
            log.info(msg.get());
        }
    }"
285,8031777.txt,none,"	public boolean isMinExclusive() {
		return minExclusive;
	}"
286,9037804.txt,none,"public void test0001() throws JavaModelException {
	this.workingCopies = new ICompilationUnit[2];
	this.workingCopies[0] = getWorkingCopy(
		""/Completion/src/test/Test.java"",
		""package test;""+
		""public class Test {\n"" +
		""  void foo() {\n"" +
 		""    MissingType<Object> m = null;\n"" +
 		""    m.b\n"" +
		""  }\n"" +
		""}\n"");

	this.workingCopies[1] = getWorkingCopy(
		""/Completion/src/missing/MissingType.java"",
		""package missing;""+
		""public class MissingType<T> {\n"" +
		""  public void bar() {};\n"" +
		""}\n"");

	CompletionTestsRequestor2 requestor = new CompletionTestsRequestor2(true, false, true, false, true);
	requestor.allowAllRequiredProposals();
	String str = this.workingCopies[0].getSource();
	String completeBehind = ""m.b"";
	int cursorLocation = str.lastIndexOf(completeBehind) + completeBehind.length();
	this.workingCopies[0].codeComplete(cursorLocation, requestor, this.wcOwner);

	int relevance1 = R_DEFAULT + R_RESOLVED + R_INTERESTING + R_CASE + R_NON_STATIC + R_NON_RESTRICTED + R_NO_PROBLEMS;
	int start1 = str.lastIndexOf(""m.b"") + ""m."".length();
	int end1 = start1 + ""b"".length();
	int start2 = str.lastIndexOf(""MissingType"");
	int end2 = start2 + ""MissingType"".length();
	assertResults(
			""bar[METHOD_REF]{bar(), Lmissing.MissingType<Ljava.lang.Object;>;, ()V, bar, null, [""+start1+"", ""+end1+""], "" + (relevance1) + ""}\n"" +
			""   MissingType[TYPE_REF]{missing.MissingType, missing, Lmissing.MissingType;, null, null, [""+start2+"", ""+end2+""], "" + (relevance1) + ""}"",
			requestor.getResults());
}"
287,4737119.txt,none,"        public boolean iterate(DoubleWritable xi) throws HiveException {
            if (xi == null) {// skip
                return true;
            }
            if (partial == null) {
                this.partial = new PartialResult();
            }
            partial.iterate(xi.get());
            return true;
        }"
288,5661062.txt,minor,"    TreeNodeChildren(final TreeNode parent, final Object metadata, final PropertyAccessor accessor) {
        this.parent   = parent;
        this.metadata = metadata;
        this.accessor = accessor;
        this.children = new TreeNode[accessor.count()];
        /*
         * Search for something that looks like the main property, to be associated with the parent node
         * instead than provided as a child. The intent is to have more compact and easy to read trees.
         * That property shall be a singleton for a simple value (not another metadata object).
         */
        if (parent.table.valuePolicy == ValueExistencePolicy.COMPACT) {
            TitleProperty an = accessor.implementation.getAnnotation(TitleProperty.class);
            if (an == null) {
                Class<?> implementation = parent.table.standard.getImplementation(accessor.type);
                if (implementation != null) {
                    an = implementation.getAnnotation(TitleProperty.class);
                }
            }
            if (an != null) {
                final int index = accessor.indexOf(an.name(), false);
                final Class<?> type = accessor.type(index, TypeValuePolicy.ELEMENT_TYPE);
                if (type != null && !parent.isMetadata(type) && type == accessor.type(index, TypeValuePolicy.PROPERTY_TYPE)) {
                    titleProperty = index;
                    return;
                }
            }
        }
        titleProperty = -1;
    }"
289,8931105.txt,none,"    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SCHEMA_VERSION:
        return getSchemaVersion();

      }
      throw new IllegalStateException();
    }"
290,7618843.txt,none,"	public static void main(String[] args) throws Exception {
		try(AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(Application.class)) {
			context.getBean(NettyContext.class).onClose().block();
		}
	}"
291,7979179.txt,none,"    public final void mT__15() throws RecognitionException {
        try {
            int _type = T__15;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalBug288734TestLanguage.g:15:7: ( '@desc' )
            // InternalBug288734TestLanguage.g:15:9: '@desc'
            {
            match(""@desc""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
292,8177486.txt,none,"    protected void looseMarshalByteArray(OpenWireFormat wireFormat, byte[] data, DataOutput dataOut)
        throws IOException {
        dataOut.writeBoolean(data != null);
        if (data != null) {
            dataOut.writeInt(data.length);
            dataOut.write(data);
        }
    }"
293,4821096.txt,none,"		@Override
		public void actionPerformed(ActionEvent e) {
			DefaultMutableTreeNode node = getSelectedNode();
			String newValue;
			if (example != null && example.length() > 0)
				newValue = example;
			else
				newValue = NEW_VALUE;

			@SuppressWarnings(""unused"")
			DefaultMutableTreeNode added = addPojo(node, newValue, 0);
			setStatus(""Added new value.  Edit value on right."", null);
		}"
294,9072630.txt,major,"	public boolean condition18_5_2_bullet_3_3_1(InferenceVariable alpha, TypeBinding targetType) {
		// T is a reference type, but is not a wildcard-parameterized type, and either 
		// i) B2 contains a bound of one of the forms  = S or S <: , where S is a wildcard-parameterized type, or ...
		if (targetType.isBaseType()) return false;
		if (InferenceContext18.parameterizedWithWildcard(targetType) != null) return false;
		ThreeSets ts = this.boundsPerVariable.get(alpha.prototype());
		if (ts == null)
			return false;
		if (ts.sameBounds != null) {
			Iterator<TypeBound> bounds = ts.sameBounds.iterator();
			while (bounds.hasNext()) {
				TypeBound bound = bounds.next();
				if (InferenceContext18.parameterizedWithWildcard(bound.right) != null)
					return true;
			}
		}
		if (ts.superBounds != null) {
			Iterator<TypeBound> bounds = ts.superBounds.iterator();
			while (bounds.hasNext()) {
				TypeBound bound = bounds.next();
				if (InferenceContext18.parameterizedWithWildcard(bound.right) != null)
					return true;
			}
		}
		// ii) B2 contains two bounds of the forms S1 <:  and S2 <: , where
		//     S1 and S2 have supertypes (4.10) that are two different parameterizations of the same generic class or interface.
		if (ts.superBounds != null) {
			ArrayList<TypeBound> superBounds = new ArrayList<>(ts.superBounds);
			int len = superBounds.size();
			for (int i=0; i<len; i++) {
				TypeBinding s1 = superBounds.get(i).right;
				for (int j=i+1; j<len; j++) {
					TypeBinding s2 = superBounds.get(j).right;
					TypeBinding[] supers = superTypesWithCommonGenericType(s1, s2);
					if (supers != null) {
						/* HashMap<K#8,V#9> and HashMap<K#8,ArrayList<T>> with an instantiation for V9 = ArrayList<T> already in the 
						   bound set should not be seen as two different parameterizations of the same generic class or interface.
						   See https://bugs.eclipse.org/bugs/show_bug.cgi?id=432626 for a test that triggers this condition.
						   See https://bugs.openjdk.java.net/browse/JDK-8056092: recommendation is to check for proper types.
						*/
						if (supers[0].isProperType(true) && supers[1].isProperType(true) && !TypeBinding.equalsEquals(supers[0], supers[1]))
							return true;
					}
				}
			}
		}
		return false;
	}"
295,4473720.txt,none,"	protected void prepare(final String prepareScript,
			final String prepareScriptDelimiter,
			final Map<String, Object> params) {
		if (prepareScript != null && prepareScript.length() > 0) {
			String[] statements = prepareScript.split(prepareScriptDelimiter);
			// throw out empty lines
			for (String sql : statements) {
				if (sql != null && sql.trim().length() > 0) {
					this.namedJdbcTemplate.update(sql, params);
				}
			}
		}
	}"
296,6329418.txt,none,"    public AdvertisingReportEventType getEventType() {
        return this.eventType;
    }"
297,7832597.txt,none,"  private static VersionTagHolder createVersionTagHolder() {
    VersionTagHolder versionHolder = new VersionTagHolder();
    versionHolder.setOperation(Operation.GET_FOR_REGISTER_INTEREST);
    return versionHolder;
  }"
298,6198340.txt,none,"    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (!(o instanceof Key)) {
        return false;
      }
      Key key = (Key) o;
      return annotationType.equals(key.annotationType) && type.equals(key.type);
    }"
299,7954103.txt,none,"	@Override
	/** {@inheritDoc} */
	public void setMyScope(final Scope scope) {
		super.setMyScope(scope);
		if (unnamedPart != null) {
			unnamedPart.setMyScope(scope);
		}
		if (namedPart != null) {
			namedPart.setMyScope(scope);
		}
	}"
300,9403827.txt,none,"    public static <T, R> R[] mapToArray(Collection<T> inputs, Function<? super T, ? extends R> mapper, IntFunction<R[]> arrayGenerator) {
        R[] result = arrayGenerator.apply(inputs.size());
        int idx = 0;
        for (T t : inputs) {
            result[idx++] = mapper.apply(t);
        }
        return result;
    }"
301,4188990.txt,none,"    public void setProcedureParams(String procedureParams) {
        this.procedureParams = procedureParams;
        if (procedureParams != null) {
            getCurrentPreference().put(PROCEDURE_PARAMS_PROPERTY, procedureParams);
        }
    }"
302,5212058.txt,none,"  @Override
  public void close() throws IOException {
    // This will flush any unsent documents.
    commit();
    // close the client
    if (client != null) {
      client.shutdown();
    }
  }"
303,8201469.txt,none,    public InternalXtendLexer() {;} 
304,8863382.txt,none,"    public void read(org.apache.thrift.protocol.TProtocol iprot, TCancelOperationResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }"
305,8909910.txt,none,"  @Override
  public void recordAllocBytes(long bytesUsed, long bytesAllocated) {
    incrCounter(LlapIOCounters.ALLOCATED_USED_BYTES, bytesUsed);
    incrCounter(LlapIOCounters.ALLOCATED_BYTES, bytesAllocated);
  }"
306,6306007.txt,none,"    public int getObjectId() {
        return objectId;
    }"
307,6977042.txt,none,"    @Override
    public boolean equals(@NullableDecl Object obj) {
      if (this == obj) {
        return true;
      }
      if (obj instanceof EquivalentToPredicate) {
        EquivalentToPredicate<?> that = (EquivalentToPredicate<?>) obj;
        return equivalence.equals(that.equivalence) && Objects.equal(target, that.target);
      }
      return false;
    }"
308,6493734.txt,none,"	public String addVariableOnClasspath(String name, String value, boolean overwriteIfExists) {
		log.info(""Adding variable on Classpath: "" + name + ""="" + value);
		activateLibrariesTab();
		getLibraryTree().getItem(""Classpath"").select();
		return addVariableShared(name, value, overwriteIfExists);
	}"
309,4705856.txt,none,"    protected void execute(final IOEventHandlerFactory ioEventHandlerFactory) throws IOException {
        Args.notNull(ioEventHandlerFactory, ""Handler factory"");
        if (ioReactorRef.compareAndSet(null, createIOReactor(
                ioEventHandlerFactory,
                ioReactorConfig,
                workerThreadFactory,
                ShutdownCommand.GRACEFUL_NORMAL_CALLBACK))) {
            if (status.compareAndSet(Status.READY, Status.RUNNING)) {
                ioReactorRef.get().start();
            }
        } else {
            throw new IllegalStateException(""I/O reactor has already been started"");
        }
    }"
310,5842829.txt,none,"    @Override
    public void write(String s) throws IOException {

        if (suspended) {
            return;
        }

        if (s == null) {
            s = ""null"";
        }
        write(s, 0, s.length());
    }"
311,7808358.txt,none,"  public static long compute8(long x) {
    x ^= x << 13;
    x ^= x >>> 7;
    x ^= (x << 17);
    return x;
  }"
312,9267571.txt,major,"    public void reset(XMLComponentManager componentManager) throws XMLConfigurationException {

        XMLSecurityPropertyManager spm = (XMLSecurityPropertyManager)componentManager.getProperty(XML_SECURITY_PROPERTY_MANAGER);
        if (spm == null) {
            spm = new XMLSecurityPropertyManager();
            setProperty(XML_SECURITY_PROPERTY_MANAGER, spm);
        }

        XMLSecurityManager sm = (XMLSecurityManager)componentManager.getProperty(SECURITY_MANAGER);
        if (sm == null)
            setProperty(SECURITY_MANAGER,new XMLSecurityManager(true));

        faccessExternalSchema = spm.getValue(XMLSecurityPropertyManager.Property.ACCESS_EXTERNAL_SCHEMA);

        fGrammarBucket.reset();

        fSubGroupHandler.reset();

        boolean parser_settings = true;
        // If the component manager is the loader config don't bother querying it since it doesn't
        // recognize the PARSER_SETTINGS feature. Prevents an XMLConfigurationException from being
        // thrown.
        if (componentManager != fLoaderConfig) {
            parser_settings = componentManager.getFeature(PARSER_SETTINGS, true);
        }

        if (!parser_settings || !fSettingsChanged){
            // need to reprocess JAXP schema sources
            fJAXPProcessed = false;
            // reinitialize grammar bucket
            initGrammarBucket();
            if (fDeclPool != null) {
                fDeclPool.reset();
            }
            return;
        }

        //pass the component manager to the factory..
        fNodeFactory.reset(componentManager);

        // get registered entity manager to be able to resolve JAXP schema-source property:
        // Note: in case XMLSchemaValidator has created the loader,
        // the entity manager property is null
        fEntityManager = (XMLEntityManager)componentManager.getProperty(ENTITY_MANAGER);

        // get the error reporter
        fErrorReporter = (XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);

        // Determine schema dv factory to use
        SchemaDVFactory dvFactory = null;
        dvFactory = fSchemaHandler.getDVFactory();
        if (dvFactory == null) {
            dvFactory = SchemaDVFactory.getInstance();
            fSchemaHandler.setDVFactory(dvFactory);
        }

        // get schema location properties
        try {
            fExternalSchemas = (String) componentManager.getProperty(SCHEMA_LOCATION);
            fExternalNoNSSchema = (String) componentManager.getProperty(SCHEMA_NONS_LOCATION);
        } catch (XMLConfigurationException e) {
            fExternalSchemas = null;
            fExternalNoNSSchema = null;
        }

        // get JAXP sources if available
        fJAXPSource = componentManager.getProperty(JAXP_SCHEMA_SOURCE, null);
        fJAXPProcessed = false;

        // clear grammars, and put the one for schema namespace there
        fGrammarPool = (XMLGrammarPool) componentManager.getProperty(XMLGRAMMAR_POOL, null);
        initGrammarBucket();

        boolean psvi = componentManager.getFeature(AUGMENT_PSVI, false);

        // Only use the decl pool when there is no chance that the schema
        // components will be exposed or cached.
        // TODO: when someone calls loadGrammar(XMLInputSource), the schema is
        // always exposed even without the use of a grammar pool.
        // Disabling the ""decl pool"" feature for now until we understand when
        // it can be safely used.
        if (!psvi && fGrammarPool == null && false) {
            if (fDeclPool != null) {
                fDeclPool.reset();
            }
            else {
                fDeclPool = new XSDeclarationPool();
            }
            fCMBuilder.setDeclPool(fDeclPool);
            fSchemaHandler.setDeclPool(fDeclPool);
            if (dvFactory instanceof SchemaDVFactoryImpl) {
                fDeclPool.setDVFactory((SchemaDVFactoryImpl)dvFactory);
                ((SchemaDVFactoryImpl)dvFactory).setDeclPool(fDeclPool);
            }
        } else {
            fCMBuilder.setDeclPool(null);
            fSchemaHandler.setDeclPool(null);
            if (dvFactory instanceof SchemaDVFactoryImpl) {
                ((SchemaDVFactoryImpl)dvFactory).setDeclPool(null);
            }
        }

        // get continue-after-fatal-error feature
        try {
            boolean fatalError = componentManager.getFeature(CONTINUE_AFTER_FATAL_ERROR, false);
            if (!fatalError) {
                fErrorReporter.setFeature(CONTINUE_AFTER_FATAL_ERROR, fatalError);
            }
        } catch (XMLConfigurationException e) {
        }
        // set full validation to false
        fIsCheckedFully = componentManager.getFeature(SCHEMA_FULL_CHECKING, false);

        // get generate-synthetic-annotations feature
        fSchemaHandler.setGenerateSyntheticAnnotations(componentManager.getFeature(GENERATE_SYNTHETIC_ANNOTATIONS, false));
        fSchemaHandler.reset(componentManager);
    }"
313,9393147.txt,none,"    @Override
    public void visitTryCatchBlock(Label start, Label end, Label handler,
            String type) {
        if (!inlining) {
            // try-catch blocks are saved here and replayed at the end
            // of the method (in visitMaxs)
            blocks.add(new CatchBlock(start, end, handler, type));
        } else {
            super.visitTryCatchBlock(start, end, handler, type);
        }
    }"
314,8049874.txt,none,"    public final void rule__MandatoryModel__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalUnorderedGroupsTestLanguage.g:1164:1: ( rule__MandatoryModel__Group__2__Impl rule__MandatoryModel__Group__3 )
            // InternalUnorderedGroupsTestLanguage.g:1165:2: rule__MandatoryModel__Group__2__Impl rule__MandatoryModel__Group__3
            {
            pushFollow(FollowSets000.FOLLOW_6);
            rule__MandatoryModel__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__MandatoryModel__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
315,5497852.txt,none,"    public BooleanLessEqual(final List expr) throws QmfException
    {
        super(2, expr);
    }"
316,7602224.txt,none,"	public void moveConfigDown(IBeansConfig config) {
		String configName = config.getElementName();
		if (configNames.contains(configName)) {
			ArrayList<String> newConfigNames = new ArrayList<String>(
					configNames);
			int index = newConfigNames.indexOf(configName);
			if (index < (configNames.size() - 1)) {
				newConfigNames.remove(configName);
				newConfigNames.add(index + 1, configName);
				configNames.clear();
				configNames.addAll(newConfigNames);
				notifyListeners();
			}
		}
	}"
317,8421755.txt,none,"    public DefaultServiceDefinition(String id, String name, String host, int port) {
        this(id, name, host, port, Collections.emptyMap(), DEFAULT_SERVICE_HEALTH);
    }"
318,8702258.txt,none,"public void remove (int [] indices) {
	checkWidget ();
	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
	if (indices.length == 0) return;
	int [] newIndices = new int [indices.length];
	System.arraycopy (indices, 0, newIndices, 0, indices.length);
	sort (newIndices);
	int start = newIndices [newIndices.length - 1], end = newIndices [0];
	if (!(0 <= start && start <= end && end < itemCount)) {
		error (SWT.ERROR_INVALID_RANGE);
	}
	int last = -1;
	for (int i=0; i<newIndices.length; i++) {
		int index = newIndices [i];
		if (index != last) {
			TableItem item = items [index];
			if (item != null) item.release (false);
			if (index != itemCount - 1) fixSelection (index, false);
			System.arraycopy (items, index + 1, items, index, --itemCount - index);
			items [itemCount] = null;
			last = index;
		}
	}
	updateRowCount();
	if (itemCount == 0) {
		setTableEmpty ();
	}
}"
319,7960668.txt,none,"	public TitanValue_Array(final TitanValue_Array<T> otherValue) {
		clazz = otherValue.clazz;
		array_size = otherValue.array_size;
		indexOffset = otherValue.indexOffset;
		array_elements = new Base_Type[array_size];

		for (int i = 0; i < array_size; ++i) {
			try {
				final T helper = clazz.newInstance();
				helper.operator_assign(otherValue.array_elements[i]);
				array_elements[i] = helper;
			} catch (InstantiationException e) {
				throw new TtcnError(MessageFormat.format(""Internal error: class `{0}'' could not be instantiated ({1})."", clazz, e));
			} catch (IllegalAccessException e) {
				throw new TtcnError(MessageFormat.format(""Internal error: class `{0}'' could not be instantiated ({1})."", clazz, e));
			}
		}
	}"
320,4541660.txt,none,"    @Override
    public void populate(Workbook workbook,String dateFormat) {
        Sheet savingsTransactionSheet = workbook.createSheet(TemplatePopulateImportConstants.SAVINGS_TRANSACTION_SHEET_NAME);
        setLayout(savingsTransactionSheet);
        officeSheetPopulator.populate(workbook,dateFormat);
        clientSheetPopulator.populate(workbook,dateFormat);
        extrasSheetPopulator.populate(workbook,dateFormat);
        populateSavingsTable(savingsTransactionSheet,dateFormat);
        setRules(savingsTransactionSheet,dateFormat);
        setDefaults(savingsTransactionSheet);
    }"
321,5591314.txt,none,"    @Test
    public void testHtml() throws Exception
    {
        HSSFWorkbook workbook;
        try {
            workbook = ExcelToHtmlUtils.loadXls( child );
        } catch ( Exception exc ) {
            // unable to parse file -- not ExcelToFoConverter fault
            return;
        }

        ExcelToHtmlConverter excelToHtmlConverter = new ExcelToHtmlConverter(
                XMLHelper.getDocumentBuilderFactory().newDocumentBuilder().newDocument() );
        excelToHtmlConverter.processWorkbook( workbook );

        StringWriter stringWriter = new StringWriter();

        Transformer transformer = TransformerFactory.newInstance()
                .newTransformer();
        transformer.setOutputProperty( OutputKeys.ENCODING, ""utf-8"" );
        transformer.setOutputProperty( OutputKeys.INDENT, ""no"" );
        transformer.setOutputProperty( OutputKeys.METHOD, ""html"" );
        transformer.transform(
                new DOMSource( excelToHtmlConverter.getDocument() ),
                new StreamResult( stringWriter ) );

        assertNotNull(stringWriter.toString());
    }"
322,7951909.txt,none,"	public boolean hasNext() {
		return currentRecord < logRecordIndexes.length - 1;
	}"
323,4301165.txt,none,"    public byte[] decryptData(byte[] dataEncrypted, int keyUsage) throws GSSException {
        byte[] ret;
        try {
            EncTypeHandler encHandler = EncryptionHandler.getEncHandler(encKey.getKeyType());
            ret = encHandler.decrypt(dataEncrypted, encKey.getKeyData(), keyUsage);
        } catch (KrbException e) {
            throw new GSSException(GSSException.FAILURE, -1, e.getMessage());
        }
        return ret;
    }"
324,7301073.txt,none,"    public NonFatalErrorHelper(final Workspace workspace) {
        Check.notNull(workspace, ""workspace""); //$NON-NLS-1$

        this.workspace = workspace;

        workspace.getClient().getEventEngine().addNonFatalErrorListener(listener);
    }"
325,7195523.txt,none,"        public CreateCertificateRequest build() {
            CreateCertificateRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
326,8132887.txt,none,"  public DatatypeRulesTestLanguageSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = DatatypeRulesTestLanguagePackage.eINSTANCE;
    }
  }"
327,5150385.txt,none,"    private static ScheduledExecutorService createTimeoutCheckScheduler()
    {
        ThreadFactory threadFactory = newDaemonThreadFactory( ""timeout-check-timer"" );
        return newScheduledThreadPool( 1, threadFactory );
    }"
328,8904609.txt,none,"  protected void adjustArraySize(int newSize) {
    if (keyStart == null || keyStart.length < newSize) {
      keyStart = new int[newSize];
      keyLength = new int[newSize];
      valueStart = new int[newSize];
      valueLength = new int[newSize];
      keyInited = new boolean[newSize];
      keyIsNull = new boolean[newSize];
      valueInited = new boolean[newSize];
      valueIsNull = new boolean[newSize];
      keyObjects = new LazyBinaryPrimitive<?, ?>[newSize];
      valueObjects = new LazyBinaryObject[newSize];
    }
  }"
329,7469146.txt,none,"	public NamedMongoScript(String name, String rawScript) {
		this(name, new ExecutableMongoScript(rawScript));
	}"
330,7980032.txt,none,"    public final void rule__Object__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug304681TestLanguage.g:876:1: ( rule__Object__Group__4__Impl rule__Object__Group__5 )
            // InternalBug304681TestLanguage.g:877:2: rule__Object__Group__4__Impl rule__Object__Group__5
            {
            pushFollow(FollowSets000.FOLLOW_9);
            rule__Object__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__Object__Group__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
331,3717549.txt,none,"    public int adjustAnnotationDirectory(int annotationDirectoryOffset) {
        return annotationDirectoryOffsets.get(annotationDirectoryOffset);
    }"
332,5793952.txt,none,"    private String getMetadataFullAffiliations(List<Author> authorList) {
        List<Affiliation> unique = new ArrayList<Affiliation>();
        StringBuilder metAffils = new StringBuilder();

        for (Author a : authorList) {
            for (Affiliation af : a.getAffiliations()) {
                if (!unique.contains(af)) {
                    unique.add(af);
                }
            }
        }
        metAffils.append(""["");
        for (Affiliation af : unique) {
            metAffils.append(af.toString());
            metAffils.append("","");
        }
        metAffils.append(metAffils.deleteCharAt(metAffils.length() - 1));
        metAffils.append(""]"");
        return metAffils.toString();
    }"
333,7870683.txt,major,"  private void processEmail(EmailData emailData) {
    if (logger.isTraceEnabled()) {
      logger.trace(""Entered MailManager:processEmail"");
    }

    if (mailHost == null || mailHost.length() == 0 || emailData == null
        || mailToAddresses.length == 0) {
      logger.error(""Required mail server configuration is not specfied."");
      if (logger.isDebugEnabled()) {
        logger.debug(""Exited MailManager:processEmail: Not sending email as conditions not met"");
      }
      return;
    }

    Session session = Session.getDefaultInstance(getMailHostConfiguration());
    MimeMessage mimeMessage = new MimeMessage(session);
    String subject = emailData.subject;
    String message = emailData.message;
    String mailToList = getMailToAddressesAsString();

    try {
      for (int i = 0; i < mailToAddresses.length; i++) {
        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(mailToAddresses[i]));
      }

      if (subject == null) {
        subject = ""Alert from GemFire Admin Agent"";
      }
      mimeMessage.setSubject(subject);

      if (message == null) {
        message = """";
      }
      mimeMessage.setText(message);

      Transport.send(mimeMessage);
      logger.info(""Email sent to {}. Subject: {}, Content: {}"",
          new Object[] {mailToList, subject, message});
    } catch (VirtualMachineError err) {
      SystemFailure.initiateFailure(err);
      // If this ever returns, rethrow the error. We're poisoned
      // now, so don't let this thread continue.
      throw err;
    } catch (Throwable ex) {
      // Whenever you catch Error or Throwable, you must also
      // catch VirtualMachineError (see above). However, there is
      // _still_ a possibility that you are dealing with a cascading
      // error condition, so you also need to check to see if the JVM
      // is still usable:
      SystemFailure.checkFailure();
      StringBuilder buf = new StringBuilder();
      buf.append(""An exception occurred while sending email."");
      buf.append(
          ""Unable to send email. Please check your mail settings and the log file."");
      buf.append(""\n\n"").append(
          String.format(""Exception message: %s"", ex.getMessage()));
      buf.append(""\n\n"").append(
          ""Following email was not delivered:"");
      buf.append(""\n\t"")
          .append(String.format(""Mail Host: %s"", mailHost));
      buf.append(""\n\t"").append(String.format(""From: %s"", mailFrom));
      buf.append(""\n\t"").append(String.format(""To: %s"", mailToList));
      buf.append(""\n\t"").append(String.format(""Subject: %s"", subject));
      buf.append(""\n\t"").append(String.format(""Content: %s"", message));

      logger.error(buf.toString(), ex);
    }
    if (logger.isTraceEnabled()) {
      logger.trace(""Exited MailManager:processEmail"");
    }
  }"
334,4217323.txt,none,"    public FacesWebContext(FacesContext context) {
        initialize(context);
    }"
335,4405841.txt,none,"    public boolean equals( Object that )
    {
        // Quick test
        if ( this == that )
        {
            return true;
        }

        if ( that instanceof AclAttributeWrapper )
        {
            AclAttributeWrapper thatInstance = (AclAttributeWrapper)that;

            return aclAttribute.getName().equalsIgnoreCase( thatInstance.aclAttribute.getName() ) && 
                   ( aclAttribute.isAttributeType() && thatInstance.aclAttribute.isAttributeType() ||
                     ( ( aclAttribute.isObjectClass() || aclAttribute.isObjectClassNotAllowed() ) && 
                         ( thatInstance.aclAttribute.isObjectClass() || thatInstance.aclAttribute.isObjectClassNotAllowed() ) ) );
        }
        else
        {
            return false;
        }
    }"
336,7502933.txt,none,"    private static void downloadFileFromURL(String urlString, File destination) throws Exception {
        URL website = new URL(urlString);
        ReadableByteChannel rbc;
        rbc = Channels.newChannel(website.openStream());
        FileOutputStream fos = new FileOutputStream(destination);
        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        fos.close();
        rbc.close();
    }"
337,6167933.txt,none,"  public static final JsPromiseError create(final Throwable e) {
    if (e == null) {
      return create();
    } else {
      return createFromThrowable(e);
    }
  }"
338,4734605.txt,minor,"  private void finishRestore(final Timer.Context context, Map<String, List<HoodieRollbackStat>> commitToStats,
      List<String> commitsToRollback, final String startRestoreTime, final String restoreToInstant) throws IOException {
    HoodieTable<T> table = HoodieTable.getHoodieTable(
        new HoodieTableMetaClient(jsc.hadoopConfiguration(), config.getBasePath(), true), config, jsc);
    Optional<Long> durationInMs = Optional.empty();
    Long numFilesDeleted = 0L;
    for (Map.Entry<String, List<HoodieRollbackStat>> commitToStat : commitToStats.entrySet()) {
      List<HoodieRollbackStat> stats = commitToStat.getValue();
      numFilesDeleted = stats.stream().mapToLong(stat -> stat.getSuccessDeleteFiles().size())
          .sum();
    }
    if (context != null) {
      durationInMs = Optional.of(metrics.getDurationInMs(context.stop()));
      metrics.updateRollbackMetrics(durationInMs.get(), numFilesDeleted);
    }
    HoodieRestoreMetadata restoreMetadata = AvroUtils
        .convertRestoreMetadata(startRestoreTime, durationInMs, commitsToRollback, commitToStats);
    table.getActiveTimeline().saveAsComplete(
        new HoodieInstant(true, HoodieTimeline.RESTORE_ACTION, startRestoreTime),
        AvroUtils.serializeRestoreMetadata(restoreMetadata));
    logger.info(""Commits "" + commitsToRollback + "" rollback is complete. Restored dataset to "" + restoreToInstant);

    if (!table.getActiveTimeline().getCleanerTimeline().empty()) {
      logger.info(""Cleaning up older restore meta files"");
      // Cleanup of older cleaner meta files
      // TODO - make the commit archival generic and archive rollback metadata
      FSUtils.deleteOlderRollbackMetaFiles(fs, table.getMetaClient().getMetaPath(),
          table.getActiveTimeline().getRestoreTimeline().getInstants());
    }
  }"
339,4300952.txt,none,"    @Override
    public KrbIdentity getIdentity(String principalName) throws KrbException {
        if (idCache.containsKey(principalName)) {
            return idCache.get(principalName);
        }

        KrbIdentity identity = underlying.getIdentity(principalName);
        if (identity != null) {
            idCache.put(principalName, identity);
        }

        return identity;
    }"
340,9390001.txt,none,"        public int hashCode() {
            // Sum up the hash codes of the components.
            int hash = 0;

            // For each type/value pair...
            for (int i = 0; i < tvs.size(); i++) {
                hash += tvs.elementAt(i).hashCode();
            }
            return hash;
        }"
341,5417605.txt,none,"	public ProjectModel getModel(String projectName) {
		ProjectModel projectModel = models.get(projectName);
		if (projectModel == null) {
			projectModel = new ProjectModel(projectName);
			models.put(projectName, projectModel);
		}
		
		return projectModel;
	}"
342,6290471.txt,none,"    public void setAsyncWriteTimeout(long ms)
    {
        assertLessThan(""AsyncWriteTimeout"",ms,""IdleTimeout"",idleTimeout);
        this.asyncWriteTimeout = ms;
    }"
343,4602360.txt,none,"  @Override
  public void writeRequest(DataOutput output) throws IOException {
    output.writeInt(partitionId);
    output.writeInt(vertexIdMutations.size());
    for (Entry<I, VertexMutations<I, V, E>> entry :
        vertexIdMutations.entrySet()) {
      entry.getKey().write(output);
      entry.getValue().write(output);
    }
  }"
344,9064356.txt,none,"	public static final char[] extract(char[] str, int start, int length) {
		if (start == 0 && length == str.length)
			return str;

		char[] copy = new char[length];
		System.arraycopy(str, start, copy, 0, length);
		return copy;
	}"
345,7515654.txt,none,"    @Test
    public void run0() throws Throwable {
        runTest(""test"", -1);
    }"
346,8082183.txt,none,"    public final void rule__XBasicForLoopExpression__Group__8__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug462047Lang.g:9593:1: ( ( ')' ) )
            // InternalBug462047Lang.g:9594:1: ( ')' )
            {
            // InternalBug462047Lang.g:9594:1: ( ')' )
            // InternalBug462047Lang.g:9595:2: ')'
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }
            match(input,56,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
347,4218453.txt,none,"    public Expression setUpper(Bound newUpper)
    {
        upper = newUpper == null ? null : new Bound(newUpper.value, newUpper.inclusive);
        return this;
    }"
348,8985872.txt,none,"  @Override
  public void append(PointValue pointValue) throws IOException {
    assert closed == false : ""Point writer is already closed"";
    BytesRef packedValue = pointValue.packedValue();
    assert packedValue.length == packedBytesLength  : ""[packedValue] must have length ["" + packedBytesLength + ""] but was ["" + packedValue.length + ""]"";
    out.writeBytes(packedValue.bytes, packedValue.offset, packedValue.length);
    BytesRef docIDBytes = pointValue.docIDBytes();
    assert docIDBytes.length == Integer.BYTES  : ""[docIDBytes] must have length ["" + Integer.BYTES + ""] but was ["" + docIDBytes.length + ""]"";
    out.writeBytes(docIDBytes.bytes, docIDBytes.offset, docIDBytes.length);
    count++;
    assert expectedCount == 0 || count <= expectedCount : ""expectedCount="" + expectedCount + "" vs count="" + count;
  }"
349,7496171.txt,none,"    public synchronized int countDependencies() {
        return size;
    }"
350,7294676.txt,none,"		@Override
		public String getText(Object element) {
			if (element instanceof GrailsProjectStructureTypes) {
				return ((GrailsProjectStructureTypes) element).getDisplayName();
			} else if (element instanceof String) {
				return (String)element;
			}
			return """"+element;
		}"
351,5912103.txt,none,"        public org.apache.xmlbeans.samples.validation.todolist.ItemType insertNewItem(int i)
        {
            synchronized (monitor())
            {
                check_orphaned();
                org.apache.xmlbeans.samples.validation.todolist.ItemType target = null;
                target = (org.apache.xmlbeans.samples.validation.todolist.ItemType)get_store().insert_element_user(ITEM$0, i);
                return target;
            }
        }"
352,9126156.txt,none,"	public synchronized static ColorPalette getInstance( )
	{
		if ( instance == null )
		{
			instance = new ColorPalette( );
		}
		return instance;
	}"
353,4388389.txt,none,"    public void addAuxiliaryObjectClasses( AuxiliaryObjectClass... auxiliaryObjectClasses )
    {
        for ( AuxiliaryObjectClass auxiliaryObjectClass : auxiliaryObjectClasses )
        {
            this.auxiliaryObjectClasses.add( auxiliaryObjectClass );
        }
    }"
354,9440897.txt,none,"    @Override
    public void accept( final Visitor v ) {
        v.visitStackConsumer(this);
        v.visitExceptionThrower(this);
        v.visitTypedInstruction(this);
        v.visitArrayInstruction(this);
        v.visitIASTORE(this);
    }"
355,9224077.txt,none,"    private PhysicalFont findDeferredFont(String name, int style) {
        PhysicalFont physicalFont = findJREDeferredFont(name, style);
        if (physicalFont != null) {
            return physicalFont;
        } else {
            return findOtherDeferredFont(name, style);
        }
    }"
356,8276759.txt,none,"    private Mono<ModSeq> tryUpdateModSeq(CassandraId mailboxId, ModSeq modSeq) {
        ModSeq nextModSeq = modSeq.next();
        return cassandraAsyncExecutor.executeReturnApplied(
            update.bind()
                .setUUID(MAILBOX_ID, mailboxId.asUuid())
                .setLong(NEXT_MODSEQ, nextModSeq.getValue())
                .setLong(MOD_SEQ_CONDITION, modSeq.getValue()))
            .flatMap(success -> successToModSeq(nextModSeq, success));
    }"
357,7907062.txt,none,"  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BUILD_SLAVE_STATUS:
      return getBuildSlaveStatus();

    }
    throw new java.lang.IllegalStateException();
  }"
358,6973553.txt,none,"    @Override
    public void put(Range<K> range, V value) {
      checkArgument(
          subRange.encloses(range), ""Cannot put range %s into a subRangeMap(%s)"", range, subRange);
      TreeRangeMap.this.put(range, value);
    }"
359,5358686.txt,none,"	public List<Description> getDescriptions() {
		if (descriptions == null) {
			descriptions = new ArrayList<Description>();
		}
		return this.descriptions;
	}"
360,7030257.txt,minor,"  public SocketServer(NetworkConfig config, SSLConfig sslConfig, MetricRegistry registry, ArrayList<Port> portList) {
    this.host = config.hostName;
    this.port = config.port;
    this.numProcessorThreads = config.numIoThreads;
    this.maxQueuedRequests = config.queuedMaxRequests;
    this.sendBufferSize = config.socketSendBufferBytes;
    this.recvBufferSize = config.socketReceiveBufferBytes;
    this.maxRequestSize = config.socketRequestMaxBytes;
    processors = new ArrayList<Processor>(numProcessorThreads);
    requestResponseChannel = new SocketRequestResponseChannel(numProcessorThreads, maxQueuedRequests);
    metrics = new ServerNetworkMetrics(requestResponseChannel, registry, processors);
    this.acceptors = new ArrayList<Acceptor>();
    this.ports = new HashMap<PortType, Port>();
    this.validatePorts(portList);
    this.initializeSSLFactory(sslConfig);
  }"
361,8186858.txt,none,"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {

        ControlCommand info = (ControlCommand)o;

        int rc = super.tightMarshal1(wireFormat, o, bs);
        rc += tightMarshalString1(info.getCommand(), bs);

        return rc + 0;
    }"
362,8834964.txt,none,"  public void setDestinationIsSet(boolean value) {
    if (!value) {
      this.destination = null;
    }
  }"
363,6152090.txt,major,"	public boolean matchesName(char[] pattern, char[] name) {
		if (pattern == null)
			return true; // null is as if it was ""*""
		if (name != null) {
			boolean isCaseSensitive = (this.matchRule & R_CASE_SENSITIVE) != 0;
			boolean isCamelCase = (this.matchRule & R_CAMELCASE_MATCH) != 0;
			int matchMode = this.matchRule & MODE_MASK;
			boolean emptyPattern = pattern.length == 0;
			if (matchMode == R_PREFIX_MATCH && emptyPattern)
				return true;
			boolean sameLength = pattern.length == name.length;
			boolean canBePrefix = name.length >= pattern.length;
			boolean matchFirstChar = !isCaseSensitive || emptyPattern
					|| (name.length > 0 && pattern[0] == name[0]);
			if (isCamelCase && matchFirstChar
					&& CharOperation.camelCaseMatch(pattern, name)) {
				return true;
			}
			switch (matchMode) {
			case R_EXACT_MATCH:
			case R_FULL_MATCH:
				if (!isCamelCase) {
					if (sameLength && matchFirstChar) {
						return CharOperation.equals(pattern, name,
								isCaseSensitive);
					}
					break;
				}
				// fall through next case to match as prefix if camel case
				// failed
			case R_PREFIX_MATCH:
				if (canBePrefix && matchFirstChar) {
					return CharOperation.prefixEquals(pattern, name,
							isCaseSensitive);
				}
				break;
			case R_PATTERN_MATCH:
				if (!isCaseSensitive)
					pattern = CharOperation.toLowerCase(pattern);
				return CharOperation.match(pattern, name, isCaseSensitive);
			case R_REGEXP_MATCH:
				if (regexpCompiledPattern == null) {
					regexpCompiledPattern = Pattern.compile(
							new String(pattern), isCaseSensitive ? 0
									: Pattern.CASE_INSENSITIVE);
				}
				return regexpCompiledPattern.matcher(new String(name))
						.matches();
			}
		}
		return false;
	}"
364,4028364.txt,major,"    @Override
    public Sampler deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
      JsonNode node = jp.getCodec().readTree(jp);
      String type = node.get(""type"").asText();
      switch (type) {
        case ""uniform"":
          {
            double lowerBound = node.get(""lower"").asDouble();
            double upperBound = node.get(""upper"").asDouble();
            checkArgument(
                lowerBound >= 0,
                ""The lower bound of uniform distribution should be a non-negative number, ""
                    + ""but found %s."",
                lowerBound);
            return fromRealDistribution(new UniformRealDistribution(lowerBound, upperBound));
          }
        case ""exp"":
          {
            double mean = node.get(""mean"").asDouble();
            return fromRealDistribution(new ExponentialDistribution(mean));
          }
        case ""normal"":
          {
            double mean = node.get(""mean"").asDouble();
            double stddev = node.get(""stddev"").asDouble();
            checkArgument(
                mean >= 0,
                ""The mean of normal distribution should be a non-negative number, but found %s."",
                mean);
            return fromRealDistribution(new NormalDistribution(mean, stddev));
          }
        case ""const"":
          {
            double constant = node.get(""const"").asDouble();
            checkArgument(
                constant >= 0,
                ""The value of constant distribution should be a non-negative number, but found %s."",
                constant);
            return fromRealDistribution(new ConstantRealDistribution(constant));
          }
        case ""zipf"":
          {
            double param = node.get(""param"").asDouble();
            final double multiplier =
                node.has(""multiplier"") ? node.get(""multiplier"").asDouble() : 1.0;
            checkArgument(
                param > 1,
                ""The parameter of the Zipf distribution should be > 1, but found %s."",
                param);
            checkArgument(
                multiplier >= 0,
                ""The multiplier of the Zipf distribution should be >= 0, but found %s."",
                multiplier);
            final ZipfDistribution dist = new ZipfDistribution(100, param);
            return scaledSampler(fromIntegerDistribution(dist), multiplier);
          }
        default:
          {
            throw new IllegalArgumentException(""Unknown distribution type: "" + type);
          }
      }
    }"
365,7628568.txt,none,"		@Override
		public boolean select(Viewer viewer, Object parentElement, Object element) {
			if (matcher==null) {
				return true;
			} else {
				String label = labelProvider.getText(element);
				if (match(label)) {
					return true;
				} else if (element instanceof Describable) {
					String description = ((Describable) element).getDescription();
					return match(description);
				}
				return false;
			}
		}"
366,9205662.txt,none,"	private void setDataType( StyleEntry entry, Object value, String dataLocale )
	{
		ULocale locale = getLocale( dataLocale );
		setDataType( entry, value, locale );
	}"
367,6459836.txt,none,"    private void buildNode79()
        throws Exception {
        UaVariableNode node = new DataTypeDescriptionNode(this.context, NodeId.parse(""ns=0;i=8567""), new QualifiedName(0, ""ContentFilter""), new LocalizedText(""en"", ""ContentFilter""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=12""), -1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=39""), ExpandedNodeId.parse(""svr=0;i=587""), NodeClass.Object, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=47""), ExpandedNodeId.parse(""svr=0;i=8252""), NodeClass.Variable, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=69""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=8567""), NodeId.parse(""ns=0;i=47""), ExpandedNodeId.parse(""svr=0;i=8252""), NodeClass.Variable, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:String xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\"">//xs:element[@name='ContentFilter']</ns2:String>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
368,6660510.txt,none,"	public HTMLContentBuilder(Document document) {
		super(document);
		Preferences prefs = HTMLCorePlugin.getDefault().getPluginPreferences();
		fTagCase = prefs.getInt(HTMLCorePreferenceNames.TAG_NAME_CASE);
		fAttrCase = prefs.getInt(HTMLCorePreferenceNames.ATTR_NAME_CASE);
		//	Element caseSettings = HTMLPreferenceManager.getHTMLInstance().getElement(PreferenceNames.PREFERRED_CASE);
		//	fTagCase = caseSettings.getAttribute(PreferenceNames.TAGNAME);
		//	fAttrCase = caseSettings.getAttribute(PreferenceNames.ATTRIBUTENAME);
	}"
369,6847017.txt,major,"  @Override
  protected void translateCore(final ITranslationEnvironment environment,
      final IInstruction instruction, final List<ReilInstruction> instructions) {
    final IOperandTreeNode registerOperand1 =
        instruction.getOperands().get(0).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand2 =
        instruction.getOperands().get(1).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand3 =
        instruction.getOperands().get(2).getRootNode().getChildren().get(0);
    final IOperandTreeNode registerOperand4 =
        instruction.getOperands().get(3).getRootNode().getChildren().get(0);

    final String targetRegister = (registerOperand1.getValue());
    final String sourceRegister1 = (registerOperand2.getValue());
    final String sourceRegister2 = (registerOperand3.getValue());
    final String sourceRegister3 = (registerOperand4.getValue());

    final OperandSize bt = OperandSize.BYTE;
    final OperandSize dw = OperandSize.DWORD;
    final OperandSize wd = OperandSize.WORD;

    long baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    final String operand2 = environment.getNextVariableString();
    final String tmpRotate1 = environment.getNextVariableString();
    final String tmpRotate2 = environment.getNextVariableString();
    final String diffOfProducts = environment.getNextVariableString();
    final String operand2from15to0 = environment.getNextVariableString();
    final String operand2from31to16 = environment.getNextVariableString();
    final String registerRmfrom15to0 = environment.getNextVariableString();
    final String registerRmfrom31to16 = environment.getNextVariableString();
    final String tmpVar1 = environment.getNextVariableString();
    final String tmpVar2 = environment.getNextVariableString();
    final String tmpVar3 = environment.getNextVariableString();
    final String trueDiffOfProducts = environment.getNextVariableString();
    final String product1 = environment.getNextVariableString();
    final String product2 = environment.getNextVariableString();

    if (instruction.getMnemonic().contains(""X"")) {
      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,
          String.valueOf(-16), dw, tmpRotate1));
      instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister2, bt,
          String.valueOf(16), dw, tmpRotate2));
      instructions.add(ReilHelpers.createOr(baseOffset++, dw, tmpRotate1, dw, tmpRotate2, dw,
          operand2));
      instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw,
          String.valueOf(0xFFFFFFFFL), dw, operand2));
    } else {
      instructions.add(ReilHelpers.createStr(baseOffset++, dw, sourceRegister2, dw, operand2));
    }

    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, operand2, dw, String.valueOf(0xFFFFL),
        dw, operand2from15to0));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, sourceRegister1, dw,
        String.valueOf(0xFFFFL), dw, registerRmfrom15to0));

    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from15to0,
        wd, registerRmfrom15to0, dw, product1);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, operand2, dw, String.valueOf(-16L),
        dw, tmpVar1));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar1, dw, String.valueOf(0xFFFFL),
        dw, operand2from31to16));
    instructions.add(ReilHelpers.createBsh(baseOffset++, dw, sourceRegister1, dw,
        String.valueOf(-16L), dw, tmpVar2));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar2, dw, String.valueOf(0xFFFFL),
        dw, registerRmfrom31to16));
    Helpers.signedMul(baseOffset, environment, instruction, instructions, wd, operand2from31to16,
        wd, registerRmfrom31to16, dw, product2);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    Helpers.signedSub(baseOffset, environment, instruction, instructions, product2, product1,
        diffOfProducts, trueDiffOfProducts);
    baseOffset = ReilHelpers.nextReilAddress(instruction, instructions);

    instructions.add(ReilHelpers.createAdd(baseOffset++, dw, sourceRegister3, dw, diffOfProducts,
        dw, tmpVar3));
    instructions.add(ReilHelpers.createAnd(baseOffset++, dw, tmpVar3, dw,
        String.valueOf(0xFFFFFFFFL), dw, targetRegister));

    Helpers.overflowCondition(baseOffset, environment, instruction, instructions, tmpVar3);
  }"
370,7451785.txt,none,"        private Builder() {
            this.options = 0;
            this.flavor = null;
        }"
371,8566813.txt,none,"  protected WALHdrContext readHeader(Builder builder, FSDataInputStream stream)
      throws IOException {
     boolean res = builder.mergeDelimitedFrom(stream);
     if (!res) return new WALHdrContext(WALHdrResult.EOF, null);
     if (builder.hasWriterClsName() &&
         !getWriterClsNames().contains(builder.getWriterClsName())) {
       return new WALHdrContext(WALHdrResult.UNKNOWN_WRITER_CLS, null);
     }
     String clsName = null;
     if (builder.hasCellCodecClsName()) {
       clsName = builder.getCellCodecClsName();
     }
     return new WALHdrContext(WALHdrResult.SUCCESS, clsName);
  }"
372,9446238.txt,none,"    public byte[] getBytes(int columnIndex) throws SQLException {
        // sanity check.
        checkIndex(columnIndex);
        // make sure the cursor is on a valid row
        checkCursor();

        if (isBinary(RowSetMD.getColumnType(columnIndex)) == false) {
            throw new SQLException(resBundle.handleGetObject(""cachedrowsetimpl.dtypemismt"").toString());
        }

        return (byte[])(getCurrentRow().getColumnObject(columnIndex));
    }"
373,5732162.txt,none,"  public boolean hasJoinQual() {
    return joinSpec.hasPredicates();
  }"
374,4124650.txt,none,"    public Response asJsonResponse() {
        return asResponse(MediaType.APPLICATION_JSON_TYPE);
    }"
375,6863919.txt,minor,"  @Override
  public final Description matchClass(ClassTree classTree, VisitorState state) {
    if (!HAS_CONSTRUCTORS_WITH_INJECT.matches(classTree, state)) {
      return Description.NO_MATCH;
    }

    List<MethodTree> ctors = ASTHelpers.getConstructors(classTree);
    List<MethodTree> ctorsWithInject =
        ctors.stream()
            .filter(c -> hasInjectAnnotation().matches(c, state))
            .collect(toImmutableList());

    if (ctorsWithInject.size() != 1) {
      // Injection frameworks don't support multiple @Inject ctors.
      // There is already an ERROR check for it.
      // http://errorprone.info/bugpattern/MoreThanOneInjectableConstructor
      return Description.NO_MATCH;
    }

    // collect the assignments in ctor
    Set<Symbol> variablesAssigned = new HashSet<>();
    new TreeScanner<Void, Void>() {
      @Override
      public Void visitAssignment(AssignmentTree tree, Void unused) {
        Symbol symbol = ASTHelpers.getSymbol(tree.getVariable());
        // check if it is instance field.
        if (symbol != null && symbol.getKind() == ElementKind.FIELD && !symbol.isStatic()) {
          variablesAssigned.add(symbol);
        }
        return super.visitAssignment(tree, null);
      }
    }.scan((JCTree) getOnlyElement(ctorsWithInject), null);

    SuggestedFix.Builder fix = SuggestedFix.builder();
    VariableTree variableTreeFirstMatch = null;
    for (Tree member : classTree.getMembers()) {
      if (!(member instanceof VariableTree)) {
        continue;
      }
      VariableTree variableTree = (VariableTree) member;
      if (!INSTANCE_FIELD_WITH_INJECT.matches(variableTree, state)) {
        continue;
      }
      if (!variablesAssigned.contains(ASTHelpers.getSymbol(variableTree))) {
        continue;
      }
      variableTreeFirstMatch = variableTree;
      removeInjectAnnotationFromVariable(variableTree, state).ifPresent(fix::merge);
    }
    if (variableTreeFirstMatch == null) {
      return Description.NO_MATCH;
    }
    if (fix.isEmpty()) {
      return describeMatch(variableTreeFirstMatch);
    }
    return describeMatch(variableTreeFirstMatch, fix.build());
  }"
376,6194793.txt,none,"  @Override
  public void actionPerformed(ActionEvent e) {
    final Resource[] resources = appContext.getResources();

    checkState(resources != null && resources.length == 1 && resources[0] instanceof Container);

    presenter.showDialog((Container) resources[0]);
  }"
377,6234592.txt,none,"    public final void rule__MdCategory__Group_4_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalMetaData.g:6468:1: ( ( ( rule__MdCategory__LabelAssignment_4_0_1 ) ) )
            // InternalMetaData.g:6469:1: ( ( rule__MdCategory__LabelAssignment_4_0_1 ) )
            {
            // InternalMetaData.g:6469:1: ( ( rule__MdCategory__LabelAssignment_4_0_1 ) )
            // InternalMetaData.g:6470:2: ( rule__MdCategory__LabelAssignment_4_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1()); 
            }
            // InternalMetaData.g:6471:2: ( rule__MdCategory__LabelAssignment_4_0_1 )
            // InternalMetaData.g:6471:3: rule__MdCategory__LabelAssignment_4_0_1
            {
            pushFollow(FOLLOW_2);
            rule__MdCategory__LabelAssignment_4_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
378,7525975.txt,none,"	String toString(boolean appended) {

		if (variables.isEmpty()) {
			return """";
		}

		StringBuilder builder = new StringBuilder();
		TemplateVariable previous = null;

		for (TemplateVariable variable : variables) {

			VariableType type = variable.getType();
			type = appended && type.equals(REQUEST_PARAM) ? REQUEST_PARAM_CONTINUED : type;

			if (previous == null) {
				builder.append(""{"").append(type.toString());
			} else if (!previous.isCombinable(variable)) {
				builder.append(""}{"").append(type.toString());
			} else {
				builder.append("","");
			}

			previous = variable;
			builder.append(variable.getName());
		}

		return builder.append(""}"").toString();
	}"
379,8437805.txt,none,"    public String getUriAuthority() {
        return uriAuthority;
    }"
380,5855387.txt,none,"    void setPerUserTestWhileIdle(final Map<String, Boolean> userDefaultTestWhileIdle) {
        assertInitializationAllowed();
        if (perUserTestWhileIdle == null) {
            perUserTestWhileIdle = createMap();
        } else {
            perUserTestWhileIdle.clear();
        }
        perUserTestWhileIdle.putAll(userDefaultTestWhileIdle);
    }"
381,5952032.txt,minor,"    private Invocation next() {
        if (interceptors.hasNext()) {
            final Interceptor interceptor = interceptors.next();
            final Object nextInstance = interceptor.getInstance();
            final Method nextMethod = interceptor.getMethod();

            if (nextMethod.getParameterTypes().length == 1 && nextMethod.getParameterTypes()[0] == InvocationContext.class) {
                return new InterceptorInvocation(nextInstance, nextMethod, this);
            } else {
                return new LifecycleInvocation(nextInstance, nextMethod, this, parameters);
            }
        } else if (method != null) {
            //EJB 3.1, it is allowed that timeout method does not have parameter Timer.class,
            //However, while invoking the timeout method, the timer value is passed, as it is also required by InnvocationContext.getTimer() method
            final Object[] methodParameters;
            if (operation.equals(Operation.TIMEOUT) && method.getParameterTypes().length == 0) {
                methodParameters = new Object[0];
            } else {
                methodParameters = parameters;
            }
            return new BeanInvocation(target, method, methodParameters);
        } else {
            return new NoOpInvocation();
        }
    }"
382,7388482.txt,none,"	protected void addRepository(RemoteRepository repository) {
		if (this.repositories.contains(repository)) {
			return;
		}
		repository = getPossibleMirror(repository);
		repository = applyProxy(repository);
		repository = applyAuthentication(repository);
		this.repositories.add(0, repository);
	}"
383,4222807.txt,none,"        public MerkleTrees deserialize(DataInputPlus in, int version) throws IOException
        {
            IPartitioner partitioner = null;
            int nTrees = in.readInt();
            Collection<MerkleTree> trees = new ArrayList<>(nTrees);
            if (nTrees > 0)
            {
                for (int i = 0; i < nTrees; i++)
                {
                    MerkleTree tree = MerkleTree.serializer.deserialize(in, version);
                    trees.add(tree);

                    if (partitioner == null)
                        partitioner = tree.partitioner();
                    else
                        assert tree.partitioner() == partitioner;
                }
            }

            return new MerkleTrees(partitioner, trees);
        }"
384,6630204.txt,none,"	private static boolean multiPointRelateEnvelope_(MultiPoint multipoint_a,
			Envelope envelope_b, double tolerance, int relation,
			ProgressTracker progress_tracker) {
		switch (relation) {
		case Relation.disjoint:
			return multiPointDisjointEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.within:
			return multiPointWithinEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.contains:
			return multiPointContainsEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.equals:
			return multiPointEqualsEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.touches:
			return multiPointTouchesEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		case Relation.crosses:
			return multiPointCrossesEnvelope_(multipoint_a, envelope_b,
					tolerance, progress_tracker);

		default:
			break; // warning fix
		}

		return false;
	}"
385,4432223.txt,none,"    public static AggregateFunctionTypeMatcher matchAll(String function) {
        for (AggregateFunctionType type : values()) {
            Matcher m = type.pattern.matcher(function);
            if (m.find()) {
                return new AggregateFunctionTypeMatcher(type, true, m.group(1));
            }
        }
        return new AggregateFunctionTypeMatcher(null, false, null);
    }"
386,8309635.txt,none,"	public static IJavaElement[] setMinus(IJavaElement[] setToRemoveFrom, IJavaElement[] elementsToRemove) {
		Set<IJavaElement> setMinus= new HashSet<>(setToRemoveFrom.length - setToRemoveFrom.length);
		setMinus.addAll(Arrays.asList(setToRemoveFrom));
		setMinus.removeAll(Arrays.asList(elementsToRemove));
		return setMinus.toArray(new IJavaElement[setMinus.size()]);
	}"
387,7204833.txt,none,"    public static CreateSteeringPolicyRequest interceptRequest(
            CreateSteeringPolicyRequest request) {

        return request;
    }"
388,6431696.txt,none,"    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
            .add(""Affected"", affected)
            .add(""AffectedType"", affectedType)
            .add(""Verb"", verb)
            .toString();
    }"
389,6458427.txt,none,"    public String deleteMapping ( final String channelId, final String name )
    {
        if ( !this.idToNameMap.containsEntry ( channelId, name ) )
        {
            return null;
        }

        this.nameToIdMap.remove ( name );
        this.idToNameMap.remove ( channelId, name );

        final Collection<String> names = this.model.getNameMap ().get ( channelId );
        if ( names != null )
        {
            names.remove ( name );
        }

        return channelId;
    }"
390,5958136.txt,none,"    public ApplicationException(final String message) {
        super(message);
    }"
391,3988323.txt,none,"    void updateEntity( UnitOfWork current )
    {
        try
        {
            entity = current.get( entity );
        }
        catch( NoSuchEntityException e )
        {
            // Entity was deleted
            entity = null;
        }
    }"
392,9323339.txt,none,"  private Frame senderForInterpreterFrame(X86RegisterMap map) {
    if (DEBUG) {
      System.out.println(""senderForInterpreterFrame"");
    }
    Address unextendedSP = addressOfStackSlot(INTERPRETER_FRAME_SENDER_SP_OFFSET).getAddressAt(0);
    Address sp = addressOfStackSlot(SENDER_SP_OFFSET);
    // We do not need to update the callee-save register mapping because above
    // us is either another interpreter frame or a converter-frame, but never
    // directly a compiled frame.
    // 11/24/04 SFG. With the removal of adapter frames this is no longer true.
    // However c2 no longer uses callee save register for java calls so there
    // are no callee register to find.

    if (map.getUpdateMap())
      updateMapWithSavedLink(map, addressOfStackSlot(LINK_OFFSET));

    return new X86Frame(sp, unextendedSP, getLink(), getSenderPC());
  }"
393,9170572.txt,none,"	public Object calculate( Object value )
	{
		if ( value == null )
		{
			return new Double( -1 );
		}

		if ( intervalStart == null )
		{
			return new Double( Math.floor( this.dateTimeUtil.diffYear( defaultStart,
					(Date) value )
					/ getDateIntervalRange( ) ) );
		}
		else
		{
			if ( this.dateTimeUtil.diffYear( (Date) intervalStart, (Date) value ) < 0 )
			{
				return new Double( -1 );
			}
			else
			{
				return new Double( Math.floor( this.dateTimeUtil.diffYear( (Date) intervalStart,
						(Date) value )
						/ getDateIntervalRange( ) ) );
			}
		}
	}"
394,7879764.txt,none,"  public static ImmutableMap<String, String> readClassMapping(Iterable<String> lines) {
    ImmutableMap.Builder<String, String> classMappingBuilder = ImmutableMap.builder();

    for (String line : lines) {
      if (line.charAt(0) == ' ') {
        // This is a member mapping, which we don't handle yet.
        continue;
      }

      Matcher matcher = CLASS_LINE_PATTERN.matcher(line);
      if (!matcher.matches()) {
        throw new IllegalArgumentException(""Invalid line in proguard mapping: "" + line);
      }

      classMappingBuilder.put(matcher.group(1), matcher.group(2));
    }

    return classMappingBuilder.build();
  }"
395,7580167.txt,none,"	public ToStringCreator append(String fieldName, @Nullable Object value) {
		printFieldSeparatorIfNecessary();
		this.styler.styleField(this.buffer, fieldName, value);
		return this;
	}"
396,7424019.txt,none,"        protected ZeroNullConversionOp(LIRInstructionClass<? extends ZeroNullConversionOp> type, AllocatableValue result, AllocatableValue input) {
            super(type);
            this.result = result;
            this.input = input;
        }"
397,4583764.txt,none,"        private void addLetterAdjust(GlyphMapping wordMapping) {
            int letterSpaceCount = wordMapping.letterSpaceCount;
            int wordLength = wordMapping.getWordLength();
            int taAdjust = textArea.getTextLetterSpaceAdjust();
            for (int i = 0, n = wordLength; i < n; i++) {
                int j = letterSpaceAdjustIndex + i;
                if (j > 0) {
                    int k = wordMapping.startIndex + i;
                    MinOptMax adj = (k < letterSpaceAdjustArray.length)
                        ? letterSpaceAdjustArray [ k ] : null;
                    letterSpaceAdjust [ j ] = (adj == null) ? 0 : adj.getOpt();
                }
                if (letterSpaceCount > 0) {
                    letterSpaceAdjust [ j ] += taAdjust;
                    letterSpaceCount--;
                }
            }
            letterSpaceAdjustIndex += wordLength;
        }"
398,7720851.txt,none,"        public String toString() {
            StringBuilder sb = new StringBuilder();
            sb.append(""name: "").append(this.name);
            sb.append("", id: "").append(this.id);
            sb.append("", subnet range link: "").append(this.subnetRangeLink);
            sb.append("", resource link: "").append(this.connectedResourceLink);
            sb.append("", IP address: "").append(this.ipAddress);
            sb.append("", IP version: "").append(this.ipVersion);
            sb.append("", status: "").append(this.ipAddressStatus);

            return sb.toString();
        }"
399,7137322.txt,none,"  @SuppressWarnings({""unchecked""})
  @Override
  public RB addReqParam(String key, Object value)
  {
    return (RB) super.addReqParam(key, value);
  }"
400,8292656.txt,none,"        public Builder username(String username) {
            Preconditions.checkState(!this.username.isPresent());

            this.username = Optional.of(username);
            return this;
        }"
401,4450051.txt,none,"    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }"
402,6236496.txt,none,"    public final void rule__XWhileExpression__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalMetaData.g:13570:1: ( ( () ) )
            // InternalMetaData.g:13571:1: ( () )
            {
            // InternalMetaData.g:13571:1: ( () )
            // InternalMetaData.g:13572:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }
            // InternalMetaData.g:13573:2: ()
            // InternalMetaData.g:13573:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
403,9484429.txt,none,"  protected void updateStateAsync() {
    Thread thread = new Thread(new Runnable() {
      @Override
      public void run() {
        updateStateStore();
      }
    }, ""Router Heartbeat Async"");
    thread.setDaemon(true);
    thread.start();
  }"
404,7495599.txt,none,"	@Override
	public Long zRemRangeByScore(byte[] key, double min, double max) {
		return convertAndReturn(delegate.zRemRangeByScore(key, min, max), identityConverter);
	}"
405,3868102.txt,none,"  public String getDefaultPrompt() {
    Objects.requireNonNull(accumuloClient);
    ClientInfo info = ClientInfo.from(accumuloClient.properties());
    return accumuloClient.whoami() + ""@"" + info.getInstanceName()
        + (getTableName().isEmpty() ? """" : "" "") + getTableName() + ""> "";
  }"
406,6548643.txt,none,"    public void dispose() {
        if (workbenchWindow == null) {
            // action has already been disposed
            return;
        }
        workbenchWindow.removePageListener(this);
        workbenchWindow.getPartService().removePartListener(this);
        workbenchWindow = null;
    }"
407,8917324.txt,major,"  @Override
  protected void initializeOp(Configuration hconf) throws HiveException {

    // If there is a sort-merge join followed by a regular join, the SMBJoinOperator may not
    // get initialized at all. Consider the following query:
    // A SMB B JOIN C
    // For the mapper processing C, The SMJ is not initialized, no need to close it either.
    initDone = true;

    super.initializeOp(hconf);

    closeCalled = false;

    this.firstFetchHappened = false;
    this.inputFileChanged = false;

    // get the largest table alias from order
    int maxAlias = 0;
    for (byte pos = 0; pos < order.length; pos++) {
      if (pos > maxAlias) {
        maxAlias = pos;
      }
    }
    maxAlias += 1;

    nextGroupStorage = new RowContainer[maxAlias];
    candidateStorage = new RowContainer[maxAlias];
    keyWritables = new ArrayList[maxAlias];
    nextKeyWritables = new ArrayList[maxAlias];
    fetchDone = new boolean[maxAlias];
    foundNextKeyGroup = new boolean[maxAlias];

    int bucketSize;

    // For backwards compatibility reasons we honor the older
    // HIVEMAPJOINBUCKETCACHESIZE if set different from default.
    // By hive 0.13 we should remove this code.
    int oldVar = HiveConf.getIntVar(hconf, HiveConf.ConfVars.HIVEMAPJOINBUCKETCACHESIZE);
    if (oldVar != 100) {
      bucketSize = oldVar;
    } else {
      bucketSize = HiveConf.getIntVar(hconf, HiveConf.ConfVars.HIVESMBJOINCACHEROWS);
    }

    for (byte pos = 0; pos < order.length; pos++) {
      RowContainer<List<Object>> rc = JoinUtil.getRowContainer(hconf,
          rowContainerStandardObjectInspectors[pos],
          pos, bucketSize,spillTableDesc, conf, !hasFilter(pos),
          reporter);
      nextGroupStorage[pos] = rc;
      RowContainer<List<Object>> candidateRC = JoinUtil.getRowContainer(hconf,
          rowContainerStandardObjectInspectors[pos],
          pos, bucketSize,spillTableDesc, conf, !hasFilter(pos),
          reporter);
      candidateStorage[pos] = candidateRC;
    }
    tagToAlias = conf.convertToArray(conf.getTagToAlias(), String.class);

    for (byte pos = 0; pos < order.length; pos++) {
      if (pos != posBigTable) {
        fetchDone[pos] = false;
      }
      foundNextKeyGroup[pos] = false;
    }
  }"
408,7287653.txt,none,"	public static void ensure(IProject project, IProgressMonitor mon, String... reqNatures) throws CoreException {
		IProjectDescription desc = project.getDescription();
		String[] oldNaturesArr = desc.getNatureIds();
		Set<String> natures = new LinkedHashSet<String>();
		for (String n : reqNatures) {
			natures.add(n);
		}
		for (String n : oldNaturesArr) {
			natures.add(n);
		}
		if (natures.size()>oldNaturesArr.length) {
			//Some natures got added
			desc.setNatureIds(natures.toArray(new String[natures.size()]));
			project.setDescription(desc, mon);
		} else {
			//No new natures added, but need to set it to force desired ordering
			desc.setNatureIds(natures.toArray(new String[natures.size()]));
			project.setDescription(desc, IResource.AVOID_NATURE_CONFIG, mon);
		}
	}"
409,7577692.txt,none,"	private void processInterfaces(ConfigurationClass configClass, SourceClass sourceClass) throws IOException {
		for (SourceClass ifc : sourceClass.getInterfaces()) {
			Set<MethodMetadata> beanMethods = retrieveBeanMethodMetadata(ifc);
			for (MethodMetadata methodMetadata : beanMethods) {
				if (!methodMetadata.isAbstract()) {
					// A default method or other concrete method on a Java 8+ interface...
					configClass.addBeanMethod(new BeanMethod(methodMetadata, configClass));
				}
			}
			processInterfaces(configClass, ifc);
		}
	}"
410,4500508.txt,none,"  private Object getKey(Event e) {
    // Write the data to HDFS
    String timestamp = e.getHeaders().get(""timestamp"");
    long eventStamp;

    if (timestamp == null) {
      eventStamp = System.currentTimeMillis();
    } else {
      eventStamp = Long.valueOf(timestamp);
    }
    return new LongWritable(eventStamp);
  }"
411,7782013.txt,none,"	@Override
	public void setContentLength(final int length)
	{
		setIntHeader(""Content-Length"", length);
	}"
412,4101390.txt,none,"    @Override
    public <T> Set<ConstraintViolation<T>> validateParameters(T object, Method method, Object[] parameterValues,
        Class<?>... groups) {
        return validationJobFactory.validateParameters(object, method, parameterValues, groups).getResults();
    }"
413,6994091.txt,none,"  @Override
  protected String pendingToString() {
    ListenableFuture<? extends V> localInputFuture = delegateRef;
    ScheduledFuture<?> localTimer = timer;
    if (localInputFuture != null) {
      String message = ""inputFuture=["" + localInputFuture + ""]"";
      if (localTimer != null) {
        final long delay = localTimer.getDelay(TimeUnit.MILLISECONDS);
        // Negative delays look confusing in an error message
        if (delay > 0) {
          message += "", remaining delay=["" + delay + "" ms]"";
        }
      }
      return message;
    }
    return null;
  }"
414,6125015.txt,none,"    @Override
    public <V extends Comparable<? super V>> MutableList<T> toSortedListBy(Function<? super T, ? extends V> function)
    {
        return this.delegate.toSortedListBy(function);
    }"
415,9218768.txt,none,"    public Enumeration<K> keys() {
        Node<K,V>[] t;
        int f = (t = table) == null ? 0 : t.length;
        return new KeyIterator<K,V>(t, f, 0, f, this);
    }"
416,6840313.txt,none,"	public TagTitle getTitle() {
		return title;
	}"
417,7273813.txt,none,"    private void appTypeUrlFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_appTypeUrlFocusLost
        appTypeUrl.setSelectionEnd(0);
    }//GEN-LAST:event_appTypeUrlFocusLost"
418,4564618.txt,none,"        @Override
        public Object clone() {
            AFPData obj = (AFPData) super.clone();
            obj.filled = this.filled;
            obj.imageUri = this.imageUri;
            return obj;
        }"
419,6341238.txt,none,"  protected void writeVersion(final JsonWriter out, final Integer value) throws IOException {
    if ((value == null)) {
      final boolean previousSerializeNulls = out.getSerializeNulls();
      out.setSerializeNulls(true);
      out.nullValue();
      out.setSerializeNulls(previousSerializeNulls);
    } else {
      out.value(value);
    }
  }"
420,4484891.txt,none,"  private void addOutputContainerData() {
    @SuppressWarnings(""resource"")
    final VarCharVector fragmentIdVector = (VarCharVector) container.getValueAccessorById(
        VarCharVector.class,
        container.getValueVectorId(SchemaPath.getSimplePath(""Fragment"")).getFieldIds())
      .getValueVector();
    AllocationHelper.allocate(fragmentIdVector, 1, 50);
    @SuppressWarnings(""resource"")
    final BigIntVector summaryVector = (BigIntVector) container.getValueAccessorById(BigIntVector.class,
            container.getValueVectorId(SchemaPath.getSimplePath(""Number of records written"")).getFieldIds())
          .getValueVector();
    AllocationHelper.allocate(summaryVector, 1, 8);
    fragmentIdVector.getMutator().setSafe(0, fragmentUniqueId.getBytes());
    fragmentIdVector.getMutator().setValueCount(1);
    summaryVector.getMutator().setSafe(0, counter);
    summaryVector.getMutator().setValueCount(1);

    container.setRecordCount(1);
  }"
421,5651881.txt,none,"  @Override
  public Map<String, List<Integer>> getColumnInfoForQuery(String query) {
    // Manipulate the query to return immediately, with zero rows.
    String rawQuery = query.replace(SUBSTITUTE_TOKEN, "" (1 = 0) "");
    return getColumnInfoForRawQuery(rawQuery);
  }"
422,8737414.txt,none,"  @Override
  public void close() {
    bandwidthGaugeUpdater.close();
  }"
423,5748379.txt,none,"  public Object visit(Context ctx, Stack<Expr> stack, Expr expr) throws TajoException {
    if (expr instanceof UnaryOperator) {
      preHook(ctx, stack, expr);
      visitUnaryOperator(ctx, stack, (UnaryOperator) expr);
      postHook(ctx, stack, expr, null);
    } else if (expr instanceof BinaryOperator) {
      preHook(ctx, stack, expr);
      visitBinaryOperator(ctx, stack, (BinaryOperator) expr);
      postHook(ctx, stack, expr, null);
    } else {
      super.visit(ctx, stack, expr);
    }

    if (expr != null && ctx.targetType == expr.getType()) {
      ctx.set.add(expr);
    }

    return null;
  }"
424,4074807.txt,none,"    public Mutable<ILogicalOperator> getRootRef() {
        return rootRef;
    }"
425,7959714.txt,none,"	public boolean operator_equals(final TitanOctetString_Element otherValue) {
		must_bound(""Unbound left operand of octetstring element comparison."");
		otherValue.must_bound(""Unbound right operand of octetstring comparison."");

		return str_val.get_nibble(nibble_pos) == otherValue.str_val.get_nibble(otherValue.nibble_pos);
	}"
426,7787254.txt,none,"	@Override
	public List<String> getSuffixes()
	{
		return Arrays.asList(""css"");
	}"
427,6143644.txt,none,"	protected String getDefaultProfileID() {
		StringBuffer buffer = new StringBuffer();
		String lang = getLanguage();
		if (lang != null && lang.length() > 0) {
			buffer.append(""org.eclipse.dltk.""); //$NON-NLS-1$
			buffer.append(lang.toLowerCase());
		} else {
			buffer.append(getClass().getName());
		}

		buffer.append("".formatter.profiles.default""); //$NON-NLS-1$
		return buffer.toString();
	}"
428,7186067.txt,none,"        public CreateBudgetDetails build() {
            CreateBudgetDetails __instance__ =
                    new CreateBudgetDetails(
                            compartmentId,
                            targetCompartmentId,
                            displayName,
                            description,
                            amount,
                            resetPeriod,
                            freeformTags,
                            definedTags);
            __instance__.__explicitlySet__.addAll(__explicitlySet__);
            return __instance__;
        }"
429,9156673.txt,none,"	public Object getProperty( String name )
	{
		FactoryPropertyHandle factoryPropHandle = style.getFactoryPropertyHandle( name );
		if (factoryPropHandle == null)
			return null;
		
		return factoryPropHandle.getValue( );
	}"
430,4739090.txt,none,"    @Nonnull
    public static double[] set(@Nonnull double[] src, final int index, final double value) {
        if (index >= src.length) {
            src = Arrays.copyOf(src, src.length * 2);
        }
        src[index] = value;
        return src;
    }"
431,5516822.txt,none,"  @Override
  public byte[] encode(final T obj) {
    final Encoder<T> encoder = (Encoder<T>) clazzToEncoderMap.get(obj.getClass());
    if (encoder == null) {
      throw new RemoteRuntimeException(""Encoder for "" + obj.getClass() + "" not known."");
    }

    final WakeTuplePBuf.Builder tupleBuilder = WakeTuplePBuf.newBuilder();
    tupleBuilder.setClassName(obj.getClass().getName());
    tupleBuilder.setData(ByteString.copyFrom(encoder.encode(obj)));
    return tupleBuilder.build().toByteArray();
  }"
432,8728404.txt,none,"    public void setAeIsSet(boolean value) {
      if (!value) {
        this.ae = null;
      }
    }"
433,6444284.txt,minor,"	protected boolean downloadLog(HttpServletRequest request,
			HttpServletResponse response, ILogService logService,
			String appenderName) throws ServletException {

		FileAppender<ILoggingEvent> appender = logService
				.getFileAppender(appenderName);
		if (appender == null) {
			String msg = NLS.bind(""Appender not found: {0}"", appenderName);
			final ServerStatus error = new ServerStatus(IStatus.ERROR,
					HttpServletResponse.SC_NOT_FOUND, msg, null);
			return statusHandler.handleRequest(request, response, error);
		}

		File logFile = new File(appender.getFile());
		try {
			LogUtils.provideLogFile(logFile, response);
		} catch (Exception ex) {
			String msg = NLS.bind(""An error occured when looking for log {0}."",
					logFile.getName());
			final ServerStatus error = new ServerStatus(IStatus.ERROR,
					HttpServletResponse.SC_INTERNAL_SERVER_ERROR, msg, ex);

			LogHelper.log(error);
			return statusHandler.handleRequest(request, response, error);
		}

		return true;
	}"
434,7484147.txt,none,"	public Customer888(String firstName, String lastName) {
		this.firstName = firstName;
		this.lastName = lastName;
	}"
435,6530288.txt,none,"    public LifxLightStateChanger(LifxLightContext context, LifxLightCommunicationHandler communicationHandler) {
        this.logId = context.getLogId();
        this.product = context.getProduct();
        this.fadeTime = context.getConfiguration().getFadeTime();
        this.pendingLightState = context.getPendingLightState();
        this.scheduler = context.getScheduler();
        this.communicationHandler = communicationHandler;
    }"
436,7403028.txt,none,"    @Override
    public void visitFullInfopointNode(FullInfopointNode i) {
        if (i.getState() != null && i.getState().bci == BytecodeFrame.AFTER_BCI) {
            i.getDebug().log(""Ignoring InfopointNode for AFTER_BCI"");
        } else {
            super.visitFullInfopointNode(i);
        }
    }"
437,3730280.txt,none,"    public void start() {
        checkInst();

        if (scheduler == null) {
            scheduler = new ScheduledThreadPoolExecutor(schedulerThreadSize);
        }

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectSql();
            }
        }, timeBetweenSqlCollect, timeBetweenSqlCollect, timeUnit);

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectSpringMethod();
            }
        }, timeBetweenSpringCollect, timeBetweenSpringCollect, timeUnit);

        scheduler.scheduleAtFixedRate(new Runnable() {

            @Override
            public void run() {
                collectWebURI();
            }
        }, timeBetweenWebUriCollect, timeBetweenWebUriCollect, timeUnit);
    }"
438,8007508.txt,none,"    public final EObject ruleScenario1() throws RecognitionException {
        EObject current = null;

        EObject this_Scenario1_0 = null;



        	enterRule();

        try {
            // InternalParametersTestLanguageEx.g:102:2: (this_Scenario1_0= superScenario1 )
            // InternalParametersTestLanguageEx.g:103:2: this_Scenario1_0= superScenario1
            {
            if ( state.backtracking==0 ) {

              		newCompositeNode(grammarAccess.getScenario1Access().getScenario1ParserRuleCall());
              	
            }
            pushFollow(FollowSets000.FOLLOW_2);
            this_Scenario1_0=superScenario1();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              		current = this_Scenario1_0;
              		afterParserOrEnumRuleCall();
              	
            }

            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
439,4097968.txt,none,"        public String getIndexName() {
            return indexName;
        }"
440,6658892.txt,none,"    public APIRequestGetTestLeads requestFieldDataField () {
      return this.requestFieldDataField(true);
    }"
441,7656657.txt,none,"	private static Ciphertext toCiphertext(String ciphertext,
			@Nullable VaultTransitContext context) {
		return context != null ? Ciphertext.of(ciphertext).with(context) : Ciphertext
				.of(ciphertext);
	}"
442,4322779.txt,none,"    @Override
    public void close() throws StandardException
    {
        super.close( constants.underMerge() );
    }"
443,7205803.txt,none,"    private boolean canRetryRequestIfRefreshableAuthTokenUsed(com.oracle.bmc.model.BmcException e) {
        if (e.getStatusCode() == 401
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            ((com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider)
                    .refresh();
            return true;
        }
        return false;
    }"
444,3985516.txt,none,"    public void clearProxy()
    {
        proxy = null;
    }"
445,9296213.txt,none,"    @Override
    public ArrayData copy() {
        final UndefinedArrayFilter copy = new UndefinedArrayFilter(underlying.copy());
        copy.getUndefined().copy(undefined);
        return copy;
    }"
446,9396435.txt,none,"    public void XRCompositeRectangles(XRSurfaceData dst, GrowableRectArray rects) {
        int srcPict = getCurrentSource().picture;

        for(int i=0; i < rects.getSize(); i++) {
            int x = rects.getX(i);
            int y = rects.getY(i);
            int width = rects.getWidth(i);
            int height = rects.getHeight(i);

            con.renderComposite(compRule, srcPict, XRUtils.None, dst.picture, x, y, 0, 0, x, y, width, height);
        }
    }"
447,6192126.txt,none,"  @Override
  public void onSelectionChanged(PreviewNode selectedNode) {
    Either<ResourceChange, TextEdit> data = selectedNode.getData();
    if (data != null && data.isLeft()) {
      view.showDiff(null);
      return;
    }

    List<TextEdit> edits = collectTextEditsForSelectedNode(selectedNode);

    updateContentInCompareWidget(selectedNode, edits);
  }"
448,7716650.txt,none,"    public static ClusterConfig parse(String file) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(file));
        lines = Linq.map(lines, ClusterConfig::removeComment);
        String contents = String.join("" "", lines);
        ClusterConfig result = IJson.gsonInstance.fromJson(contents, ClusterConfig.class);
        result.validate();
        return result;
    }"
449,4312069.txt,none,"    public static boolean isOid( String oidString )
    {
        try
        {
            Oid.fromString( oidString );

            return true;
        }
        catch ( DecoderException e )
        {
            return false;
        }
    }"
450,6577681.txt,none,"  public void setShowFocusedControl( boolean show ) {
    checkWidget();
    if( showFocusedControl != show ) {
      showFocusedControl = show;
      if( showFocusedControl ) {
        Control control = getDisplay().getFocusControl();
        if( contains( control ) ) {
          showControl( control );
        }
      }
    }
  }"
451,6989671.txt,none,"  public static String generateSourceMaps(
      Type type, Map<SourcePosition, SourcePosition> javaSourcePositionByOutputSourcePosition)
      throws IOException {
    return renderSourceMapToString(type, javaSourcePositionByOutputSourcePosition);
  }"
452,6537117.txt,none,"    @Override
    public SensorEnum getSensorType(Short sensorIndex) {
        if (sensorIndex != null) {
            DeviceSensorValue devSenVal = getDeviceSensorValue(sensorIndex);
            return devSenVal != null ? devSenVal.getSensorType() : null;
        }
        return null;
    }"
453,6892868.txt,none,"    @Override
    public String toString() {
        return defaultFormatter.format(this, Locale.getDefault());
    }"
454,6257330.txt,none,"    @Override
    public Object convertValue(final ActionFields e, final String value) {
        if (STATUS.equals(e)) {
            return convertStatusValue(value);
        }
        return value;
    }"
455,6775552.txt,none,"    @Override
    public APIRequestCreateMockup requestFields (List<String> fields, boolean value) {
      for (String field : fields) {
        this.requestField(field, value);
      }
      return this;
    }"
456,9097530.txt,none,"    protected Assign(boolean direct) {
        this.direct = direct;
    }"
457,6790483.txt,none,"  @Override
  public String vmExecutablePath(Vm vm) {
    File homeDir = vmHomeDir(vm);
    for (String extension : EXECUTABLE_EXTENSIONS) {
      for (String dir : EXECUTABLE_DIRS) {
        File file = new File(homeDir, dir + vm.executable() + extension);
        if (file.isFile()) {
          return file.getAbsolutePath();
        }
      }
    }
    throw new VirtualMachineException(
        String.format(
            ""VM executable %s for VM %s not found under home dir %s"",
            vm.executable(), vm, homeDir));
  }"
458,8049687.txt,none,"    public final void rule__XCastedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXbaseWithAnnotations.g:6835:1: ( rule__XCastedExpression__Group__1__Impl )
            // InternalXbaseWithAnnotations.g:6836:2: rule__XCastedExpression__Group__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XCastedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
459,6186813.txt,none,"  @Override
  public void init(FilterConfig filterConfig) throws ServletException {}"
460,4219128.txt,none,"    public void onRemove(InetAddressAndPort endpoint)
    {
        convict(endpoint, Double.MAX_VALUE);
    }"
461,3807471.txt,none,"   @Override
   public String sendMessage(final Map<String, String> headers,
                             final int type,
                             final String body,
                             boolean durable,
                             final String user,
                             final String password) throws Exception {
      if (AuditLogger.isEnabled()) {
         AuditLogger.sendMessage(this, null, headers, type, body, durable, user, ""****"");
      }
      try {
         return sendMessage(addressInfo.getName(), server, headers, type, body, durable, user, password);
      } catch (Exception e) {
         e.printStackTrace();
         throw new IllegalStateException(e.getMessage());
      }
   }"
462,4679336.txt,minor,"  public String getColumnText(Object element, int columnIndex) {
    if (element instanceof HadoopServer) {
      HadoopServer server = (HadoopServer) element;

      switch (columnIndex) {
        case 0:
          return server.getLocationName();
        case 1:
          return server.getMasterHostName().toString();
        case 2:
          return server.getState();
        case 3:
          return """";
      }
    } else if (element instanceof HadoopJob) {
      HadoopJob job = (HadoopJob) element;

      switch (columnIndex) {
        case 0:
          return job.getJobID().toString();
        case 1:
          return """";
        case 2:
          return job.getState().toString();
        case 3:
          return job.getStatus();
      }
    } else if (element instanceof JarModule) {
      JarModule jar = (JarModule) element;

      switch (columnIndex) {
        case 0:
          return jar.toString();
        case 1:
          return ""Publishing jar to server.."";
        case 2:
          return """";
      }
    }

    return null;
  }"
463,9108325.txt,none,"	protected boolean doAction( ) throws Exception
	{
		if ( Policy.TRACING_ACTIONS )
		{
			System.out.println( ""Edit data source action >> Runs ..."" ); //$NON-NLS-1$
		}
		DataSourceHandle handle = (DataSourceHandle) getSelection( );
		DataSourceEditor dialog = new AdvancedDataSourceEditor( PlatformUI
				.getWorkbench( ).getDisplay( ).getActiveShell( ), handle );

		return ( dialog.open( ) == IDialogConstants.OK_ID );
	}"
464,6564535.txt,critical,"	private void createMenuEntries(Menu menu, DisplayItem parent,
			boolean trackDynamics) {
		if (menu == null)
			return;
		MenuItem[] menuItems = menu.getItems();

		Map findDynamics = new HashMap();
		DynamicContributionItem dynamicEntry = null;

		if (trackDynamics && menu.getParentItem() != null) {
			//Search for any dynamic menu entries which will be handled later
			Object data = menu.getParentItem().getData();
			if (data instanceof IContributionManager) {
				IContributionManager manager = (IContributionManager) data;
				IContributionItem[] items = manager.getItems();
				for (int i = 0; i < items.length; i++) {
					if (items[i].isDynamic()) {
						findDynamics.put(i > 0 ? items[i - 1] : null, items[i]);
					}
				}

				//If there is an item with no preceeding item, set it up to be
				//added first.
				if (findDynamics.containsKey(null)) {
					IContributionItem item = (IContributionItem) findDynamics
							.get(null);
					dynamicEntry = new DynamicContributionItem(item);
					parent.addChild(dynamicEntry);
				}
			}
		}

		for (int i = 0; i < menuItems.length; i++) {
			if (!menuItems[i].getText().equals("""")) { //$NON-NLS-1$
				IContributionItem contributionItem =
						(IContributionItem) menuItems[i].getData();
				if (dynamicEntry != null
						&& contributionItem.equals(dynamicEntry
								.getIContributionItem())) {
					//If the last item added is the item meant to go before the
					//given dynamic entry, add the dynamic entry so it is in the
					//correct order.
					dynamicEntry.addCurrentItem(menuItems[i]);
				} else {
					DisplayItem menuEntry = new DisplayItem(
							menuItems[i].getText(), contributionItem);

					Image image = menuItems[i].getImage();
					if (image != null) {
						menuEntry.setImageDescriptor(ImageDescriptor
								.createFromImage(image));
					}
					menuEntry.setActionSet((ActionSet) idToActionSet
							.get(getActionSetID(contributionItem)));
					parent.addChild(menuEntry);

					if (ActionFactory.NEW.getId()
							.equals(((IContributionItem) menuItems[i].getData())
									.getId())) {
						initializeNewWizardsMenu(menuEntry);
						wizards = menuEntry;
					} else if (SHORTCUT_CONTRIBUTION_ITEM_ID_OPEN_PERSPECTIVE
							.equals(((IContributionItem) menuItems[i].getData())
									.getId())) {
						initializePerspectivesMenu(menuEntry);
						perspectives = menuEntry;
					} else if (SHORTCUT_CONTRIBUTION_ITEM_ID_SHOW_VIEW
							.equals(((IContributionItem) menuItems[i].getData())
									.getId())) {
						initializeViewsMenu(menuEntry);
						views = menuEntry;
					} else {
						createMenuEntries(menuItems[i].getMenu(), menuEntry,
								trackDynamics);
					}

					if (menuEntry.getChildren().isEmpty()) {
						menuEntry
								.setCheckState(getMenuItemIsVisible(menuEntry));
					}

					if (image == null) {
						if (parent != null && parent.getParent() == null) {
							menuEntry.setImageDescriptor(menuImageDescriptor);
						} else if (menuEntry.getChildren().size() > 0) {
							menuEntry
									.setImageDescriptor(submenuImageDescriptor);
						}
					}
				}
				if (trackDynamics
						&& findDynamics.containsKey(menuItems[i].getData())) {
					IContributionItem item = (IContributionItem) findDynamics
							.get(menuItems[i].getData());
					dynamicEntry = new DynamicContributionItem(item);
					dynamicEntry
							.setCheckState(getMenuItemIsVisible(dynamicEntry));
					parent.addChild(dynamicEntry);
				}
			}
		}
	}"
465,4276865.txt,none,"    private T getPointFromLargestNumberCluster(final Collection<? extends Cluster<T>> clusters)
            throws ConvergenceException {

        int maxNumber = 0;
        Cluster<T> selected = null;
        for (final Cluster<T> cluster : clusters) {

            // get the number of points of the current cluster
            final int number = cluster.getPoints().size();

            // select the cluster with the largest number of points
            if (number > maxNumber) {
                maxNumber = number;
                selected = cluster;
            }

        }

        // did we find at least one non-empty cluster ?
        if (selected == null) {
            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
        }

        // extract a random point from the cluster
        final List<T> selectedPoints = selected.getPoints();
        return selectedPoints.remove(random.nextInt(selectedPoints.size()));

    }"
466,6195890.txt,none,"  @Override
  protected void configure() {
    bind(FactoryDao.class).to(JpaFactoryDao.class);
    bind(RemoveFactoriesBeforeUserRemovedEventSubscriber.class).asEagerSingleton();
  }"
467,8962694.txt,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }"
468,6514981.txt,none,"        @Override
        public void unitKept(IInstallableUnit unit) {
            super.unitKept(unit);
            logger.debug(""  Keeping unit "" + unit.getId() + ""/"" + unit.getVersion());
        }"
469,5875574.txt,none,"    public String getToken() {
        return token;
    }"
470,3947756.txt,none,"        static Object checkValue(Object value) {
            if (value == null) {
                throw new IllegalArgumentException(""Value must not be null"");
            }
            return value;
        }"
471,7678894.txt,none,"	public String newlineWithIndent(int indent) {
		StringBuilder buf = new StringBuilder();
		addNewlineWithIndent(indent, buf);
		return buf.toString();
	}"
472,7205580.txt,minor,"    @Override
    public CreatePreauthenticatedRequestResponse createPreauthenticatedRequest(
            CreatePreauthenticatedRequestRequest request) {
        LOG.trace(""Called createPreauthenticatedRequest"");
        request = CreatePreauthenticatedRequestConverter.interceptRequest(request);
        com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                CreatePreauthenticatedRequestConverter.fromRequest(client, request);
        com.google.common.base.Function<
                        javax.ws.rs.core.Response, CreatePreauthenticatedRequestResponse>
                transformer = CreatePreauthenticatedRequestConverter.fromResponse();

        int attempts = 0;
        while (true) {
            try {
                javax.ws.rs.core.Response response =
                        client.post(ib, request.getCreatePreauthenticatedRequestDetails(), request);
                return transformer.apply(response);
            } catch (com.oracle.bmc.model.BmcException e) {
                if (++attempts < MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS
                        && canRetryRequestIfRefreshableAuthTokenUsed(e)) {
                    continue;
                } else {
                    throw e;
                }
            }
        }
    }"
473,8430991.txt,none,"    public void setLoggingLevel(String level) {
        backlogDebugger.setLoggingLevel(level);
    }"
474,7492060.txt,none,"	@Override
	public LinkRelation getItemResourceRel() {

		LinkRelation fallback = domainTypeMapping.getItemResourceRel();

		if (repositoryAnnotation != null) {
			String rel = repositoryAnnotation.itemResourceRel();
			return StringUtils.hasText(rel) ? LinkRelation.of(rel) : fallback;
		}

		return fallback;
	}"
475,7231342.txt,none,"  @Implementation(minSdk = M)
  protected Network getActiveNetwork() {
    if (defaultNetworkActive) {
      return netIdToNetwork.get(getActiveNetworkInfo().getType());
    }
    return null;
  }"
476,5506218.txt,none,"    private byte[] headerEncode() {
        this.makeCustomHeaderToNet();
        if (SerializeType.ROCKETMQ == serializeTypeCurrentRPC) {
            return RocketMQSerializable.rocketMQProtocolEncode(this);
        } else {
            return RemotingSerializable.encode(this);
        }
    }"
477,9150816.txt,minor,"	protected void buildContent( )
	{

		// Defines provider.

		IDescriptorProvider nameProvider = new TextPropertyDescriptorProvider( IDesignElementModel.NAME_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );

		// Defines section.

		TextSection nameSection = new TextSection( nameProvider.getDisplayName( ),
				container,
				true );

		nameSection.setProvider( nameProvider );
		nameSection.setLayoutNum( 6 );
		nameSection.setWidth( 500 );
		addSection( PageSectionId.VARIABLE_NAME, nameSection ); //$NON-NLS-1$

		ComboPropertyDescriptorProvider variableTypeProvider = new ComboPropertyDescriptorProvider( IVariableElementModel.TYPE_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );
		variableTypeProvider.enableReset( true );

		ComboSection variableTypeSection = new ComboSection( variableTypeProvider.getDisplayName( ),
				container,
				true );
		variableTypeSection.setProvider( variableTypeProvider );
		variableTypeSection.setLayoutNum( 6 );
		variableTypeSection.setWidth( 500 );
		addSection( PageSectionId.VARIABLE_TYPE, variableTypeSection );

		ExpressionPropertyDescriptorProvider variableValueProvider = new ExpressionPropertyDescriptorProvider( IVariableElementModel.VALUE_PROP,
				ReportDesignConstants.VARIABLE_ELEMENT );
		ExpressionSection variableValueSection = new ExpressionSection( variableValueProvider.getDisplayName( ),
				container,
				true );
		variableValueSection.setMulti(false);
		variableValueSection.setProvider( variableValueProvider );
		variableValueSection.setWidth( 500 );
		variableValueSection.setLayoutNum( 6 );
		addSection( PageSectionId.VARIABLE_VALUE, variableValueSection );

	}"
478,6174952.txt,none,"  @Override
  public DebugConfiguration createConfiguration(
      String typeId, String name, String host, int port, Map<String, String> connectionProperties) {
    final DebugConfigurationType configurationType =
        configurationTypeRegistry.getConfigurationTypeById(typeId);

    final DebugConfiguration configuration =
        new DebugConfiguration(
            configurationType,
            generateUniqueConfigurationName(configurationType, name),
            host,
            port,
            connectionProperties);
    configurations.add(configuration);
    saveConfigurations();
    fireConfigurationAdded(configuration);

    return configuration;
  }"
479,7539445.txt,none,"        @Override
        public boolean hasNext() {
            if (nextValue != null) {
                return true;
            }
            while (it.hasNext()) {
                Map.Entry<Key<K>, V> entry = it.next();
                K key = entry.getKey().get();
                if (key != null) {
                    nextValue = new Entry(key, entry.getValue());
                    return true;
                } else {
                    it.remove();
                }
            }
            return false;
        }"
480,9225640.txt,minor,"    boolean increaseConnectionWindow(int amount) {
        List<Stream<?>> candidates = null;
        controllerLock.lock();
        try {
            int size = connectionWindowSize;
            size += amount;
            if (size < 0)
                return false;
            connectionWindowSize = size;
            if (debug.on())
                debug.log(""Connection window size is now %d (amount added %d)"",
                          size, amount);

            // Notify waiting streams, until the new increased window size is
            // effectively exhausted.
            Iterator<Map.Entry<Integer,Map.Entry<Stream<?>,Integer>>> iter =
                    pending.entrySet().iterator();

            while (iter.hasNext() && size > 0) {
                Map.Entry<Integer,Map.Entry<Stream<?>,Integer>> item = iter.next();
                Integer streamSize = streams.get(item.getKey());
                if (streamSize == null) {
                    iter.remove();
                } else {
                    Map.Entry<Stream<?>,Integer> e = item.getValue();
                    int requestedAmount = e.getValue();
                    // only wakes up the pending streams for which there is
                    // at least 1 byte of space in both windows
                    int minAmount = 1;
                    if (size >= minAmount && streamSize >= minAmount) {
                        size -= Math.min(streamSize, requestedAmount);
                        iter.remove();
                        if (candidates == null)
                            candidates = new ArrayList<>();
                        candidates.add(e.getKey());
                    }
                }
            }
        } finally {
            controllerLock.unlock();
        }
        if (candidates != null) {
            candidates.forEach(Stream::signalWindowUpdate);
        }
        return true;
    }"
481,7284688.txt,none,"	private void save(ObjectOutputStream out) throws IOException {
		out.writeInt(maxSize);
		out.writeInt(size());
		for (Entry entry : history) {
			out.writeObject(entry);
		}
	}"
482,5671828.txt,none,"  final public IObjectAtom variable() throws ParseException {
  Token t; String var;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTEX:
      jj_consume_token(NOTEX);
      jj_consume_token(LPAR);
      t = jj_consume_token(VARIABLE);
      jj_consume_token(RPAR);
                                                      var=t.image; var=kb.getPrefixURI(""var"") + var.substring(1);
                                                                                                                try{
                                                                                                                        {if (true) return new VariableAtom(new URI(var), true);}
                                                                                                                } catch (URISyntaxException e) {
                                                                                                                        e.printStackTrace();
                                                                                                                        {if (true) return null;}
                                                                                                                }
      break;
    case VARIABLE:
      t = jj_consume_token(VARIABLE);
          var=t.image; var=kb.getPrefixURI(""var"") + var.substring(1);
                                                                                                                try{
                                                                                                                        {if (true) return new VariableAtom(new URI(var), false);}
                                                                                                                } catch (URISyntaxException e) {
                                                                                                                        e.printStackTrace();
                                                                                                                        {if (true) return null;}
                                                                                                                }
      break;
    case BNODE:
      t = jj_consume_token(BNODE);
          var=t.image;  {if (true) return new RuleBlankNode(var);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error(""Missing return statement in function"");
  }"
483,7232869.txt,none,"  public ShadowProviderGenerator(
      RobolectricModel model,
      ProcessingEnvironment environment,
      String shadowPackage,
      boolean shouldInstrumentPackages,
      int priority) {
    this.messager = environment.getMessager();
    this.filer = environment.getFiler();
    this.model = model;
    this.shadowPackage = shadowPackage;
    this.shouldInstrumentPackages = shouldInstrumentPackages;
    this.priority = priority;
  }"
484,7378490.txt,none,"	protected Server createJettyServer(JettyHttpHandlerAdapter servlet) {
		int port = (getPort() >= 0) ? getPort() : 0;
		InetSocketAddress address = new InetSocketAddress(getAddress(), port);
		Server server = new Server(getThreadPool());
		server.addConnector(createConnector(address, server));
		ServletHolder servletHolder = new ServletHolder(servlet);
		servletHolder.setAsyncSupported(true);
		ServletContextHandler contextHandler = new ServletContextHandler(server, """",
				false, false);
		contextHandler.addServlet(servletHolder, ""/"");
		server.setHandler(addHandlerWrappers(contextHandler));
		JettyReactiveWebServerFactory.logger
				.info(""Server initialized with port: "" + port);
		if (getSsl() != null && getSsl().isEnabled()) {
			customizeSsl(server, address);
		}
		for (JettyServerCustomizer customizer : getServerCustomizers()) {
			customizer.customize(server);
		}
		if (this.useForwardHeaders) {
			new ForwardHeadersCustomizer().customize(server);
		}
		return server;
	}"
485,5989223.txt,none,"    @BeforeClass
    public static void setUp() throws Exception {
        s3 = s3ClientBuilder().build();
        s3Async = s3AsyncClientBuilder().build();
    }"
486,7071050.txt,none,"        public XMLString getStringValue(int nodeHandle) {
        // ###zaj - researching
        nodes.readSlot(nodeHandle, gotslot);
        int nodetype=gotslot[0] & 0xFF;
        String value=null;

        switch (nodetype) {
        case TEXT_NODE:
        case COMMENT_NODE:
        case CDATA_SECTION_NODE:
                value= m_char.getString(gotslot[2], gotslot[3]);
                break;
        case PROCESSING_INSTRUCTION_NODE:
        case ATTRIBUTE_NODE:
        case ELEMENT_NODE:
        case ENTITY_REFERENCE_NODE:
        default:
                break;
        }
        return m_xsf.newstr( value );

        }"
487,7760290.txt,none,"  public static long gzip(final ByteSource in, final ByteSink out, Predicate<Throwable> shouldRetry)
  {
    return StreamUtils.retryCopy(
        in,
        new ByteSink()
        {
          @Override
          public OutputStream openStream() throws IOException
          {
            return new GZIPOutputStream(out.openStream());
          }
        },
        shouldRetry,
        DEFAULT_RETRY_COUNT
    );
  }"
488,5854207.txt,none,"        private String escapeCDATA(String text) {
            if( text==null ) return """";
            int len = text.length();
            CharArrayWriter result = new CharArrayWriter(len);
            for (int i=0; i<len; i++) {
                if (((i+2) < len)
                        && (text.charAt(i) == ']')
                        && (text.charAt(i+1) == ']')
                        && (text.charAt(i+2) == '>')) {
                    // match found
                    result.write(']');
                    result.write(']');
                    result.write('&');
                    result.write('g');
                    result.write('t');
                    result.write(';');
                    i += 2;
                } else {
                    result.write(text.charAt(i));
                }
            }
            return result.toString();
        }"
489,7009087.txt,none,"  private RequestHandler(
      @Nullable Class<C> component,
      Provider<? extends RequestComponentBuilder<C>> requestComponentBuilderProvider,
      RequestAuthenticator requestAuthenticator) {
    // If the component class isn't explicitly provided, infer it from the class's own typing.
    // This is safe only for use by subclasses of RequestHandler where the generic parameter is
    // preserved at runtime, so only expose that option via the protected constructor.
    this.router = Router.create(
        component != null ? component : new TypeInstantiator<C>(getClass()){}.getExactType());
    this.requestComponentBuilderProvider = checkNotNull(requestComponentBuilderProvider);
    this.requestAuthenticator = checkNotNull(requestAuthenticator);
  }"
490,8602498.txt,none,"  public DataBlockEncoder getEncoder() {
    if (encoder == null && id != 0) {
      // lazily create the encoder
      encoder = createEncoder(encoderCls);
    }
    return encoder;
  }"
491,4310755.txt,minor,"    private static byte[] decodeUrl( byte[] bytes ) throws UrlDecoderException
    {
        if ( bytes == null )
        {
            return Strings.EMPTY_BYTES;
        }

        ByteArrayOutputStream buffer = new ByteArrayOutputStream();

        for ( int i = 0; i < bytes.length; i++ )
        {
            int b = bytes[i];

            if ( b == '%' )
            {
                try
                {
                    int u = Character.digit( ( char ) bytes[++i], 16 );
                    int l = Character.digit( ( char ) bytes[++i], 16 );

                    if ( ( u == -1 ) || ( l == -1 ) )
                    {
                        throw new UrlDecoderException( I18n.err( I18n.ERR_13040_INVALID_URL_ENCODING ) );
                    }

                    buffer.write( ( char ) ( ( u << 4 ) + l ) );
                }
                catch ( ArrayIndexOutOfBoundsException aioobe )
                {
                    throw new UrlDecoderException( I18n.err( I18n.ERR_13040_INVALID_URL_ENCODING ), aioobe );
                }
            }
            else
            {
                buffer.write( b );
            }
        }

        return buffer.toByteArray();
    }"
492,7522826.txt,none,"	@Override
	protected YarnContainer performBuild() throws Exception {
		YarnContainerFactoryBean fb = new YarnContainerFactoryBean();
		fb.setContainerRef(ref);
		fb.setContainerClass(clazz);
		fb.afterPropertiesSet();
		YarnContainer container = fb.getObject();
		if (container instanceof AbstractYarnContainer) {
			((AbstractYarnContainer)container).setConfiguration(configuration);
		}
		return container;
	}"
493,6521680.txt,none,"    @Override
    public String toString() {
        return getType() + ""="" + getIdentifier();
    }"
494,8908782.txt,none,"    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
      return fields;
    }"
495,8144651.txt,minor,"    public final void entryRuleCallExpression() throws RecognitionException {
        int entryRuleCallExpression_StartIndex = input.index();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return ; }
            // InternalExBeeLangTestLanguageParser.g:1031:1: ( ruleCallExpression EOF )
            // InternalExBeeLangTestLanguageParser.g:1032:1: ruleCallExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getCallExpressionRule()); 
            }
            pushFollow(FollowSets000.FOLLOW_1);
            ruleCallExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getCallExpressionRule()); 
            }
            match(input,EOF,FollowSets000.FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, entryRuleCallExpression_StartIndex); }
        }
        return ;
    }"
496,7996314.txt,none,"	public void completeUnary_Source(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
	}"
497,3851625.txt,none,"  public int compareColumnQualifier(Text cq) {
    return WritableComparator.compareBytes(colQualifier, 0, colQualifier.length, cq.getBytes(), 0,
        cq.getLength());
  }"
498,6030681.txt,none,"	public static NetworkConfig createStandardFromStream(InputStream inStream) {
		LOGGER.config(""Creating standard network configuration properties from stream"");
		standard = new NetworkConfig();
		try {
			standard.load(inStream);
		} catch (IOException e) {
			LOGGER.log(Level.WARNING, ""cannot load properties from stream: {0}"", e.getMessage());
		}
		return standard;
	}"
499,8902566.txt,none,"      public short getThriftFieldId() {
        return _thriftId;
      }"
500,6329210.txt,none,"    public void updated(Map<String, Object> properties) {
        logger.debug(""Updating Cloud Publisher..."");

        doUpdate(properties);

        logger.debug(""Updating Cloud Publisher... Done"");
    }"
501,3742330.txt,none,"    private static void makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(Table table) {
        if ((table != null) && (table.getPrimaryKeyColumns() != null) && (table.getPrimaryKeyColumns().length == 0)) {
            Column[] allCoumns = table.getColumns();

            for (Column column : allCoumns) {
                column.setPrimaryKey(true);
            }
        }
    }"
502,7759298.txt,none,"  @Override
  public String toString()
  {
    return ""SegmentListUnusedAction{"" +
           ""dataSource='"" + dataSource + '\'' +
           "", interval="" + interval +
           '}';
  }"
503,5534322.txt,none,"    PartitionReceiverHandlerImpl(SystemStreamPartition ssp, Counter eventReadRate, Counter eventByteReadRate,
        SamzaHistogram readLatency, Counter readErrors, Interceptor interceptor, int maxEventCount) {
      this.ssp = ssp;
      this.eventReadRate = eventReadRate;
      this.eventByteReadRate = eventByteReadRate;
      this.readLatency = readLatency;
      this.errorRate = readErrors;
      this.interceptor = interceptor;
      this.maxEventCount = maxEventCount;
    }"
504,7023392.txt,none,"  @Provides
  @Singleton
  @Named(""read"")
  public Supplier<Request> provideRead(
      @Named(""request.id"") final Function<Map<String, String>, String> id, final Scheme scheme,
      @ReadHost final Function<Map<String, String>, String> host,
      @Nullable @Named(""port"") final Integer port,
      @Nullable @Named(""uri.root"") final String uriRoot,
      @Named(""read.container"") final Function<Map<String, String>, String> container,
      @Nullable @Named(""api.version"") final String apiVersion,
      @Nullable @ReadObjectName final Function<Map<String, String>, String> object,
      @ReadHeaders final Map<String, Function<Map<String, String>, String>> headers,
      @Named(""read.context"") final List<Function<Map<String, String>, String>> context,
      @Nullable @Named(""credentials"") final Function<Map<String, String>, Credential> credentials,
      @Named(""virtualhost"") final boolean virtualHost,
      @Named(""read.sseCSource"") final boolean encryptedSourceObject) {

    final Map<String, Function<Map<String, String>, String>> queryParameters =
        Collections.emptyMap();

    if (encryptedSourceObject) {
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-algorithm"")) {
        headers.put(""x-amz-server-side-encryption-customer-algorithm"",
            provideSSEEncryptionAlgorithm());
      }
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-key"")) {
        headers.put(""x-amz-server-side-encryption-customer-key"", provideSSEEncryptionKey());
      }
      if (!headers.containsKey(""x-amz-server-side-encryption-customer-key-MD5"")) {
        headers.put(""x-amz-server-side-encryption-customer-key-MD5"", provideSSEKeyMD5());
      }
    }

    final Supplier<Body> bodySupplier = Suppliers.of(Bodies.none());
    final Function<Map<String, String>, Body> body = MoreFunctions.forSupplier(bodySupplier);

    return createRequestSupplier(Operation.READ, id, Method.GET, scheme, host, port, uriRoot,
        container, apiVersion, object, queryParameters, headers, context, null, body, credentials,
        virtualHost, null, null, false, null);
  }"
505,7094545.txt,none,"    @Override
    public ByteBuffer put(byte x) {
        if (isReadOnly) {
            throw new ReadOnlyBufferException();
        }
        hb[ix(nextPutIndex())] = x;
        return this;
    }"
506,7850192.txt,critical,"  long recoverDrf(OplogEntryIdSet deletedIds, boolean alreadyRecoveredOnce, boolean latestOplog) {
    File drfFile = this.drf.f;
    if (drfFile == null) {
      this.haveRecoveredDrf = true;
      return 0L;
    }
    lockCompactor();
    try {
      if (this.haveRecoveredDrf && !getHasDeletes())
        return 0L; // do this while holding lock
      if (!this.haveRecoveredDrf) {
        this.haveRecoveredDrf = true;
      }
      logger.info(""Recovering {} {} for disk store {}."",
          new Object[] {toString(), drfFile.getAbsolutePath(), getParent().getName()});
      this.recoverDelEntryId = DiskStoreImpl.INVALID_ID;
      boolean readLastRecord = true;
      CountingDataInputStream dis = null;
      try {
        int recordCount = 0;
        boolean foundDiskStoreRecord = false;
        FileInputStream fis = null;
        try {
          fis = new FileInputStream(drfFile);
          dis = new CountingDataInputStream(new BufferedInputStream(fis, 32 * 1024),
              drfFile.length());
          boolean endOfLog = false;
          while (!endOfLog) {
            if (dis.atEndOfFile()) {
              endOfLog = true;
              break;
            }
            readLastRecord = false;
            byte opCode = dis.readByte();
            if (logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)) {
              logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE, ""drf byte={} location={}"", opCode,
                  Long.toHexString(dis.getCount()));
            }
            switch (opCode) {
              case OPLOG_EOF_ID:
                // we are at the end of the oplog. So we need to back up one byte
                dis.decrementCount();
                endOfLog = true;
                break;
              case OPLOG_DEL_ENTRY_1ID:
              case OPLOG_DEL_ENTRY_2ID:
              case OPLOG_DEL_ENTRY_3ID:
              case OPLOG_DEL_ENTRY_4ID:
              case OPLOG_DEL_ENTRY_5ID:
              case OPLOG_DEL_ENTRY_6ID:
              case OPLOG_DEL_ENTRY_7ID:
              case OPLOG_DEL_ENTRY_8ID:
                readDelEntry(dis, opCode, deletedIds, parent);
                recordCount++;
                break;
              case OPLOG_DISK_STORE_ID:
                readDiskStoreRecord(dis, this.drf.f);
                foundDiskStoreRecord = true;
                recordCount++;
                break;
              case OPLOG_MAGIC_SEQ_ID:
                readOplogMagicSeqRecord(dis, this.drf.f, OPLOG_TYPE.DRF);
                break;
              case OPLOG_GEMFIRE_VERSION:
                readGemfireVersionRecord(dis, this.drf.f);
                recordCount++;
                break;

              case OPLOG_RVV:
                long idx = dis.getCount();
                readRVVRecord(dis, this.drf.f, true, latestOplog);
                recordCount++;
                break;

              default:
                throw new DiskAccessException(
                    String.format(""Unknown opCode %s found in disk operation log."",
                        opCode),
                    getParent());
            }
            readLastRecord = true;
            // @todo
            // if (rgn.isDestroyed()) {
            // break;
            // }
          } // while
        } finally {
          if (dis != null) {
            dis.close();
          }
          if (fis != null) {
            fis.close();
          }
        }
        if (!foundDiskStoreRecord && recordCount > 0) {
          throw new DiskAccessException(
              ""The oplog file \"""" + this.drf.f + ""\"" does not belong to the init file \""""
                  + getParent().getInitFile() + ""\"". Drf did not contain a disk store id."",
              getParent());
        }
      } catch (EOFException ignore) {
        // ignore since a partial record write can be caused by a crash
      } catch (IOException ex) {
        getParent().getCancelCriterion().checkCancelInProgress(ex);
        throw new DiskAccessException(
            String.format(""Failed to read file during recovery from %s"",
                drfFile.getPath()),
            ex, getParent());
      } catch (CancelException e) {
        if (logger.isDebugEnabled()) {
          logger.debug(""Oplog::readOplog:Error in recovery as Cache was closed"", e);
        }
      } catch (RegionDestroyedException e) {
        if (logger.isDebugEnabled()) {
          logger.debug(""Oplog::readOplog:Error in recovery as Region was destroyed"", e);
        }
      }
      // Add the Oplog size to the Directory Holder which owns this oplog,
      // so that available space is correctly calculated & stats updated.
      long byteCount = 0;
      if (!readLastRecord) {
        // this means that there was a crash
        // and hence we should not continue to read
        // the next oplog
        this.crashed = true;
        if (dis != null) {
          byteCount = dis.getFileLength();
        }
      } else {
        if (dis != null) {
          byteCount = dis.getCount();
        }
      }
      if (!alreadyRecoveredOnce) {
        setRecoveredDrfSize(byteCount);
        this.dirHolder.incrementTotalOplogSize(byteCount);
      }
      return byteCount;
    } finally {
      unlockCompactor();
    }
  }"
507,3808598.txt,none,"      @Override
      public void run() {
         try {
            callOnMessage();
         } catch (Exception e) {
            ActiveMQClientLogger.LOGGER.onMessageError(e);

            lastException = e;
         }
      }"
508,7755095.txt,none,"    @JsonInclude(Include.NON_EMPTY)
    public List<LinkDto> getPlatformComponents() {
        return platformComponents;
    }"
509,7995724.txt,none,"  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Bug347012TestLanguagePackage.MY_BINDING__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case Bug347012TestLanguagePackage.MY_BINDING__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case Bug347012TestLanguagePackage.MY_BINDING__EXPRESSION:
        return expression != null;
    }
    return super.eIsSet(featureID);
  }"
510,4654593.txt,none,"	@Override
	public void write(DataOutputView out) throws IOException {
		out.writeInt(position);

		for (int i = 0; i < position; i++) {
			out.writeDouble(data[i]);
		}
	}"
511,6150503.txt,none,"	public void addRename(IResource rename, RenameArguments arguments) {
		Assert.isNotNull(rename);
		Assert.isNotNull(arguments);
		if (fRename == null) {
			fRename = new ArrayList<>(2);
			fRenameArguments = new ArrayList<>(2);
		}
		fRename.add(rename);
		fRenameArguments.add(arguments);
		if (fIgnoreCount == 0) {
			IPath newPath = rename.getFullPath().removeLastSegments(1).append(arguments.getNewName());
			internalAdd(new MoveDescription(rename, newPath));
		}
	}"
512,6244777.txt,none,"    public final int getPort() {
        return port;
    }"
513,4113404.txt,none,"    @SuppressWarnings(""deprecation"")
    private static Maybe<Calendar> parseCalendarDefaultParse(String input) {
        try {
            long ms = Date.parse(input);
            if (ms>=new Date(1999, 12, 25).getTime() && ms <= new Date(2200, 1, 2).getTime()) {
                // accept default date parse for this century and next
                GregorianCalendar c = new GregorianCalendar();
                c.setTimeInMillis(ms);
                return Maybe.of((Calendar)c);
            }
        } catch (Exception e) {
            Exceptions.propagateIfFatal(e);
        }
        return Maybe.absent();
    }"
514,5780746.txt,none,"  @Private
  public static <T> T createClazzInstance(String className) throws TezReflectionException {
    Class<?> clazz = getClazz(className);
    @SuppressWarnings(""unchecked"")
    T instance = (T) getNewInstance(clazz);
    return instance;
  }"
515,7046440.txt,none,"    private boolean sampleLoadingFinished(Map<TopicPartition, Long> endOffsets) {
      for (Map.Entry<TopicPartition, Long> entry : endOffsets.entrySet()) {
        long position = _consumer.position(entry.getKey());
        if (position < entry.getValue()) {
          LOG.debug(""Partition {} is still lagging. Current position: {}, LEO: {}"", entry.getKey(),
                    position, entry.getValue());
          return false;
        }
      }
      return true;
    }"
516,8785814.txt,none,"  @Override
  public int run(String[] args) throws IOException {
    if (args.length == 0) {
      printUsage(false);
      return 1;
    }
    final Command command = determineCommand(args[0]);
    if (command == null) {
      System.err.println(""Can't understand command '"" + args[0] + ""'"");
      if (!args[0].startsWith(""-"")) {
        System.err.println(""Command names must start with dashes."");
      }
      printUsage(false);
      return 1;
    }
    final List<String> argsList = new LinkedList<String>();
    for (int j = 1; j < args.length; j++) {
      argsList.add(args[j]);
    }
    try {
      return command.run(getConf(), argsList);
    } catch (IllegalArgumentException e) {
      System.err.println(prettifyException(e));
      return -1;
    }
  }"
517,4832018.txt,none,"    @Override
    public void renderHead(Component component, IHeaderResponse response) {
        super.renderHead(component, response);

        renderFeedbackMessages(response);
    }"
518,5510584.txt,none,"	@Override
	public List<RangerPolicy> getServicePolicies(Long serviceId, SearchFilter filter) throws Exception {
		if(LOG.isDebugEnabled()) {
			LOG.debug(""==> ServiceDBStore.getServicePolicies("" + serviceId + "")"");
		}

		XXService service = daoMgr.getXXService().getById(serviceId);

		if (service == null) {
			throw new Exception(""service does not exist - id='"" + serviceId);
		}

		List<RangerPolicy> ret = getServicePolicies(service, filter);

		if(LOG.isDebugEnabled()) {
			LOG.debug(""<== ServiceDBStore.getServicePolicies("" + serviceId + "") : policy-count="" + (ret == null ? 0 : ret.size()));
		}
		return ret;

	}"
519,6236024.txt,none,"    public GridFsArtifact(final GridFSFile dbFile, final String contentType,
            final Supplier<InputStream> inputStreamSupplier) {
        super(dbFile.getId().toString(), new DbArtifactHash(dbFile.getFilename(), dbFile.getMD5()), dbFile.getLength(),
                contentType);
        this.inputStreamSupplier = inputStreamSupplier;
    }"
520,4426200.txt,minor,"    public void resetApplications() {
        String jobPath = zkRoot + ""/jobs"";
        InterProcessLock lock = new InterProcessReadWriteLock(curator,jobPath).writeLock();
        try {
            lock.acquire();
            (curator.getChildren().forPath(jobPath)).forEach(appId -> {
                String path = jobPath + ""/"" + appId;
                try {
                    if (curator.checkExists().forPath(path) != null) {
                        String status = new String(curator.getData().forPath(path));
                        if (!ZKStateConstant.AppStatus.INIT.toString().equals(status)) {
                            curator.setData().forPath(path, ZKStateConstant.AppStatus.INIT.toString().getBytes(""UTF-8""));
                        }
                    }
                } catch (Exception e) {
                    LOG.error(""fail to read unprocessed job"", e);
                    throw new RuntimeException(e);
                }
            });

        } catch (Exception e) {
            LOG.error(""fail to read unprocessed jobs"", e);
            throw new RuntimeException(e);
        } finally {
            try {
                lock.release();
            } catch (Exception e) {
                LOG.error(""fail to release lock"", e);
            }
        }
    }"
521,8948928.txt,none,"    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TXN_ID
          return TXN_ID;
        case 2: // WRITE_ID
          return WRITE_ID;
        case 3: // DB
          return DB;
        case 4: // TABLE
          return TABLE;
        case 5: // FILE_INFO
          return FILE_INFO;
        case 6: // PARTITION_VALS
          return PARTITION_VALS;
        default:
          return null;
      }
    }"
522,4436948.txt,none,"    public static Date getImportInitalInstance(org.apache.falcon.entity.v0.feed.Cluster feedCluster) {
        return feedCluster.getValidity().getStart();
    }"
523,7049236.txt,minor,"  private boolean optimizeForGoal(ClusterModel clusterModel,
                                  Goal goal,
                                  GoalViolations goalViolations,
                                  Set<Integer> excludedBrokersForLeadership,
                                  Set<Integer> excludedBrokersForReplicaMove)
      throws KafkaCruiseControlException {
    if (clusterModel.topics().isEmpty()) {
      LOG.info(""Skipping goal violation detection because the cluster model does not have any topic."");
      return false;
    }
    Map<TopicPartition, List<Integer>> initReplicaDistribution = clusterModel.getReplicaDistribution();
    Map<TopicPartition, Integer> initLeaderDistribution = clusterModel.getLeaderDistribution();
    try {
      goal.optimize(clusterModel, new HashSet<>(), new OptimizationOptions(excludedTopics(clusterModel),
                                                                           excludedBrokersForLeadership,
                                                                           excludedBrokersForReplicaMove));
    } catch (OptimizationFailureException ofe) {
      // An OptimizationFailureException indicates (1) a hard goal violation that cannot be fixed typically due to
      // lack of physical hardware (e.g. insufficient number of racks to satisfy rack awareness, insufficient number
      // of brokers to satisfy Replica Capacity Goal, or insufficient number of resources to satisfy resource
      // capacity goals), or (2) a failure to move offline replicas away from dead brokers/disks.
      goalViolations.addViolation(goal.name(), false);
      return true;
    }
    Set<ExecutionProposal> proposals = AnalyzerUtils.getDiff(initReplicaDistribution, initLeaderDistribution, clusterModel);
    LOG.trace(""{} generated {} proposals"", goal.name(), proposals.size());
    if (!proposals.isEmpty()) {
      // A goal violation that can be optimized by applying the generated proposals.
      goalViolations.addViolation(goal.name(), true);
      return true;
    } else {
      // The goal is already satisfied.
      return false;
    }
  }"
524,9489554.txt,none,"    @Override
    public BUTTON<T> $lang(String value) {
      addAttr(""lang"", value);
      return this;
    }"
525,3875268.txt,none,"  public TableInfo() {
  }"
526,8195306.txt,none,"        public PsiInternalExBacktrackingBug325745TestLanguageParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }"
527,4693914.txt,none,"  public JobContext getJobContext(String resourceName) {
    if (_contextMap.containsKey(resourceName) && _contextMap.get(resourceName) != null) {
      return new JobContext(_contextMap.get(resourceName));
    }
    return null;
  }"
528,7581956.txt,minor,"	@Nullable
	public static Method findDeclaredMethod(Class<?> clazz, String methodName, Class<?>... paramTypes) {
		try {
			return clazz.getDeclaredMethod(methodName, paramTypes);
		}
		catch (NoSuchMethodException ex) {
			if (clazz.getSuperclass() != null) {
				return findDeclaredMethod(clazz.getSuperclass(), methodName, paramTypes);
			}
			return null;
		}
	}"
529,6062576.txt,none,"    public ContentHandle getContent(Node node) throws IOException {
        ContentHandle result = peekContent(node);
        if (result != null) {
            return result;
        }
        
        if (outstore != null) {
            installNpmModule(node);
            return outstore.getContent(node);
        } else {
            // Until now we used peekContent() which doesn't throw
            // so we re-try with any store to get the error we want
            return stores[0].getContent(node);
        }
    }"
530,7725751.txt,none,"    public static boolean isTrustAliasMissing(ComputeState computeState) {
        URI hostUri = ContainerDescription.getDockerHostUri(computeState);
        return UriUtils.HTTPS_SCHEME.equalsIgnoreCase(hostUri.getScheme())
                && (getTrustAlias(computeState) == null);
    }"
531,7992491.txt,minor,"	@Check
	public void checkNoForwardReferences(XExpression fieldInitializer) {
		JvmIdentifiableElement container = logicalContainerProvider.getLogicalContainer(fieldInitializer);
		if (container instanceof JvmField) {
			JvmField field = (JvmField) container;
			boolean staticField = field.isStatic();
			JvmDeclaredType declaredType = field.getDeclaringType();
			if (declaredType == null) {
				return;
			}
			Collection<JvmField> illegalFields = Sets.newHashSet();
			for(int i = declaredType.getMembers().size() - 1; i>=0; i--) {
				JvmMember member = declaredType.getMembers().get(i);
				if (member instanceof JvmField) {
					if (((JvmField) member).isStatic() == staticField) {
						illegalFields.add((JvmField) member);
					}
				}
				if (member == field)
					break;
			}
			TreeIterator<EObject> iterator = EcoreUtil2.eAll(fieldInitializer);
			while(iterator.hasNext()) {
				EObject object = iterator.next();
				if (object instanceof XFeatureCall) {
					JvmIdentifiableElement feature = ((XFeatureCall) object).getFeature();
					if (illegalFields.contains(((XFeatureCall) object).getFeature())) {
						error(""Cannot reference the field '"" + feature.getSimpleName() + ""' before it is defined"", 
								object, null, INSIGNIFICANT_INDEX, ILLEGAL_FORWARD_REFERENCE);
					}
				} else if (isLocalClassSemantics(object)) {
					iterator.prune();
				}
			}
		}
	}"
532,7934374.txt,minor,"	public void visit(DirectedGraph dg) {
		CompoundDirectedGraph graph = (CompoundDirectedGraph) dg;

		NodeList roots = new NodeList();
		// Find all subgraphs and root subgraphs
		for (int i = 0; i < graph.nodes.size(); i++) {
			Object node = graph.nodes.get(i);
			if (node instanceof Subgraph) {
				Subgraph s = (Subgraph) node;
				Insets padding = dg.getPadding(s);
				s.head = new SubgraphBoundary(s, padding, 0);
				s.tail = new SubgraphBoundary(s, padding, 2);
				Edge headToTail = new Edge(s.head, s.tail);
				headToTail.weight = 10;
				graph.edges.add(headToTail);
				graph.containment.add(headToTail);

				graph.subgraphs.add(s);
				if (s.getParent() == null)
					roots.add(s);
				if (s.members.size() == 2) // The 2 being the head and tail only
					graph.edges.add(new Edge(s.head, s.tail));
			}
		}

		buildNestingTreeIndices(roots, 0);
		convertSubgraphEndpoints(graph);
		addContainmentEdges(graph);
		replaceSubgraphsWithBoundaries(graph);
	}"
533,4301441.txt,none,"    public static boolean pricipalCompareIgnoreRealm(PrincipalName princ1, PrincipalName princ2)
            throws KrbException {

        if (princ1 != null && princ2 != null) {
            princ1.setRealm(null);
            princ2.setRealm(null);
            if (princ1.getName().equals(princ2.getName())) {
                return true;
            } else {
                return false;
            }
        } else {
            throw new KrbException(""principal can't be null."");
        }
    }"
534,6605165.txt,minor,"    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }"
535,7926909.txt,none,"		public LineSegment(Point start, Point end) {
			this(start.getX(),start.getY(), end.getX(),end.getY());
		}"
536,4666091.txt,none,"	public SlotID(ResourceID resourceId, int slotNumber) {
		checkArgument(0 <= slotNumber, ""Slot number must be positive."");
		this.resourceId = checkNotNull(resourceId, ""ResourceID must not be null"");
		this.slotNumber = slotNumber;
	}"
537,9115400.txt,none,"	public void parse(  ) throws ParseException
	{
		try
		{
			parser.open( templateDir );
		}
		catch ( FileNotFoundException e )
		{
			return;
		}

		parseElement( );
	}"
538,9060917.txt,none,"	private long allocateNewBlock(Nd nd, int blockSize) {
		short poolId = getMemoryPoolId(nd);
		int elementSize = getElementSize();
		long bytesNeeded = BlockHeader.BLOCK_HEADER_BYTES + blockSize * elementSize;
		// If we're close enough to filling the chunk that we wouldn't be able to fit any more elements anyway, allocate
		// the entire chunk. Although it wastes a small amount of space, it ensures that the blocks can be more easily
		// reused rather than being fragmented. It also allows freed blocks to be merged via the large block allocator.
		if (MAX_BYTES_IN_A_CHUNK - bytesNeeded < elementSize) {
			bytesNeeded = MAX_BYTES_IN_A_CHUNK;
		}
		long result = nd.getDB().malloc(bytesNeeded, poolId);
		BlockHeader.BLOCK_SIZE.put(nd, result, (short) blockSize);
		return result;
	}"
539,7475455.txt,none,"    @Override
    public void emitNullCheck(Value address, LIRFrameState state) {
        if (address.getValueKind().getPlatformKind() == AArch64Kind.DWORD) {
            CompressEncoding encoding = config.getOopEncoding();
            Value uncompressed = emitUncompress(address, encoding, false);
            append(new AArch64Move.NullCheckOp(asAddressValue(uncompressed), state));
        } else {
            super.emitNullCheck(address, state);
        }
    }"
540,4480085.txt,none,"    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof org.apache.drill.exec.proto.UserBitShared.NamePart)) {
        return super.equals(obj);
      }
      org.apache.drill.exec.proto.UserBitShared.NamePart other = (org.apache.drill.exec.proto.UserBitShared.NamePart) obj;

      boolean result = true;
      result = result && (hasType() == other.hasType());
      if (hasType()) {
        result = result && type_ == other.type_;
      }
      result = result && (hasName() == other.hasName());
      if (hasName()) {
        result = result && getName()
            .equals(other.getName());
      }
      result = result && (hasChild() == other.hasChild());
      if (hasChild()) {
        result = result && getChild()
            .equals(other.getChild());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }"
541,3919373.txt,none,"    public void setOuch2IsSet(boolean value) {
      if (!value) {
        this.ouch2 = null;
      }
    }"
542,6020057.txt,none,"    public void setActive(boolean active) {
        this.active = active;
    }"
543,5057041.txt,none,"        @Override
        public DirectWriteRolloverStrategy build() {
            int maxIndex = Integer.MAX_VALUE;
            if (maxFiles != null) {
                maxIndex = Integer.parseInt(maxFiles);
                if (maxIndex < 0) {
                    maxIndex = Integer.MAX_VALUE;
                } else if (maxIndex < 2) {
                    LOGGER.error(""Maximum files too small. Limited to "" + DEFAULT_MAX_FILES);
                    maxIndex = DEFAULT_MAX_FILES;
                }
            }
            final int compressionLevel = Integers.parseInt(compressionLevelStr, Deflater.DEFAULT_COMPRESSION);
            return new DirectWriteRolloverStrategy(maxIndex, compressionLevel, config.getStrSubstitutor(),
                    customActions, stopCustomActionsOnError, tempCompressedFilePattern);
        }"
544,3931329.txt,none,"  public static ServersShuttingDown getServersShuttingDown() {
    ServersShuttingDown servers = new ServersShuttingDown();
    // Add new servers to the list
    for (String server : Monitor.getMmi().serversShuttingDown) {
      servers.addServerShuttingDown(new ServerShuttingDownInformation(server));
    }
    return servers;
  }"
545,6795278.txt,none,"  @Override
  int recursionUnsafeHashCode() {
    return System.identityHashCode(this);
  }"
546,8574527.txt,none,"  public void updateFsReadTime(long t) {
    source.updateFsReadTime(t);
  }"
547,7950542.txt,none,"	@Override
	/** {@inheritDoc} */
	public StatementBlock.ReturnStatus_type hasReturn(final CompilationTimeStamp timestamp) {
		if (statementblock != null) {
//			if (StatementBlock.ReturnStatus_type.RS_NO.equals(statementblock.hasReturn(timestamp))) {
//				return StatementBlock.ReturnStatus_type.RS_NO;
//			}
//
//			return StatementBlock.ReturnStatus_type.RS_MAYBE;//it is not know if it will execute even once
			return hasReturn;
		}

		return StatementBlock.ReturnStatus_type.RS_NO;
	}"
548,9242897.txt,minor,"    protected void baselineLayout(int targetSpan, int axis, int[] offsets, int[] spans) {
        int totalAscent = (int)(targetSpan * getAlignment(axis));
        int totalDescent = targetSpan - totalAscent;

        int n = getViewCount();

        for (int i = 0; i < n; i++) {
            View v = getView(i);
            float align = v.getAlignment(axis);
            float viewSpan;

            if (v.getResizeWeight(axis) > 0) {
                // if resizable then resize to the best fit

                // the smallest span possible
                float minSpan = v.getMinimumSpan(axis);
                // the largest span possible
                float maxSpan = v.getMaximumSpan(axis);

                if (align == 0.0f) {
                    // if the alignment is 0 then we need to fit into the descent
                    viewSpan = Math.max(Math.min(maxSpan, totalDescent), minSpan);
                } else if (align == 1.0f) {
                    // if the alignment is 1 then we need to fit into the ascent
                    viewSpan = Math.max(Math.min(maxSpan, totalAscent), minSpan);
                } else {
                    // figure out the span that we must fit into
                    float fitSpan = Math.min(totalAscent / align,
                                             totalDescent / (1.0f - align));
                    // fit into the calculated span
                    viewSpan = Math.max(Math.min(maxSpan, fitSpan), minSpan);
                }
            } else {
                // otherwise use the preferred spans
                viewSpan = v.getPreferredSpan(axis);
            }

            offsets[i] = totalAscent - (int)(viewSpan * align);
            spans[i] = (int)viewSpan;
        }
    }"
549,7270024.txt,none,"    public void paintItem(ChartItem item, List<ItemSelection> highlighted,
                          List<ItemSelection> selected, Graphics2D g,
                          Rectangle dirtyArea, ChartContext context) {
//        if (!(item instanceof ProfilerXYItem))
//            throw new UnsupportedOperationException(""Unsupported item: "" + item); // NOI18N
//        if (!(context instanceof ProfilerXYChartComponent.Context))
//            throw new UnsupportedOperationException(""Unsupported context: "" + context);
        
        paint((SynchronousXYItem)item, highlighted, selected, g, dirtyArea,
              (SynchronousXYChartContext)context);
    }"
550,6128483.txt,none,"    @Override
    public int size()
    {
        return 4;
    }"
551,5657118.txt,none,"    @Override
    public Timestamp getTimestamp(int columnIndex) throws SQLException {
        throw unsupportedOperation(""getTimestamp"", columnIndex);
    }"
552,3800392.txt,none,"  @Override
  public void init(ExtractorOutput output) {
    extractorOutput = output;
    trackOutput = output.track(0, C.TRACK_TYPE_AUDIO);
    wavHeader = null;
    output.endTracks();
  }"
553,8033367.txt,none,"    public final void mRULE_ML_COMMENT() throws RecognitionException {
        try {
            int _type = RULE_ML_COMMENT;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalCrossReferenceProposalTestLanguage.g:169:17: ( '/*' ( options {greedy=false; } : . )* '*/' )
            // InternalCrossReferenceProposalTestLanguage.g:169:19: '/*' ( options {greedy=false; } : . )* '*/'
            {
            match(""/*""); 

            // InternalCrossReferenceProposalTestLanguage.g:169:24: ( options {greedy=false; } : . )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0=='*') ) {
                    int LA7_1 = input.LA(2);

                    if ( (LA7_1=='/') ) {
                        alt7=2;
                    }
                    else if ( ((LA7_1>='\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\uFFFF')) ) {
                        alt7=1;
                    }


                }
                else if ( ((LA7_0>='\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='\uFFFF')) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // InternalCrossReferenceProposalTestLanguage.g:169:52: .
            	    {
            	    matchAny(); 

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            match(""*/""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
554,5601781.txt,none,"    @Override
    public String getName()
    {
        return IASLanguageConstants.XMLList;
    }"
555,9248421.txt,none,"    protected SignatureVisitor createSignatureRemapper(final SignatureVisitor signatureVisitor) {
        return new SignatureRemapper(signatureVisitor, this);
    }"
556,7659358.txt,none,"	protected void notifyStateChanged(StateMachineContext<S, E> context) {
		if (log.isTraceEnabled()) {
			log.trace(""Notify notifyStateChanged "" + context);
		}
		ensembleListener.stateChanged(context);
	}"
557,8952306.txt,none,"    public void unsetDb_name() {
      this.db_name = null;
    }"
558,6975479.txt,none,"    @Override
    public SortedMap<R, Map<C, V>> rowMap() {
      Function<Map<C, V>, Map<C, V>> wrapper = unmodifiableWrapper();
      return Collections.unmodifiableSortedMap(Maps.transformValues(delegate().rowMap(), wrapper));
    }"
559,6289735.txt,none,"    @ManagedAttribute(value = ""idletimeout in MS"", readonly = true)
    public long getIdleTimeoutMs()
    {
        if(_idleTimeUnit==null)
            return 0;
        return _idleTimeUnit.toMillis(_idleTime);
    }"
560,3882178.txt,none,"  @RequiresSession
  public List<ClusterConfigEntity> getLatestConfigurations(long clusterId,
      StackId stackId) {
    StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
        stackId.getStackVersion());

    TypedQuery<ClusterConfigEntity> query = entityManagerProvider.get().createNamedQuery(
        ""ClusterConfigEntity.findLatestConfigsByStack"",
        ClusterConfigEntity.class);

    query.setParameter(""clusterId"", clusterId);
    query.setParameter(""stack"", stackEntity);

    return daoUtils.selectList(query);
  }"
561,6640728.txt,none,"  public static void v(Class<?> cls, String msg, Object arg1, Object arg2, Object arg3) {
    if (isLoggable(VERBOSE)) {
      v(cls, formatString(msg, arg1, arg2, arg3));
    }
  }"
562,8657644.txt,none,"    @Override public void writeExternal(ObjectOutput out) throws IOException {
        jobId.writeExternal(out);
        out.writeLong(msgId);
        out.writeInt(reducer);
        out.writeInt(off);
        U.writeByteArray(out, buf);
    }"
563,9197046.txt,none,"	public static boolean isValidReferenceForCompoundElement( Module module,
			DesignElement element )
	{
		ElementRefValue refValue = (ElementRefValue) element.getLocalProperty(
				module, IDesignElementModel.EXTENDS_PROP );
		if ( refValue == null )
			return true;

		if ( element.getDefn( ).isContainer( ) && !refValue.isResolved( ) )
			return false;

		// if any ancestor of this element loses extended element, return false

		DesignElement parent = element.getExtendsElement( );
		while ( parent != null )
		{
			if ( !isValidReferenceForCompoundElement( parent.getRoot( ), parent ) )
				return false;
			parent = parent.getExtendsElement( );
		}

		return true;
	}"
564,9506706.txt,none,"  private void initReleases() {
    if (this.release != null) {
      return;
    }
    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;
    List<ContainerIdProto> list = p.getReleaseList();
    this.release = new ArrayList<ContainerId>();

    for (ContainerIdProto c : list) {
      this.release.add(convertFromProtoFormat(c));
    }
  }"
565,5705708.txt,none,"    public static void logAccess(Integer requestId, InetAddress remoteAddress,
                                 Principal principal, String operation,
                                 String stormName, String accessResult) {
        if (stormName != null && accessResult != null) {
            LOG.info(accessLogBase + "" storm-name: {} access result: {}"",
                     requestId, remoteAddress, principal, operation, stormName, accessResult);
        } else if (accessResult != null) {
            LOG.info(accessLogBase + "" access result: {}"",
                     requestId, remoteAddress, principal, operation, accessResult);
        } else {
            // for completeness
            LOG.info(accessLogBase + "" storm-name: {}"",
                     requestId, remoteAddress, principal, operation, stormName);
        }
    }"
566,6151008.txt,none,"	public static void traceExecution(String processLabel,
			String[] cmdLineLabel, String[] environment) {
		StringBuffer sb = new StringBuffer();
		sb.append(""-----------------------------------------------\n""); //$NON-NLS-1$
		sb.append(""Running "").append(processLabel).append('\n'); //$NON-NLS-1$
		// sb.append(""Command line: "").append(cmdLineLabel).append('\n');
		sb.append(""Command line: ""); //$NON-NLS-1$
		for (int i = 0; i < cmdLineLabel.length; i++) {
			sb.append("" "" + cmdLineLabel[i]); //$NON-NLS-1$
		}
		sb.append(""\n""); //$NON-NLS-1$
		sb.append(""Environment:\n""); //$NON-NLS-1$
		for (int i = 0; i < environment.length; i++) {
			sb.append('\t').append(environment[i]).append('\n');
		}
		sb.append(""-----------------------------------------------\n""); //$NON-NLS-1$
		System.out.println(sb);
	}"
567,6512990.txt,none,"  public void setStackTraceTexts(String[] texts) {
    if (texts == null) {
      this.texts = null;
    } else {
      this.texts = texts.clone();
    }
  }"
568,9037421.txt,none,"	void chunkDirtied(final Chunk chunk) {
		if (chunk.fSequenceNumber < NUM_HEADER_CHUNKS) {
			return;
		}
		this.dirtyChunkSet.add(chunk);
	}"
569,7554762.txt,none,"	@Override
	protected String getGatewayClassName(Element element) {
		return ((StringUtils.hasText(element.getAttribute(""marshaller""))) ?
				MarshallingWebServiceOutboundGateway.class : SimpleWebServiceOutboundGateway.class).getName();
	}"
570,4088843.txt,none,"    @Override
    public void customize() {
        newScript(CUSTOMIZING)
                .body.append(
                        format(""mkdir -p %s"", getRunDir()),
                        format(""cp -R %s/dist/{conf,html,logs,sbin} %s"", getExpandedInstallDir(), getRunDir()))
                .execute();

        // Install static content archive, if specified
        String archiveUrl = entity.getConfig(NginxController.STATIC_CONTENT_ARCHIVE_URL);
        if (Strings.isNonBlank(archiveUrl)) {
            getEntity().deploy(archiveUrl);
        }

        customizationCompleted = true;
    }"
571,7161584.txt,minor,"    public synchronized void setNotificationRegistration(final String token) {
        // Get the NotificationRegistrationManager from the platform
        ConnectedDevicesNotificationRegistrationManager registrationManager = mPlatform.getNotificationRegistrationManager();

        // Create a NotificationRegistration obect to store all notification information
        ConnectedDevicesNotificationRegistration registration = new ConnectedDevicesNotificationRegistration();
        registration.setType(ConnectedDevicesNotificationType.FCM);
        registration.setToken(token);
        registration.setAppId(Secrets.FCM_SENDER_ID);
        registration.setAppDisplayName(""GraphNotificationsSample"");

        Log.i(TAG, ""Completing the RomeNotificationReceiver operation with token: "" + token);

        // For each prepared account, register for notifications
        for (final Account account : mAccounts) {
            registrationManager.registerForAccountAsync(account.getAccount(), registration)
                    .whenCompleteAsync((Boolean success, Throwable throwable) -> {
                        if (throwable != null) {
                            Log.e(TAG, ""Exception encountered in registerForAccountAsync"", throwable);
                        } else if (!success) {
                            Log.e(TAG, ""Failed to register account "" + account.getAccount().getId() + "" for cloud notifications!"");
                        } else {
                            Log.i(TAG, ""Successfully registered account "" + account.getAccount().getId() + "" for cloud notifications"");
                        }
                    });
        }

        // The two cases of receiving a new notification token are:
        // 1. A notification registration is asked for and now it is available. In this case there is a pending promise that was made
        //    at the time of requesting the information. It now needs to be completed.
        // 2. The account is already registered but for whatever reason the registration changes (GCM/FCM gives the app a new token)
        //
        // In order to most cleanly handle both cases set the new notification information and then trigger a re registration of all accounts
        // that are in good standing.
        RomeNotificationReceiver.setNotificationRegistration(registration);

        // For all the accounts which have been prepared successfully, perform SDK registration
        for (Account account : mAccounts) {
            if (account.getRegistrationState() == AccountRegistrationState.IN_APP_CACHE_AND_SDK_CACHE) {
                account.registerAccountWithSdkAsync();
            }
        }
    }"
572,6998192.txt,none,"    private void recomputeHeight() {
      this.height = 1 + Math.max(height(left), height(right));
    }"
573,8443651.txt,none,"    @Override
    protected void doStart() throws Exception {
        if (gson == null) {
            GsonBuilder builder = new GsonBuilder();
            if (exclusionStrategies != null && !exclusionStrategies.isEmpty()) {
                ExclusionStrategy[] strategies = exclusionStrategies.toArray(new ExclusionStrategy[exclusionStrategies.size()]);
                builder.setExclusionStrategies(strategies);
            }
            if (longSerializationPolicy != null) {
                builder.setLongSerializationPolicy(longSerializationPolicy);
            }
            if (fieldNamingPolicy != null) {
                builder.setFieldNamingPolicy(fieldNamingPolicy);
            }
            if (fieldNamingStrategy != null) {
                builder.setFieldNamingStrategy(fieldNamingStrategy);
            }
            if (serializeNulls) {
                builder.serializeNulls();
            }
            if (prettyPrint) {
                builder.setPrettyPrinting();
            }
            if (dateFormatPattern != null) {
                builder.setDateFormat(dateFormatPattern);
            }
            gson = builder.create();
        }
    }"
574,9012407.txt,major,"  @Override
  public boolean incrementToken() throws IOException {
    for(;;) {

      if (!remainingTokens.isEmpty()) {
        // clearAttributes();  // not currently necessary
        restoreState(remainingTokens.removeFirst());
        return true;
      }

      if (!input.incrementToken()) return false;

      int len = termAtt.length();
      if (len==0) return true; // pass through zero length terms
      
      int firstAlternativeIncrement = inject ? 0 : posAtt.getPositionIncrement();

      String v = termAtt.toString();
      String primaryPhoneticValue = encoder.doubleMetaphone(v);
      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);

      // a flag to lazily save state if needed... this avoids a save/restore when only
      // one token will be generated.
      boolean saveState=inject;

      if (primaryPhoneticValue!=null && primaryPhoneticValue.length() > 0 && !primaryPhoneticValue.equals(v)) {
        if (saveState) {
          remainingTokens.addLast(captureState());
        }
        posAtt.setPositionIncrement( firstAlternativeIncrement );
        firstAlternativeIncrement = 0;
        termAtt.setEmpty().append(primaryPhoneticValue);
        saveState = true;
      }

      if (alternatePhoneticValue!=null && alternatePhoneticValue.length() > 0
              && !alternatePhoneticValue.equals(primaryPhoneticValue)
              && !primaryPhoneticValue.equals(v)) {
        if (saveState) {
          remainingTokens.addLast(captureState());
          saveState = false;
        }
        posAtt.setPositionIncrement( firstAlternativeIncrement );
        termAtt.setEmpty().append(alternatePhoneticValue);
        saveState = true;
      }

      // Just one token to return, so no need to capture/restore
      // any state, simply return it.
      if (remainingTokens.isEmpty()) {
        return true;
      }

      if (saveState) {
        remainingTokens.addLast(captureState());
      }
    }
  }"
575,4618565.txt,none,"    public String getLabel() {
        return label;
    }"
576,5366640.txt,major,"    public PigServer(PigContext context, boolean connect) throws ExecException {
        this.pigContext = context;
        currDAG = new Graph(false);

        jobName = pigContext.getProperties().getProperty(
                PigContext.JOB_NAME,
                PigContext.JOB_NAME_PREFIX + "":DefaultJobName"");

        if (connect) {
            pigContext.connect();
        }

        this.filter = new BlackAndWhitelistFilter(this);

        addHadoopProperties();
        addJarsFromProperties();
        markPredeployedJarsFromProperties();

        if (ScriptState.get() == null) {
            // If Pig was started via command line, ScriptState should have been
            // already initialized in Main. If so, we should not overwrite it.
            ScriptState.start(pigContext.getExecutionEngine().instantiateScriptState());
        }
        PigStats.start(pigContext.getExecutionEngine().instantiatePigStats());

        // log ATS event includes the caller context
        String auditId = PigATSClient.getPigAuditId(pigContext);
        String callerId = (String)pigContext.getProperties().get(PigConfiguration.PIG_LOG_TRACE_ID);
        log.info(""Pig Script ID for the session: "" + auditId);
        if (callerId != null) {
            log.info(""Caller ID for session: "" + callerId);
        }
        if (Boolean.parseBoolean(pigContext.getProperties()
                .getProperty(PigConfiguration.PIG_ATS_ENABLED))) {
            if (Boolean.parseBoolean(pigContext.getProperties()
                    .getProperty(""yarn.timeline-service.enabled"", ""false""))) {
                PigATSClient.ATSEvent event = new PigATSClient.ATSEvent(auditId, callerId);
                try {
                    PigATSClient.getInstance().logEvent(event);
                } catch (Exception e) {
                    log.warn(""Error posting to ATS: "", e);
                }
            } else {
                log.warn(""ATS is disabled since""
                        + "" yarn.timeline-service.enabled set to false"");
            }

        }

        // set hdfs caller context
        Class callerContextClass = null;
        try {
            callerContextClass = Class.forName(""org.apache.hadoop.ipc.CallerContext"");
        } catch (ClassNotFoundException e) {
            // If pre-Hadoop 2.8.0, skip setting CallerContext
        }
        if (callerContextClass != null) {
            try {
                // Reflection for the following code since it is only available since hadoop 2.8.0:
                // CallerContext hdfsContext = new CallerContext.Builder(auditId).build();
                // CallerContext.setCurrent(hdfsContext);
                Class callerContextBuilderClass = Class.forName(""org.apache.hadoop.ipc.CallerContext$Builder"");
                Constructor callerContextBuilderConstruct = callerContextBuilderClass.getConstructor(String.class);
                Object builder = callerContextBuilderConstruct.newInstance(auditId);
                Method builderBuildMethod = builder.getClass().getMethod(""build"");
                Object hdfsContext = builderBuildMethod.invoke(builder);
                Method callerContextSetCurrentMethod = callerContextClass.getMethod(""setCurrent"", hdfsContext.getClass());
                callerContextSetCurrentMethod.invoke(callerContextClass, hdfsContext);
            } catch (Exception e) {
                // Shall not happen unless API change in future Hadoop commons
                throw new ExecException(e);
            }
        }
    }"
577,7674551.txt,none,"    protected void configWebView(QMUIWebViewContainer webViewContainer, QMUIWebView webView) {

    }"
578,4364662.txt,none,"    @Override
    public void writeTo(JsonWebKeys t, Class<?> type, Type genericType, Annotation[] annotations,
                        MediaType mediaType, MultivaluedMap<String, Object> httpHeaders,
                        OutputStream entityStream) throws IOException, WebApplicationException {
        JwkUtils.jwkSetToJson(t, entityStream);

    }"
579,6500087.txt,none,"	@Override
	public boolean appliesToPartially(GenerationSimpleRule rule, int i) {
		if(rule instanceof ButtonRule && ((((ButtonRule)rule).getStyle() & SWT.CHECK) != 0)){
			if(i == 0){
				bRule = (ButtonRule)rule;
			}
			if(bRule.equals(rule)){
				return true;
			}
			return false;
		}
		return false;
	}"
580,8937384.txt,none,"    public String getFieldName() {
      return _fieldName;
    }"
581,5450234.txt,none,"    default boolean hasDataFromHttp() {
        return false;
    }"
582,4661962.txt,none,"	@Override
	public void writeSnapshot(DataOutputView out) throws IOException {
		throw new UnsupportedOperationException(
			""This is a dummy config snapshot used only for backwards compatibility."");
	}"
583,8765693.txt,none,"  public static RMNode newNodeInfo(String rackName, String hostName,
                              final ResourceOption resourceOption, int port) {
    final NodeId nodeId = newNodeID(hostName, port);
    final String nodeAddr = hostName + "":"" + port;
    final String httpAddress = hostName;
    
    return new FakeRMNodeImpl(nodeId, nodeAddr, httpAddress,
        resourceOption, rackName, ""Me good"",
        port, hostName, null);
  }"
584,8965576.txt,none,"  @Override
  public void walk(Node nd) throws SemanticException {
    opStack.push(nd);
    dispatch(nd, opStack);

    // The rule has been applied, we bail out
    if (retMap.get(nd) != null) {
      opStack.pop();
      return;
    }

    // move all the children to the front of queue
    if (nd.getChildren() != null) {
      for (Node n : nd.getChildren()) {
        walk(n);
      }
    }

    opStack.pop();
  }"
585,8300534.txt,major,"	private void toggleNature(IProject project) {
		try {
			IProjectDescription description = project.getDescription();
			String[] natures = description.getNatureIds();
			for (int i = 0; i < natures.length; ++i) {
				if (IAcceleoConstants.ACCELEO_NATURE_ID.equals(natures[i])) {
					// Remove the nature
					String[] newNatures = new String[natures.length - 1];
					System.arraycopy(natures, 0, newNatures, 0, i);
					System.arraycopy(natures, i + 1, newNatures, i, natures.length - i - 1);
					description.setNatureIds(newNatures);
					project.setDescription(description, null);
					List<IFile> files = new ArrayList<IFile>();
					members(files, project);
					for (Iterator<IFile> itFiles = files.iterator(); itFiles.hasNext();) {
						IFile file = itFiles.next();
						try {
							file.deleteMarkers(AcceleoMarkerUtils.PROBLEM_MARKER_ID, false,
									IResource.DEPTH_ZERO);
							file.deleteMarkers(AcceleoMarkerUtils.WARNING_MARKER_ID, false,
									IResource.DEPTH_ZERO);
							file.deleteMarkers(AcceleoMarkerUtils.INFO_MARKER_ID, false, IResource.DEPTH_ZERO);
						} catch (CoreException e) {
							AcceleoUIActivator.getDefault().getLog()
									.log(new Status(IStatus.ERROR, AcceleoUIActivator.PLUGIN_ID, e
											.getMessage(), e));
						}
					}
					return;
				}
			}
			// Add the nature
			String[] newNatures = new String[natures.length + 2];
			System.arraycopy(natures, 0, newNatures, 2, natures.length);

			newNatures[0] = ""org.eclipse.pde.PluginNature""; //$NON-NLS-1$
			newNatures[1] = IAcceleoConstants.ACCELEO_NATURE_ID;
			description.setNatureIds(newNatures);
			project.setDescription(description, null);

			// Override the "".project"" anyway
			AcceleoProject acceleoProject = AcceleowizardmodelFactory.eINSTANCE.createAcceleoProject();
			acceleoProject.setName(project.getName());
			acceleoProject.setJre(""J2SE-1.5""); //$NON-NLS-1$
			AcceleoUIGenerator.getDefault().generateDotProject(acceleoProject, project);

			// Generate the build.acceleo
			AcceleoUIGenerator.getDefault().generateBuildAcceleo(acceleoProject, project);

			IFile buildProperties = project.getFile(""build.properties""); //$NON-NLS-1$
			if (buildProperties.exists()) {
				Properties properties = new Properties();
				try {
					properties.load(buildProperties.getContents());
					properties.put(""customBuildCallbacks"", ""build.acceleo""); //$NON-NLS-1$//$NON-NLS-2$
					properties.store(new FileOutputStream(buildProperties.getLocation().toFile()), """"); //$NON-NLS-1$
				} catch (IOException e) {
					AcceleoUIActivator.log(e, true);
				}
			} else {
				AcceleoUIGenerator.getDefault().generateBuildProperties(acceleoProject, project);
			}

			project.refreshLocal(IResource.DEPTH_INFINITE, new NullProgressMonitor());
		} catch (CoreException e) {
			AcceleoUIActivator.getDefault().getLog().log(
					new Status(IStatus.ERROR, AcceleoUIActivator.PLUGIN_ID, e.getMessage(), e));
		}
	}"
586,4527162.txt,none,"    @Transactional
    @Override
    public CommandProcessingResult processCommand(final JsonCommand command) {
        return this.depositAccountWritePlatformService.depositToRDAccount(command.entityId(), command);
    }"
587,3780834.txt,none,"  @Override
  public final void writeToStream(DataOutputStream output) throws IOException {
    output.writeUTF(uri.toString());
    output.writeBoolean(isRemoveAction);
    output.writeInt(data.length);
    output.write(data);
    output.writeInt(keys.size());
    for (int i = 0; i < keys.size(); i++) {
      writeKey(output, keys.get(i));
    }
  }"
588,4383044.txt,none,"    public JAXRSBinding(BindingInfo bindingInfo) {
        super();
        this.bindingInfo = bindingInfo;
    }"
589,8431225.txt,none,"    @Override
    protected void configureFormat(FixedWidthFormat format) {
        super.configureFormat(format);

        if (padding != null) {
            format.setPadding(padding);
        }
    }"
590,4083880.txt,none,"    @Override
    public IBinaryHashFunction createBinaryHashFunction() {

        return new IBinaryHashFunction() {

            @Override
            public int hash(byte[] bytes, int offset, int length) {
                return IntegerPointable.getInteger(bytes, offset + 4);
            }
        };
    }"
591,7374084.txt,none,"    public ProjectCloseListener(final ProjectRepositoryManager projectManager) {
        Check.notNull(projectManager, ""projectManager""); //$NON-NLS-1$

        this.projectManager = projectManager;
    }"
592,6579602.txt,none,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_1 = input.LA(1);

                         
                        int index21_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalEntities()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA21_2 = input.LA(1);

                         
                        int index21_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred42_InternalEntities()) ) {s = 3;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index21_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }"
593,5907678.txt,none,"  public void setOp(int opPos, int value)
  {
     m_opMap.setElementAt(value,opPos);
  }"
594,5202532.txt,none,"        public RequestItem(final String requestString) {
            final List<String> reqComponents = Arrays.asList(requestString.split("":""));
            final int numComponents = reqComponents.size();
            if (numComponents < EXPECTED_REQUEST_COMPONENTS) {
                throw new IllegalArgumentException(String.format(""Cannot perform a FlowStatusQuery request for '%s'.  Expected at least %d components but got %d."",
                        requestString, EXPECTED_REQUEST_COMPONENTS, numComponents));
            }
            this.queryType = reqComponents.get(0).toLowerCase();
            if (numComponents == 2) {
                this.options = reqComponents.get(1);
            } else {
                this.identifier = reqComponents.get(1);
                this.options = reqComponents.get(2);
            }
            // normalize options
            this.options = this.options.toLowerCase();
        }"
595,8326667.txt,none,"		@Override
		public Object visit(AnnotationPointcut node, Object data) {
			hasDynamicContent = true;
			return null;
		}"
596,4345368.txt,none,"    public OutputStream setBinaryStream(long arg0) throws SQLException {
        throw new SQLException(""not implemented for this test"");
    }"
597,8030709.txt,none,"	protected IType[] getAllSuperTypes(IType type) throws JavaModelException {
		/*
		 * https://stackoverflow.com/questions/49611587/developing-a-eclipse-how-to-get-all-inherited-methods-from-a-icompilationunit
		 */
		ITypeHierarchy th = type.newTypeHierarchy(new NullProgressMonitor());
		IType[] superTypes = th.getAllSuperclasses(type);
		return superTypes;
	}"
598,5164745.txt,none,"    @Override
    protected Query beforeRewrite(Query query) {
        query = query.clone();

        JdbcDataContext dataContext = getDataContext();
        if (dataContext != null) {
            String identifierQuoteString = dataContext.getIdentifierQuoteString();
            if (identifierQuoteString != null) {
                List<SelectItem> selectItems = query.getSelectClause().getItems();
                for (SelectItem item : selectItems) {
                    String alias = item.getAlias();
                    if (needsQuoting(alias, identifierQuoteString)) {
                        item.setAlias(identifierQuoteString + alias + identifierQuoteString);
                    }
                }
                List<FromItem> fromItems = query.getFromClause().getItems();
                for (FromItem item : fromItems) {
                    String alias = item.getAlias();
                    if (needsQuoting(alias, identifierQuoteString)) {
                        item.setAlias(identifierQuoteString + alias + identifierQuoteString);
                    }
                }
            }
        }
        return query;
    }"
599,4302593.txt,none,"    public synchronized void createPrincipal(String principal,
                                String password) throws KrbException {
        kadmin.addPrincipal(principal, password);
    }"
600,9012151.txt,none,"  @Override
  public int length() {
    return this.chars.length;
  }"
601,4445309.txt,none,"    @Override
    public void startField() throws IOException {
      if (!skipNullFields || this.reader.isSet()) {
        if (fieldName.equals(Statistic.ROWCOUNT)
            || fieldName.equals(Statistic.NNROWCOUNT)
            || fieldName.equals(Statistic.NDV)
            || fieldName.equals(Statistic.SUM_DUPS)) {
          nextField = fieldName;
        }
      }
    }"
602,3843851.txt,none,"  ResourceInstance createStackVersionResource(String stackName,
                                              String stackVersion) {
    Map<Resource.Type, String> mapIds = new HashMap<>();
    mapIds.put(Resource.Type.Stack, stackName);
    mapIds.put(Resource.Type.StackVersion, stackVersion);

    return createResource(Resource.Type.StackVersion, mapIds);
  }"
603,4933194.txt,none,"    private boolean exists( Group group )
    {
        String index = group.getName();
        try
        {
            findGroup( index );
            return true;
        }
        catch( NoSuchPrincipalException e )
        {
            return false;
        }
    }"
604,9121203.txt,minor,"	private ICompletionProposal[] getRelevantProposals( ITextViewer viewer,
			int offset ) throws BadLocationException
	{
		if ( lastProposals != null )
		{
			ArrayList relevantProposals = new ArrayList( 10 );

			String word = ( findWord( viewer, offset - 1 ) ).toLowerCase( );
			//Search for this word in the list

			for ( int n = 0; n < lastProposals.length; n++ )
			{
				if ( stripQuotes( lastProposals[n].getDisplayString( )
						.toLowerCase( ) ).startsWith( word ) )
				{
					CompletionProposal proposal = new CompletionProposal( lastProposals[n].getDisplayString( ),
							offset - word.length( ),
							word.length( ),
							lastProposals[n].getDisplayString( ).length( ) );
					relevantProposals.add( proposal );
				}
			}

			if ( relevantProposals.size( ) > 0 )
			{
				return (ICompletionProposal[]) relevantProposals.toArray( new ICompletionProposal[]{} );
			}
		}

		return null;
	}"
605,4005583.txt,none,"            public Component getTreeCellRendererComponent(JTree tree,
                                                          Object value,
                                                          boolean sel,
                                                          boolean expanded,
                                                          boolean leaf,
                                                          int row,
                                                          boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded,
                                                   leaf, row, hasFocus);
                switch (getNodeType(value)) {
                case Node.ELEMENT_NODE:
                    setIcon(elementIcon);
                    break;
                case Node.COMMENT_NODE:
                    setIcon(commentIcon);
                    break;
                case Node.PROCESSING_INSTRUCTION_NODE:
                    setIcon(piIcon);
                    break;
                case Node.TEXT_NODE:
                case Node.CDATA_SECTION_NODE:
                    setIcon(textIcon);
                    break;
                }
                return this;
            }"
606,4319422.txt,none,"	private void createTriggerDependencies
	(
        TriggerDescriptorList       tdl,
		Dependent					dependent
	)
		throws StandardException
	{
		CompilerContext 			compilerContext = getCompilerContext();

        for (TriggerDescriptor td : tdl) {
            /*
            ** The dependent now depends on this trigger.
            ** The default dependent is the statement being compiled.
            */
            if (dependent == null) {
                compilerContext.createDependency(td);
            } else {
                compilerContext.createDependency(dependent, td);
            }
        }
	}"
607,4322497.txt,none,"	public Connection getConnection() {
		Connection conn = null;
		String jdbcurl = """";
		try {
			NsTest.logger.println(getThread_id()
					+ "" is getting a connection to the database..."");

			if (NsTest.embeddedMode) {
				jdbcurl = NsTest.embedDbURL + "";"" + NsTest.bootPwd;
			} else {
				if (NsTest.driver_type.equalsIgnoreCase(""DerbyClient""))
					jdbcurl = NsTest.clientDbURL + "";"" + NsTest.bootPwd;

			}
			NsTest.logger.println(""-->Thread "" + getThread_id()
					+ "" starting with url "" + jdbcurl + "" <--"");
			conn = DriverManager.getConnection(jdbcurl, NsTest.prop);
		} catch (Exception e) {
            e.printStackTrace( NsTest.logger );
			NsTest.logger.println(""FAIL: "" + getThread_id()
					+ "" could not get the database connection"");
			printException(""Failed getting database connection using ""
					+ jdbcurl, e);
		}
		// for statistical purposes, add one to the num of connections makde
		NsTest.addStats(NsTest.CONNECTIONS_MADE, 1);
		NsTest.logger.println(""Connection number: "" + NsTest.numConnections);
		return conn; // null if there was a problem, else a valid connection
	}"
608,8968711.txt,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }"
609,4496060.txt,none,"        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return ""minorType"";
                case 2: return ""mode"";
                case 3: return ""width"";
                case 4: return ""precision"";
                case 5: return ""scale"";
                case 6: return ""timeZone"";
                case 7: return ""subType"";
                default: return null;
            }
        }"
610,4826023.txt,none,"    private Persistability determinePersistability() {
        final NotPersistableFacet notPersistableFacet = getFacet(NotPersistableFacet.class);
        if (notPersistableFacet == null) {
            return Persistability.USER_PERSISTABLE;
        }
        final NotPersistable.By initiatedBy = notPersistableFacet.value();
        if (initiatedBy == NotPersistable.By.USER_OR_PROGRAM) {
            return Persistability.TRANSIENT;
        } else if (initiatedBy == NotPersistable.By.USER) {
            return Persistability.PROGRAM_PERSISTABLE;
        } else {
            return Persistability.USER_PERSISTABLE;
        }
    }"
611,7248409.txt,none,"    protected void notifyCannotPerform() {
        DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(
                NbBundle.getMessage(DataSourceAction.class,
                ""MSG_Cannot_perform_action_in_this_context""), // NOI18N
                NotifyDescriptor.ERROR_MESSAGE));
    }"
612,5836088.txt,none,"    private String getUnquoted() {
        while (i < size) {
            parseLiteral();
            parseEL();
        }
        return result.toString();
    }"
613,9290877.txt,none,"    public int lastIndexOf(Object o) {
        int index = size;
        if (o == null) {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (x.item == null)
                    return index;
            }
        } else {
            for (Node<E> x = last; x != null; x = x.prev) {
                index--;
                if (o.equals(x.item))
                    return index;
            }
        }
        return -1;
    }"
614,8140898.txt,none,"	protected void transform(XtendConstructor source, JvmGenericType container) {
		JvmConstructor constructor = typesFactory.createJvmConstructor();
		container.getMembers().add(constructor);
		associator.associatePrimary(source, constructor);
		JvmVisibility visibility = source.getVisibility();
		constructor.setSimpleName(container.getSimpleName());
		constructor.setVisibility(visibility);
		for (XtendParameter parameter : source.getParameters()) {
			translateParameter(constructor, parameter);
		}
		copyAndFixTypeParameters(source.getTypeParameters(), constructor);
		for (JvmTypeReference exception : source.getExceptions()) {
			constructor.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));
		}
		translateAnnotationsTo(source.getAnnotations(), constructor);
		setBody(constructor, source.getExpression());
		jvmTypesBuilder.copyDocumentationTo(source, constructor);
	}"
615,7111061.txt,none,"    private void addSqlite() {

        ClassVisitorFactory classVisitorFactory = new ClassVisitorFactory() {
            @Override
            public ClassVisitor create(ClassInstrumentationData classInstrumentationData, ClassWriter classWriter) {
                HashSet<String> ctorSignatures = new HashSet<String>();
                ctorSignatures.add(""(Lorg/sqlite/SQLiteConnection;Ljava/lang/String;)V"");
                final PreparedStatementMetaData metaData1 = new PreparedStatementMetaData(ctorSignatures);
                metaData1.sqlStringInCtor = 2;
                return new PreparedStatementClassVisitor(classInstrumentationData, classWriter, metaData1);
            }
        };

        String className = ""org/sqlite/core/CorePreparedStatement"";
        ClassInstrumentationData data =
                new ClassInstrumentationData(className, InstrumentedClassType.SQL, classVisitorFactory)
                        .setReportCaughtExceptions(false)
                        .setReportExecutionTime(true);
        data.addMethod(""executeBatch"", ""()[I"", false, true, 0, new MethodVisitorFactory() {
            @Override
            public MethodVisitor create(MethodInstrumentationDecision decision, int access, String desc, String owner, String methodName, MethodVisitor methodVisitor, ClassToMethodTransformationData additionalData) {
                return new PreparedStatementMethodForExecuteBatchVisitor(access, desc, owner, methodName, methodVisitor, null);
            }
        });
        classesToInstrument.put(className, data);

        doAdd(null, ""org/sqlite/jdbc3/JDBC3PreparedStatement"");
    }"
616,8719559.txt,none,"int readBlock() {
	int size = -1;
	try {
		size = inputStream.read();
		if (size == -1) {
			SWT.error(SWT.ERROR_INVALID_IMAGE);
		}
		block[0] = (byte)size;
		size = inputStream.read(block, 1, size);
		if (size == -1) {
			SWT.error(SWT.ERROR_INVALID_IMAGE);
		}
	} catch (Exception e) {
		SWT.error(SWT.ERROR_IO, e);
	}
	return size;
}"
617,7787736.txt,none,"		public long getTo()
		{
			if (getOf() == 0)
			{
				return 0;
			}
			return Math.min(getOf(), getFrom() + pageable.getItemsPerPage() - 1);
		}"
618,6052388.txt,none,"	public static Dataset[] generateCoordinates(Dataset angles, final double[] geometricParameters) {
		if (geometricParameters.length != PARAMETERS)
			throw new IllegalArgumentException(""Need "" + PARAMETERS + "" parameters"");

		Dataset[] coords = new Dataset[2];

		DoubleDataset x = DatasetFactory.zeros(DoubleDataset.class, angles.getShape());
		DoubleDataset y = DatasetFactory.zeros(DoubleDataset.class, angles.getShape());
		coords[0] = x;
		coords[1] = y;

		final double ca = Math.cos(geometricParameters[2]);
		final double sa = Math.sin(geometricParameters[2]);
		final IndexIterator it = angles.getIterator();

		int i = 0;
		
		while (it.hasNext()) {
			final double t = angles.getElementDoubleAbs(it.index);
			final double ct = Math.cos(t);
			final double st = Math.sin(t);
			x.setAbs(i, geometricParameters[3] + geometricParameters[0]*ca*ct - geometricParameters[1]*sa*st);
			y.setAbs(i, geometricParameters[4] + geometricParameters[0]*sa*ct + geometricParameters[1]*ca*st);
			i++;
		}
		return coords;
	}"
619,6670656.txt,none,"  protected AccessibleEditPart getAccessibleEditPart() {
		
	  if (accessiblePart ==null)
	  {
		  accessiblePart = new AccessibleGraphicalEditPart(){
		
			public void getName(AccessibleEvent e) {		 
				e.result = getReaderText();
			}
		};
	  }
	  return accessiblePart;
	}"
620,3992626.txt,minor,"    protected float removeInstanceTime(InstanceTime time, boolean isBegin) {
        // Trace.enter(this, ""removeInstanceTime"", new Object[] { time, new Boolean(isBegin) } ); try {
        hasPropagated = true;
        List instanceTimes = isBegin ? beginInstanceTimes : endInstanceTimes;
        int index = Collections.binarySearch(instanceTimes, time);
        for (int i = index; i >= 0; i--) {
            InstanceTime it = (InstanceTime) instanceTimes.get(i);
            if (it == time) {
                instanceTimes.remove(i);
                break;
            }
            if (it.compareTo(time) != 0) {
                break;
            }
        }
        int len = instanceTimes.size();
        for (int i = index + 1; i < len; i++) {
            InstanceTime it = (InstanceTime) instanceTimes.get(i);
            if (it == time) {
                instanceTimes.remove(i);
                break;
            }
            if (it.compareTo(time) != 0) {
                break;
            }
        }
        shouldUpdateCurrentInterval = true;
        float ret;
        if (root.isSampling() && !isSampling) {
            ret = sampleAt(root.getCurrentTime(), root.isHyperlinking());
        } else {
            ret = Float.POSITIVE_INFINITY;
        }
        hasPropagated = false;
        root.currentIntervalWillUpdate();
        return ret;
        // } finally { Trace.exit(); }
    }"
621,8779700.txt,none,"    @Override
    public void setKeyComparator(Class<? extends WritableComparator> cmpcl) {
      super.setKeyComparator(cmpcl);
      for (Node n : kids) {
        n.setKeyComparator(cmpcl);
      }
    }"
622,8845708.txt,none,"      public org.apache.airavata.sharing.registry.models.Entity getResult() throws org.apache.airavata.sharing.registry.models.SharingRegistryException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException(""Method call not finished!"");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntity();
      }"
623,4336814.txt,major,"    public void afterValue( K key, V value ) throws LdapException, CursorException
    {
        checkNotClosed();
        /*
         * There is a subtle difference between after and before handling
         * with duplicate key values.  Say we have the following tuples:
         *
         * (0, 0)
         * (1, 1)
         * (1, 2)
         * (1, 3)
         * (2, 2)
         *
         * If we request an after cursor on (1, 2).  We must make sure that
         * the container cursor does not advance after the entry with key 1
         * since this would result in us skip returning (1. 3) on the call to
         * next which will incorrectly return (2, 2) instead.
         *
         * So if the value is null in the element then we don't care about
         * this obviously since we just want to advance past the duplicate key
         * values all together.  But when it is not null, then we want to
         * go right before this key instead of after it.
         */

        if ( value == null )
        {
            containerCursor.after( new Tuple<K, DupsContainer<V>>( key, null ) );
        }
        else
        {
            containerCursor.before( new Tuple<K, DupsContainer<V>>( key, null ) );
        }

        if ( containerCursor.next() )
        {
            containerTuple.setBoth( containerCursor.get() );
            DupsContainer<V> values = containerTuple.getValue();

            if ( values.isArrayTree() )
            {
                ArrayTree<V> set = values.getArrayTree();
                dupsCursor = new ArrayTreeCursor<>( set );
            }
            else
            {
                try
                {
                    BTree tree = table.getBTree( values.getBTreeRedirect() );
                    dupsCursor = new KeyBTreeCursor<>( tree, table.getValueComparator() );
                }
                catch ( IOException e )
                {
                    throw new CursorException( e );
                }
            }

            if ( value == null )
            {
                return;
            }

            // only advance the dupsCursor if we're on same key
            if ( table.getKeyComparator().compare( containerTuple.getKey(), key ) == 0 )
            {
                dupsCursor.after( value );
            }

            return;
        }

        clearValue();
        containerTuple.setKey( null );
        containerTuple.setValue( null );
    }"
624,4930104.txt,none,"    private static void renderChildren(List<Tree> children, int indent,
        boolean parentLabelNull, StringBuilder sb) {
      boolean firstSibling = true;
      boolean leftSibIsPreTerm = true; // counts as true at beginning
      for (Tree child : children) {
        renderTree(child, indent, parentLabelNull, firstSibling, leftSibIsPreTerm, false, sb);
        leftSibIsPreTerm = child.isPreTerminal();
        firstSibling = false;
      }
    }"
625,5488746.txt,none,"    @Override
    public Content getMessageContent(final long messageId, final long limit, boolean returnJson, boolean decompressBeforeLimiting)
    {
        final MessageContentFinder messageFinder = new MessageContentFinder(messageId);
        visit(messageFinder);
        if (messageFinder.isFound())
        {
            return createMessageContent(messageFinder.getMessageReference(), returnJson, limit, decompressBeforeLimiting);
        }
        else
        {
            return null;
        }
    }"
626,6674458.txt,none,"	@Override
	protected void formatPost(IJSONNode node, IRegion region, StringBuilder source) {
		IJSONCleanupStrategy stgy = getCleanupStrategy(node);

		if (region.getOffset() >= 0 && region.getLength() >= 0) {
			IStructuredDocument document = node.getOwnerDocument().getModel().getStructuredDocument();
			CompoundRegion[] regions = getRegionsWithoutWhiteSpaces(document, region, stgy);
			if (regions.length > 0 && regions[regions.length - 1] != null) {
				CompoundRegion r = regions[regions.length - 1];
				if (r != null && r.getType() == JSONRegionContexts.JSON_ARRAY_CLOSE) {
					source.append(decoratedRegion(r, 0, stgy));
				}
			}
		}
	}"
627,6403812.txt,none,"	boolean persist() {
		XMLMemento persistedState = (XMLMemento) getEditorState();
		if (persistedState == null)
			return false;

		StringWriter writer = new StringWriter();
		try {
			persistedState.save(writer);
			getModel().getPersistedState().put(MEMENTO_KEY, writer.toString());
		} catch (IOException e) {
			WorkbenchPlugin.log(e);
			return false;
		}

		return true;
	}"
628,6945437.txt,none,"    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }"
629,4457799.txt,none,"      public boolean hasFragmentJson() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }"
630,7273013.txt,none,"    private String dumpStack(ThreadInfo ti) {
        StringBuilder buffer = new StringBuilder();
        buffer.append(""*** Thread stack dump:\n""); // NOI18N

        for (int i = ti.stackTopIdx; i >= 0; i--) {
            DebugInfoCollector collector = new DebugInfoCollector();
            TimedCPUCCTNode frame = ti.stack[i];
            RuntimeCCTNodeProcessor.process(frame, collector);
            buffer.append(collector.getInfo(frame)).append('\n'); // NOI18N
        }

        return buffer.toString();
    }"
631,7576371.txt,major,"		@Override
		@Nullable
		public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
			// Invocation on EntityManager interface coming in...

			if (method.getName().equals(""equals"")) {
				// Only consider equal when proxies are identical.
				return (proxy == args[0]);
			}
			else if (method.getName().equals(""hashCode"")) {
				// Use hashCode of EntityManager proxy.
				return hashCode();
			}
			else if (method.getName().equals(""toString"")) {
				// Deliver toString without touching a target EntityManager.
				return ""Shared EntityManager proxy for target factory ["" + this.targetFactory + ""]"";
			}
			else if (method.getName().equals(""getEntityManagerFactory"")) {
				// JPA 2.0: return EntityManagerFactory without creating an EntityManager.
				return this.targetFactory;
			}
			else if (method.getName().equals(""getCriteriaBuilder"") || method.getName().equals(""getMetamodel"")) {
				// JPA 2.0: return EntityManagerFactory's CriteriaBuilder/Metamodel (avoid creation of EntityManager)
				try {
					return EntityManagerFactory.class.getMethod(method.getName()).invoke(this.targetFactory);
				}
				catch (InvocationTargetException ex) {
					throw ex.getTargetException();
				}
			}
			else if (method.getName().equals(""unwrap"")) {
				// JPA 2.0: handle unwrap method - could be a proxy match.
				Class<?> targetClass = (Class<?>) args[0];
				if (targetClass != null && targetClass.isInstance(proxy)) {
					return proxy;
				}
			}
			else if (method.getName().equals(""isOpen"")) {
				// Handle isOpen method: always return true.
				return true;
			}
			else if (method.getName().equals(""close"")) {
				// Handle close method: suppress, not valid.
				return null;
			}
			else if (method.getName().equals(""getTransaction"")) {
				throw new IllegalStateException(
						""Not allowed to create transaction on shared EntityManager - "" +
						""use Spring transactions or EJB CMT instead"");
			}

			// Determine current EntityManager: either the transactional one
			// managed by the factory or a temporary one for the given invocation.
			EntityManager target = EntityManagerFactoryUtils.doGetTransactionalEntityManager(
					this.targetFactory, this.properties, this.synchronizedWithTransaction);

			if (method.getName().equals(""getTargetEntityManager"")) {
				// Handle EntityManagerProxy interface.
				if (target == null) {
					throw new IllegalStateException(""No transactional EntityManager available"");
				}
				return target;
			}
			else if (method.getName().equals(""unwrap"")) {
				Class<?> targetClass = (Class<?>) args[0];
				if (targetClass == null) {
					return (target != null ? target : proxy);
				}
				// We need a transactional target now.
				if (target == null) {
					throw new IllegalStateException(""No transactional EntityManager available"");
				}
				// Still perform unwrap call on target EntityManager.
			}
			else if (transactionRequiringMethods.contains(method.getName())) {
				// We need a transactional target now, according to the JPA spec.
				// Otherwise, the operation would get accepted but remain unflushed...
				if (target == null || (!TransactionSynchronizationManager.isActualTransactionActive() &&
						!target.getTransaction().isActive())) {
					throw new TransactionRequiredException(""No EntityManager with actual transaction available "" +
							""for current thread - cannot reliably process '"" + method.getName() + ""' call"");
				}
			}

			// Regular EntityManager operations.
			boolean isNewEm = false;
			if (target == null) {
				logger.debug(""Creating new EntityManager for shared EntityManager invocation"");
				target = (!CollectionUtils.isEmpty(this.properties) ?
						this.targetFactory.createEntityManager(this.properties) :
						this.targetFactory.createEntityManager());
				isNewEm = true;
			}

			// Invoke method on current EntityManager.
			try {
				Object result = method.invoke(target, args);
				if (result instanceof Query) {
					Query query = (Query) result;
					if (isNewEm) {
						Class<?>[] ifcs = ClassUtils.getAllInterfacesForClass(query.getClass(), this.proxyClassLoader);
						result = Proxy.newProxyInstance(this.proxyClassLoader, ifcs,
								new DeferredQueryInvocationHandler(query, target));
						isNewEm = false;
					}
					else {
						EntityManagerFactoryUtils.applyTransactionTimeout(query, this.targetFactory);
					}
				}
				return result;
			}
			catch (InvocationTargetException ex) {
				throw ex.getTargetException();
			}
			finally {
				if (isNewEm) {
					EntityManagerFactoryUtils.closeEntityManager(target);
				}
			}
		}"
632,8601907.txt,none,"  void updateCachedLocationOnError(HRegionLocation loc, Throwable exception) {
    AsyncRegionLocatorHelper.updateCachedLocationOnError(loc, exception, this::getCachedLocation,
      this::addLocationToCache, this::removeLocationFromCache);
  }"
633,4330910.txt,none,"    @Override
    public void close() throws IOException
    {
        if ( IS_DEBUG )
        {
            LOG_CURSOR.debug( ""Closing LessEqCursor {}"", this );
        }

        super.close();

        if ( userIdxCursor != null )
        {
            userIdxCursor.close();
        }
        else
        {
            uuidIdxCursor.close();
            uuidCandidate = null;
        }
    }"
634,4486552.txt,none,"    private String getMetaDataValue(MetaDataHit mdh) throws FilterException
    {
        for (int i = 0; i < iv_metaFieldNames.length; i++)
        {
            String mdVal = mdh.getMetaFieldValue(iv_metaFieldNames[i]);
            if (mdVal != null)
            {
                return mdVal;
            }
        }
        throw new FilterException(
            new Exception(""Unable to extract meta data from MetaDataHit object.""));
    }"
635,8286887.txt,none,"        public String command() {
            String flags;
            if (add) {
                flags = "" +FLAGS "";
            } else if (subtract) {
                flags = "" -FLAGS "";
            } else {
                flags = "" FLAGS "";
            }
            if (silent) {
                flags = flags + "".SILENT"";
            }
            return ""STORE "" + msn + flags + this.flags + "")"";
        }"
636,6610923.txt,none,"    public final void mClass() throws RecognitionException {
        try {
            int _type = Class;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:101:7: ( 'class' )
            // InternalTypesLexer.g:101:9: 'class'
            {
            match(""class""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
637,9189120.txt,none,"		protected void rollback( )
		{
			data.setAlias( originalAlias );
			data.setRealDisplayName( originalDisplayName );
			data.setDisplayNameKey( originalDisplayNameKey );
		}"
638,7739565.txt,none,"    @Override
    public void unexport() {
        super.unexport();
        exporterMap.remove(key);
    }"
639,7306360.txt,none,"	private Object readTypeToken(TypeToken<?> token, HttpInputMessage inputMessage) throws IOException {
		Reader json = new InputStreamReader(inputMessage.getBody(), getCharset(inputMessage.getHeaders()));
		try {
			return this.gson.fromJson(json, token.getType());
		}
		catch (JsonParseException ex) {
			throw new HttpMessageNotReadableException(""Could not read JSON: "" + ex.getMessage(), ex);
		}
	}"
640,6637982.txt,none,"    private static GraphRequest createGrantedPermissionsRequest(
            AccessToken accessToken,
            GraphRequest.Callback callback
    ) {
        Bundle parameters = new Bundle();
        return new GraphRequest(
                accessToken,
                ME_PERMISSIONS_GRAPH_PATH,
                parameters,
                HttpMethod.GET,
                callback);
    }"
641,6212569.txt,none,"  public Element replaceWith(NewElement newElement) {
    checkNotRemoved();
    notPermittedOnRootElement();
    requireNonNull(newElement, ""Required not null new element"");
    insertAfter(newElement);
    final Element inserted = getNextSibling();
    remove();
    return inserted;
  }"
642,5492178.txt,minor,"    @Override
    public boolean makeAcquisitionUnstealable(final MessageInstanceConsumer<?> consumer)
    {
        EntryState state = _state;
        if(state instanceof StealableConsumerAcquiredState
           && ((StealableConsumerAcquiredState) state).getConsumer() == consumer)
        {
            UnstealableConsumerAcquiredState unstealableState = ((StealableConsumerAcquiredState) state).getUnstealableState();
            boolean updated = _stateUpdater.compareAndSet(this, state, unstealableState);
            if(updated)
            {
                notifyStateChange(state, unstealableState);
            }
            return updated;
        }
        return state instanceof UnstealableConsumerAcquiredState
               && ((UnstealableConsumerAcquiredState) state).getConsumer() == consumer;
    }"
643,3811653.txt,none,"   @Override
   public MessageReference copy(final Queue queue) {
      return new MessageReferenceImpl(this, queue);
   }"
644,9249537.txt,none,"    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
        return new ScheduledThreadPoolExecutor(corePoolSize);
    }"
645,9405775.txt,none,"    protected Container getGlobalCurrentFocusCycleRoot()
        throws SecurityException
    {
        synchronized (KeyboardFocusManager.class) {
            checkKFMSecurity();
            return currentFocusCycleRoot;
        }
    }"
646,7377189.txt,none,"	@SuppressWarnings(""unchecked"")
	private static <T> boolean test(Annotation annotation, String metaAnnotationName, String attribute,
			Predicate<T> filter) {

		if (annotation.annotationType().getName().equals(metaAnnotationName)) {

			Map<String, Object> attributes = AnnotationUtils.getAnnotationAttributes(annotation);

			return !attributes.isEmpty() && filter.test((T) attributes.get(attribute));
		}

		MultiValueMap<String, Object> attributes = AnnotatedElementUtils
				.getAllAnnotationAttributes(annotation.annotationType(), metaAnnotationName);

		if (attributes == null || attributes.isEmpty()) {
			return false;
		}

		List<Object> elementTypes = attributes.get(attribute);

		for (Object value : elementTypes) {

			if (filter.test((T) value)) {
				return true;
			}
		}
		return false;
	}"
647,5437215.txt,none,"    public static byte[] getTableKeyFromFullName(String fullTableName) {
        int index = fullTableName.indexOf(QueryConstants.NAME_SEPARATOR);
        if (index < 0) {
            index = fullTableName.indexOf(QueryConstants.NAMESPACE_SEPARATOR);
            if (index < 0) { return getTableKey(null, null, fullTableName); }
        }
        String schemaName = fullTableName.substring(0, index);
        String tableName = fullTableName.substring(index+1);
        return getTableKey(null, schemaName, tableName); 
    }"
648,7204338.txt,none,"        public Builder nodePoolId(String nodePoolId) {
            this.nodePoolId = nodePoolId;
            this.__explicitlySet__.add(""nodePoolId"");
            return this;
        }"
649,7926598.txt,major,"	public MultiInstanceLoopCharacteristicsDetailComposite(AbstractBpmn2PropertySection section) {
		super(section);
	}"
650,5763217.txt,none,"        @Override
        public String call() throws Exception {
            ThreadContext.setApplication(application);
            ThreadContext.setSession(session);

            try {
                final ResourceTO resource = resourceRestClient.read(key);
                return String.format(""{ \""status\"": \""%s\"", \""target\"": \""%s\""}"",
                        resourceRestClient.check(resource).getLeft()
                        ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);
            } catch (Exception e) {
                LOG.warn(""Error checking connection for {}"", key, e);
                return String.format(""{ \""status\"": \""%s\"", \""target\"": \""%s\""}"",
                        TopologyNode.Status.FAILURE,
                        key);
            } finally {
                ThreadContext.detach();
            }
        }"
651,4259369.txt,none,"    @Override
    public Map<String,Integer> getNumWaitersByKey() {
        final Map<String,Integer> result = new HashMap<>();

        for (final Map.Entry<K, ObjectDeque<T>> entry : poolMap.entrySet()) {
            final K k = entry.getKey();
            final ObjectDeque<T> deque = entry.getValue();
            if (deque != null) {
                if (getBlockWhenExhausted()) {
                    result.put(k.toString(), Integer.valueOf(
                            deque.getIdleObjects().getTakeQueueLength()));
                } else {
                    result.put(k.toString(), Integer.valueOf(0));
                }
            }
        }
        return result;
    }"
652,8402603.txt,none,"    private void tryConfigureBulkRequests() throws JSchException {
        Integer bulkRequests = endpoint.getConfiguration().getBulkRequests();

        if (bulkRequests != null) {
            LOG.trace(""configuring channel to use up to {} bulk request(s)"", bulkRequests);

            channel.setBulkRequests(bulkRequests);
        }
    }"
653,3876033.txt,none,"  public RemoteAmbariCluster(String name, String clusterPath, AmbariStreamProvider streamProvider) {
    this.name = name;
    this.clusterPath = clusterPath;
    this.streamProvider = streamProvider;
  }"
654,5426714.txt,none,"    @Override
    @UnsupportedOperation
    public void clear() {
        throw new UnsupportedOperationException(ERROR_MSG);
    }"
655,8953503.txt,none,"  private static SelectOperator genReduceSinkAndBacktrackSelect(Operator<?> input,
          ExprNodeDesc[] keys, int tag, ArrayList<ExprNodeDesc> partitionCols, String order,
          String nullOrder, int numReducers, Operation acidOperation, HiveConf hiveConf)
              throws SemanticException {
    return genReduceSinkAndBacktrackSelect(input, keys, tag, partitionCols, order, nullOrder,
        numReducers, acidOperation, hiveConf, input.getSchema().getColumnNames());
  }"
656,5923886.txt,none,"  public List<String> getTraceback() {
    return traceback;
  }"
657,6502815.txt,none,"	public QueueCursor(int capacity) {
		this(capacity, false);
	}"
658,6519706.txt,none,"  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + ((model == null) ? 0 : model.hashCode());
    result = prime * result + ((parent == null) ? 0 : parent.hashCode());
    result = prime * result + ((propertyValue == null) ? 0 : propertyValue.hashCode());
    return result;
  }"
659,7880833.txt,none,"    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Digest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.hash = iprot.readString();
        struct.setHashIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sizeBytes = iprot.readI64();
        struct.setSizeBytesIsSet(true);
      }
    }"
660,5490526.txt,none,"        @Override
        public void writeToBuffer(QpidByteBuffer buffer)
        {
            _type.writeToBuffer(_value, buffer);
        }"
661,6840403.txt,none,"  public TestHttpServletRequest(String queryString) {
    this.queryString = queryString;
    this.content = new byte[0];
    this.contentType = null;
    this.characterEncoding = null;
    decodeParams();
  }"
662,3877056.txt,none,"  private static void listZookeeper(ServerContext context) throws Exception {
    System.out.println(""Listing volumes referenced in zookeeper"");
    TreeSet<String> volumes = new TreeSet<>();

    volumes.add(getTableURI(MetadataTableUtil.getRootTabletDir(context)));
    ArrayList<LogEntry> result = new ArrayList<>();
    MetadataTableUtil.getRootLogEntries(context, result);
    for (LogEntry logEntry : result) {
      getLogURIs(volumes, logEntry);
    }

    for (String volume : volumes)
      System.out.println(""\tVolume : "" + volume);

  }"
663,9534674.txt,none,"  public boolean checkVolume(final HddsVolume volume, Callback callback) {
    if (volume == null) {
      LOG.debug(""Cannot schedule check on null volume"");
      return false;
    }

    Optional<ListenableFuture<VolumeCheckResult>> olf =
        delegateChecker.schedule(volume, null);
    if (olf.isPresent()) {
      numVolumeChecks.incrementAndGet();
      Futures.addCallback(olf.get(),
          new ResultHandler(volume, new HashSet<>(), new HashSet<>(),
              new AtomicLong(1), callback),
          checkVolumeResultHandlerExecutorService
      );
      return true;
    }
    return false;
  }"
664,7926125.txt,none,"		@Override
		public IReason updateNeeded(IUpdateContext context) {
			if (canUpdate(context)) {
				Connection connection = (Connection) context.getPictogramElement();
				Association businessObject = BusinessObjectUtil.getFirstElementOfType(context.getPictogramElement(),
						Association.class);
				String newDirection = businessObject.getAssociationDirection().toString();
				if (newDirection==null || newDirection.isEmpty())
					newDirection = AssociationDirection.NONE.toString();
				String oldDirection = FeatureSupport.getPropertyValue(connection, ASSOCIATION_DIRECTION);
				if (oldDirection==null || oldDirection.isEmpty())
					oldDirection = AssociationDirection.NONE.toString();
	
				if (!oldDirection.equals(newDirection)) {
					return Reason.createTrueReason(Messages.AssociationFeatureContainer_Direction_Changed);
				}
			}
			return Reason.createFalseReason();
		}"
665,8714735.txt,none,"public Font getFont () {
	checkLayout();
	return font;
}"
666,7795065.txt,none,"	@Override
	protected void onReAdd()
	{
		if (this.fence != null)
		{
			// The fence mark is removed when the feedback panel is removed from the hierarchy.
			// see onRemove().
			// when the panel is re-added, we recreate the fence mark.
			incrementFenceCount();
		}
		super.onReAdd();
	}"
667,4106345.txt,none,"  private FrameworkMethod getParametersMethod(TestClass testClass)
      throws Exception {
    List<FrameworkMethod> methods = testClass
        .getAnnotatedMethods(Parameterized.Parameters.class);
    for (FrameworkMethod each : methods) {
      int modifiers = each.getMethod().getModifiers();
      if (Modifier.isStatic(modifiers) && Modifier.isPublic(modifiers))
        return each;
    }

    throw new Exception(""No public static parameters method on class ""
        + testClass.getName());
  }"
668,4110816.txt,none,"        @Override
        public Boolean handleAddCatalogItem(Object catalogItemBeingAdded) {
            return isEntitledToAddCatalogItem(context, catalogItemBeingAdded);
        }"
669,8029682.txt,major,"	private boolean deriveTypeHierarchyFromOverridden(ParserRule rule, Grammar grammar) throws TransformationException {
		AbstractRule parentRule = GrammarUtil.findRuleForName(grammar, rule.getName());
		if (parentRule != null) {
			if (parentRule != rule && parentRule instanceof ParserRule) {
				ParserRule casted = (ParserRule) parentRule;
				if (casted.isFragment() != rule.isFragment()) {
					if (rule.isFragment()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""A fragment rule cannot override a production rule."", rule);
					} else {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Only fragment rule can override other fragment rules."", rule);
					}
				}
				if (casted.isWildcard() != rule.isWildcard()) {
					if (rule.isWildcard()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""A wildcard fragment rule cannot override a typed fragment rule."", rule);
					} else {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Only wildcard fragment rules can override other wildcard fragments."", rule);
					}
				}
				if (rule.isFragment() && !rule.isWildcard() && parentRule.getType() != null) {
					if (rule.getType().getClassifier() != parentRule.getType().getClassifier()) {
						throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,
								""Overriding fragment rules cannot redeclare their type."", rule.getType());
					}
				}
				checkParameterLists(rule, casted);
			}
			if (parentRule.getType() != null && parentRule != rule) {			
				if (parentRule.getType().getClassifier() instanceof EDataType)
					throw new TransformationException(TransformationErrorCode.InvalidSupertype,
							""Cannot inherit from datatype rule and return another type."", rule.getType());
				EClassifierInfo parentTypeInfo = eClassifierInfos.getInfoOrNull(parentRule.getType());
				if (parentTypeInfo == null)
					throw new TransformationException(TransformationErrorCode.InvalidSupertype,
							""Cannot determine return type of overridden rule."", rule.getType());
				addSuperType(rule, rule.getType(), parentTypeInfo);
				return true;
			}
		}
		return false;
	}"
670,5788107.txt,none,"    public String getImageMagickPath() {

        return imageMagickPath;
    }"
671,4043468.txt,none,"    public UnionAllOperatorDescriptor(IOperatorDescriptorRegistry spec, int nInputs,
            RecordDescriptor recordDescriptor) {
        super(spec, nInputs, 1);
        outRecDescs[0] = recordDescriptor;
    }"
672,4816749.txt,none,"  public static void putAll(Map<String, String> additionalEnvironment) {
    Map<String, String> environment = new HashMap<String, String>(System.getenv());
    environment.putAll(additionalEnvironment);
    updateEnvironment(environment);
  }"
673,6829907.txt,none,"    public final void rule__FunctionTypeExpressionOLD__Group__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            pushFollow(FOLLOW_2);
            rule__FunctionTypeExpressionOLD__Group__9__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
674,6529636.txt,minor,"    static public Object postUpdate(String itemName, String stateString) {
        ItemRegistry registry = ScriptServiceUtil.getItemRegistry();
        EventPublisher publisher = ScriptServiceUtil.getEventPublisher();
        if (publisher != null && registry != null) {
            try {
                Item item = registry.getItem(itemName);
                State state = TypeParser.parseState(item.getAcceptedDataTypes(), stateString);
                if (state != null) {
                    publisher.post(ItemEventFactory.createStateEvent(itemName, state));
                } else {
                    LoggerFactory.getLogger(BusEvent.class).warn(
                            ""Cannot convert '{}' to a state type which item '{}' accepts: {}."", stateString, itemName,
                            getAcceptedDataTypeNames(item));
                }
            } catch (ItemNotFoundException e) {
                LoggerFactory.getLogger(BusEvent.class).warn(""Item '{}' does not exist."", itemName);
            }
        }
        return null;
    }"
675,7218982.txt,none,"    @SuppressWarnings(""unchecked"")
    @Override
    public T call() throws Exception {
        return ((Callable<T>)source).call();
    }"
676,5782292.txt,none,"  public static void verifyReply(String base64Hash, String msg, SecretKey key) throws IOException {
    byte[] hash = Base64.decodeBase64(base64Hash.getBytes(Charsets.UTF_8));
    boolean res = verifyHash(hash, msg.getBytes(Charsets.UTF_8), key);

    if(res != true) {
      throw new IOException(""Verification of the hashReply failed"");
    }
  }"
677,4514229.txt,critical,"   private static byte[] encodeBase64(byte[] binaryData, boolean isChunked)
   {
      int lengthDataBits = binaryData.length * EIGHTBIT;
      int fewerThan24bits = lengthDataBits % TWENTYFOURBITGROUP;
      int numberTriplets = lengthDataBits / TWENTYFOURBITGROUP;
      byte encodedData[] = null;
      int encodedDataLength = 0;
      int nbrChunks = 0;

      if (fewerThan24bits != 0)
      {
         //data not divisible by 24 bit
         encodedDataLength = (numberTriplets + 1) * 4;
      }
      else
      {
         // 16 or 8 bit
         encodedDataLength = numberTriplets * 4;
      }

      // If the output is to be ""chunked"" into 76 character sections,
      // for compliance with RFC 2045 MIME, then it is important to
      // allow for extra length to account for the separator(s)
      if (isChunked)
      {

         nbrChunks =
                 (CHUNK_SEPARATOR.length == 0
                 ? 0
                 : (int)Math.ceil((float)encodedDataLength / CHUNK_SIZE));
         encodedDataLength += nbrChunks * CHUNK_SEPARATOR.length;
      }

      encodedData = new byte[encodedDataLength];

      byte k = 0, l = 0, b1 = 0, b2 = 0, b3 = 0;

      int encodedIndex = 0;
      int dataIndex = 0;
      int i = 0;
      int nextSeparatorIndex = CHUNK_SIZE;
      int chunksSoFar = 0;

      //log.debug(""number of triplets = "" + numberTriplets);
      for (i = 0; i < numberTriplets; i++)
      {
         dataIndex = i * 3;
         b1 = binaryData[dataIndex];
         b2 = binaryData[dataIndex + 1];
         b3 = binaryData[dataIndex + 2];

         //log.debug(""b1= "" + b1 +"", b2= "" + b2 + "", b3= "" + b3);

         l = (byte)(b2 & 0x0f);
         k = (byte)(b1 & 0x03);

         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         byte val2 =
                 ((b2 & SIGN) == 0)
                 ? (byte)(b2 >> 4)
                 : (byte)((b2) >> 4 ^ 0xf0);
         byte val3 =
                 ((b3 & SIGN) == 0)
                 ? (byte)(b3 >> 6)
                 : (byte)((b3) >> 6 ^ 0xfc);

         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         //log.debug( ""val2 = "" + val2 );
         //log.debug( ""k4   = "" + (k<<4) );
         //log.debug(  ""vak  = "" + (val2 | (k<<4)) );
         encodedData[encodedIndex + 1] =
                 lookUpBase64Alphabet[val2 | (k << 4)];
         encodedData[encodedIndex + 2] =
                 lookUpBase64Alphabet[(l << 2) | val3];
         encodedData[encodedIndex + 3] = lookUpBase64Alphabet[b3 & 0x3f];

         encodedIndex += 4;

         // If we are chunking, let's put a chunk separator down.
         if (isChunked)
         {
            // this assumes that CHUNK_SIZE % 4 == 0
            if (encodedIndex == nextSeparatorIndex)
            {
               System.arraycopy(
                       CHUNK_SEPARATOR,
                       0,
                       encodedData,
                       encodedIndex,
                       CHUNK_SEPARATOR.length);
               chunksSoFar++;
               nextSeparatorIndex =
                       (CHUNK_SIZE * (chunksSoFar + 1))
                       + (chunksSoFar * CHUNK_SEPARATOR.length);
               encodedIndex += CHUNK_SEPARATOR.length;
            }
         }
      }

      // form integral number of 6-bit groups
      dataIndex = i * 3;

      if (fewerThan24bits == EIGHTBIT)
      {
         b1 = binaryData[dataIndex];
         k = (byte)(b1 & 0x03);
         //log.debug(""b1="" + b1);
         //log.debug(""b1<<2 = "" + (b1>>2) );
         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         encodedData[encodedIndex + 1] = lookUpBase64Alphabet[k << 4];
         encodedData[encodedIndex + 2] = PAD;
         encodedData[encodedIndex + 3] = PAD;
      }
      else if (fewerThan24bits == SIXTEENBIT)
      {

         b1 = binaryData[dataIndex];
         b2 = binaryData[dataIndex + 1];
         l = (byte)(b2 & 0x0f);
         k = (byte)(b1 & 0x03);

         byte val1 =
                 ((b1 & SIGN) == 0)
                 ? (byte)(b1 >> 2)
                 : (byte)((b1) >> 2 ^ 0xc0);
         byte val2 =
                 ((b2 & SIGN) == 0)
                 ? (byte)(b2 >> 4)
                 : (byte)((b2) >> 4 ^ 0xf0);

         encodedData[encodedIndex] = lookUpBase64Alphabet[val1];
         encodedData[encodedIndex + 1] =
                 lookUpBase64Alphabet[val2 | (k << 4)];
         encodedData[encodedIndex + 2] = lookUpBase64Alphabet[l << 2];
         encodedData[encodedIndex + 3] = PAD;
      }

      if (isChunked)
      {
         // we also add a separator to the end of the final chunk.
         if (chunksSoFar < nbrChunks)
         {
            System.arraycopy(
                    CHUNK_SEPARATOR,
                    0,
                    encodedData,
                    encodedDataLength - CHUNK_SEPARATOR.length,
                    CHUNK_SEPARATOR.length);
         }
      }

      return encodedData;
   }"
678,6340979.txt,none,"    @Override
    public void addPages() {
        page = new WizardNewFileCreationPage(""newSuppressionPage"", selection); //$NON-NLS-1$
        page.setTitle(Messages.getString(""NewSuppressionWizard.NewWizard_title"")); //$NON-NLS-1$
        page.setDescription(Messages.getString(""NewSuppressionWizard.NewWizard_description"")); //$NON-NLS-1$
        page.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(ValgrindEditorPlugin.PLUGIN_ID, ""icons/newsupp_wiz.png"")); //$NON-NLS-1$
        page.setFileExtension(EXT_SUPP);
        addPage(page);
    }"
679,7904510.txt,none,"  public AndroidPackageableCollector addNativeLinkableAsset(NativeLinkable nativeLinkable) {
    if (nativeLinkablesAssetsToExclude.contains(nativeLinkable)) {
      return this;
    }
    APKModule module = apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());
    collectionBuilder.putNativeLinkablesAssets(module, nativeLinkable);
    return this;
  }"
680,6459837.txt,none,"    private void buildNode80()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=12664""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=12663""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=12664""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=12663""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Masks</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
681,6967137.txt,none,"  private void lockSourceAndCopy(File sourceFile, File copyFile) {
    sourceFile.opened();
    ReadWriteLock sourceLock = sourceFile.contentLock();
    if (sourceLock != null) {
      sourceLock.readLock().lock();
    }
    ReadWriteLock copyLock = copyFile.contentLock();
    if (copyLock != null) {
      copyLock.writeLock().lock();
    }
  }"
682,8230505.txt,none,"    public void dispose() {
        this.decommission( this.instance );
        this.instance = null;

        super.dispose();
    }"
683,6905888.txt,minor,"    void setStackMap(StackMapTable_attribute attr) {
        if (attr == null) {
            map = null;
            return;
        }

        Method m = classWriter.getMethod();
        Descriptor d = m.descriptor;
        String[] args;
        try {
            ConstantPool cp = classWriter.getClassFile().constant_pool;
            String argString = d.getParameterTypes(cp);
            args = argString.substring(1, argString.length() - 1).split(""[, ]+"");
        } catch (ConstantPoolException | InvalidDescriptor e) {
            return;
        }
        boolean isStatic = m.access_flags.is(AccessFlags.ACC_STATIC);

        verification_type_info[] initialLocals = new verification_type_info[(isStatic ? 0 : 1) + args.length];
        if (!isStatic)
            initialLocals[0] = new CustomVerificationTypeInfo(""this"");
        for (int i = 0; i < args.length; i++) {
            initialLocals[(isStatic ? 0 : 1) + i] =
                    new CustomVerificationTypeInfo(args[i].replace(""."", ""/""));
        }

        map = new HashMap<>();
        StackMapBuilder builder = new StackMapBuilder();

        // using -1 as the pc for the initial frame effectively compensates for
        // the difference in behavior for the first stack map frame (where the
        // pc offset is just offset_delta) compared to subsequent frames (where
        // the pc offset is always offset_delta+1).
        int pc = -1;

        map.put(pc, new StackMap(initialLocals, empty));

        for (int i = 0; i < attr.entries.length; i++)
            pc = attr.entries[i].accept(builder, pc);
    }"
684,3877118.txt,minor,"  private void verifyRepository(RepositoryRequest request) throws AmbariException {
    URLStreamProvider usp = new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT, REPO_URL_READ_TIMEOUT, null, null, null);
    usp.setSetupTruststoreForHttps(false);

    String repoName = request.getRepoName();
    if (StringUtils.isEmpty(repoName)) {
      throw new IllegalArgumentException(""repo_name is required to verify repository"");
    }

    String errorMessage = null;
    Exception e = null;

    String[] suffixes = configs.getRepoValidationSuffixes(request.getOsType());
    for (String suffix : suffixes) {
      String formatted_suffix = String.format(suffix, repoName);
      String spec = request.getBaseUrl().trim();

      // This logic is to identify if the end of baseurl has a slash ('/') and/or the beginning of suffix String (e.g. ""/repodata/repomd.xml"")
      // has a slash and they can form a good url.
      // e.g. ""http://baseurl.com/"" + ""/repodata/repomd.xml"" becomes ""http://baseurl.com/repodata/repomd.xml"" but not ""http://baseurl.com//repodata/repomd.xml""
      if (spec.charAt(spec.length() - 1) != '/' && formatted_suffix.charAt(0) != '/') {
        spec = spec + ""/"" + formatted_suffix;
      } else if (spec.charAt(spec.length() - 1) == '/' && formatted_suffix.charAt(0) == '/') {
        spec = spec + formatted_suffix.substring(1);
      } else {
        spec = spec + formatted_suffix;
      }

      // if spec contains ""file://"" then check local file system.
      final String FILE_SCHEME = ""file://"";
      if(spec.toLowerCase().startsWith(FILE_SCHEME)){
        String filePath = spec.substring(FILE_SCHEME.length());
        File f = new File(filePath);
        if(!f.exists()){
          errorMessage = ""Could not access base url . "" + spec + "" . "";
          e = new FileNotFoundException(errorMessage);
          break;
        }

      }else{
        try {
          IOUtils.readLines(usp.readFrom(spec));
        } catch (IOException ioe) {
          e = ioe;
          errorMessage = ""Could not access base url . "" + request.getBaseUrl() + "" . "";
          if (LOG.isDebugEnabled()) {
            errorMessage += ioe;
          } else {
            errorMessage += ioe.getMessage();
          }
          break;
        }
      }
    }

    if (e != null) {
      LOG.error(errorMessage);
      throw new IllegalArgumentException(errorMessage, e);
    }
  }"
685,8675011.txt,none,"    @Override public Collection<ClusterNode> mapPartitionToPrimaryAndBackups(int part) {
        CacheOperationContext old = gate.enter(null);

        try {
            return delegate.mapPartitionToPrimaryAndBackups(part);
        }
        finally {
            gate.leave(old);
        }
    }"
686,4042280.txt,none,"    @Override
    public PCollection<Message> expand(PBegin input) {

      org.apache.beam.sdk.io.Read.Unbounded<Message> unbounded =
          org.apache.beam.sdk.io.Read.from(
              new SqsUnboundedSource(
                  this,
                  new SqsConfiguration(input.getPipeline().getOptions().as(AwsOptions.class))));

      PTransform<PBegin, PCollection<Message>> transform = unbounded;

      if (maxNumRecords() < Long.MAX_VALUE || maxReadTime() != null) {
        transform = unbounded.withMaxReadTime(maxReadTime()).withMaxNumRecords(maxNumRecords());
      }

      return input.getPipeline().apply(transform);
    }"
687,4522222.txt,none,"	public void put(String sid, UPnPEventListener listener) {
		if (!sidListener.containsKey(sid)) {
			Vector vec = new Vector();
			vec.add(listener);
			sidListener.put(sid, vec);
		} else {
			Vector vec = (Vector) sidListener.get(sid);
			if (!vec.contains(listener)) {
				vec.add(listener);
			}
		}
	}"
688,8901898.txt,none,"    @Override
    public Pool<OrcEncodedColumnBatch> createEncodedColumnBatchPool() {
      return ECB_POOL;
    }"
689,5865735.txt,none,"    @Override
    public void println(char x) throws IOException
    {
        getEnclosingWriter().println(x);
    }"
690,8747487.txt,none,"   static String classNameBase(String className) {
      String[] names = className.split(""\\."", -1);
      if (names == null || names.length == 0) {
        return className;
      }
      return names[names.length-1];
    }"
691,8080847.txt,none,"    public final void rule__XShortClosure__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug462047Lang.g:7756:1: ( ( ( rule__XShortClosure__Group_0_0__0 ) ) )
            // InternalBug462047Lang.g:7757:1: ( ( rule__XShortClosure__Group_0_0__0 ) )
            {
            // InternalBug462047Lang.g:7757:1: ( ( rule__XShortClosure__Group_0_0__0 ) )
            // InternalBug462047Lang.g:7758:2: ( rule__XShortClosure__Group_0_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }
            // InternalBug462047Lang.g:7759:2: ( rule__XShortClosure__Group_0_0__0 )
            // InternalBug462047Lang.g:7759:3: rule__XShortClosure__Group_0_0__0
            {
            pushFollow(FOLLOW_2);
            rule__XShortClosure__Group_0_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXShortClosureAccess().getGroup_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
692,4720056.txt,none,"    @Override
    public void generateGroovy(GroovyGenerationContext context) {
        context.append(label);
        context.append("":"");
        expr.generateGroovy(context);
    }"
693,6117995.txt,none,"        @Override
        public MutableSet<T> symmetricDifference(SetIterable<? extends T> setB)
        {
            return this.getDelegate().symmetricDifference(setB);
        }"
694,4106696.txt,none,"	public ProductCategoryUsageSimulator(double dailyUsageRate, double amountUsedAverage,
			double amountUsedVariance, SeedFactory seedFactory)
	{
		this.amountUsedAverage = amountUsedAverage;
		this.amountUsedVariance = amountUsedVariance;

		timestepSampler = new ExponentialSampler(dailyUsageRate, seedFactory);
		R = new GaussianSampler(0.0, 1.0, seedFactory);
	}"
695,8213894.txt,none,"		public static IGrammarAwareElementType createModel_NodeExclusionListAlternatives_8_2_0ElementType() {
			return new IGrammarAwareElementType(""Model_NodeExclusionListAlternatives_8_2_0_ELEMENT_TYPE"", ContextFinderTestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getModelAccess().getNodeExclusionListAlternatives_8_2_0());
		}"
696,9295088.txt,none,"    private static long openProcessToken(int access) {
        try {
            return OpenProcessToken(GetCurrentProcess(), access);
        } catch (WindowsException x) {
            return 0L;
        }
    }"
697,7513487.txt,none,"        LLVMNegateNode(LLVMAbstractCompareNode booleanExpression) {
            this.booleanExpression = booleanExpression;
        }"
698,9523314.txt,none,"    @Override
    public CODE<T> a(String selector, String href, String anchorText) {
      return setSelector(a(), selector).$href(href)._(anchorText)._();
    }"
699,3974746.txt,none,"  @Override
  public boolean validate(Schema schema, Object datum) {
    switch (schema.getType()) {
    case ARRAY:
      if (!datum.getClass().isArray())
        return super.validate(schema, datum);
      int length = java.lang.reflect.Array.getLength(datum);
      for (int i = 0; i < length; i++)
        if (!validate(schema.getElementType(),
                      java.lang.reflect.Array.get(datum, i)))
          return false;
      return true;
    default:
      return super.validate(schema, datum);
    }
  }"
700,5738914.txt,none,"    private void handleControlMessage(ChannelHandlerContext ctx, ControlMessage controlMessage) throws Exception {
        Channel channel = ctx.channel();
        KerberosSaslNettyClient saslNettyClient = getChannelSaslClient(channel);
        if (controlMessage == ControlMessage.SASL_COMPLETE_REQUEST) {
            LOG.debug(""Server has sent us the SaslComplete message. Allowing normal work to proceed."");

            if (!saslNettyClient.isComplete()) {
                String errorMessage =
                    ""Server returned a Sasl-complete message, but as far as we can tell, we are not authenticated yet."";
                LOG.error(errorMessage);
                throw new Exception(errorMessage);
            }
            ctx.pipeline().remove(this);
            this.client.channelReady(channel);

            // We call fireChannelRead since the client is allowed to
            // perform this request. The client's request will now proceed
            // to the next pipeline component namely StormClientHandler.
            ctx.fireChannelRead(controlMessage);
        } else {
            LOG.warn(""Unexpected control message: {}"", controlMessage);
        }
    }"
701,7030976.txt,none,"    public HeadBucketResult withBucketRegion(String bucketRegion) {
        setBucketRegion(bucketRegion);
        return this;
    }"
702,9453064.txt,none,"  int[][] burst() {
    int[][] result = new int[4][];

    result[WALLCLOCK_TIME_INDEX] = progressWallclockTime.getValues();
    result[CPU_TIME_INDEX] = progressCPUTime.getValues();
    result[VIRTUAL_MEMORY_KBYTES_INDEX] = progressVirtualMemoryKbytes.getValues();
    result[PHYSICAL_MEMORY_KBYTES_INDEX] = progressPhysicalMemoryKbytes.getValues();

    return result;
  }"
703,6623499.txt,none,"    public List<HarPostDataParam> getParams() {
        return params;
    }"
704,4566202.txt,major,"    @Override
    protected GraphicsNode createImageGraphicsNode(
                BridgeContext ctx, Element imageElement, ParsedURL purl) {
        AbstractFOPBridgeContext bridgeCtx = (AbstractFOPBridgeContext)ctx;

        ImageManager manager = bridgeCtx.getImageManager();
        ImageSessionContext sessionContext = bridgeCtx.getImageSessionContext();
        try {
            ImageInfo info = manager.getImageInfo(purl.toString(), sessionContext);
            ImageFlavor[] supportedFlavors = getSupportedFlavours();
            Image image = manager.getImage(info, supportedFlavors, sessionContext);

            //TODO color profile overrides aren't handled, yet!
            //ICCColorSpaceExt colorspaceOverride = extractColorSpace(e, ctx);
            AbstractGraphicsNode specializedNode = null;
            if (image instanceof ImageXMLDOM) {
                ImageXMLDOM xmlImage = (ImageXMLDOM)image;
                if (xmlImage.getDocument() instanceof SVGDocument) {
                    //Clone DOM because the Batik's CSS Parser attaches to the DOM and is therefore
                    //not thread-safe.
                    SVGDocument clonedDoc = (SVGDocument)BatikUtil.cloneSVGDocument(
                            xmlImage.getDocument());
                    return createSVGImageNode(ctx, imageElement, clonedDoc);
                } else {
                    //Convert image to Graphics2D
                    image = manager.convertImage(xmlImage,
                            new ImageFlavor[] {ImageFlavor.GRAPHICS2D});
                }
            }
            if (image instanceof ImageRawJPEG) {
                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);
            } else if (image instanceof ImageRawCCITTFax) {
                specializedNode = createLoaderImageNode(image, ctx, imageElement, purl);
            } else if (image instanceof ImageGraphics2D) {
                ImageGraphics2D g2dImage = (ImageGraphics2D)image;
                specializedNode = new Graphics2DNode(g2dImage);
            } else {
                ctx.getUserAgent().displayError(
                        new ImageException(""Cannot convert an image to a usable format: "" + purl));
            }

            if (specializedNode != null) {
                Rectangle2D imgBounds = getImageBounds(ctx, imageElement);
                Rectangle2D bounds = specializedNode.getPrimitiveBounds();
                float [] vb = new float[4];
                vb[0] = 0; // x
                vb[1] = 0; // y
                vb[2] = (float) bounds.getWidth(); // width
                vb[3] = (float) bounds.getHeight(); // height

                // handles the 'preserveAspectRatio', 'overflow' and 'clip'
                // and sets the appropriate AffineTransform to the image node
                initializeViewport(ctx, imageElement, specializedNode, vb, imgBounds);
                return specializedNode;
            }
        } catch (Exception e) {
            ctx.getUserAgent().displayError(e);
        }

        //Fallback
        return superCreateGraphicsNode(ctx, imageElement, purl);
    }"
705,7257899.txt,none,"    public LongRect getSelectionBounds(ItemSelection selection, ChartContext context) {

        XYItemSelection sel = (XYItemSelection)selection;
        XYItem item  = sel.getItem();
        int selectedValueIndex = sel.getValueIndex();

        if (selectedValueIndex == -1 ||
            selectedValueIndex >= item.getValuesCount())
            // This happens on reset - bounds of the selection are unknown, let's clear whole area
            return new LongRect(0, 0, context.getViewportWidth(),
                                context.getViewportHeight());
        else
            return getViewBounds(item, selectedValueIndex, context);
    }"
706,9087427.txt,none,"        AllNamesVisitor(boolean functions, int maxNames, boolean unique) {
            this.functions = functions;
            this.maxNames = maxNames == -1 ? Integer.MAX_VALUE : maxNames;
            this.unique = unique ? new HashSet<>() : null;
            this.result = new ArrayList<>();
        }"
707,4440109.txt,none,"  private IdentificationCardScan createScan (final String customerIdentifier, final String cardNumber) throws Exception {
    final IdentificationCardScan scan = ScanGenerator.createRandomScan(null);

    this.postIdentificationCardScan(customerIdentifier, cardNumber, scan);

    return scan;
  }"
708,5717998.txt,major,"	private static void countCompiledInstructions(ProgramBlock pb, ExplainCounts counts, boolean MR, boolean CP, boolean SP) 
	{
		if (pb instanceof WhileProgramBlock)
		{
			WhileProgramBlock tmp = (WhileProgramBlock)pb;
			countCompiledInstructions(tmp.getPredicate(), counts, MR, CP, SP);
			for (ProgramBlock pb2 : tmp.getChildBlocks())
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else if (pb instanceof IfProgramBlock)
		{
			IfProgramBlock tmp = (IfProgramBlock)pb;	
			countCompiledInstructions(tmp.getPredicate(), counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocksIfBody() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocksElseBody() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else if (pb instanceof ForProgramBlock) //includes ParFORProgramBlock
		{ 
			ForProgramBlock tmp = (ForProgramBlock)pb;	
			countCompiledInstructions(tmp.getFromInstructions(), counts, MR, CP, SP);
			countCompiledInstructions(tmp.getToInstructions(), counts, MR, CP, SP);
			countCompiledInstructions(tmp.getIncrementInstructions(), counts, MR, CP, SP);
			for( ProgramBlock pb2 : tmp.getChildBlocks() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
			//additional parfor jobs counted during runtime
		}		
		else if (  pb instanceof FunctionProgramBlock ) //includes ExternalFunctionProgramBlock and ExternalFunctionProgramBlockCP
		{
			FunctionProgramBlock fpb = (FunctionProgramBlock)pb;
			for( ProgramBlock pb2 : fpb.getChildBlocks() )
				countCompiledInstructions(pb2, counts, MR, CP, SP);
		}
		else 
		{
			countCompiledInstructions(pb.getInstructions(), counts, MR, CP, SP);
		}
	}"
709,8334098.txt,none,"	void m39(C22 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
710,7236664.txt,none,"  private ShadowInfo checkShadowPickers(String instrumentedClassName, Class<?> clazz) {
    String shadowPickerClassName = shadowPickers.get(instrumentedClassName);
    if (shadowPickerClassName == null) {
      return null;
    }

    ClassLoader classLoader = clazz.getClassLoader();
    try {
      Class<? extends ShadowPicker<?>> shadowPickerClass =
          (Class<? extends ShadowPicker<?>>) classLoader.loadClass(shadowPickerClassName);
      ShadowPicker<?> shadowPicker = shadowPickerClass.getDeclaredConstructor().newInstance();
      Class<?> selectedShadowClass = shadowPicker.pickShadowClass();
      if (selectedShadowClass == null) {
        return obtainShadowInfo(Object.class, true);
      }
      ShadowInfo shadowInfo = obtainShadowInfo(selectedShadowClass);

      if (!shadowInfo.shadowedClassName.equals(instrumentedClassName)) {
        throw new IllegalArgumentException(""Implemented class for ""
            + selectedShadowClass.getName() + "" ("" + shadowInfo.shadowedClassName + "") != ""
            + instrumentedClassName);
      }

      return shadowInfo;
    } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException
        | IllegalAccessException | InstantiationException e) {
      throw new RuntimeException(""Failed to resolve shadow picker for "" + instrumentedClassName,
          e);
    }
  }"
711,4501314.txt,none,"    protected MetaDataReader(File logFile, int logFileID) throws IOException {
      this.logFile = logFile;
      metaDataFile = Serialization.getMetaDataFile(logFile);
      this.logFileID = logFileID;
    }"
712,6844792.txt,major,"	public static Control createCustomAreaWithLink(final Composite parent, final Dialog dialog, final Binary binary) {
		final String binaryLabel = binary.getLabel();
		final String prefix = ""The requested operation cannot be performed due to invalid '"" + binaryLabel
				+ ""' settings. Check your '"" + binaryLabel
				+ ""' configuration and preferences under the corresponding "";
		final String link = ""preference page"";
		final String suffix = ""."";
		final String text = prefix + link + suffix;

		final Composite control = new Composite(parent, NONE);
		control.setLayout(GridLayoutFactory.fillDefaults().create());
		final GridData gridData = GridDataFactory.fillDefaults().align(LEFT, TOP).grab(true, true).create();
		control.setLayoutData(gridData);

		final StyleRange style = new StyleRange();
		style.underline = true;
		style.underlineStyle = UNDERLINE_LINK;

		final StyledText styledText = new StyledText(control, MULTI | READ_ONLY | WRAP);
		styledText.setWordWrap(true);
		styledText.setJustify(true);
		styledText.setText(text);
		final GridData textGridData = GridDataFactory.fillDefaults().align(FILL, FILL).grab(true, true).create();
		textGridData.widthHint = TEXT_WIDTH_HINT;
		textGridData.heightHint = TEXT_HEIGHT_HINT;
		styledText.setLayoutData(textGridData);

		styledText.setEditable(false);
		styledText.setBackground(UIUtils.getSystemColor(COLOR_WIDGET_BACKGROUND));
		final int[] ranges = { text.indexOf(link), link.length() };
		final StyleRange[] styles = { style };
		styledText.setStyleRanges(ranges, styles);

		styledText.addMouseListener(new MouseAdapter() {

			@Override
			public void mouseDown(final MouseEvent event) {
				try {
					final int offset = styledText.getOffsetAtPoint(new Point(event.x, event.y));
					final StyleRange actualStyle = offset >= 0 ? styledText.getStyleRangeAtOffset(offset) : null;
					if (null != actualStyle && actualStyle.underline
							&& UNDERLINE_LINK == actualStyle.underlineStyle) {

						dialog.close();
						final PreferenceDialog preferenceDialog = createPreferenceDialogOn(
								UIUtils.getShell(),
								BinariesPreferencePage.ID,
								FILTER_IDS,
								null);

						if (null != preferenceDialog) {
							preferenceDialog.open();
						}

					}
				} catch (final IllegalArgumentException e) {
					// We are not over the actual text.
				}
			}

		});

		return control;
	}"
713,8420313.txt,none,"    public SynchronizedValueFactory<Long> getNonceFactory() {
        return delegate.getNonceFactory();
    }"
714,5988833.txt,none,"    @JsonProperty(value = ""credentialScope"")
    public void setCredentialScope(CredentialScope credentialScope) {
        this.credentialScope = credentialScope;
    }"
715,7078266.txt,none,"    public FormatFlagsConversionMismatchException(String f, char c) {
        if (f == null)
            throw new NullPointerException();
        this.f = f;
        this.c = c;
    }"
716,6134213.txt,none,"	@Override
	public ModuleDeclaration parse(PossibleMatch possibleMatch) {
		ModuleDeclaration module = SourceParserUtil.getModuleDeclaration(
				(org.eclipse.dltk.core.ISourceModule) possibleMatch
						.getModelElement(), null);
		return module;
	}"
717,4185249.txt,none,"    @Override
    public String toString()
    {
        return ""("" + left + "","" + right + "")"";
    }"
718,8763437.txt,none,"    public int compareTo(Range o) {
      // Ensure sgn(x.compareTo(y) == -sgn(y.compareTo(x))
      return this.startIndex < o.startIndex ? -1 :
          (this.startIndex > o.startIndex ? 1 :
          (this.length < o.length ? -1 :
          (this.length > o.length ? 1 : 0)));
    }"
719,8813925.txt,none,"    public String recv_registerComputeResource() throws org.apache.airavata.model.error.InvalidRequestException, org.apache.airavata.model.error.AiravataClientException, org.apache.airavata.model.error.AiravataSystemException, org.apache.airavata.model.error.AuthorizationException, org.apache.thrift.TException
    {
      registerComputeResource_result result = new registerComputeResource_result();
      receiveBase(result, ""registerComputeResource"");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ace != null) {
        throw result.ace;
      }
      if (result.ase != null) {
        throw result.ase;
      }
      if (result.ae != null) {
        throw result.ae;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, ""registerComputeResource failed: unknown result"");
    }"
720,7034516.txt,none,"  private ServerErrorCode controlBlobStore(DataNodeId dataNodeId, PartitionId partitionId,
      short numReplicasCaughtUpPerPartition, boolean enable) throws IOException, TimeoutException {
    AdminRequest adminRequest =
        new AdminRequest(AdminRequestOrResponseType.BlobStoreControl, partitionId, correlationId.incrementAndGet(),
            CLIENT_ID);
    BlobStoreControlAdminRequest controlRequest =
        new BlobStoreControlAdminRequest(numReplicasCaughtUpPerPartition, enable, adminRequest);
    ByteBuffer responseBytes = sendRequestGetResponse(dataNodeId, controlRequest);
    AdminResponse adminResponse = AdminResponse.readFrom(new DataInputStream(new ByteBufferInputStream(responseBytes)));
    return adminResponse.getError();
  }"
721,6276517.txt,critical,"	private void findObjectsToPack(@NonNull ProgressMonitor countingMonitor,
			@NonNull ObjectWalk walker, @NonNull Set<? extends ObjectId> want,
			@NonNull Set<? extends ObjectId> have,
			@NonNull Set<? extends ObjectId> noBitmaps) throws IOException {
		final long countingStart = System.currentTimeMillis();
		beginPhase(PackingPhase.COUNTING, countingMonitor, ProgressMonitor.UNKNOWN);

		stats.interestingObjects = Collections.unmodifiableSet(new HashSet<ObjectId>(want));
		stats.uninterestingObjects = Collections.unmodifiableSet(new HashSet<ObjectId>(have));
		excludeFromBitmapSelection = noBitmaps;

		canBuildBitmaps = config.isBuildBitmaps()
				&& !shallowPack
				&& have.isEmpty()
				&& (excludeInPacks == null || excludeInPacks.length == 0);
		if (!shallowPack && useBitmaps) {
			BitmapIndex bitmapIndex = reader.getBitmapIndex();
			if (bitmapIndex != null) {
				BitmapWalker bitmapWalker = new BitmapWalker(
						walker, bitmapIndex, countingMonitor);
				findObjectsToPackUsingBitmaps(bitmapWalker, want, have);
				endPhase(countingMonitor);
				stats.timeCounting = System.currentTimeMillis() - countingStart;
				stats.bitmapIndexMisses = bitmapWalker.getCountOfBitmapIndexMisses();
				return;
			}
		}

		List<ObjectId> all = new ArrayList<>(want.size() + have.size());
		all.addAll(want);
		all.addAll(have);

		final RevFlag include = walker.newFlag(""include""); //$NON-NLS-1$
		final RevFlag added = walker.newFlag(""added""); //$NON-NLS-1$

		walker.carry(include);

		int haveEst = have.size();
		if (have.isEmpty()) {
			walker.sort(RevSort.COMMIT_TIME_DESC);
		} else {
			walker.sort(RevSort.TOPO);
			if (thin)
				walker.sort(RevSort.BOUNDARY, true);
		}

		List<RevObject> wantObjs = new ArrayList<>(want.size());
		List<RevObject> haveObjs = new ArrayList<>(haveEst);
		List<RevTag> wantTags = new ArrayList<>(want.size());

		// Retrieve the RevWalk's versions of ""want"" and ""have"" objects to
		// maintain any state previously set in the RevWalk.
		AsyncRevObjectQueue q = walker.parseAny(all, true);
		try {
			for (;;) {
				try {
					RevObject o = q.next();
					if (o == null)
						break;
					if (have.contains(o))
						haveObjs.add(o);
					if (want.contains(o)) {
						o.add(include);
						wantObjs.add(o);
						if (o instanceof RevTag)
							wantTags.add((RevTag) o);
					}
				} catch (MissingObjectException e) {
					if (ignoreMissingUninteresting
							&& have.contains(e.getObjectId()))
						continue;
					throw e;
				}
			}
		} finally {
			q.release();
		}

		if (!wantTags.isEmpty()) {
			all = new ArrayList<>(wantTags.size());
			for (RevTag tag : wantTags)
				all.add(tag.getObject());
			q = walker.parseAny(all, true);
			try {
				while (q.next() != null) {
					// Just need to pop the queue item to parse the object.
				}
			} finally {
				q.release();
			}
		}

		if (walker instanceof DepthWalk.ObjectWalk) {
			DepthWalk.ObjectWalk depthWalk = (DepthWalk.ObjectWalk) walker;
			for (RevObject obj : wantObjs) {
				depthWalk.markRoot(obj);
			}
			// Mark the tree objects associated with ""have"" commits as
			// uninteresting to avoid writing redundant blobs. A normal RevWalk
			// lazily propagates the ""uninteresting"" state from a commit to its
			// tree during the walk, but DepthWalks can terminate early so
			// preemptively propagate that state here.
			for (RevObject obj : haveObjs) {
				if (obj instanceof RevCommit) {
					RevTree t = ((RevCommit) obj).getTree();
					depthWalk.markUninteresting(t);
				}
			}

			if (unshallowObjects != null) {
				for (ObjectId id : unshallowObjects) {
					depthWalk.markUnshallow(walker.parseAny(id));
				}
			}
		} else {
			for (RevObject obj : wantObjs)
				walker.markStart(obj);
		}
		for (RevObject obj : haveObjs)
			walker.markUninteresting(obj);

		final int maxBases = config.getDeltaSearchWindowSize();
		Set<RevTree> baseTrees = new HashSet<>();
		BlockList<RevCommit> commits = new BlockList<>();
		Set<ObjectId> roots = new HashSet<>();
		RevCommit c;
		while ((c = walker.next()) != null) {
			if (exclude(c))
				continue;
			if (c.has(RevFlag.UNINTERESTING)) {
				if (baseTrees.size() <= maxBases)
					baseTrees.add(c.getTree());
				continue;
			}

			commits.add(c);
			if (c.getParentCount() == 0) {
				roots.add(c.copy());
			}
			countingMonitor.update(1);
		}
		stats.rootCommits = Collections.unmodifiableSet(roots);

		if (shallowPack) {
			for (RevCommit cmit : commits) {
				addObject(cmit, 0);
			}
		} else {
			int commitCnt = 0;
			boolean putTagTargets = false;
			for (RevCommit cmit : commits) {
				if (!cmit.has(added)) {
					cmit.add(added);
					addObject(cmit, 0);
					commitCnt++;
				}

				for (int i = 0; i < cmit.getParentCount(); i++) {
					RevCommit p = cmit.getParent(i);
					if (!p.has(added) && !p.has(RevFlag.UNINTERESTING)
							&& !exclude(p)) {
						p.add(added);
						addObject(p, 0);
						commitCnt++;
					}
				}

				if (!putTagTargets && 4096 < commitCnt) {
					for (ObjectId id : tagTargets) {
						RevObject obj = walker.lookupOrNull(id);
						if (obj instanceof RevCommit
								&& obj.has(include)
								&& !obj.has(RevFlag.UNINTERESTING)
								&& !obj.has(added)) {
							obj.add(added);
							addObject(obj, 0);
						}
					}
					putTagTargets = true;
				}
			}
		}
		commits = null;

		if (thin && !baseTrees.isEmpty()) {
			BaseSearch bases = new BaseSearch(countingMonitor, baseTrees, //
					objectsMap, edgeObjects, reader);
			RevObject o;
			while ((o = walker.nextObject()) != null) {
				if (o.has(RevFlag.UNINTERESTING))
					continue;
				if (exclude(o))
					continue;

				int pathHash = walker.getPathHashCode();
				byte[] pathBuf = walker.getPathBuffer();
				int pathLen = walker.getPathLength();
				bases.addBase(o.getType(), pathBuf, pathLen, pathHash);
				filterAndAddObject(o, o.getType(), pathHash, want);
				countingMonitor.update(1);
			}
		} else {
			RevObject o;
			while ((o = walker.nextObject()) != null) {
				if (o.has(RevFlag.UNINTERESTING))
					continue;
				if (exclude(o))
					continue;
				filterAndAddObject(o, o.getType(), walker.getPathHashCode(), want);
				countingMonitor.update(1);
			}
		}

		for (CachedPack pack : cachedPacks)
			countingMonitor.update((int) pack.getObjectCount());
		endPhase(countingMonitor);
		stats.timeCounting = System.currentTimeMillis() - countingStart;
		stats.bitmapIndexMisses = -1;
	}"
722,4413679.txt,none,"        public void onClose(CachedOutputStream cos) {
            // bytes were already copied after flush
            try {
                byte[] bytes = cos.getBytes();
                synchronized (outbound) {
                    outbound.add(bytes);
                }
            } catch (Exception e) {
                LOG.fine(""Can't record message from output stream class: ""
                         + cos.getOut().getClass().getName());
            }
        }"
723,3700134.txt,none,"    public NamedThreadFactory(String name, boolean daemon){
        this.name = name;
        this.daemon = daemon;
        SecurityManager s = System.getSecurityManager();
        group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();
    }"
724,9342880.txt,none,"    @Override
    public boolean requestWindowFocus() {
        CEmbeddedFrame.updateGlobalFocusedWindow(target);
        target.synthesizeWindowActivation(true);
        return true;
    }"
725,5979331.txt,none,"    private void convertToMavenProject(final IProject project) throws InterruptedException {
        Job job = new Job(""Enable Maven nature."") {

            @Override
            protected IStatus run(IProgressMonitor monitor) {
                try {
                    ResolverConfiguration configuration = new ResolverConfiguration();
                    configuration.setResolveWorkspaceProjects(true);
                    configuration.setSelectedProfiles(""""); //$NON-NLS-1$

                    final boolean hasMavenNature = project
                            .hasNature(IMavenConstants.NATURE_ID);

                    IProjectConfigurationManager configurationManager = MavenPlugin
                            .getProjectConfigurationManager();

                    configurationManager.enableMavenNature(project,
                            configuration, monitor);

                    if (!hasMavenNature) {
                        configurationManager.updateProjectConfiguration(
                                project, monitor);
                    }
                } catch (CoreException ex) {
                    AwsToolkitCore.getDefault().reportException(ex.getMessage(), ex);
                }
                return Status.OK_STATUS;
            }
        };
        job.schedule();
        job.join();
    }"
726,9292929.txt,none,"        public Image createImageFromFile(final String file, final double width, final double height) {
            final long image = nativeCreateNSImageFromFileContents(file);
            nativeSetNSImageSize(image, width, height);
            return createImage(image, width, height);
        }"
727,7085469.txt,none,"        @Override
        public V computeIfAbsent(K key,
                Function<? super K, ? extends V> mappingFunction) {
            throw new UnsupportedOperationException();
        }"
728,8348990.txt,major,"	private static boolean handleAspectAnnotation(RuntimeAnnos runtimeAnnotations, AjAttributeStruct struct) {
		AnnotationGen aspect = getAnnotation(runtimeAnnotations, AjcMemberMaker.ASPECT_ANNOTATION);
		if (aspect != null) {
			// semantic check for inheritance (only one level up)
			boolean extendsAspect = false;
			if (!""java.lang.Object"".equals(struct.enclosingType.getSuperclass().getName())) {
				if (!struct.enclosingType.getSuperclass().isAbstract() && struct.enclosingType.getSuperclass().isAspect()) {
					reportError(""cannot extend a concrete aspect"", struct);
					return false;
				}
				extendsAspect = struct.enclosingType.getSuperclass().isAspect();
			}

			NameValuePair aspectPerClause = getAnnotationElement(aspect, VALUE);
			final PerClause perClause;
			if (aspectPerClause == null) {
				// empty value means singleton unless inherited
				if (!extendsAspect) {
					perClause = new PerSingleton();
				} else {
					perClause = new PerFromSuper(struct.enclosingType.getSuperclass().getPerClause().getKind());
				}
			} else {
				String perX = aspectPerClause.getValue().stringifyValue();
				if (perX == null || perX.length() <= 0) {
					perClause = new PerSingleton();
				} else {
					perClause = parsePerClausePointcut(perX, struct);
				}
			}
			if (perClause == null) {
				// could not parse it, ignore the aspect
				return false;
			} else {
				perClause.setLocation(struct.context, -1, -1);// struct.context.getOffset(),
				// struct.context.getOffset()+1);//FIXME
				// AVASM
				// Not setting version here
				// struct.ajAttributes.add(new AjAttribute.WeaverVersionInfo());
				AjAttribute.Aspect aspectAttribute = new AjAttribute.Aspect(perClause);
				struct.ajAttributes.add(aspectAttribute);
				FormalBinding[] bindings = new org.aspectj.weaver.patterns.FormalBinding[0];
				final IScope binding;
				binding = new BindingScope(struct.enclosingType, struct.context, bindings);

				// // we can't resolve here since the perclause typically refers
				// to pointcuts
				// // defined in the aspect that we haven't told the
				// BcelObjectType about yet.
				//
				// perClause.resolve(binding);

				// so we prepare to do it later...
				aspectAttribute.setResolutionScope(binding);
				return true;
			}
		}
		return false;
	}"
729,5102180.txt,none,"    @Override
    protected CloseableIteration<? extends BindingSet, QueryEvaluationException> evaluateInternal(TupleExpr tupleExpr, Dataset dataset, BindingSet bindings, boolean includeInferred) throws SailException {
        // Clone the tuple expression to allow for more aggressive optimizations
        tupleExpr = tupleExpr.clone();

        if (!(tupleExpr instanceof QueryRoot)) {
            // Add a dummy root node to the tuple expressions to allow the
            // optimizers to modify the actual root node
            tupleExpr = new QueryRoot(tupleExpr);
        }

        try {
            KiWiTripleSource tripleSource = new KiWiTripleSource(this,includeInferred);
            EvaluationStrategy strategy = new EvaluationStrategyImpl(tripleSource, dataset);

            new BindingAssigner().optimize(tupleExpr, dataset, bindings);
            new ConstantOptimizer(strategy).optimize(tupleExpr, dataset, bindings);
            new CompareOptimizer().optimize(tupleExpr, dataset, bindings);
            new ConjunctiveConstraintSplitter().optimize(tupleExpr, dataset, bindings);
            new DisjunctiveConstraintOptimizer().optimize(tupleExpr, dataset, bindings);
            new SameTermFilterOptimizer().optimize(tupleExpr, dataset, bindings);
            new QueryModelNormalizer().optimize(tupleExpr, dataset, bindings);
            new QueryJoinOptimizer(new KiWiEvaluationStatistics()).optimize(tupleExpr, dataset, bindings);
            new IterativeEvaluationOptimizer().optimize(tupleExpr, dataset, bindings);
            new FilterOptimizer().optimize(tupleExpr, dataset, bindings);
            new OrderLimitOptimizer().optimize(tupleExpr, dataset, bindings);

            return strategy.evaluate(tupleExpr, EmptyBindingSet.getInstance());

        } catch (QueryEvaluationException e) {
            throw new SailException(e);
        }
    }"
730,8801664.txt,none,"    protected XmlElement toXML() {
        XmlElement portElement = XMLUtil.BUILDER.newFragment(GraphSchema.NS, GraphSchema.PORT_TAG);

        XmlElement idElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_ID_TAG);
        idElement.addChild(getID());

        if (this.name != null) {
            // TODO control ports might have name?
            XmlElement nameElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NAME_TAG);
            nameElement.addChild(this.name);
        }

        XmlElement nodeElement = portElement.addElement(GraphSchema.NS, GraphSchema.PORT_NODE_TAG);
        nodeElement.addChild(this.node.getID());

        return portElement;
    }"
731,8705503.txt,none,"private void createHandleForFixed () {
	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
	gtk_widget_set_has_surface_or_window (fixedHandle, true);
}"
732,8666215.txt,minor,"    private boolean fetchNext() throws IgniteCheckedException {
        if (data == null)
            return false;

        try {
            if (!data.next()) {
                close();

                return false;
            }

            if (res != null) {
                Value[] values = res.currentRow();

                for (int c = 0; c < row.length; c++) {
                    Value val = values[c];

                    if (val instanceof GridH2ValueCacheObject) {
                        GridH2ValueCacheObject valCacheObj = (GridH2ValueCacheObject)values[c];

                        row[c] = valCacheObj.getObject(true);
                    }
                    else
                        row[c] = val.getObject();
                }
            }
            else {
                for (int c = 0; c < row.length; c++)
                    row[c] = data.getObject(c + 1);
            }

            return true;
        }
        catch (SQLException e) {
            throw new IgniteSQLException(e);
        }
    }"
733,9094331.txt,none,"        Warning(String message, Object call) {
            this.message = message;
            this.call = call;
        }"
734,9013810.txt,none,"  public FieldAnalysisRequest setFieldTypes(List<String> fieldTypes) {
    this.fieldTypes = fieldTypes;
    return this;
  }"
735,6734039.txt,none,"    @Override
    public APIRequestGetAdCreatives requestField (String field, boolean value) {
      this.requestFieldInternal(field, value);
      return this;
    }"
736,8579381.txt,none,"  public long getCallMethodCount(String callQueueName, String methodName) {
    long methodCount;

    Map<String, Long> methodCountMap = callQueueMethodCountsSummary.getOrDefault(callQueueName, null);

    if (null != methodCountMap) {
      methodCount = methodCountMap.getOrDefault(methodName, 0L);
    } else {
      methodCount = 0L;
    }

    return methodCount;
  }"
737,7373719.txt,none,"    private void notifyConflict() {
        final Shell parentShell = ShellUtils.getWorkbenchShell();

        UIHelpers.runOnUIThread(true, new Runnable() {
            @Override
            public void run() {
                MessageDialog.openWarning(
                    parentShell,
                    Messages.getString(""EclipseConnectionConflictHandler.ConnectionExistsDialogTitle""), //$NON-NLS-1$
                    Messages.getString(""EclipseConnectionConflictHandler.ConnectionExistsDialogText"")); //$NON-NLS-1$
            }
        });
    }"
738,8777301.txt,none,"    @Override //Object
    public int hashCode() {
      int result = 1;
      result = PRIME * result
          + ((serverAddress == null) ? 0 : serverAddress.hashCode());
      result = PRIME * result + ((protocol == null) ? 0 : protocol.hashCode());
      result = PRIME * result + ((rpcKind == null) ? 0 : rpcKind.hashCode());
      return result;
    }"
739,6108350.txt,none,"        @Override
        public boolean hasNext()
        {
            return this.currentIndex != CodePointAdapter.this.adapted.length();
        }"
740,6457258.txt,minor,"	@Override
	public String getLoggerLevel(String loggerName) {
		String result = null;

/*[IF Sidecar19-SE]*/
		try {
			Object logger = getLoggerFromName(loggerName);
/*[ELSE]	
			Logger logger = LogManager.getLogManager().getLogger(loggerName);
/*[ENDIF]*/			
			
			if (logger != null) {
				// The named Logger exists. Now attempt to obtain its log level.
/*[IF Sidecar19-SE]*/
				Object level = logger_getLevel.invoke(logger);
/*[ELSE]					
				Level level = logger.getLevel();
/*[ENDIF]*/					
				if (level != null) {
/*[IF Sidecar19-SE]*/
					result = (String)level_getName.invoke(level);
/*[ELSE]	
					result = level.getName();
/*[ENDIF]*/	
				} else {
					// A null return from getLevel() means that the Logger
					// is inheriting its log level from an ancestor. Return an
					// empty string to the caller.
					result = """"; //$NON-NLS-1$
				}
			}
/*[IF Sidecar19-SE]*/
		} catch (Exception e) {
			throw handleError(e);
		}
/*[ENDIF]*/
		
		return result;
	}"
741,4172212.txt,none,"    public WeightedAshwoodEntitySorter() {
        this.weightedDbEntityComparator = new WeightedDbEntityComparator();
        this.weightedObjEntityComparator = new WeightedObjEntityComparator();
        this.entityWeights = Collections.emptyMap();
    }"
742,9024733.txt,none,"  protected void doDeleteById(DeleteUpdateCommand cmd) throws IOException {

    setupRequest(cmd);

    boolean dropCmd = false;
    if (!forwardToLeader) {
      dropCmd  = versionDelete(cmd);
    }

    if (dropCmd) {
      // TODO: do we need to add anything to the response?
      return;
    }

    doDistribDeleteById(cmd);

    // cmd.getIndexId == null when delete by query
    // TODO: what to do when no idField?
    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {
      if (deleteResponse == null) {
        deleteResponse = new NamedList<>(1);
        rsp.add(""deletes"",deleteResponse);
      }
      if (scratch == null) scratch = new CharsRefBuilder();
      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);
      deleteResponse.add(scratch.toString(), cmd.getVersion());  // we're returning the version of the delete.. not the version of the doc we deleted.
    }
  }"
743,4491391.txt,none,"   @Override
   public void initializeDocument( final JCas documentValue ) {
      _instance = 1;
      final SourceData sourceData = SourceMetadataUtil.getSourceData( documentValue );
      if ( sourceData == null ) {
         LOGGER.warn( ""No document source data."" );
         setEmptyDocInfo();
         return;
      }
      try {
         _encounter = SourceMetadataUtil.getEncounterNum( sourceData );
         _provider = SourceMetadataUtil.getProviderId( sourceData );
         _start = SourceMetadataUtil.getStartDate( sourceData );
      } catch ( ResourceProcessException rpE ) {
         LOGGER.warn( ""Error setting document source data: "" + rpE.getMessage() );
         setEmptyDocInfo();
      }
   }"
744,8331771.txt,none,"  public static void m() {
    C c = new C();
    E1 e1 = new E1();
    E2 e2 = new E2();
    c.foo(e1,e2.getClass());
  }"
745,4055848.txt,none,"  public static String addLengthPrefixedCoder(
      String coderId, RunnerApi.Components.Builder components, boolean replaceWithByteArrayCoder) {
    String lengthPrefixedByteArrayCoderId = addLengthPrefixByteArrayCoder(components);
    String urn = components.getCodersOrThrow(coderId).getSpec().getSpec().getUrn();

    // We handle three cases:
    //  1) the requested coder is already a length prefix coder. In this case we just honor the
    //     request to replace the coder with a byte array coder.
    //  2) the requested coder is a known coder but not a length prefix coder. In this case we
    //     rebuild the coder by recursively length prefixing any unknown component coders.
    //  3) the requested coder is an unknown coder. In this case we either wrap the requested coder
    //     with a length prefix coder or replace it with a length prefix byte array coder.
    if (ModelCoders.LENGTH_PREFIX_CODER_URN.equals(urn)) {
      return replaceWithByteArrayCoder ? lengthPrefixedByteArrayCoderId : coderId;
    } else if (ModelCoders.urns().contains(urn)) {
      return addForModelCoder(coderId, components, replaceWithByteArrayCoder);
    } else {
      return replaceWithByteArrayCoder
          ? lengthPrefixedByteArrayCoderId
          : addWrappedWithLengthPrefixCoder(coderId, components);
    }
  }"
746,7702332.txt,minor,"  private void handleChainFromFilter(
      StreamTypeRecord streamType,
      MethodInvocationTree observableDotFilter,
      Tree filterMethodOrLambda,
      VisitorState state) {
    MethodInvocationTree outerCallInChain = observableDotFilter;
    if (outerCallInChain == null) {
      return;
    }
    // Traverse the observable call chain out through any pass-through methods
    do {
      outerCallInChain = observableOuterCallInChain.get(outerCallInChain);
      // Check for a map method (which might be a pass-through method or the first method after a
      // pass-through chain)
      MethodInvocationTree mapCallsite = observableOuterCallInChain.get(observableDotFilter);
      if (observableCallToInnerMethodOrLambda.containsKey(outerCallInChain)) {
        // Update mapToFilterMap
        Symbol.MethodSymbol mapMethod = ASTHelpers.getSymbol(outerCallInChain);
        if (streamType.isMapMethod(mapMethod)) {
          MaplikeToFilterInstanceRecord record =
              new MaplikeToFilterInstanceRecord(
                  streamType.getMaplikeMethodRecord(mapMethod), filterMethodOrLambda);
          mapToFilterMap.put(observableCallToInnerMethodOrLambda.get(outerCallInChain), record);
        }
      }
    } while (outerCallInChain != null
        && streamType.matchesType(ASTHelpers.getReceiverType(outerCallInChain), state)
        && streamType.isPassthroughMethod(ASTHelpers.getSymbol(outerCallInChain)));
  }"
747,7902148.txt,none,"    public int[] test5() {
        return new int[1];
    }"
748,8903716.txt,none,"  public IfExprStringGroupColumnStringGroupColumn() {
    super();

    // Dummy final assignments.
    arg1Column = -1;
    arg2Column = -1;
    arg3Column = -1;
  }"
749,6658744.txt,none,"    public APIRequestGetReactions requestProfileTypeField (boolean value) {
      this.requestField(""profile_type"", value);
      return this;
    }"
750,3868110.txt,none,"  public static String repeat(String s, int c) {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < c; i++)
      sb.append(s);
    return sb.toString();
  }"
751,3930845.txt,none,"    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }"
752,4301650.txt,none,"        @Override
        public String getName() {
            return name();
        }"
753,8049248.txt,none,"	protected void sequence_Fragment1_FragmentCaller(ISerializationContext context, FragmentCallerType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1));
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL));
			if (transientValues.isValueTransient(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFragmentCallerAccess().getVal1IDTerminalRuleCall_1_0(), semanticObject.getVal1());
		feeder.accept(grammarAccess.getFragment1Access().getFragValIDTerminalRuleCall_0(), semanticObject.getFragVal());
		feeder.accept(grammarAccess.getFragmentCallerAccess().getValIDTerminalRuleCall_3_0(), semanticObject.getVal());
		feeder.finish();
	}"
754,7969819.txt,none,"  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }"
755,4392544.txt,none,"    public RMConfiguration getConfiguration() {
        return configuration;
    }"
756,5107955.txt,none,"    public List getPublishers() {
        return (_publisher == null) ? (_publisher = new ArrayList()) : _publisher;
    }"
757,5283018.txt,none,"    @Override
    public Expression matches(Value v1, Value v2,
        String single, String multi, String esc) {
        return new MatchesExpression((Val) v1, (Val) v2, single, multi, esc,
            true);
    }"
758,6633155.txt,none,"  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    for (Map.Entry<String,JsonAttribute> attr: this.entrySet()) {
      if (sb.length()>0) {
        sb.append("","");
      }
      sb.append(""\"""").append(attr.getKey()).append(""\"":"").append(attr.getValue());
    }
    return sb.toString();
  }"
759,8703167.txt,none,"public static final long /*int*/ webkit_get_favicon_database () {
	assert WEBKIT1 : Webkit1AssertMsg;
	lock.lock();
	try {
		return _webkit_get_favicon_database ();
	} finally {
		lock.unlock();
	}
}"
760,5428702.txt,none,"    @Override
    public int compareTo(Cost other) {
        if (isUnknown() && other.isUnknown()) {
            return 0;
        } else if (isUnknown() && !other.isUnknown()) {
            return 1;
        } else if (!isUnknown() && other.isUnknown()) {
            return -1;
        }

        double d = this.io - other.io;
        return d == 0 ? 0 : (d > 0 ? 1 : -1);
    }"
761,6457553.txt,none,"    private String getPageEncodingFromDirective(Attributes attrs,
                                                String attrName) {
	String value = attrs.getValue(attrName);
        if (attrName.equals(""pageEncoding"")) {
            return value;
        }

        // attrName = contentType
        String contentType = value;
        String encoding = null;
        if (contentType != null) {
	    int loc = contentType.indexOf(CHARSET);
	    if (loc != -1) {
		encoding = contentType.substring(loc + CHARSET.length());
	    }
	}

	return encoding;
    }"
762,8904717.txt,none,"    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }"
763,7410446.txt,none,"	public void setInterestPolicy(InterestPolicy interestPolicy) {
		this.interestPolicy = interestPolicy;
	}"
764,5374635.txt,none,"    @SuppressWarnings(""rawtypes"")
    protected void incSpillCount(Enum counter, long numRecsSpilled) {
        PigStatusReporter reporter = PigStatusReporter.getInstance();
        if (reporter != null && reporter.getCounter(counter)!=null) {
            reporter.getCounter(counter).increment(numRecsSpilled);
        } else {
            PigHadoopLogger.getInstance().warn(mContents, ""Spill counter incremented"", counter);
        }
    }"
765,7543232.txt,none,"	@Override
	@ManagedOperation
	public void removeChannelMapping(String key) {
		Map<String, String> newChannelMappings = new ConcurrentHashMap<String, String>(this.channelMappings);
		newChannelMappings.remove(key);
		this.channelMappings = newChannelMappings;
	}"
766,7787982.txt,none,"	public static Behavior findBehavior(Component component, Class<? extends Behavior> behaviorClass)
	{
		for (Behavior behavior : component.getBehaviors(behaviorClass))
		{
			return behavior;
		}
		return null;
	}"
767,8673459.txt,none,"    public void onRemove(){
        rmCnt.incrementAndGet();

        if (delegate != null)
            delegate.onRemove();
    }"
768,6382923.txt,none,"    private void setInitialDefault(String dir) {
        if (dir == null || dir.length() <= 0) {
            initialDefault = null;
            return;
        }

        dir = new Path(dir).toOSString();
        while (dir.charAt(dir.length() - 1) == File.separatorChar) {
			dir = dir.substring(0, dir.length() - 1);
		}
        initialDefault = dir;
    }"
769,6106646.txt,none,"    public static <T> boolean removeIf(List<T> list, Predicate<? super T> predicate, Procedure<? super T> procedure)
    {
        boolean changed = false;
        for (int i = 0; i < list.size(); i++)
        {
            T each = list.get(i);
            if (predicate.accept(each))
            {
                procedure.value(each);
                list.remove(i--);
                changed = true;
            }
        }
        return changed;
    }"
770,3753095.txt,none,"        public void addValue(Object value) {
            this.values.add(value);
        }"
771,6536158.txt,none,"    public SunZodiac getZodiac(Calendar calendar) {
        int year = calendar.get(Calendar.YEAR);
        List<SunZodiac> zodiacs = zodiacsByYear.get(year);
        if (zodiacs == null) {
            zodiacs = calculateZodiacs(year);
            zodiacsByYear.clear();
            zodiacsByYear.put(year, zodiacs);
        }

        for (SunZodiac zodiac : zodiacs) {
            if (zodiac.isValid(calendar)) {
                return zodiac;
            }
        }

        return null;
    }"
772,9192832.txt,minor,"	public void widgetSelected( SelectionEvent e )
	{
		Object widget = e.widget;
		if ( widget == btnVisible )
		{
			// Notify Listeners that a change has occurred in the value
			fireValueChangedEvent( GanttLineAttributesComposite.VISIBILITY_CHANGED_EVENT,
					Boolean.valueOf( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_SELECTED ),
					( btnVisible.getSelectionState( ) == ChartCheckbox.STATE_GRAYED ) ? ChartUIExtensionUtil.PROPERTY_UNSET
							: ChartUIExtensionUtil.PROPERTY_UPDATE );
			// Notification may cause this class disposed
			if ( isDisposed( ) )
			{
				return;
			}
			// Enable/Disable UI Elements
			boolean bEnableUI = context.getUIFactory( ).canEnableUI( btnVisible );
			if ( bEnableStyles )
			{
				lblStyle.setEnabled( bEnableUI );
				cmbStyle.setEnabled( bEnableUI );
			}
			if ( bEnableWidths )
			{
				lblWidth.setEnabled( bEnableUI  );
				iscWidth.setEnabled( bEnableUI  );
			}
			if ( bEnableColor )
			{
				lblColor.setEnabled( bEnableUI );
				cmbColor.setEnabled( bEnableUI );
			}
		}
	}"
773,4490936.txt,none,"    static boolean isPrecTypeFixed(ColumnPrecisionType type) {
      return DT_PRECISION_IS_FIXED.equals(type);
    }"
774,5953028.txt,none,"    public void process(List<CloudTrailEvent> events) {
        int i = 0;
        for (CloudTrailEvent event : events) {
            validateEvent(event);
            logger.info(String.format(""Process event %d : %s"", i++, event.getEventData()));
        }
    }"
775,7965671.txt,none,"  public Iterable<JvmMember> getMembersToBeCompiled(final JvmDeclaredType type) {
    if (type instanceof JvmEnumerationType) {
      return _getMembersToBeCompiled((JvmEnumerationType)type);
    } else if (type instanceof JvmGenericType) {
      return _getMembersToBeCompiled((JvmGenericType)type);
    } else if (type != null) {
      return _getMembersToBeCompiled(type);
    } else {
      throw new IllegalArgumentException(""Unhandled parameter types: "" +
        Arrays.<Object>asList(type).toString());
    }
  }"
776,8514290.txt,none,"    private void init() throws ConfigurationException {
        if (_mshostDao != null)
            return;

        Properties dbProps = DbProperties.getDbProperties();

        _clusterServicePort = NumbersUtil.parseInt(dbProps.getProperty(""cluster.servlet.port""), DEFAULT_SERVICE_PORT);
        if (s_logger.isInfoEnabled())
            s_logger.info(""Cluster servlet port : "" + _clusterServicePort);
    }"
777,9238213.txt,none,"        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final AnnotationDescription other = (AnnotationDescription) obj;
            if (!Objects.equals(this.annotationType, other.annotationType)) {
                return false;
            }
            if (!Objects.equals(this.values, other.values)) {
                return false;
            }
            return true;
        }"
778,8833156.txt,none,"    public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }"
779,7754600.txt,none,"    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        if (other == null || getClass() != other.getClass()) return false;
        ApiError that = ApiError.class.cast(other);
        return Objects.equal(this.message, that.message) &&
                Objects.equal(this.details, that.details) &&
                Objects.equal(this.error, that.error);
    }"
780,9004407.txt,none,"    @Override
    public BytesRef next() {
      if (input.position() < end) {
        try {
          int code = input.readVInt();
          boolean newField = (code & 1) != 0;
          if (newField) {
            field = input.readString();
          }
          int prefix = code >>> 1;
          int suffix = input.readVInt();
          readTermBytes(prefix, suffix);
          return bytes;
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      } else {
        field = null;
        return null;
      }
    }"
781,6329944.txt,none,"    @Override
    public void delete(KapuaId scopeId, KapuaId groupId) throws KapuaException {
        //
        // Argument validation
        ArgumentValidator.notNull(scopeId, ""scopeId"");
        ArgumentValidator.notNull(groupId, ""groupId"");

        //
        // Check Access
        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN, Actions.delete, scopeId));

        //
        // Check existence
        if (find(scopeId, groupId) == null) {
            throw new KapuaEntityNotFoundException(Group.TYPE, groupId);
        }

        //
        // Do delete
        entityManagerSession.onTransactedAction(em -> GroupDAO.delete(em, scopeId, groupId));
    }"
782,7710744.txt,none,"    @Override
    public ByteBuf encodeHeader(ByteBufAllocator allocator) {
        ByteBuf buffer = allocator.buffer(31);

        // ttl:4
        buffer.writeInt((int) getTTL());

        // tracing:25
        CodecUtils.encodeTrace(getTracing(), buffer);

        // why~2
        CodecUtils.encodeString(getWhy(), buffer);

        return buffer;
    }"
783,5200336.txt,none,"    public SftpErrorStatusDataHandler getErrorStatusDataHandler() {
        return errorStatusDataHandler;
    }"
784,4886061.txt,none,"    public synchronized void reload() throws ItemNotFoundException, RepositoryException {
        if (isComplete()) {
            // nothing to do
            return;
        }

        NodeId id = parent.getWorkspaceId();
        Iterator<ChildInfo> childNodeInfos = factory.getItemStateFactory().getChildNodeInfos(id);
        update(childNodeInfos);
    }"
785,7761185.txt,none,"  @Override
  public int hashCode()
  {
    int result = name.hashCode();
    result = 31 * result + field.hashCode();
    result = 31 * result + (errorBoundsStdDev != null ? errorBoundsStdDev.hashCode() : 0);
    return result;
  }"
786,6679515.txt,none,"    public APIRequestGetCustomAudiences(String nodeId, APIContext context) {
      super(context, nodeId, ""/customaudiences"", ""GET"", Arrays.asList(PARAMS));
    }"
787,5657457.txt,none,"    @Override
    public MathTransform createMathTransform(final MathTransformFactory factory, final ParameterValueGroup values)
            throws ParameterNotFoundException
    {
        /*
         * The TensorParameters constant used below (WKT1 or EPSG) does not matter,
         * since both of them understand the names of the other TensorParameters.
         */
        return MathTransforms.linear(TensorParameters.WKT1.toMatrix(values));
    }"
788,8684961.txt,none,"        public ProductPromoUseInfo(String productPromoId, String productPromoCodeId, BigDecimal totalDiscountAmount, BigDecimal quantityLeftInActions, Map<ShoppingCartItem,BigDecimal> usageInfoMap) {
            this.productPromoId = productPromoId;
            this.productPromoCodeId = productPromoCodeId;
            this.totalDiscountAmount = totalDiscountAmount;
            this.quantityLeftInActions = quantityLeftInActions;
            this.usageInfoMap = usageInfoMap;
        }"
789,4431359.txt,none,"    @Override
    protected Collection<IPZoneEntity> loadFromService(ISecurityDataEnrichServiceClient client) {
        return client.listIPZones();
    }"
790,6173466.txt,none,"  private void addConfigPropertyToXML(String name, String value) {
    if (configuration().containsKey(name)) {
      pluginElement.getSingleChild(""configuration"").getSingleChild(name).setText(value);
    } else if (configuration.isEmpty()) {
      pluginElement.appendChild(createElement(""configuration"", createElement(name, value)));
    } else {
      pluginElement.getSingleChild(""configuration"").appendChild(createElement(name, value));
    }
  }"
791,6296681.txt,none,"        @Override
        public void failed(Throwable x)
        {
            completeExceptionally(x);
        }"
792,7560859.txt,none,"	@Nullable
	private ResourceUrlProvider findResourceUrlProvider(HttpServletRequest request) {
		if (this.resourceUrlProvider != null) {
			return this.resourceUrlProvider;
		}
		return (ResourceUrlProvider) request.getAttribute(
				ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);
	}"
793,7881040.txt,none,"  @Override
  public ArchiveMemberPath getRelativeArchiveMemberPath(SourcePath sourcePath) {
    Preconditions.checkState(sourcePath instanceof ArchiveMemberSourcePath);
    ArchiveMemberSourcePath archiveMemberSourcePath = (ArchiveMemberSourcePath) sourcePath;

    Path archiveRelativePath = getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());

    return ArchiveMemberPath.of(archiveRelativePath, archiveMemberSourcePath.getMemberPath());
  }"
794,8537951.txt,none,"    @Override
    public void setLink(String elementName, String padName, Link link, Direction direction) {
        elements.get(elementName).setLink(padName, link, direction);
    }"
795,8435790.txt,none,"    public MethodNotFoundException(Object pojo, String methodName, Throwable cause) {
        super(""Method with name: "" + methodName + "" not found on bean: "" + pojo + "" of type:"" + ObjectHelper.className(pojo), null, cause);
        this.methodName = methodName;
        this.bean = pojo;
    }"
796,5816939.txt,none,"    public static final <S, E> Iterator<E> applyAll(final S start, final Traversal.Admin<S, E> traversal) {
        traversal.reset();
        traversal.addStart(traversal.getTraverserGenerator().generate(start, traversal.getStartStep(), 1l));
        return traversal; // flatMap
    }"
797,5023689.txt,major,"  public int compareTo(FactPartition o) {
    int colComp = this.partCol.compareTo(o.partCol);
    if (colComp == 0) {
      int partComp = 0;
      if (this.partSpec != null) {
        if (o.partSpec == null) {
          partComp = 1;
        } else {
          partComp = this.partSpec.compareTo(o.partSpec);
        }
      } else {
        if (o.partSpec != null) {
          partComp = -1;
        } else {
          partComp = 0;
        }
      }
      if (partComp == 0) {
        int upComp = 0;
        if (this.period != null && o.period != null) {
          upComp = this.period.compareTo(o.period);
        } else if (this.period == null && o.period == null) {
          upComp = 0;
        } else if (this.period == null) {
          upComp = -1;
        } else {
          upComp = 1;
        }
        if (upComp == 0) {
          if (this.containingPart != null) {
            if (o.containingPart == null) {
              return 1;
            }
            return this.containingPart.compareTo(o.containingPart);
          } else {
            if (o.containingPart != null) {
              return -1;
            } else {
              return 0;
            }
          }
        }
        return upComp;
      }
      return partComp;
    }
    return colComp;
  }"
798,5235274.txt,none,"    public AvroRpcResourceManager(int port) {
        this.port = port;

        List<String> propertiesFiles = new ArrayList<>();
        // set up the configuration, if there is any
        if (System.getProperty(""org.apache.oodt.cas.resource.properties"") != null) {
            propertiesFiles.add(System.getProperty(""org.apache.oodt.cas.resource.properties""));
        }

        configurationManager = ConfigurationManagerFactory
                .getConfigurationManager(Component.RESOURCE_MANAGER, propertiesFiles);
    }"
799,6279766.txt,none,"		@Override
		Body process() throws IOException {
			Response.Body body = new Response.Body();
			if (objects.size() > 0) {
				body.objects = new ArrayList<>();
				for (LfsObject o : objects) {
					addObjectInfo(body, o);
				}
			}
			return body;
		}"
800,8898055.txt,none,"    @Override
    public void reset(AggregationBuffer agg) throws HiveException {
      Aggregation myAgg = (Aggregation) agg;
      myAgg.reset();
    }"
801,7533683.txt,none,"	protected void checkClosure(int bite) throws IOException {
		if (bite < 0) {
			logger.debug(""Socket closed during message assembly"");
			throw new IOException(""Socket closed during message assembly"");
		}
	}"
802,8716970.txt,none,"void gtk_widget_set_align(long /*int*/ widget, int hAlign, int vAlign) {
	GTK.gtk_widget_set_halign (widget, hAlign);
	GTK.gtk_widget_set_valign (widget, vAlign);
}"
803,7374308.txt,none,"    public void setAlwaysSavePassword(final boolean alwaysSavePassword) {
        this.alwaysSavePassword = alwaysSavePassword;
    }"
804,8722412.txt,none,"@Override
LRESULT WM_KILLFOCUS (long /*int*/ wParam, long /*int*/ lParam) {
	LRESULT result = super.WM_KILLFOCUS (wParam, lParam);
	if ((style & SWT.PUSH) != 0 && getDefault ()) {
		menuShell ().setDefaultButton (null, false);
	}
	return result;
}"
805,7486125.txt,none,"    @Test
    public void run5() throws Throwable {
        runTest(""test"", -5);
    }"
806,6298870.txt,none,"        @Override
        public String toString()
        {
            return String.format(""%s[i=%s,cb=%s]"",super.toString(),_info,_callback);
        }"
807,7087370.txt,none,"  public int getRoot()
  {
  	if(null != m_iter)
    	return m_iter.getRoot();
  	else
  	{
  		// NodeSetDTM will call this, and so it's not a good thing to throw 
  		// an assertion here.
  		// assertion(false, ""Can not get the root from a non-iterated NodeSequence!"");
  		return DTM.NULL;
  	}
  }"
808,5402098.txt,none,"    @Override
    public long spill() {
        // Make sure we have something to spill.  Don't create empty
        // files, as that will make a mess.
        if (mContents.size() == 0) return 0;

        // Lock the container before I spill, so that iterators aren't
        // trying to read while I'm mucking with the container.
        long spilled = 0;
        synchronized (mContents) {
            DataOutputStream out = null;
            try {
                out = getSpillFile();
            }  catch (IOException ioe) {
                // Do not remove last file from spilled array. It was not
                // added as File.createTmpFile threw an IOException
                warn(
                    ""Unable to create tmp file to spill to disk"", PigWarning.UNABLE_TO_CREATE_FILE_TO_SPILL, ioe);
                return 0;
            }
            try {
                Iterator<Tuple> i = mContents.iterator();
                while (i.hasNext()) {
                    SEDES.writeDatum(out, i.next(), DataType.TUPLE);
                    spilled++;
                    // This will spill every 16383 records.
                    if ((spilled & 0x3fff) == 0) reportProgress();
                }
                out.flush();
                out.close();
                out = null;
                mContents.clear();
            } catch (Throwable e) {
                // Remove the last file from the spilled array, since we failed to
                // write to it.
                mSpillFiles.remove(mSpillFiles.size() - 1);
                warn(
                    ""Unable to spill contents to disk"", PigWarning.UNABLE_TO_SPILL, e);
                return 0;
            } finally {
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException e) {
                        warn(""Error closing spill"", PigWarning.UNABLE_TO_CLOSE_SPILL_FILE, e);
                    }
                }
            }
        }
        // Increment the spill count
        incSpillCount(PigCounters.SPILLABLE_MEMORY_MANAGER_SPILL_COUNT);
        return spilled;
    }"
809,4874140.txt,minor,"  private static ImmutableDictionaryReader loadDictionary(PinotDataBuffer dictionaryBuffer, ColumnMetadata metadata,
      boolean loadOnHeap) {
    FieldSpec.DataType dataType = metadata.getDataType();
    if (loadOnHeap) {
      String columnName = metadata.getColumnName();
      LOGGER.info(""Loading on-heap dictionary for column: {}"", columnName);
    }

    int length = metadata.getCardinality();
    switch (dataType) {
      case INT:
        return (loadOnHeap) ? new OnHeapIntDictionary(dictionaryBuffer, length)
            : new IntDictionary(dictionaryBuffer, length);

      case LONG:
        return (loadOnHeap) ? new OnHeapLongDictionary(dictionaryBuffer, length)
            : new LongDictionary(dictionaryBuffer, length);

      case FLOAT:
        return (loadOnHeap) ? new OnHeapFloatDictionary(dictionaryBuffer, length)
            : new FloatDictionary(dictionaryBuffer, length);

      case DOUBLE:
        return (loadOnHeap) ? new OnHeapDoubleDictionary(dictionaryBuffer, length)
            : new DoubleDictionary(dictionaryBuffer, length);

      case STRING:
        int numBytesPerValue = metadata.getColumnMaxLength();
        byte paddingByte = (byte) metadata.getPaddingCharacter();
        return loadOnHeap ? new OnHeapStringDictionary(dictionaryBuffer, length, numBytesPerValue, paddingByte)
            : new StringDictionary(dictionaryBuffer, length, numBytesPerValue, paddingByte);

      case BYTES:
        numBytesPerValue = metadata.getColumnMaxLength();
        return new BytesDictionary(dictionaryBuffer, length, numBytesPerValue);

      default:
        throw new IllegalStateException(""Illegal data type for dictionary: "" + dataType);
    }
  }"
810,7856535.txt,none,"    public boolean isPersistent() {
      return persistent;
    }"
811,7674694.txt,none,"	private void addJobExecutionListener() {
		// Add all job execution listeners available in the bean factory
		// We won't have multiple batch job definitions on a given job module; hence all the job execution listeners
		// available in the bean factory correspond to the job module's batch job.
		Map<String, JobExecutionListener> listeners = this.beanFactory.getBeansOfType(JobExecutionListener.class);
		this.jobExecutionListeners.addAll(listeners.values());
	}"
812,8419610.txt,none,"    protected void buildServiceFromWSDL(String url) {
        getDefinition(url);
        super.buildServiceFromWSDL(url);
    }"
813,9442366.txt,none,"    private static void setFieldValue(Field field, String value) {
        try {
            field.set(null, value);
        } catch (IllegalArgumentException | IllegalAccessException e) {
            throw new Error(""Unable to access or set message for field "" + field.getName());
        }
    }"
814,6623370.txt,none,"    private ByteArrayInputStream getInputStream(final byte[] bytes) {
        return new ByteArrayInputStream(bytes);
    }"
815,5177811.txt,none,"    private FunctionDesc findAggrFuncFromCubeDesc(FunctionDesc aggrFunc) {
        for (MeasureDesc measure : cubeDesc.getMeasures()) {
            if (measure.getFunction().equals(aggrFunc))
                return measure.getFunction();
        }
        return aggrFunc;
    }"
816,7210387.txt,none,"  public void severe(String msg, Object... params) {
    if (isSevereEnabled()) {
      CallerDetails details = inferCaller();
      logger.logp(Level.SEVERE, details.clazz, details.method, msg, params);
    }
  }"
817,7523131.txt,none,"	@Override
	public void beforeStep(StepExecution stepExecution) {

	}"
818,3790421.txt,none,"  @Override
  public final Object getUidOfPeriod(int periodIndex) {
    int childIndex = getChildIndexByPeriodIndex(periodIndex);
    int firstPeriodIndexInChild = getFirstPeriodIndexByChildIndex(childIndex);
    Object periodUidInChild =
        getTimelineByChildIndex(childIndex).getUidOfPeriod(periodIndex - firstPeriodIndexInChild);
    return getConcatenatedUid(getChildUidByChildIndex(childIndex), periodUidInChild);
  }"
819,6133230.txt,none,"	@Override
	protected void addUserInputPages() {
		String initialSetting = getNameUpdating().getCurrentElementName();
		RenameInputWizardPage inputPage = createInputPage(fInputPageDescription,
				initialSetting);
		inputPage.setImageDescriptor(fInputPageImageDescriptor);
		addPage(inputPage);
	}"
820,6846111.txt,none,"	@Override
	public void beginTask(String name, int totalWork) {
		monitor.beginTask(name, totalWork);
		fireMsgString(name);
	}"
821,6893083.txt,none,"    public Content getTagletOutput(Doc holder, TagletWriter writer) {
        throw new IllegalArgumentException(""Method not supported in taglet "" + getName() + ""."");
    }"
822,7026284.txt,critical,"  public void scanLibrary(boolean waitTillComplete)
  {
    doThoroughLibScan = true;
    establishMountPoints();
    if (!waitTillComplete)
      libraryImportScan();
    else
    {
      synchronized (importLock)
      {
        libraryImportScan();
        while (currentlyImporting)
        {
          try { importLock.wait(0);}catch(InterruptedException e){}
        }
      }
    }
  }"
823,5497900.txt,none,"    public QmfEvent createUnsubscribeEvent()
    {
        QmfEvent unsubscribe = new QmfEvent(_unsubscribeSchema);
        unsubscribe.setSeverity(""info"");
        unsubscribe.setValue(""dest"", getStringValue(""name""));
        // TODO Not sure of a way to get these for Java Broker Subscription.
        //unsubscribe.setValue(""rhost"", _connection.getName());
        //unsubscribe.setValue(""user"", getStringValue(""authIdentity""));
        return unsubscribe;
    }"
824,8295253.txt,none,"    private QueryBuilder convertCustomFlagCriterion(SearchQuery.CustomFlagCriterion criterion) {
        QueryBuilder termQueryBuilder = termQuery(JsonMessageConstants.USER_FLAGS, criterion.getFlag());
        if (criterion.getOperator().isSet()) {
            return termQueryBuilder;
        } else {
            return boolQuery().mustNot(termQueryBuilder);
        }
    }"
825,4106430.txt,none,"	public int size()
	{
		return trajectory.size();
	}"
826,8850497.txt,none,"    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }"
827,3819885.txt,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONDITIONAL_WRITER:
        return getConditionalWriter();

      case UPDATES:
        return getUpdates();

      }
      throw new java.lang.IllegalStateException();
    }"
828,5693079.txt,none,"    public String getOutputName() {
        if (this.prefix == null) {
            return this.localName;
        } else {
            return this.prefix + "":"" + this.localName;
        }
    }"
829,8495850.txt,minor,"    @Override
    public void execute() throws ResourceUnavailableException, InsufficientCapacityException, ServerApiException, ConcurrentOperationException,
        ResourceAllocationException, NetworkRuleConflictException {

        Map<String, String> dm = new HashMap();

        dm.put(ApiConstants.S3_ACCESS_KEY, getAccessKey());
        dm.put(ApiConstants.S3_SECRET_KEY, getSecretKey());
        dm.put(ApiConstants.S3_END_POINT, getEndPoint());
        dm.put(ApiConstants.S3_BUCKET_NAME, getBucketName());

        if (getSigner() != null && (getSigner().equals(ApiConstants.S3_V3_SIGNER) || getSigner().equals(ApiConstants.S3_V4_SIGNER))) {
            dm.put(ApiConstants.S3_SIGNER, getSigner());
        }
        if (isHttps() != null) {
            dm.put(ApiConstants.S3_HTTPS_FLAG, isHttps().toString());
        }
        if (getConnectionTimeout() != null) {
            dm.put(ApiConstants.S3_CONNECTION_TIMEOUT, getConnectionTimeout().toString());
        }
        if (getMaxErrorRetry() != null) {
            dm.put(ApiConstants.S3_MAX_ERROR_RETRY, getMaxErrorRetry().toString());
        }
        if (getSocketTimeout() != null) {
            dm.put(ApiConstants.S3_SOCKET_TIMEOUT, getSocketTimeout().toString());
        }
        if (getConnectionTtl() != null) {
            dm.put(ApiConstants.S3_CONNECTION_TTL, getConnectionTtl().toString());
        }
        if (getUseTCPKeepAlive() != null) {
            dm.put(ApiConstants.S3_USE_TCP_KEEPALIVE, getUseTCPKeepAlive().toString());
        }

        try{
            ImageStore result = _storageService.discoverImageStore(null, null, ""S3"", null, dm);
            ImageStoreResponse storeResponse;
            if (result != null) {
                storeResponse = _responseGenerator.createImageStoreResponse(result);
                storeResponse.setResponseName(getCommandName());
                storeResponse.setObjectName(""imagestore"");
                setResponseObject(storeResponse);
            } else {
                throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ""Failed to add S3 Image Store."");
            }
        } catch (DiscoveryException ex) {
            s_logger.warn(""Exception: "", ex);
            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ex.getMessage());
        }
    }"
830,6904320.txt,none,"        @Override
        public CapturedType cloneWithMetadata(TypeMetadata md) {
            return new CapturedType(tsym, bound, bound, lower, wildcard, md) {
                @Override
                public Type baseType() { return CapturedType.this.baseType(); }
            };
        }"
831,4656234.txt,none,"	@Override
	public String toString() {
		return String.format(""cores=%d, physMem=%d, heap=%d, managed=%d"", 
				numberOfCPUCores, sizeOfPhysicalMemory, sizeOfJvmHeap, sizeOfManagedMemory);
	}"
832,4338632.txt,none,"    @Override
    public boolean canVisit( ExprNode node )
    {
        return node instanceof BranchNode;
    }"
833,7379441.txt,none,"		PropertySpecifier(String path) {

			Assert.hasText(path, ""Path must not be null/empty!"");
			this.path = path;

			this.stringMatcher = null;
			this.ignoreCase = null;
			this.valueTransformer = NoOpPropertyValueTransformer.INSTANCE;
		}"
834,9085089.txt,none,"		@Override
		public Void visitLong(long i, Void p)
		{
			if (i == 300L) {
				_visited.add(Visited.LONG);
			}
			return null;
		}"
835,8934244.txt,none,"    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case O1:
        return isSetO1();
      case O2:
        return isSetO2();
      }
      throw new IllegalStateException();
    }"
836,5497076.txt,critical,"    public static RuleSet parse(final Reader configReader, EventLoggerProvider eventLogger)
    {
        RuleSetCreator ruleSetCreator = new RuleSetCreator();

        int line = 0;
        try(Reader fileReader = configReader)
        {
            LOGGER.debug(""About to load ACL file"");
            StreamTokenizer tokenizer = new StreamTokenizer(new BufferedReader(fileReader));
            tokenizer.resetSyntax(); // setup the tokenizer

            tokenizer.commentChar(COMMENT); // single line comments
            tokenizer.eolIsSignificant(true); // return EOL as a token
            tokenizer.ordinaryChar('='); // equals is a token
            tokenizer.ordinaryChar(CONTINUATION); // continuation character (when followed by EOL)
            tokenizer.quoteChar('""'); // double quote
            tokenizer.quoteChar('\''); // single quote
            tokenizer.whitespaceChars('\u0000', '\u0020'); // whitespace (to be ignored) TODO properly
            tokenizer.wordChars('a', 'z'); // unquoted token characters [a-z]
            tokenizer.wordChars('A', 'Z'); // [A-Z]
            tokenizer.wordChars('0', '9'); // [0-9]
            tokenizer.wordChars('_', '_'); // underscore
            tokenizer.wordChars('-', '-'); // dash
            tokenizer.wordChars('.', '.'); // dot
            tokenizer.wordChars('*', '*'); // star
            tokenizer.wordChars('@', '@'); // at
            tokenizer.wordChars(':', ':'); // colon

            // parse the acl file lines
            Stack<String> stack = new Stack<>();
            int current;
            do {
                current = tokenizer.nextToken();
                line = tokenizer.lineno()-1;
                switch (current)
                {
                    case StreamTokenizer.TT_EOF:
                    case StreamTokenizer.TT_EOL:
                        if (stack.isEmpty())
                        {
                            break; // blank line
                        }

                        // pull out the first token from the bottom of the stack and check arguments exist
                        String first = stack.firstElement();
                        stack.removeElementAt(0);
                        if (stack.isEmpty())
                        {
                            throw new IllegalConfigurationException(String.format(NOT_ENOUGH_TOKENS_MSG, line));
                        }

                        // check for and parse optional initial number for ACL lines
                        Integer number = null;
                        if (first != null && first.matches(""\\d+""))
                        {
                            // set the acl number and get the next element
                            number = Integer.valueOf(first);
                            first = stack.firstElement();
                            stack.removeElementAt(0);
                        }

                        if (ACL.equalsIgnoreCase(first))
                        {
                            parseAcl(number, stack, ruleSetCreator, line);
                        }
                        else if (number == null)
                        {
                            if(""GROUP"".equalsIgnoreCase(first))
                            {
                                throw new IllegalConfigurationException(String.format(""GROUP keyword not supported at ""
                                                                                      + ""line %d. Groups should defined ""
                                                                                      + ""via a Group Provider, not in ""
                                                                                      + ""the ACL file."",
                                                                                      line));
                            }
                            else if (CONFIG.equalsIgnoreCase(first))
                            {
                                parseConfig(stack, ruleSetCreator, line);
                            }
                            else
                            {
                                throw new IllegalConfigurationException(String.format(UNRECOGNISED_INITIAL_MSG, first, line));
                            }
                        }
                        else
                        {
                            throw new IllegalConfigurationException(String.format(NUMBER_NOT_ALLOWED_MSG, first, line));
                        }

                        // reset stack, start next line
                        stack.clear();
                        break;
                    case StreamTokenizer.TT_NUMBER:
                        stack.push(Integer.toString(Double.valueOf(tokenizer.nval).intValue()));
                        break;
                    case StreamTokenizer.TT_WORD:
                        stack.push(tokenizer.sval); // token
                        break;
                    default:
                        if (tokenizer.ttype == CONTINUATION)
                        {
                            int next = tokenizer.nextToken();
                            line = tokenizer.lineno()-1;
                            if (next == StreamTokenizer.TT_EOL)
                            {
	                            break; // continue reading next line
                            }

                            // invalid location for continuation character (add one to line because we ate the EOL)
                            throw new IllegalConfigurationException(String.format(PREMATURE_CONTINUATION_MSG, line + 1));
                        }
                        else if (tokenizer.ttype == '\'' || tokenizer.ttype == '""')
                        {
                            stack.push(tokenizer.sval); // quoted token
                        }
                        else
                        {
                            stack.push(Character.toString((char) tokenizer.ttype)); // single character
                        }
                }
            } while (current != StreamTokenizer.TT_EOF);

            if (!stack.isEmpty())
            {
                throw new IllegalConfigurationException(String.format(PREMATURE_EOF_MSG, line));
            }
        }
        catch (IllegalArgumentException iae)
        {
            throw new IllegalConfigurationException(String.format(PARSE_TOKEN_FAILED_MSG, line), iae);
        }
        catch (IOException ioe)
        {
            throw new IllegalConfigurationException(CANNOT_LOAD_MSG, ioe);
        }
        return ruleSetCreator.createRuleSet(eventLogger);
    }"
837,6134590.txt,none,"	@Override
	public boolean isPropertySet(Object property) {
		return false;
	}"
838,8861277.txt,minor,"    @Override
    public boolean isExists(Object identifier) throws AppCatalogException {
        HashMap<String, String> ids;
        if (identifier instanceof Map) {
            ids = (HashMap) identifier;
        } else {
            logger.error(""Identifier should be a map with the field name and it's value"");
            throw new AppCatalogException(""Identifier should be a map with the field name and it's value"");
        }

        EntityManager em = null;
        try {
            em = AppCatalogJPAUtils.getEntityManager();
            ComputeResourcePreference existingPreference = em.find(ComputeResourcePreference.class,
                    new ComputeResourcePreferencePK(ids.get(ComputeResourcePreferenceConstants.GATEWAY_ID),
                            ids.get(ComputeResourcePreferenceConstants.RESOURCE_ID)));
            if (em.isOpen()) {
                if (em.getTransaction().isActive()){
                    em.getTransaction().rollback();
                }
                em.close();
            }
            return existingPreference != null;
        }catch (Exception e) {
            logger.error(e.getMessage(), e);
            throw new AppCatalogException(e);
        } finally {
            if (em != null && em.isOpen()) {
                if (em.getTransaction().isActive()) {
                    em.getTransaction().rollback();
                }
                em.close();
            }
        }
    }"
839,4856596.txt,none,"    public boolean setNodeReferences(ChangeLog references) {
        try {
            ChangeLog log = new ChangeLog();

            for (NodeReferences source : references.modifiedRefs()) {
                // filter out version storage intern ones
                NodeReferences target = new NodeReferences(source.getTargetId());
                for (PropertyId id : source.getReferences()) {
                    if (!hasNonVirtualItemState(id.getParentId())) {
                        target.addReference(id);
                    }
                }
                log.modified(target);
            }

            if (log.hasUpdates()) {
                pMgr.store(log);
            }
            return true;
        } catch (ItemStateException e) {
            log.error(""Error while setting references: "" + e.toString());
            return false;
        }
    }"
840,6478457.txt,none,"	@Override
	protected byte[] getVariableHeader() throws MqttException {
		try {
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			DataOutputStream outputStream = new DataOutputStream(baos);

			// Encode the Message ID
			outputStream.writeShort(msgId);


			// Write Identifier / Value Fields
			byte[] identifierValueFieldsByteArray = this.properties.encodeProperties();
			outputStream.write(identifierValueFieldsByteArray);
			outputStream.flush();
			return baos.toByteArray();
		} catch (IOException ioe) {
			throw new MqttException(ioe);
		}
	}"
841,6134879.txt,none,"		@Override
		public void customButtonPressed(ListDialogField field, int index) {
			switch (index) {
			case 0: /* add */
				editEntries(null);
				break;
			case 1: /* edit */
				List selected = field.getSelectedElements();
				editEntries((BPVariableElement) selected.get(0));
				break;
			}
		}"
842,7117242.txt,none,"    public UnicodeSet(int... pairs) {
        if ((pairs.length & 1) != 0) {
            throw new IllegalArgumentException(""Must have even number of integers"");
        }
        list = new int[pairs.length + 1]; // don't allocate extra space, because it is likely that this is a fixed set.
        len = list.length;
        int last = -1; // used to ensure that the results are monotonically increasing.
        int i = 0;
        while (i < pairs.length) {
            // start of pair
            int start = pairs[i];
            if (last >= start) {
                throw new IllegalArgumentException(""Must be monotonically increasing."");
            }
            list[i++] = last = start;
            // end of pair
            int end = pairs[i] + 1;
            if (last >= end) {
                throw new IllegalArgumentException(""Must be monotonically increasing."");
            }
            list[i++] = last = end;
        }
        list[i] = HIGH; // terminate
    }"
843,8067020.txt,none,"		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Bug377311TestLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getChildAccess().getGroup(), ""rule__Child__Group__0"");
			builder.put(grammarAccess.getRootAccess().getChildsAssignment(), ""rule__Root__ChildsAssignment"");
			builder.put(grammarAccess.getChildAccess().getNameAssignment_1(), ""rule__Child__NameAssignment_1"");
		}"
844,6788928.txt,none,"    public Input getInput() {
        return mInput;
    }"
845,9209481.txt,none,"    public DocumentCache(int size) throws SAXException {
        this(size, null);
        try {
            _dtmManager = XSLTCDTMManager.createNewDTMManagerInstance();
        } catch (Exception e) {
            throw new SAXException(e);
        }
    }"
846,5798354.txt,none,"  public Printer visitMethodTypeAnnotation(
      final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {
    throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);
  }"
847,8389037.txt,minor,"    @Override
    protected Endpoint createEndpoint(final String uri, final String remaining,
                                      final Map<String, Object> parameters) throws Exception {

        final int concurrentConsumers = getAndRemoveParameter(parameters, ""concurrentConsumers"", Integer.class, defaultConcurrentConsumers);
        final boolean limitConcurrentConsumers = getAndRemoveParameter(parameters, ""limitConcurrentConsumers"", Boolean.class, true);

        if (limitConcurrentConsumers && concurrentConsumers > MAX_CONCURRENT_CONSUMERS) {
            throw new IllegalArgumentException(
                    ""The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than ""
                            + MAX_CONCURRENT_CONSUMERS + "" was "" + concurrentConsumers);
        }

        if (concurrentConsumers < 0) {
            throw new IllegalArgumentException(""concurrentConsumers found to be "" + concurrentConsumers 
                                               + "", must be greater than 0"");
        }

        int size = 0;
        if (parameters.containsKey(""size"")) {
            size = getAndRemoveParameter(parameters, ""size"", int.class);
            if (size <= 0) {
                throw new IllegalArgumentException(""size found to be "" + size + "", must be greater than 0"");
            }
        }

        // Check if the pollTimeout argument is set (may be the case if Disruptor component is used as drop-in
        // replacement for the SEDA component.
        if (parameters.containsKey(""pollTimeout"")) {
            throw new IllegalArgumentException(""The 'pollTimeout' argument is not supported by the Disruptor component"");
        }

        final DisruptorWaitStrategy waitStrategy = getAndRemoveParameter(parameters, ""waitStrategy"", DisruptorWaitStrategy.class, defaultWaitStrategy);
        final DisruptorProducerType producerType = getAndRemoveParameter(parameters, ""producerType"", DisruptorProducerType.class, defaultProducerType);
        final boolean multipleConsumers = getAndRemoveParameter(parameters, ""multipleConsumers"", boolean.class, defaultMultipleConsumers);
        final boolean blockWhenFull = getAndRemoveParameter(parameters, ""blockWhenFull"", boolean.class, defaultBlockWhenFull);

        final DisruptorReference disruptorReference = getOrCreateDisruptor(uri, remaining, size, producerType, waitStrategy);
        final DisruptorEndpoint disruptorEndpoint = new DisruptorEndpoint(uri, this, disruptorReference, concurrentConsumers, multipleConsumers, blockWhenFull);
        disruptorEndpoint.setWaitStrategy(waitStrategy);
        disruptorEndpoint.setProducerType(producerType);
        disruptorEndpoint.configureProperties(parameters);

        return disruptorEndpoint;
    }"
848,3988942.txt,none,"        public void setX(float value) throws DOMException {
            throw element.createDOMException
                (DOMException.NO_MODIFICATION_ALLOWED_ERR, ""readonly.length"",
                 null);
        }"
849,4169148.txt,none,"  public void run() {
    try {
      JSONObject result = plugin.execute();
      int status = (Integer) result.get(""status"");
      if (status < 0) {
        System.out.println(""Error"");
        log.warn(""[ChukwaError]:"" + Exec.class + "", ""
            + result.get(""stderr""));
      } else {
        log.info(result.get(""stdout""));
      }
    } catch (Exception e) {
      log.error(""Exec output unparsable:"" + this.cmde);
    }
  }"
850,4309297.txt,none,"    @Override
    public Iterator<LdapComparator<?>> iterator()
    {
        return immutableComparatorRegistry.iterator();
    }"
851,8617061.txt,none,"    public void onBeforeWrite() {
        if (req && reqSndTs == 0) {
            reqSndTs = System.nanoTime();

            reqSndTsMillis = System.currentTimeMillis();
        }

        if (!req && resSndTs == 0) {
            resSndTs = System.nanoTime();

            resSndTsMillis = System.currentTimeMillis();
        }
    }"
852,9009658.txt,none,"  public PeerSyncWithLeader(SolrCore core, String leaderUrl, int nUpdates) {
    this.core = core;
    this.leaderUrl = leaderUrl;
    this.nUpdates = nUpdates;

    this.doFingerprint = !""true"".equals(System.getProperty(""solr.disableFingerprint""));
    this.uhandler = core.getUpdateHandler();
    this.ulog = uhandler.getUpdateLog();
    HttpClient httpClient = core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();
    this.clientToLeader = new HttpSolrClient.Builder(leaderUrl).withHttpClient(httpClient).build();

    this.updater = new PeerSync.Updater(msg(), core);

    core.getCoreMetricManager().registerMetricProducer(SolrInfoBean.Category.REPLICATION.toString(), this);
  }"
853,3749791.txt,none,"    @Override
    public boolean visit(OracleExitStatement x) {
        return true;
    }"
854,6640747.txt,none,"  public static void d(String tag, Throwable tr, String msg, Object... args) {
    if (sHandler.isLoggable(DEBUG)) {
      d(tag, formatString(msg, args), tr);
    }
  }"
855,3717906.txt,minor,"    BundleArchiveRevision(String location, File revisionDir, File file) throws IOException{
        this.revisionDir = revisionDir;
        this.location = location;
        if (!this.revisionDir.exists()) {
            this.revisionDir.mkdirs();
        }
        if(revisionDir.getAbsolutePath().startsWith(RuntimeVariables.androidApplication.getFilesDir().getAbsolutePath())){
            externalStorage = false;
        }else{
            externalStorage = true;
        }
        if(shouldCopyInstallFile(file)){
            if (isSameDriver(revisionDir, file)) {
                this.revisionLocation = FILE_PROTOCOL;
                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);
                boolean result = file.renameTo(bundleFile);
                if(!result){
                    ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);
                }
            } else {
                this.revisionLocation = FILE_PROTOCOL;
                this.bundleFile = new File(revisionDir, BUNDLE_FILE_NAME);
                ApkUtils.copyInputStreamToFile(new FileInputStream(file), bundleFile);
            }
            installSoLib(bundleFile);
        }else{
            this.revisionLocation = REFERENCE_PROTOCOL + file.getAbsolutePath();
            this.bundleFile = file;
            installSoLib(file);
        }
        updateMetadata();
    }"
856,4380229.txt,none,"    public static boolean accept(AST node) {
        return TypedefVisitor.accept(node)
            || StructVisitor.accept(node)
            || UnionVisitor.accept(node)
            || EnumVisitor.accept(node);
    }"
857,9471363.txt,none,"  public HttpInputStreamWithRelease(URI uri, HttpRequestBase req,
      HttpResponse resp) throws IOException {
    this.uri = uri;
    this.req = req;
    this.resp = resp;
    constructionStack = LOG.isDebugEnabled() ? new Exception(""stack"") : null;
    if (req == null) {
      throw new IllegalArgumentException(""Null 'request' parameter "");
    }
    try {
      inStream = resp.getEntity().getContent();
    } catch (IOException e) {
      inStream = new ByteArrayInputStream(new byte[]{});
      throw releaseAndRethrow(""getResponseBodyAsStream() in constructor -"" + e, e);
    }
  }"
858,8027029.txt,none,"  public EAttribute getThirdLevelB1_Name()
  {
    return (EAttribute)thirdLevelB1EClass.getEStructuralFeatures().get(0);
  }"
859,7197198.txt,none,"    private static void doPaginateWithRecordPaginator(
            final IdentityClient identityClient, final String compartmentId) {

        System.out.println(""Pagination Using Record Paginator"");
        System.out.println(""==================="");

        // Build a request object as normal, including any sorting or filtering you wish to do
        final ListUsersRequest request =
                ListUsersRequest.builder().compartmentId(compartmentId).build();

        // Note that the iterable is over the model object
        final Iterable<User> recordIterator =
                identityClient.getPaginators().listUsersRecordIterator(request);
        for (User user : recordIterator) {
            System.out.println(user);
        }

        System.out.println();
        System.out.println();
    }"
860,5091269.txt,none,"  protected void configure(boolean noOutput, TreeBuilder treeBuilder, Dataset dataset) {
    Preconditions.checkArgument(treeBuilder != null, ""TreeBuilder not found in the Job parameters"");
    this.noOutput = noOutput;
    this.treeBuilder = treeBuilder;
    this.dataset = dataset;
  }"
861,9127199.txt,none,"	public EReference getRadarSeries_LineAttributes() {
		return (EReference) radarSeriesEClass.getEStructuralFeatures().get(1);
	}"
862,3986050.txt,none,"    @Override
    public Object invoke( Object proxy, Method method, Object[] args )
            throws Throwable
    {
        CircuitBreaker circuitBreaker = serviceCircuitBreaker.circuitBreaker();
        try
        {
            if( !circuitBreaker.isOn() )
            {
                throw circuitBreaker.lastThrowable();
            }

            Object result = next.invoke( proxy, method, args );
            circuitBreaker.success();
            return result;
            
        } catch( Throwable throwable )
        {
            circuitBreaker.throwable( throwable );
            throw throwable;
        }
    }"
863,8602161.txt,none,"    public deleteAll_result deepCopy() {
      return new deleteAll_result(this);
    }"
864,6486798.txt,none,"		public String getName()
		{
			String lowerResult = lower.getName();
			String upperResult = upper.getName();
			
			if (lowerResult != null) {
				if (upperResult != null) {
					return lowerResult + "" merged with "" + upperResult;
				} else {
					return lowerResult;
				}
			} else {
				if (upperResult != null) {
					return upperResult;
				} else {
					return null;
				}
			}
		}"
865,7180104.txt,none,"    private void storeFile(History histNew, File file, Repository repo,
            boolean mergeHistory) throws HistoryException {

        File cacheFile;
        try {
            cacheFile = getCachedFile(file);
        } catch (ForbiddenSymlinkException e) {
            LOGGER.log(Level.FINER, e.getMessage());
            return;
        }
        History history = histNew;

        File dir = cacheFile.getParentFile();
        if (!dir.isDirectory() && !dir.mkdirs()) {
            throw new HistoryException(
                    ""Unable to create cache directory '"" + dir + ""'."");
        }

        if (mergeHistory && cacheFile.exists()) {
            history = mergeOldAndNewHistory(cacheFile, histNew, repo);
        }

        // If the merge failed, null history will be returned.
        // In such case store at least new history as a best effort.
        if (history != null) {
            writeHistoryToFile(dir, history, cacheFile);
        } else {
            writeHistoryToFile(dir, histNew, cacheFile);
        }
    }"
866,4918125.txt,none,"    protected static boolean isNonProxy(String host){
        return nonProxyHostFull.contains(host) || isPartialMatch(host);
    }"
867,4837876.txt,none,"    @Override
    public void process(final ProcessClassContext processClassContext) {
        removeIgnoredMethods(processClassContext.getCls(), processClassContext);
    }"
868,7526716.txt,none,"	protected D createModelWithId(Object id, T entity) {
		return createModelWithId(id, entity, new Object[0]);
	}"
869,8100520.txt,none,"	@Override
	/* @Nullable */
	public JvmIdentifiableElement getFeature() {
		return description.getElementOrProxy();
	}"
870,4257893.txt,none,"        @Override
        public int compare(int[] c1,
                           int[] c2) {
            if (c1.length != k) {
                throw new CombinatoricsException(CombinatoricsException.MISMATCH, c1.length, k);
            }
            if (c2.length != k) {
                throw new CombinatoricsException(CombinatoricsException.MISMATCH, c2.length, k);
            }

            // Method ""lexNorm"" works with ordered arrays.
            final int[] c1s = Arrays.copyOf(c1, k);
            final int[] c2s = Arrays.copyOf(c2, k);
            Arrays.sort(c1s);
            Arrays.sort(c2s);

            final long v1 = lexNorm(c1s);
            final long v2 = lexNorm(c2s);

            if (v1 < v2) {
                return -1;
            } else if (v1 > v2) {
                return 1;
            } else {
                return 0;
            }
        }"
871,8163123.txt,none,"    @Override
    public SubscriptionInfo lookupSubscription(String clientId, String subscriptionName) throws IOException {
        TransactionContext c = persistenceAdapter.getTransactionContext();
        try {
            return adapter.doGetSubscriberEntry(c, destination, clientId, subscriptionName);
        } catch (SQLException e) {
            JDBCPersistenceAdapter.log(""JDBC Failure: "", e);
            throw IOExceptionSupport.create(""Failed to lookup subscription for: "" + clientId + "". Reason: "" + e, e);
        } finally {
            c.close();
        }
    }"
872,4260514.txt,none,"    @Override
    protected void invoke( Class<?> c )
        throws Exception
    {
        getRuntime().getConstructors( c );
    }"
873,7404871.txt,none,"    @Override
    public boolean visitObjectReference(final Pointer objRef, boolean compressed) {
        return visitObjectReferenceInline(objRef, 0, compressed);
    }"
874,7294422.txt,none,"		public BorderFillLayout(int borderSize) {
			if (borderSize < 0)
				throw new IllegalArgumentException();
			fBorderSize = borderSize;
		}"
875,8954733.txt,none,"  static DescriptiveStatistics benchmarkTableCreate(@NotNull MicroBenchmark bench,
                                                    @NotNull BenchData data) {
    final HMSClient client = data.getClient();
    String dbName = data.dbName;
    String tableName = data.tableName;
    Table table = Util.TableBuilder.buildDefaultTable(dbName, tableName);

    return bench.measure(null,
        () -> throwingSupplierWrapper(() -> client.createTable(table)),
        () -> throwingSupplierWrapper(() -> client.dropTable(dbName, tableName)));
  }"
876,7857792.txt,minor,"  @Override
  public void setVersions(final VersionTag versionTag) {
    this.memberId = versionTag.getMemberID();
    int eVersion = versionTag.getEntryVersion();
    this.entryVersionLowBytes = (short) (eVersion & 0xffff);
    this.entryVersionHighByte = (byte) ((eVersion & 0xff0000) >> 16);
    this.regionVersionHighBytes = versionTag.getRegionVersionHighBytes();
    this.regionVersionLowBytes = versionTag.getRegionVersionLowBytes();
    if (!versionTag.isGatewayTag()
        && this.distributedSystemId == versionTag.getDistributedSystemId()) {
      if (getVersionTimeStamp() <= versionTag.getVersionTimeStamp()) {
        setVersionTimeStamp(versionTag.getVersionTimeStamp());
      } else {
        versionTag.setVersionTimeStamp(getVersionTimeStamp());
      }
    } else {
      setVersionTimeStamp(versionTag.getVersionTimeStamp());
    }
    this.distributedSystemId = (byte) (versionTag.getDistributedSystemId() & 0xff);
  }"
877,6605818.txt,none,"    public BiologicalDataItemResourceType getType() {
        return fileType;
    }"
878,5922177.txt,none,"  protected boolean validateToken(String token) {
    try {
      SignedJWT signed = SignedJWT.parse(token);
      boolean sigValid = validateSignature(signed);
      if (!sigValid) {
        LOGGER.warn(""Signature of JWT token could not be verified. Please check the public key"");
        return false;
      }
      boolean expValid = validateExpiration(signed);
      if (!expValid) {
        LOGGER.warn(""Expiration time validation of JWT token failed."");
        return false;
      }
      String currentUser = (String) org.apache.shiro.SecurityUtils.getSubject().getPrincipal();
      if (currentUser == null) {
        return true;
      }
      String cookieUser = signed.getJWTClaimsSet().getSubject();
      if (!cookieUser.equals(currentUser)) {
        return false;
      }
      return true;
    } catch (ParseException ex) {
      LOGGER.info(""ParseException in validateToken"", ex);
      return false;
    }
  }"
879,6303935.txt,none,"    public void directUpgrade()
    {
        if (state != State.PREFACE)
            throw new IllegalStateException();
        prefaceParser.directUpgrade();
    }"
880,6681713.txt,none,"  public void setMax(String max)
  {
    this.max = max;
    doUpdateMax = true;
  }"
881,3699521.txt,none,"      @java.lang.Override
      public com.alibaba.otter.canal.protocol.CanalPacket.Unsub buildPartial() {
        com.alibaba.otter.canal.protocol.CanalPacket.Unsub result = new com.alibaba.otter.canal.protocol.CanalPacket.Unsub(this);
        result.destination_ = destination_;
        result.clientId_ = clientId_;
        result.filter_ = filter_;
        onBuilt();
        return result;
      }"
882,8960720.txt,none,"    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }"
883,5339121.txt,none,"    private String getOwnerPartition(final File swapFile) {
        final String filename = swapFile.getName();
        final int indexOfDot = filename.indexOf(""."");
        if (indexOfDot < 1) {
            return null;
        }

        final int lastIndexOfDot = filename.lastIndexOf(""."");
        if (lastIndexOfDot == indexOfDot) {
            return null;
        }

        return filename.substring(indexOfDot + 1, lastIndexOfDot);
    }"
884,9293709.txt,none,"    public static String test(int arg) throws NoSuchMethodException {
        if (arg == 0) {
            return Class_getMethod02.class.getMethod(""test"").getName();
        } else if (arg == 1) {
            return Class_getMethod02.class.getMethod(""test"", int.class).getName();
        } else if (arg == 2) {
            return Class_getMethod02.class.getMethod(""main"").getName();
        } else if (arg == 3) {
            return Class_getMethod02.class.getMethod(""main"", String[].class).getName();
        } else if (arg == 4) {
            return Class_getMethod02.class.getMethod(""<init>"").getName();
        } else if (arg == 5) {
            return Class_getMethod02.class.getMethod(""<clinit>"").getName();
        }
        return null;
    }"
885,7184071.txt,major,"  private void validateArrayStep(String arrStep)
    throws QueryException
  {
    boolean wildAllowed  = true;    // * is allowed initially
    boolean digitAllowed = true;    // Digit is allowed as next char
    boolean commaAllowed = false;   // Comma is allowed as next char

    boolean afterDigit    = false;  // Last non-space was a digit
    boolean toAllowed     = false;  // Any space after digit allows ""to""
    boolean afterTo       = false;  // After ""to"" expecting range end
    boolean toInProgress  = false;  // Prior char was 't' in ""to""
    boolean spaceRequired = false;  // A whitespace is required (after ""to"")
    boolean digitRequired = false;  // Digit required after comma or ""to""

    for (int i = 1; i < arrStep.length() - 1; ++i)
    {
      char currentChar = arrStep.charAt(i);

      if (currentChar == '*')
      {
        if (!wildAllowed)
          throwArrayException(arrStep);

        wildAllowed  = false;  // We've seen the only allowed wildcard
        digitAllowed = false;  // Only whitespace is allowed afterward
      }
      else if (currentChar == ',')
      {
        if (!commaAllowed)
          throwArrayException(arrStep);

        commaAllowed  = false;
        toAllowed     = false;
        afterDigit    = false;
        afterTo       = false;
        digitRequired = true;  // Next non-space must be a digit
      }
      else if (""0123456789"".indexOf(currentChar) >= 0)
      {
        if (!digitAllowed)
          throwArrayException(arrStep);

        wildAllowed   = false; // Wildcard no longer allowed
        commaAllowed  = true;
        afterDigit    = true;
        digitRequired = false;
      }
      else if ("" \t\n\r"".indexOf(currentChar) >= 0)
      {
        // Whitespace not allowed when parsing ""to""
        if (toInProgress)
          throwArrayException(arrStep);

        if (afterDigit)
        {
          // Last non-space was a digit - next non-space is ""to"" or comma
          digitAllowed = false;
          toAllowed    = !afterTo;
          commaAllowed = true;
        }
        else if (spaceRequired)
        {
          // This is the whitespace required after ""to""
          digitAllowed  = true;
          spaceRequired = false;
          digitRequired = true;  // At least one digit must follow
        }
      }
      else if (currentChar == 't')
      {
        if (!toAllowed)
          throwArrayException(arrStep);

        toInProgress = true;  // Next char must be the 'o' in ""to""
        commaAllowed = false;
        afterDigit   = false;
      }
      else if (currentChar == 'o')
      {
        if (!toInProgress)
          throwArrayException(arrStep);

        toInProgress  = false;
        toAllowed     = false;
        afterTo       = true;
        spaceRequired = true;  // ""to"" must be followed by whitespace
      }
      else
      {
        // Invalid character
        throwArrayException(arrStep);
      }
    }

    // Empty array or only whitespace found
    if (wildAllowed)
      throwArrayException(arrStep);

    // Incomplete ""to"" or comma sequence at end of subscript
    if (toInProgress || spaceRequired || digitRequired)
      throwArrayException(arrStep);
  }"
886,3983972.txt,none,"    @Override
    public void activate()
        throws ActivationException
    {
        activation.activate( applicationModel.newActivatorsInstance(), layerInstances );
    }"
887,7759750.txt,none,"  @Override
  public ParseSpec withTimestampSpec(TimestampSpec spec)
  {
    return new TimeAndDimsParseSpec(spec, getDimensionsSpec());
  }"
888,8526436.txt,minor,"    public boolean executeSyncCmsId(NuageVspDeviceVO nuageVspDevice, SyncType syncType) {
        NuageVspDeviceVO matchingNuageVspDevice = findMatchingNuageVspDevice(nuageVspDevice);
        if (syncType == SyncType.REGISTER && matchingNuageVspDevice != null) {
            String cmsId = findNuageVspCmsIdForDeviceOrHost(matchingNuageVspDevice.getId(), matchingNuageVspDevice.getHostId());
            registerNewNuageVspDevice(nuageVspDevice.getHostId(), cmsId);
            return true;
        }

        String cmsId = findNuageVspCmsIdForDeviceOrHost(nuageVspDevice.getId(), nuageVspDevice.getHostId());

        SyncNuageVspCmsIdCommand syncCmd = new SyncNuageVspCmsIdCommand(syncType, cmsId);
        SyncNuageVspCmsIdAnswer answer = (SyncNuageVspCmsIdAnswer) _agentMgr.easySend(nuageVspDevice.getHostId(), syncCmd);
        if (answer != null) {
            if (answer.getSuccess()) {
                if (syncType == SyncType.REGISTER || answer.getSyncType() == SyncType.REGISTER) {
                    registerNewNuageVspDevice(nuageVspDevice.getHostId(), answer.getNuageVspCmsId());
                } else if (syncType == SyncType.UNREGISTER) {
                    removeLegacyNuageVspDeviceCmsId(nuageVspDevice.getId());
                }
            } else if (syncType == SyncType.AUDIT || syncType == SyncType.AUDIT_ONLY) {
                s_logger.fatal(""Nuage VSP Device with ID "" + nuageVspDevice.getId() + "" is configured with an unknown CMS ID!"");
            }
        }

        return answer != null && answer.getSuccess();
    }"
889,4197431.txt,none,"    public boolean isSkipRelationshipsLoading() {
        return skipRelationshipsLoading != null && skipRelationshipsLoading;
    }"
890,6933417.txt,none,"  @Override
  protected void consumeAttributes(AttributeHelper helper) throws ParseException
      {
    total = helper.consumeInteger(TOTAL, false);
    value = helper.consumeBoolean(null, false);
  }"
891,6834699.txt,none,		public Group getGroup_1_1() { return cGroup_1_1; }
892,6030541.txt,none,"	@Override
	public void processRTTmeasurement(long measuredRTT, Exchange exchange, int retransmissionCount){		
		//System.out.println(""Measured an RTT of "" + measuredRTT + "" after using "" + retransmissionCount + "" retries."" );
		RemoteEndpoint endpoint = getRemoteEndpoint(exchange);
		int rtoType = endpoint.getExchangeEstimatorState(exchange);
		
		// The basic rto algorithm does not care for the blind estimator, set weak/strong to false
		endpoint.setBlindStrong(false);
		endpoint.setBlindWeak(false);
		//Perform normal update of the RTO
		updateEstimator(measuredRTT, rtoType, endpoint);

	}"
893,4276035.txt,none,"    AdamsFieldStepInterpolator(final T stepSize, final FieldODEStateAndDerivative<T> reference,
                               final T[] scaled, final Array2DRowFieldMatrix<T> nordsieck,
                               final boolean isForward,
                               final FieldODEStateAndDerivative<T> globalPreviousState,
                               final FieldODEStateAndDerivative<T> globalCurrentState,
                               final FieldEquationsMapper<T> equationsMapper) {
        this(stepSize, reference, scaled, nordsieck,
             isForward, globalPreviousState, globalCurrentState,
             globalPreviousState, globalCurrentState, equationsMapper);
    }"
894,6703396.txt,none,"	@Override
	public Type getModelType()
	{
		return Type.TEMPLATE;
	}"
895,9517554.txt,none,"  @Override
  public void activateApplication(String user, ApplicationId applicationId) {

    this.writeLock.lock();
    try {
      User userDesc = getUser(user);
      if (userDesc != null && userDesc.getActiveApplications() <= 0) {
        return;
      }

      Set<ApplicationId> userApps = usersApplications.get(user);
      if (userApps == null) {
        userApps = new HashSet<ApplicationId>();
        usersApplications.put(user, userApps);
        activeUsers.incrementAndGet();
        metrics.incrActiveUsers();

        // A user is added to active list. Invalidate user-limit cache.
        userLimitNeedsRecompute();
        updateActiveUsersResourceUsage(user);
        LOG.debug(""User {} added to activeUsers, currently: {}"",
            user, activeUsers);
      }
      if (userApps.add(applicationId)) {
        metrics.activateApp(user);
      }
    } finally {
      this.writeLock.unlock();
    }
  }"
896,8025832.txt,none,		@Override public ParserRule getRule() { return rule; }
897,7231644.txt,minor,"  @Implementation(minSdk = LOLLIPOP)
  @HiddenApi
  protected static void nativeGetPointerCoords(
      long nativePtr, int pointerIndex, int historyPos, PointerCoords outPointerCoordsObj) {
    NativeInput.MotionEvent event = getNativeMotionEvent(nativePtr);
    int pointerCount = event.getPointerCount();
    validatePointerIndex(pointerIndex, pointerCount);
    validatePointerCoords(outPointerCoordsObj);

    NativeInput.PointerCoords rawPointerCoords;
    if (historyPos == HISTORY_CURRENT) {
      rawPointerCoords = event.getRawPointerCoords(pointerIndex);
    } else {
      int historySize = event.getHistorySize();
      validateHistoryPos(historyPos, historySize);
      rawPointerCoords = event.getHistoricalRawPointerCoords(pointerIndex, historyPos);
    }
    pointerCoordsFromNative(
        rawPointerCoords, event.getXOffset(), event.getYOffset(), outPointerCoordsObj);
  }"
898,6534806.txt,none,"    SetAudioVolume(int zone, int volume, int min, int max) {
        super(""setAudioVolume"", ""1.1"");
        long scaled_volume = scaleVolume(volume, min, max);
        params = new Param[] { new Param(scaled_volume, zone) };
    }"
899,5444150.txt,none,"	public void setLocale(Locale locale)
	{
	    if (locale != null)
	    {
            responseContext.setLocale(locale);
	        if (canSetLocaleEncoding)
	        {
	            String encoding = getPortletWindow().getPortletDefinition().getApplication().getLocaleEncodingMappings().get(locale);
	            if (encoding != null)
	            {
	                setCharacterEncoding(encoding);
	                // allow repeated setLocale usage for characterEncoding
	                canSetLocaleEncoding = true;
	            }
	        }
	    }
	}"
900,7448715.txt,none,"    @Override
    public void close() {
        HSObject.invalidate(locals);
        if (parent == null) {
            if (topScope.get() != this) {
                throw new IllegalStateException(""Unexpected JNI scope: "" + topScope.get());
            }
            topScope.set(null);
            objResult = PopLocalFrame(env, objResult);
        } else {
            HotSpotToSVMScope top = parent;
            while (top.parent != null) {
                top = top.parent;
            }
            top.leaf = parent;
        }
        HotSpotToSVMEntryPoints.trace(1, ""HS->SVM[ exit]: %s"", id);
    }"
901,4911266.txt,none,"  @GET
  @Path(""/create"")
  public String createMetricConfig(@QueryParam(""dataset"") String dataset, @QueryParam(""name"") String name, @QueryParam(""datatype"") String metricType,
      @QueryParam(""active"") boolean active, @QueryParam(""derived"") boolean derived, @QueryParam(""derivedFunctionType"") String derivedFunctionType,
      @QueryParam(""numerator"") String numerator, @QueryParam(""denominator"") String denominator,
      @QueryParam(""derivedMetricExpression"") String derivedMetricExpression, @QueryParam(""inverseMetric"") boolean inverseMetric,
      @QueryParam(""cellSizeExpression"") String cellSizeExpression, @QueryParam(""rollupThreshold"") Double rollupThreshold) {
    try {
      MetricConfigDTO metricConfigDTO = new MetricConfigDTO();
      populateMetricConfig(metricConfigDTO, dataset, name, metricType, active, derived, derivedFunctionType, numerator, denominator, derivedMetricExpression,
          inverseMetric, cellSizeExpression, rollupThreshold);
      Long id = metricConfigDao.save(metricConfigDTO);

      metricConfigDTO.setId(id);
      return JsonResponseUtil.buildResponseJSON(metricConfigDTO).toString();
    } catch (Exception e) {
      LOG.warn(""Failed to create metric:{}"", name, e);
      return JsonResponseUtil.buildErrorResponseJSON(""Failed to create metric:"" + name + "" Message:"" + e.getMessage()).toString();
    }
  }"
902,6392324.txt,none,"	@Override
	public String convertToString(Object parameterValue)
			throws ParameterValueConversionException {
		if (!(parameterValue instanceof Integer)) {
			throw new ParameterValueConversionException(""Invalid object type: ""
					+ parameterValue);
		}
		Integer val = (Integer) parameterValue;
		return val.toString();
	}"
903,5303636.txt,none,"    public static void getIdColumns(FieldMapping fmd, List cols) {
        Column[] pkCols =  ((ValueMappingImpl)fmd.getValue()).getColumns();
        for (int j = 0; j < pkCols.length; j++) {
            Column newCol = new Column();
            newCol.copy(pkCols[j]);
            cols.add(newCol);
        }
    }"
904,7610926.txt,none,"	public static String getClassVersion(Class clazz) {
		String version = ""unkown"";
		if (clazz.getPackage().getImplementationVersion() != null) {
			version = clazz.getPackage().getImplementationVersion();
		}
		return version;
	}"
905,6533723.txt,none,"    protected void removeProfileTypeProvider(ProfileTypeProvider profileTypeProvider) {
        profileTypeProviders.remove(profileTypeProvider);
    }"
906,7409821.txt,none,"    @Override
    public boolean isNotEmpty() {
        return size > 0;
    }"
907,9247243.txt,none,"    public static final String getHexBytes(byte[] bytes, int pos, int len) {
        StringBuilder sb = new StringBuilder();
        for (int i = pos; i < (pos+len); i++) {
            int b1 = (bytes[i]>>4) & 0x0f;
            int b2 = bytes[i] & 0x0f;

            sb.append(Integer.toHexString(b1));
            sb.append(Integer.toHexString(b2));
            sb.append(' ');
        }
        return sb.toString();
    }"
908,8142013.txt,none,"      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }"
909,7229362.txt,none,"		@Override
		public int hashCode() {
			return Objects.hash(consumer, name, deferredConsumer);
		}"
910,8559249.txt,none,"    private BackupCommand getCommand(String cmdStr) throws IOException {
      switch (cmdStr) {
        case SET_ADD_CMD:
          return BackupCommand.SET_ADD;
        case SET_REMOVE_CMD:
          return BackupCommand.SET_REMOVE;
        case SET_DELETE_CMD:
          return BackupCommand.SET_DELETE;
        case SET_DESCRIBE_CMD:
          return BackupCommand.SET_DESCRIBE;
        case SET_LIST_CMD:
          return BackupCommand.SET_LIST;
        default:
          System.out.println(""ERROR: Unknown command for 'set' :"" + cmdStr);
          printUsage();
          throw new IOException(INCORRECT_USAGE);
      }
    }"
911,4798652.txt,none,"	public String getPassword() {
		final UsernamePassword userPass = getUserPass();
		final String pw = userPass.getPasswordAsString();
		userPass.resetPassword();
		return pw;
	}"
912,7076341.txt,none,"  public MultiException(Collection<? extends Throwable> causes) {
    this(null, causes);
  }"
913,7593524.txt,none,"	@Nullable
	public Interceptor getEntityInterceptor() throws IllegalStateException, BeansException {
		if (this.entityInterceptor instanceof Interceptor) {
			return (Interceptor) this.entityInterceptor;
		}
		else if (this.entityInterceptor instanceof String) {
			if (this.beanFactory == null) {
				throw new IllegalStateException(""Cannot get entity interceptor via bean name if no bean factory set"");
			}
			String beanName = (String) this.entityInterceptor;
			return this.beanFactory.getBean(beanName, Interceptor.class);
		}
		else {
			return null;
		}
	}"
914,9340675.txt,none,"    public ReferenceType referenceType() {
        if (type == null) {
            try {
                JDWP.ObjectReference.ReferenceType rtinfo =
                    JDWP.ObjectReference.ReferenceType.process(vm, this);
                type = vm.referenceType(rtinfo.typeID,
                                        rtinfo.refTypeTag);
            } catch (JDWPException exc) {
                throw exc.toJDIException();
            }
        }
        return type;
    }"
915,4467152.txt,none,"  public FileSystem getFs() {
    return fs;
  }"
916,6835472.txt,none,"	@Override
	public Optional<URI> getProjectDescriptionLocation() {
		if (checkExists() // Existing project AND
				&& ((getLocation().isPlatformResource()
						// Platform resource URI
						&& URIUtils.isPlatformResourceUriPointingToProject(getLocation()))
						|| isExternal())) { // OR external
			return fromNullable(getLocation().appendSegment(IN4JSProject.PACKAGE_JSON));
		} else {
			return absent();
		}
	}"
917,4197753.txt,none,"    public static SetMultimap<InetAddressAndPort, Token> loadTokens()
    {
        SetMultimap<InetAddressAndPort, Token> tokenMap = HashMultimap.create();
        for (UntypedResultSet.Row row : executeInternal(""SELECT peer, peer_port, tokens FROM system."" + PEERS_V2))
        {
            InetAddress address = row.getInetAddress(""peer"");
            Integer port = row.getInt(""peer_port"");
            InetAddressAndPort peer = InetAddressAndPort.getByAddressOverrideDefaults(address, port);
            if (row.has(""tokens""))
                tokenMap.putAll(peer, deserializeTokens(row.getSet(""tokens"", UTF8Type.instance)));
        }

        return tokenMap;
    }"
918,7197017.txt,none,"    private static GenerateAutonomousDataWarehouseWalletDetails createAdwWalletDetails(
            String password) {
        return GenerateAutonomousDataWarehouseWalletDetails.builder().password(password).build();
    }"
919,4549169.txt,critical,"    public void validateDepositDetailForUpdate(final JsonElement element, final FromJsonHelper fromApiJsonHelper,
            final DataValidatorBuilder baseDataValidator) {
        if (fromApiJsonHelper.parameterExists(nameParamName, element)) {
            final String name = fromApiJsonHelper.extractStringNamed(nameParamName, element);
            baseDataValidator.reset().parameter(nameParamName).value(name).notBlank().notExceedingLengthOf(100);
        }

        if (fromApiJsonHelper.parameterExists(shortNameParamName, element)) {
            final String shortName = fromApiJsonHelper.extractStringNamed(shortNameParamName, element);
            baseDataValidator.reset().parameter(shortNameParamName).value(shortName).notBlank().notExceedingLengthOf(4);
        }

        if (fromApiJsonHelper.parameterExists(descriptionParamName, element)) {
            final String description = fromApiJsonHelper.extractStringNamed(descriptionParamName, element);
            baseDataValidator.reset().parameter(descriptionParamName).value(description).notBlank().notExceedingLengthOf(500);
        }

        if (fromApiJsonHelper.parameterExists(currencyCodeParamName, element)) {
            final String currencyCode = fromApiJsonHelper.extractStringNamed(currencyCodeParamName, element);
            baseDataValidator.reset().parameter(currencyCodeParamName).value(currencyCode).notBlank();
        }

        if (fromApiJsonHelper.parameterExists(digitsAfterDecimalParamName, element)) {
            final Integer digitsAfterDecimal = fromApiJsonHelper.extractIntegerSansLocaleNamed(digitsAfterDecimalParamName, element);
            baseDataValidator.reset().parameter(digitsAfterDecimalParamName).value(digitsAfterDecimal).notNull().inMinMaxRange(0, 6);
        }

        if (fromApiJsonHelper.parameterExists(inMultiplesOfParamName, element)) {
            final Integer inMultiplesOf = fromApiJsonHelper.extractIntegerNamed(inMultiplesOfParamName, element, Locale.getDefault());
            baseDataValidator.reset().parameter(inMultiplesOfParamName).value(inMultiplesOf).ignoreIfNull().integerZeroOrGreater();
        }

        if (fromApiJsonHelper.parameterExists(nominalAnnualInterestRateParamName, element)) {
            final BigDecimal interestRate = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(nominalAnnualInterestRateParamName, element);
            baseDataValidator.reset().parameter(nominalAnnualInterestRateParamName).value(interestRate).notNull().zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(interestCompoundingPeriodTypeParamName, element)) {
            final Integer interestCompoundingPeriodType = fromApiJsonHelper.extractIntegerSansLocaleNamed(
                    interestCompoundingPeriodTypeParamName, element);
            baseDataValidator.reset().parameter(interestCompoundingPeriodTypeParamName).value(interestCompoundingPeriodType).notNull()
                    .isOneOfTheseValues(SavingsCompoundingInterestPeriodType.integerValues());
        }

        if (fromApiJsonHelper.parameterExists(interestCalculationTypeParamName, element)) {
            final Integer interestCalculationType = fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCalculationTypeParamName,
                    element);
            baseDataValidator.reset().parameter(interestCalculationTypeParamName).value(interestCalculationType).notNull()
                    .inMinMaxRange(1, 2);
        }

        if (fromApiJsonHelper.parameterExists(interestCalculationDaysInYearTypeParamName, element)) {
            final Integer interestCalculationDaysInYearType = fromApiJsonHelper.extractIntegerSansLocaleNamed(
                    interestCalculationDaysInYearTypeParamName, element);
            baseDataValidator.reset().parameter(interestCalculationDaysInYearTypeParamName).value(interestCalculationDaysInYearType)
                    .notNull().isOneOfTheseValues(360, 365);
        }

        if (fromApiJsonHelper.parameterExists(minRequiredOpeningBalanceParamName, element)) {
            final BigDecimal minOpeningBalance = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(minRequiredOpeningBalanceParamName,
                    element);
            baseDataValidator.reset().parameter(minRequiredOpeningBalanceParamName).value(minOpeningBalance).ignoreIfNull()
                    .zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyParamName, element)) {
            final Integer lockinPeriodFrequency = fromApiJsonHelper.extractIntegerWithLocaleNamed(lockinPeriodFrequencyParamName, element);
            baseDataValidator.reset().parameter(lockinPeriodFrequencyParamName).value(lockinPeriodFrequency).ignoreIfNull()
                    .integerZeroOrGreater();
        }

        if (fromApiJsonHelper.parameterExists(lockinPeriodFrequencyTypeParamName, element)) {
            final Integer lockinPeriodFrequencyType = fromApiJsonHelper.extractIntegerSansLocaleNamed(lockinPeriodFrequencyTypeParamName,
                    element);
            baseDataValidator.reset().parameter(lockinPeriodFrequencyTypeParamName).value(lockinPeriodFrequencyType).inMinMaxRange(0, 3);
        }

        if (fromApiJsonHelper.parameterExists(withdrawalFeeForTransfersParamName, element)) {
            final Boolean isWithdrawalFeeApplicableForTransfers = fromApiJsonHelper.extractBooleanNamed(withdrawalFeeForTransfersParamName,
                    element);
            baseDataValidator.reset().parameter(withdrawalFeeForTransfersParamName).value(isWithdrawalFeeApplicableForTransfers)
                    .ignoreIfNull().validateForBooleanValue();
        }

        if (fromApiJsonHelper.parameterExists(feeAmountParamName, element)) {
            final BigDecimal annualFeeAmount = fromApiJsonHelper.extractBigDecimalWithLocaleNamed(feeAmountParamName, element);
            baseDataValidator.reset().parameter(feeAmountParamName).value(annualFeeAmount).ignoreIfNull().zeroOrPositiveAmount();
        }

        if (fromApiJsonHelper.parameterExists(feeOnMonthDayParamName, element)) {
            final MonthDay monthDayOfAnnualFee = fromApiJsonHelper.extractMonthDayNamed(feeOnMonthDayParamName, element);
            baseDataValidator.reset().parameter(feeOnMonthDayParamName).value(monthDayOfAnnualFee).ignoreIfNull();
        }

        if (this.fromApiJsonHelper.parameterExists(minBalanceForInterestCalculationParamName, element)) {
            final BigDecimal minBalanceForInterestCalculation = this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed(
                    minBalanceForInterestCalculationParamName, element);
            baseDataValidator.reset().parameter(minBalanceForInterestCalculationParamName).value(minBalanceForInterestCalculation)
                    .ignoreIfNull().zeroOrPositiveAmount();
        }

        final Long savingsControlAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue()).value(savingsControlAccountId)
                .ignoreIfNull().integerGreaterThanZero();

        final Long savingsReferenceAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue())
                .value(savingsReferenceAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long transfersInSuspenseAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue())
                .value(transfersInSuspenseAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long interestOnSavingsAccountId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue())
                .value(interestOnSavingsAccountId).ignoreIfNull().integerGreaterThanZero();

        final Long incomeFromFeeId = fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),
                element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue()).value(incomeFromFeeId)
                .ignoreIfNull().integerGreaterThanZero();

        final Long incomeFromPenaltyId = fromApiJsonHelper.extractLongNamed(
                SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(), element);
        baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue()).value(incomeFromPenaltyId)
                .ignoreIfNull().integerGreaterThanZero();

        validatePaymentChannelFundSourceMappings(fromApiJsonHelper, baseDataValidator, element);
        validateChargeToIncomeAccountMappings(fromApiJsonHelper, baseDataValidator, element);
        validateTaxWithHoldingParams(baseDataValidator, element, false);
    }"
920,7196750.txt,none,"        public Builder connection(Connection connection) {
            this.connection = connection;
            this.__explicitlySet__.add(""connection"");
            return this;
        }"
921,4651047.txt,minor,"    protected static boolean typeCheckMethodsWithGenerics(ClassNode receiver, ClassNode[] arguments, MethodNode candidateMethod) {
        if (isUsingUncheckedGenerics(receiver)) {
            return true;
        }
        if (CLASS_Type.equals(receiver)
                && receiver.isUsingGenerics()
                && !candidateMethod.getDeclaringClass().equals(receiver)
                && !(candidateMethod instanceof ExtensionMethodNode)) {
            return typeCheckMethodsWithGenerics(receiver.getGenericsTypes()[0].getType(), arguments, candidateMethod);
        }
        // both candidate method and receiver have generic information so a check is possible
        GenericsType[] genericsTypes = candidateMethod.getGenericsTypes();
        boolean methodUsesGenerics = (genericsTypes != null && genericsTypes.length > 0);
        boolean isExtensionMethod = candidateMethod instanceof ExtensionMethodNode;
        if (isExtensionMethod && methodUsesGenerics) {
            ClassNode[] dgmArgs = new ClassNode[arguments.length + 1];
            dgmArgs[0] = receiver;
            System.arraycopy(arguments, 0, dgmArgs, 1, arguments.length);
            MethodNode extensionMethodNode = ((ExtensionMethodNode) candidateMethod).getExtensionMethodNode();
            return typeCheckMethodsWithGenerics(extensionMethodNode.getDeclaringClass(), dgmArgs, extensionMethodNode, true);
        } else {
            return typeCheckMethodsWithGenerics(receiver, arguments, candidateMethod, false);
        }
    }"
922,9053224.txt,minor,"	public TypeBinding createBinding(MethodScope scope, TypeBinding typeBinding) {
		if (this.binding == null) {
			// for default constructors and fake implementation of abstract methods 
			this.binding = new LocalVariableBinding(this, typeBinding, this.modifiers, scope);
		} else if (!this.binding.type.isValidBinding()) {
			AbstractMethodDeclaration methodDecl = scope.referenceMethod();
			if (methodDecl != null) {
				MethodBinding methodBinding = methodDecl.binding;
				if (methodBinding != null) {
					methodBinding.tagBits |= TagBits.HasUnresolvedArguments;
				}
			}
		}
		if ((this.binding.tagBits & TagBits.AnnotationResolved) == 0) {
			resolveAnnotations(scope, this.annotations, this.binding, true);
			if (scope.compilerOptions().sourceLevel >= ClassFileConstants.JDK1_8) {
				Annotation.isTypeUseCompatible(this.type, scope, this.annotations);
				scope.validateNullAnnotation(this.binding.tagBits, this.type, this.annotations);
			}
		}
		this.binding.declaration = this;
		return this.binding.type; // might have been updated during resolveAnnotations (for typeAnnotations)
	}"
923,6312967.txt,none,"    public void setBluetoothLeService(BluetoothLeService bluetoothLeService) {
        this.bluetoothLeService = bluetoothLeService;
    }"
924,7465317.txt,none,"    @SuppressWarnings(""unused"")
    public static boolean test(int i, int time) throws InterruptedException {
        waitTime = time;
        final Thread thread = new Thread();
        synchronized (thread) {
            // start the thread and wait for it
            thread.setDaemon(true); // in case the thread gets stuck
            thread.start();
            while (!thread.wait1Condition) {
                thread.wait(10000);
            }
        }
        synchronized (start) {
            thread.interrupt();
            thread.sentInterrupt = true;
        }
        synchronized (end) {
            while (!thread.wait2Condition) {
                end.wait(10000);
            }
        }
        return thread.interrupted;
    }"
925,7268054.txt,none,"    private static int[] yArr(int... vals) {
        if (vals.length == 3) {
            y3arr[0] = vals[0];
            y3arr[1] = vals[1];
            y3arr[2] = vals[2];
            return y3arr;
        } else {
            y4arr[0] = vals[0];
            y4arr[1] = vals[1];
            y4arr[2] = vals[2];
            y4arr[3] = vals[3];
            return y4arr;
        }
    }"
926,8622582.txt,minor,"    public ClientListenerResponse doHandle(OdbcRequest req) {
        if (!busyLock.enterBusy())
            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,
                ""Failed to handle ODBC request because node is stopping: "" + req);

        if (actx != null)
            AuthorizationContext.context(actx);

        try {
            switch (req.command()) {
                case QRY_EXEC:
                    return executeQuery((OdbcQueryExecuteRequest)req);

                case QRY_EXEC_BATCH:
                    return executeBatchQuery((OdbcQueryExecuteBatchRequest)req);

                case STREAMING_BATCH:
                    return dispatchBatchOrdered((OdbcStreamingBatchRequest)req);

                case QRY_FETCH:
                    return fetchQuery((OdbcQueryFetchRequest)req);

                case QRY_CLOSE:
                    return closeQuery((OdbcQueryCloseRequest)req);

                case META_COLS:
                    return getColumnsMeta((OdbcQueryGetColumnsMetaRequest)req);

                case META_TBLS:
                    return getTablesMeta((OdbcQueryGetTablesMetaRequest)req);

                case META_PARAMS:
                    return getParamsMeta((OdbcQueryGetParamsMetaRequest)req);

                case MORE_RESULTS:
                    return moreResults((OdbcQueryMoreResultsRequest)req);
            }

            return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN, ""Unsupported ODBC request: "" + req);
        }
        finally {
            AuthorizationContext.clear();

            busyLock.leaveBusy();
        }
    }"
927,4667521.txt,none,"	@SuppressWarnings(""unchecked"")
	@Override
	@PublicEvolving
	public Class<T> getTypeClass() {
		return arrayType;
	}"
928,7717190.txt,minor,"        LogFileLoader(final String path, @Nullable Instant start, @Nullable Instant end) {
            super(path);
            this.grokCompiler = GrokCompiler.newInstance();
            this.grokCompiler.registerDefaultPatterns();
            this.grokCompiler.registerPatternFromClasspath(""/patterns/log-patterns"");
            this.grok = grokCompiler.compile(logFormat, true);
            this.start = start;
            this.end = end;
            this.parsingErrors = new StringListColumn(
                new ColumnDescription(parseErrorColumn, ContentsKind.String));
            this.lineNumber = new IntListColumn(
                    new ColumnDescription(lineNumberColumn, ContentsKind.Integer));
            String originalPattern = this.grok.getOriginalGrokPattern();
            String timestampPattern = GrokExtra.extractGroupPattern(
                    this.grokCompiler.getPatternDefinitions(),
                    originalPattern, GenericLogs.timestampColumnName);
            if (timestampPattern == null) {
                HillviewLogger.instance.warn(""Pattern does not contain column named 'Timestamp'"",
                        ""{0}"", originalPattern);
                this.dateTime = null;
            } else {
                this.dateTime = this.grokCompiler.compile(
                        ""%{"" + timestampPattern + "":"" + GenericLogs.timestampColumnName + ""}"", true);
            }
        }"
929,6310576.txt,none,"    public boolean isPermissionErrorMessage(Throwable caught) {
        if ((caught instanceof GwtKapuaException)
                && GwtKapuaErrorCode.SUBJECT_UNAUTHORIZED.equals(((GwtKapuaException) caught).getCode())) {
            exitMessage = caught.getLocalizedMessage();
            return true;
        } else {
            return false;
        }
    }"
930,4324794.txt,none,"    private ThreadGroup createDaemonGroup() {
        try {
            ThreadGroup group = new ThreadGroup(""derby.daemons"");
            group.setDaemon(true);
            return group;
        } catch (SecurityException se) {
            // In case of a lacking privilege, issue a warning, return null and
            // let the daemon threads be created in the default thread group.
            // This can only happen if the current Derby thread is a part of
            // the root thread group ""system"".
            reportThread(se);
            return null;
        }
    }"
931,9421769.txt,none,"    public JCNewClass SpeculativeNewClass(JCExpression encl,
                             List<JCExpression> typeargs,
                             JCExpression clazz,
                             List<JCExpression> args,
                             JCClassDecl def,
                             boolean classDefRemoved)
    {
        JCNewClass tree = classDefRemoved ?
                new JCNewClass(encl, typeargs, clazz, args, def) {
                    @Override
                    public boolean classDeclRemoved() {
                        return true;
                    }
                } :
                new JCNewClass(encl, typeargs, clazz, args, def);
        tree.pos = pos;
        return tree;
    }"
932,6371353.txt,none,"	private static void checkComputedListDiff(List<Object> oldList, List<Object> newList) {
		ListDiff diff = Diffs.computeListDiff(oldList, newList);

		final List<Object> list = new ArrayList<Object>(oldList);
		diff.accept(new ListDiffVisitor() {
			@Override
			public void handleAdd(int index, Object element) {
				list.add(index, element);
			}

			@Override
			public void handleRemove(int index, Object element) {
				assertEquals(element, list.remove(index));
			}

			@Override
			public void handleReplace(int index, Object oldElement, Object newElement) {
				assertEquals(oldElement, list.set(index, newElement));
			}
		});

		assertEquals(""Applying diff to old list should make it equal to new list"", newList, list);
	}"
933,6533221.txt,none,"    private BundleEvent initializeEvent(Bundle bundle) {
        switch (bundle.getState()) {
            case Bundle.INSTALLED:
                return new BundleEvent(BundleEvent.INSTALLED, bundle);
            case Bundle.RESOLVED:
                return new BundleEvent(BundleEvent.RESOLVED, bundle);
            default:
                return new BundleEvent(BundleEvent.STARTED, bundle);
        }
    }"
934,7810274.txt,minor,"  protected void sendMessage(Connection cnx) throws Exception {
    if (cnx.getServer().getRequiresCredentials()) {
      // Security is enabled on client as well as on server
      getMessage().setMessageHasSecurePartFlag();
      long userId = -1;

      if (UserAttributes.userAttributes.get() == null) { // single user mode
        userId = cnx.getServer().getUserId();
      } else { // multi user mode
        Object id = UserAttributes.userAttributes.get().getServerToId().get(cnx.getServer());
        if (id == null) {
          // This will ensure that this op is retried on another server, unless
          // the retryCount is exhausted. Fix for Bug 41501
          throw new ServerConnectivityException(""Connection error while authenticating user"");
        }
        userId = (Long) id;
      }
      HeapDataOutputStream hdos = new HeapDataOutputStream(Version.CURRENT);
      try {
        hdos.writeLong(cnx.getConnectionID());
        hdos.writeLong(userId);
        getMessage().setSecurePart(((ConnectionImpl) cnx).encryptBytes(hdos.toByteArray()));
      } finally {
        hdos.close();
      }
    }
    getMessage().send(false);
  }"
935,6417488.txt,major,"		@Override
		public void handleEvent (Event event) {
			   Label label = (Label)event.widget;
			   Shell shell = label.getShell ();
			   switch (event.type) {
				   	case SWT.MouseDown:	/* Handle a user Click */
				   		/* Extract our Data */
				   		Event e = new Event ();
				   		e.item = (TableItem) label.getData (""_TableItem_"");
				   		Table table = ((TableItem) e.item).getParent();

				   		/* Construct the new Selection[] to show */
				   		TableItem [] newSelection = null;
				   		if (isCTRLDown(event)) {
				   			/* We have 2 scenario's.
				   			 * 	1) We are selecting an already selected element - so remove it from the selected indices
				   			 *  2) We are selecting a non-selected element - so add it to the selected indices
				   			 */
				   			TableItem[] sel = table.getSelection();
				   			for (int i = 0; i < sel.length; ++i) {
				   				if (e.item.equals(sel[i])) {
				   					// We are de-selecting this element
				   					newSelection = new TableItem[sel.length - 1];
				   					System.arraycopy(sel, 0, newSelection, 0, i);
				   					System.arraycopy(sel, i+1, newSelection, i, sel.length - i - 1);
				   					break;
				   				}
		   					}

				   			/*
				   			 * If we haven't created the newSelection[] yet, than we are adding the newly selected element
				   			 * into the list of selected indicies
				   			 */
				   			if (newSelection == null) {
				   				newSelection = new TableItem[sel.length + 1];
				   				System.arraycopy(sel, 0, newSelection, 0, sel.length);
				   				newSelection[sel.length] = (TableItem) e.item;
				   			}

				   		} else {
				   			/* CTRL is not down, so we simply select the single element */
				   			newSelection = new TableItem[] { (TableItem) e.item };
				   		}
				   		/* Set the new selection of the table and notify the listeners */
				   		table.setSelection (newSelection);
				   		table.notifyListeners (SWT.Selection, e);

				   		/* Remove the Tooltip */
				   		shell.dispose ();
				   		table.setFocus();
				   		break;
				   	case SWT.MouseExit:
				   		shell.dispose ();
				   		break;
			   }
	    }};"
936,8298339.txt,none,"	public static void clear() {
		synchronized(RESOURCE_SET) {
			List<Resource> resources = RESOURCE_SET.getResources();
			for (Resource resource : resources) {
				resource.unload();
			}
		}
	}"
937,6633402.txt,minor,"	 */
	private void getSuggestions(final String query) {
		if (query == null || query.isEmpty()) {
			return;
		}

		// Initialize the locatorSugestion parameters
		locatorParams(SUGGEST_PLACE);

		// Attach a listener to the locator task since
		// the LocatorTask may or may not be loaded the
		// the very first time a user types text into the search box.
		// If the Locator is already loaded, the following listener
		// is invoked immediately.

		mLocator.addDoneLoadingListener(new Runnable() {
			@Override public void run() {
				// Does this locator support suggestions?
				if (mLocator.getLoadStatus().name() != LoadStatus.LOADED.name()){
					//Log.i(TAG,""##### "" + mLocator.getLoadStatus().name());
				} else if (!mLocator.getLocatorInfo().isSupportsSuggestions()){
					return;
				}
				//og.i(TAG,""****** "" + mLocator.getLoadStatus().name());
				final ListenableFuture<List<SuggestResult>> suggestionsFuture = mLocator.suggestAsync(query, suggestParams);
				// Attach a done listener that executes upon completion of the async call
				suggestionsFuture.addDoneListener(new Runnable() {
					@Override
					public void run() {
						try {
							// Get the suggestions returned from the locator task.
							// Store retrieved suggestions for future use (e.g. if the user
							// selects a retrieved suggestion, it can easily be
							// geocoded).
							mSuggestionsList = suggestionsFuture.get();

							showSuggestedPlaceNames(mSuggestionsList);

						} catch (Exception e) {
							Log.e(TAG, ""Error on getting suggestions "" + e.getMessage());
						}
					}
				});
			}
		});
		// Initiate the asynchronous call
		mLocator.loadAsync();"
938,8857529.txt,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerApplicationModule_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.authzToken.write(oprot);
        oprot.writeString(struct.gatewayId);
        struct.applicationModule.write(oprot);
      }"
939,9269951.txt,none,"    @BeanProperty(bound = false)
    public boolean getScrollableTracksViewportWidth() {
        Container parent = SwingUtilities.getUnwrappedParent(this);
        if (parent instanceof JViewport) {
            JViewport port = (JViewport) parent;
            TextUI ui = getUI();
            int w = port.getWidth();
            Dimension min = ui.getMinimumSize(this);
            Dimension max = ui.getMaximumSize(this);
            if ((w >= min.width) && (w <= max.width)) {
                return true;
            }
        }
        return false;
    }"
940,7834476.txt,none,"  public long getConnectionId() {
    return connectionId;
  }"
941,7142098.txt,none,"  List<ResourceDefinitionListener> getResourceDefinitionListeners()
  {
    return _resourceDefinitionListeners;
  }"
942,5210111.txt,none,"    private Group parseGroup(final Element element) {
        final Group.Builder builder = new Group.Builder()
                .identifier(element.getAttribute(IDENTIFIER_ATTR))
                .name(element.getAttribute(NAME_ATTR));

        NodeList groupUsers = element.getElementsByTagName(GROUP_USER_ELEMENT);
        for (int i=0; i < groupUsers.getLength(); i++) {
            Element groupUserNode = (Element) groupUsers.item(i);
            builder.addUser(groupUserNode.getAttribute(IDENTIFIER_ATTR));
        }

        return builder.build();
    }"
943,9213827.txt,none,"    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""java.util.regex.Matcher"")
                .append(""[pattern="").append(pattern())
                .append("" region="")
                .append(regionStart()).append(',').append(regionEnd())
                .append("" lastmatch="");
        if ((first >= 0) && (group() != null)) {
            sb.append(group());
        }
        sb.append(']');
        return sb.toString();
    }"
944,7032959.txt,none,"  public int getDVDTotalTitles()
  {
    if (bdp != null)
      return bdp.getNumTitles();
    return 0;
  }"
945,4806304.txt,none,"	public LiteralType getLiteral() {
		return literal;
	}"
946,6812825.txt,none,"    public final void norm1_AnnotatedExpression__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            {
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); 
            }
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
947,6562164.txt,none,"    public IEditorMatchingStrategy getEditorMatchingStrategy() {
        if (matchingStrategy == null && !matchingStrategyChecked) {
            matchingStrategyChecked = true;
            // RAP [bm]: Program
//            if (program == null && configurationElement != null) {
            if (configurationElement != null) {
            // RAPEND: [bm] 
                if (configurationElement.getAttribute(IWorkbenchRegistryConstants.ATT_MATCHING_STRATEGY) != null) {
                    try {
                        matchingStrategy = (IEditorMatchingStrategy) WorkbenchPlugin.createExtension(configurationElement, IWorkbenchRegistryConstants.ATT_MATCHING_STRATEGY);
                    } catch (CoreException e) {
                        WorkbenchPlugin.log(""Error creating editor management policy for editor id "" + getId(), e); //$NON-NLS-1$
                    }
                }
            }
        }
        return matchingStrategy;
    }"
948,6427864.txt,minor,"	static void scroll(ScrolledComposite scomp, int xoffset, int yoffset) {
		Point origin = scomp.getOrigin();
		Point contentSize = scomp.getContent().getSize();
		int xorigin = origin.x + xoffset;
		int yorigin = origin.y + yoffset;
		xorigin = Math.max(xorigin, 0);
		xorigin = Math.min(xorigin, contentSize.x - 1);
		yorigin = Math.max(yorigin, 0);
		yorigin = Math.min(yorigin, contentSize.y - 1);
		scomp.setOrigin(xorigin, yorigin);
	}"
949,5423428.txt,none,"  public static IndexFailurePolicy getFailurePolicy(RegionCoprocessorEnvironment env)
      throws IOException {
    Configuration conf = env.getConfiguration();
    try {
      IndexFailurePolicy committer =
          conf.getClass(INDEX_FAILURE_POLICY_CONF_KEY, PhoenixIndexFailurePolicy.class,
            IndexFailurePolicy.class).newInstance();
      return committer;
    } catch (InstantiationException e) {
      throw new IOException(e);
    } catch (IllegalAccessException e) {
      throw new IOException(e);
    }
  }"
950,8346160.txt,none,"	public static TypePattern read(VersionedDataInputStream s, ISourceContext c) throws IOException {
		AnnotationTypePattern annPatt = AnnotationTypePattern.read(s, c);
		AnyWithAnnotationTypePattern ret = new AnyWithAnnotationTypePattern(annPatt);
		ret.readLocation(c, s);
		return ret;
	}"
951,7110712.txt,none,"    public static boolean isValidNmtoken(String nmtoken) {
        if (nmtoken.length() == 0)
            return false;
        for (int i = 0; i < nmtoken.length(); i++ ) {
           char ch = nmtoken.charAt(i);
           if(  ! isName( ch ) ){
              return false;
           }
        }
        return true;
    } // isValidName(String):boolean"
952,8423791.txt,none,"    public void setLabel(String label) {
        this.label = label;
    }"
953,6297548.txt,none,"    @Override
    public ByteBuffer getPayload()
    {
        if(!delegate.hasPayload()) {
            return null;
        }
        return delegate.getPayload().asReadOnlyBuffer();
    }"
954,8778291.txt,none,"    @Override
    HttpURLConnection getResponse(final HttpURLConnection conn)
        throws IOException {
      return conn;
    }"
955,7102262.txt,critical,"    public String toString() {

        if (subject == null || pubKey == null || interval == null
            || issuer == null || algId == null || serialNum == null) {
                throw new NullPointerException(""X.509 cert is incomplete"");
        }
        StringBuilder sb = new StringBuilder();

        sb.append(""[\n"");
        sb.append(""  "" + version.toString() + ""\n"");
        sb.append(""  Subject: "" + subject.toString() + ""\n"");
        sb.append(""  Signature Algorithm: "" + algId.toString() + ""\n"");
        sb.append(""  Key:  "" + pubKey.toString() + ""\n"");
        sb.append(""  "" + interval.toString() + ""\n"");
        sb.append(""  Issuer: "" + issuer.toString() + ""\n"");
        sb.append(""  "" + serialNum.toString() + ""\n"");

        // optional v2, v3 extras
        if (issuerUniqueId != null) {
            sb.append(""  Issuer Id:\n"" + issuerUniqueId.toString() + ""\n"");
        }
        if (subjectUniqueId != null) {
            sb.append(""  Subject Id:\n"" + subjectUniqueId.toString() + ""\n"");
        }
        if (extensions != null) {
            Collection<Extension> allExts = extensions.getAllExtensions();
            Extension[] exts = allExts.toArray(new Extension[0]);
            sb.append(""\nCertificate Extensions: "" + exts.length);
            for (int i = 0; i < exts.length; i++) {
                sb.append(""\n["" + (i+1) + ""]: "");
                Extension ext = exts[i];
                try {
                    if (OIDMap.getClass(ext.getExtensionId()) == null) {
                        sb.append(ext.toString());
                        byte[] extValue = ext.getExtensionValue();
                        if (extValue != null) {
                            DerOutputStream out = new DerOutputStream();
                            out.putOctetString(extValue);
                            extValue = out.toByteArray();
                            HexDumpEncoder enc = new HexDumpEncoder();
                            sb.append(""Extension unknown: ""
                                      + ""DER encoded OCTET string =\n""
                                      + enc.encodeBuffer(extValue) + ""\n"");
                        }
                    } else
                        sb.append(ext.toString()); //sub-class exists
                } catch (Exception e) {
                    sb.append("", Error parsing this extension"");
                }
            }
            Map<String,Extension> invalid = extensions.getUnparseableExtensions();
            if (invalid.isEmpty() == false) {
                sb.append(""\nUnparseable certificate extensions: "" + invalid.size());
                int i = 1;
                for (Extension ext : invalid.values()) {
                    sb.append(""\n["" + (i++) + ""]: "");
                    sb.append(ext);
                }
            }
        }
        sb.append(""\n]"");
        return sb.toString();
    }"
956,7114490.txt,none,"  public void setOutputProperty(String name, String value)
          throws IllegalArgumentException
  {

    synchronized (m_reentryGuard)
    {

      // Get the output format that was set by the user, otherwise get the 
      // output format from the stylesheet.
      if (null == m_outputFormat)
      {
        m_outputFormat =
          (OutputProperties) getStylesheet().getOutputComposed().clone();
      }

      if (!OutputProperties.isLegalPropertyKey(name))
        throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED, new Object[]{name})); //""output property not recognized: ""
                                           //+ name);

      m_outputFormat.setProperty(name, value);
    }
  }"
957,5762348.txt,none,"    @PreAuthorize(""hasRole('"" + StandardEntitlement.REPORT_TEMPLATE_DELETE + ""')"")
    public ReportTemplateTO delete(final String key) {
        ReportTemplate reportTemplate = reportTemplateDAO.find(key);
        if (reportTemplate == null) {
            LOG.error(""Could not find report template '"" + key + ""'"");

            throw new NotFoundException(key);
        }

        List<Report> reports = reportDAO.findByTemplate(reportTemplate);
        if (!reports.isEmpty()) {
            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InUse);
            sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));
            throw sce;
        }

        ReportTemplateTO deleted = getReportTemplateTO(key);
        reportTemplateDAO.delete(key);
        return deleted;
    }"
958,9413571.txt,none,"    HostAddress[] readAddr() throws IOException, KrbApErrException {
        int numAddrs, addrType, addrLength;
        numAddrs = readLength4();
        if (numAddrs > 0) {
            List<HostAddress> addrs = new ArrayList<>();
            for (int i = 0; i < numAddrs; i++) {
                addrType = read(2);
                addrLength = readLength4();
                if (!(addrLength == 4 || addrLength == 16)) {
                    if (DEBUG) {
                        System.out.println(""Incorrect address format."");
                    }
                    return null;
                }
                byte[] result = new byte[addrLength];
                for (int j = 0; j < addrLength; j++)
                    result[j] = (byte)read(1);
                addrs.add(new HostAddress(addrType, result));
            }
            return addrs.toArray(new HostAddress[addrs.size()]);
        }
        return null;
    }"
959,5615923.txt,critical,"  private static String normalizePath(String path) {
    // count the number of '/'s, to determine number of segments
    int index = -1;
    int pathlen = path.length();
    int size = 0;
    if (pathlen > 0 && path.charAt(0) != '/') {
      size++;
    }
    while ((index = path.indexOf('/', index + 1)) != -1) {
      if (index + 1 < pathlen && path.charAt(index + 1) != '/') {
        size++;
      }
    }

    String[] seglist = new String[size];
    boolean[] include = new boolean[size];

    // break the path into segments and store in the list
    int current = 0;
    int index2 = 0;
    index = (pathlen > 0 && path.charAt(0) == '/') ? 1 : 0;
    while ((index2 = path.indexOf('/', index + 1)) != -1) {
      seglist[current++] = path.substring(index, index2);
      index = index2 + 1;
    }

    // if current==size, then the last character was a slash
    // and there are no more segments
    if (current < size) {
      seglist[current] = path.substring(index);
    }

    // determine which segments get included in the normalized path
    for (int i = 0; i < size; i++) {
      include[i] = true;
      if (seglist[i].equals("".."")) { //$NON-NLS-1$
        int remove = i - 1;
        // search back to find a segment to remove, if possible
        while (remove > -1 && !include[remove]) {
          remove--;
        }
        // if we find a segment to remove, remove it and the ""..""
        // segment
        if (remove > -1 && !seglist[remove].equals("".."")) { //$NON-NLS-1$
          include[remove] = false;
          include[i] = false;
        }
      } else if (seglist[i].equals(""."")) { //$NON-NLS-1$
        include[i] = false;
      }
    }

    // put the path back together
    StringBuilder newpath = new StringBuilder();
    if (path.startsWith(""/"")) { //$NON-NLS-1$
      newpath.append('/');
    }

    for (int i = 0; i < seglist.length; i++) {
      if (include[i]) {
        newpath.append(seglist[i]);
        newpath.append('/');
      }
    }

    // if we used at least one segment and the path previously ended with
    // a slash and the last segment is still used, then delete the extra
    // trailing '/'
    if (!path.endsWith(""/"") && seglist.length > 0 //$NON-NLS-1$
        && include[seglist.length - 1]) {
      newpath.deleteCharAt(newpath.length() - 1);
    }

    String result = newpath.toString();

    // check for a ':' in the first segment if one exists,
    // prepend ""./"" to normalize
    index = result.indexOf(':');
    index2 = result.indexOf('/');
    if (index != -1 && (index < index2 || index2 == -1)) {
      newpath.insert(0, ""./""); //$NON-NLS-1$
      result = newpath.toString();
    }
    return result;
  }"
960,3924383.txt,none,"  public ScanOptions() {
  }"
961,6639778.txt,none,"    public LoginButton(Context context) {
        super(
                context,
                null,
                0,
                0,
                AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,
                AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);
    }"
962,3743029.txt,none,"    public int incrementAndGetVariantIndex() {
        return ++variantIndex;
    }"
963,6721460.txt,minor,"	public String generateStartTagContent(IDOMElement element) {
		ISourceGenerator generator = element.getModel().getGenerator();
		StringBuffer buffer = new StringBuffer();

		buffer.append(' ');
		String tagName = generator.generateTagName(element);
		if (tagName != null) {
			buffer.append(tagName);
		}

		NamedNodeMap attributes = element.getAttributes();
		int length = attributes.getLength();
		for (int i = 0; i < length; i++) {
			Attr attr = (Attr) attributes.item(i);
			if (attr == null) {
				continue;
			}
			buffer.append(' ');
			String attrName = generator.generateAttrName(attr);
			if (attrName != null) {
				buffer.append(attrName);
			}
			String attrValue = generator.generateAttrValue(attr);
			if (attrValue != null) {
				// attr name only for HTML boolean and JSP
				buffer.append('=');
				buffer.append(attrValue);
			}
		}

		buffer.append(' ');

		return buffer.toString();
	}"
964,9303905.txt,none,"        private static boolean isMetaName(byte[] name, int off, int len) {
            // Use the ""oldest ASCII trick in the book""
            return len > 9                     // ""META-INF/"".length()
                && name[off + len - 1] != '/'  // non-directory
                && (name[off++] | 0x20) == 'm'
                && (name[off++] | 0x20) == 'e'
                && (name[off++] | 0x20) == 't'
                && (name[off++] | 0x20) == 'a'
                && (name[off++]       ) == '-'
                && (name[off++] | 0x20) == 'i'
                && (name[off++] | 0x20) == 'n'
                && (name[off++] | 0x20) == 'f'
                && (name[off]         ) == '/';
        }"
965,9005699.txt,none,"    UnifiedHLImpl(final UnifiedHighlighter.OffsetSource offsetSource) {
      this.offsetSource = offsetSource;
      maxPassages = new int[hlFields.size()];
      Arrays.fill(maxPassages, maxFrags);
    }"
966,8148121.txt,minor,"    private static int characterSet(String stmt, int offset, int depth) {
        if (stmt.length() > offset + 14) {
            char c1 = stmt.charAt(++offset);
            char c2 = stmt.charAt(++offset);
            char c3 = stmt.charAt(++offset);
            char c4 = stmt.charAt(++offset);
            char c5 = stmt.charAt(++offset);
            char c6 = stmt.charAt(++offset);
            char c7 = stmt.charAt(++offset);
            char c8 = stmt.charAt(++offset);
            char c9 = stmt.charAt(++offset);
            char c10 = stmt.charAt(++offset);
            char c11 = stmt.charAt(++offset);
            char c12 = stmt.charAt(++offset);
            char c13 = stmt.charAt(++offset);
            char c14 = stmt.charAt(++offset);
            if ((c1 == 'H' || c1 == 'h') && (c2 == 'A' || c2 == 'a') && (c3 == 'R' || c3 == 'r')
                    && (c4 == 'A' || c4 == 'a') && (c5 == 'C' || c5 == 'c') && (c6 == 'T' || c6 == 't')
                    && (c7 == 'E' || c7 == 'e') && (c8 == 'R' || c8 == 'r') && (c9 == '_')
                    && (c10 == 'S' || c10 == 's') && (c11 == 'E' || c11 == 'e') && (c12 == 'T' || c12 == 't')
                    && (c13 == '_')) {
                switch (c14) {
                case 'R':
                case 'r':
                    return characterSetResults(stmt, offset);
                case 'C':
                case 'c':
                    return characterSetC(stmt, offset);
                default:
                    return OTHER;
                }
            }
        }
        return OTHER;
    }"
967,7907703.txt,none,"  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(pythonTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(initTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parseTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(processingTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(actionGraphTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rulekeyTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fetchTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(buildTimeMs);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(installTimeMs);

    return hashCode;
  }"
968,5375248.txt,none,"    @ApiModelProperty(
            value = ""If clustered, the address of the node from which the bulletin originated.""
    )
    public String getNodeAddress() {
        return nodeAddress;
    }"
969,6240859.txt,none,"    private boolean labelNextToPort(final LPort dummyPort, final boolean placeNextToPortIfPossible) {
        return placeNextToPortIfPossible
                && dummyPort.getIncomingEdges().isEmpty()
                && dummyPort.getOutgoingEdges().isEmpty();
    }"
970,3913986.txt,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }"
971,5843574.txt,none,"    @Override
    public boolean hasMembers() {
        if (membership == null ) return false;
        return membership.hasMembers();
    }"
972,3918098.txt,none,"    public String getId()
    {
        return id;
    }"
973,7107337.txt,none,"    private boolean namedNodeMapsEqual(NamedNodeMap a, NamedNodeMap b) {
        if (a.getLength() != b.getLength()) {
            return false;
        }
        for (int i = 0; i < a.getLength(); i++) {
            Node aNode = a.item(i);
            Node bNode = aNode.getLocalName() == null
                    ? b.getNamedItem(aNode.getNodeName())
                    : b.getNamedItemNS(aNode.getNamespaceURI(), aNode.getLocalName());
            if (bNode == null || !aNode.isEqualNode(bNode)) {
                return false;
            }
        }
        return true;
    }"
974,8070913.txt,none,"	@Override
	/** {@inheritDoc} */
	public void findReferences(final ReferenceFinder referenceFinder, final List<Hit> foundIdentifiers) {
		if (parsedParameters != null) {
			parsedParameters.findReferences(referenceFinder, foundIdentifiers);
		}
	}"
975,7451343.txt,none,"        public LLVMAMD64CmpbNode(LLVMAMD64UpdateCPAZSOFlagsNode flags) {
            super(flags);
        }"
976,8382642.txt,minor,"    private void addRelevantPluginDependenciesToClasspath(Set<URL> path) throws MojoExecutionException {
        if (hasCommandlineArgs()) {
            arguments = parseCommandlineArgs();
        }

        try {
            Iterator<Artifact> iter = this.determineRelevantPluginDependencies().iterator();
            while (iter.hasNext()) {
                Artifact classPathElement = iter.next();

                // we must skip org.osgi.core, otherwise we get a
                // java.lang.NoClassDefFoundError: org.osgi.vendor.framework property not set
                if (classPathElement.getArtifactId().equals(""org.osgi.core"")) {
                    if (getLog().isDebugEnabled()) {
                        getLog().debug(""Skipping org.osgi.core -> "" + classPathElement.getGroupId() + ""/"" + classPathElement.getArtifactId() + ""/"" + classPathElement.getVersion());
                    }
                    continue;
                }

                getLog().debug(""Adding plugin dependency artifact: "" + classPathElement.getArtifactId()
                                   + "" to classpath"");
                path.add(classPathElement.getFile().toURI().toURL());
            }
        } catch (MalformedURLException e) {
            throw new MojoExecutionException(""Error during setting up classpath"", e);
        }

    }"
977,4218038.txt,none,"        @Override
        public Terminal bind(QueryOptions options) throws InvalidRequestException
        {
            Term term = options.getJsonColumnValue(marker.bindIndex, column.name, marker.columns);
            return term == null
                 ? (defaultUnset ? Constants.UNSET_VALUE : null)
                 : term.bind(options);
        }"
978,9093112.txt,none,"        @Specialization
        protected Object callNamedFunction(VirtualFrame frame, String symbol, RArgsValuesAndNames args, @SuppressWarnings(""unused"") RMissing packageName,
                        @Cached(""createRegisteredNativeSymbol(CallNST)"") DLL.RegisteredNativeSymbol rns,
                        @Cached(""create()"") DLL.RFindSymbolNode findSymbolNode,
                        @Cached(""createBinaryProfile()"") ConditionProfile registeredProfile) {
            return callNamedFunctionWithPackage(frame, symbol, args, null, rns, findSymbolNode, registeredProfile);
        }"
979,6632662.txt,none,"  @Override
  public DataReference getOriginDataReference() {
    return baseRef;
  }"
980,6120286.txt,none,"        @Override
        public <V> UnsortedBagBatch<V> flatCollect(Function<? super T, ? extends Iterable<V>> function)
        {
            return new FlatCollectUnsortedBagBatch<>(this, function);
        }"
981,4602475.txt,none,"  @ThriftField
  public void setPartitionsToCompute(int partitionsToCompute) {
    this.partitionsToCompute = partitionsToCompute;
  }"
982,9158528.txt,none,"	private void createImageMapContainer( int x, int y, int width, int height,
			IHyperlinkAction link )
	{
		ReportContent reportContent = (ReportContent) image.getReportContent( );
		IContainerContent mapContent = reportContent.createContainerContent( );
		mapContent.setHyperlinkAction( link );
		BlockContainerArea area = (BlockContainerArea) AreaFactory
				.createBlockContainer( mapContent );
		area.setPosition( x, y );
		area.setWidth( width );
		area.setHeight( height );
		root.addChild( area );
	}"
983,7641912.txt,none,"	public void testSynchronizationGlobal() throws Exception {
		SecurityContextHolder.clearContext();
		SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_GLOBAL);
		loadStartAndWaitForThreads(true, ""Main_"", NUM_THREADS, true, false);
		assertThat(errors).as(""Thread errors detected; review log output for details"").isZero();
	}"
984,4487581.txt,none,"    public static org.apache.drill.exec.proto.UserProtos.GetQueryPlanFragments parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }"
985,8914575.txt,none,"  public LeadLagInfo getLlInfo() {
    return llInfo;
  }"
986,4081252.txt,none,"    @Override
    public ILSMIndex createInstance(INCServiceContext serviceCtx) throws HyracksDataException {
        IIOManager ioManager = serviceCtx.getIoManager();
        FileReference file = ioManager.resolve(path);
        List<IVirtualBufferCache> virtualBufferCaches = vbcProvider.getVirtualBufferCaches(serviceCtx, file);
        ioOpCallbackFactory.initialize(serviceCtx, this);
        return LSMRTreeUtils.createLSMTreeWithAntiMatterTuples(ioManager, virtualBufferCaches, file,
                storageManager.getBufferCache(serviceCtx), typeTraits, cmpFactories, btreeCmpFactories,
                valueProviderFactories, rtreePolicyType,
                mergePolicyFactory.createMergePolicy(mergePolicyProperties, serviceCtx),
                opTrackerProvider.getOperationTracker(serviceCtx, this), ioSchedulerProvider.getIoScheduler(serviceCtx),
                ioOpCallbackFactory, linearizeCmpFactory, rtreeFields, filterTypeTraits, filterCmpFactories,
                filterFields, durable, isPointMBR, metadataPageManagerFactory);
    }"
987,4045122.txt,none,"    public static ITypeTraits[] serdesToTypeTraits(ISerializerDeserializer[] serdes, int payloadSize) {
        ITypeTraits[] typeTraits = new ITypeTraits[serdes.length + 1];
        for (int i = 0; i < serdes.length; i++) {
            typeTraits[i] = serdeToTypeTrait(serdes[i]);
        }
        typeTraits[serdes.length] = new FixedLengthTypeTrait(payloadSize);
        return typeTraits;
    }"
988,8203593.txt,none,"    public final boolean synpred9_PsiInternalSimpleBeeLangTestLanguage() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_PsiInternalSimpleBeeLangTestLanguage_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println(""impossible: ""+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }"
989,4112198.txt,none,"    protected KubernetesClient getClient(ConfigBag config) {
        if (client == null) {
            KubernetesClientRegistry registry = getConfig(KUBERNETES_CLIENT_REGISTRY);
            client = registry.getKubernetesClient(ResolvingConfigBag.newInstanceExtending(getManagementContext(), config));
        }
        return client;
    }"
990,6445781.txt,none,"    private static Map<String, String> load() {
        Map<String, String> attributes = Maps.newConcurrentMap();

        for (URI uri : uris()) {
            try {
                attributes.putAll(load(uri.toURL()));
            } catch (Throwable t) {
                logger.error(""load(): '{}' failed"", uri, t);
            }
        }

        return attributes;
    }"
991,6016779.txt,none,"    PackageState(String value) {
        this.value = value;
    }"
992,3987166.txt,none,"    protected void endObject()
        throws JSONException
    {
        writer.endObject();
    }"
993,6583398.txt,none,"	public final boolean equals(final Object object) {
		if (object instanceof LegacyViewContributionExpression) {
			final LegacyViewContributionExpression that = (LegacyViewContributionExpression) object;
			return equals(this.activePartId, that.activePartId)
					&& equals(this.getWindow(), that.getWindow());
		}

		return false;
	}"
994,4110001.txt,minor,"    private synchronized void checkHealth() {
        CalculatedStatus status = calculateStatus();
        boolean healthy = status.isHealthy();
        long now = System.currentTimeMillis();

        if (healthy) {
            stateLastGood.set(now);
            if (lastPublished == LastPublished.FAILED) {
                if (currentRecoveryStartTime == null) {
                    LOG.info(""{} check for {}, now recovering: {}"", new Object[] {this, entity, getDescription(status)});
                    currentRecoveryStartTime = now;
                    schedulePublish();
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing recovering: {}"", new Object[] {this, entity, getDescription(status)});
                }
            } else {
                if (currentFailureStartTime != null) {
                    LOG.info(""{} check for {}, now healthy: {}"", new Object[] {this, entity, getDescription(status)});
                    currentFailureStartTime = null;
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, still healthy: {}"", new Object[] {this, entity, getDescription(status)});
                }
            }
        } else {
            stateLastFail.set(now);
            if (lastPublished != LastPublished.FAILED) {
                if (currentFailureStartTime == null) {
                    LOG.info(""{} check for {}, now failing: {}"", new Object[] {this, entity, getDescription(status)});
                    currentFailureStartTime = now;
                    schedulePublish();
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, continuing failing: {}"", new Object[] {this, entity, getDescription(status)});
                }
            } else {
                if (currentRecoveryStartTime != null) {
                    LOG.info(""{} check for {}, now failing: {}"", new Object[] {this, entity, getDescription(status)});
                    currentRecoveryStartTime = null;
                } else {
                    if (LOG.isTraceEnabled()) LOG.trace(""{} check for {}, still failed: {}"", new Object[] {this, entity, getDescription(status)});
                }
            }
        }
    }"
995,7622719.txt,none,"	public static String[][] suggestArgumentNamesWithProposals(IJavaProject project, IMethodBinding binding) {
		int nParams = binding.getParameterTypes().length;
		if (nParams > 0) {
			try {
				IMethod method = (IMethod) binding.getMethodDeclaration().getJavaElement();
				if (method != null) {
					String[] parameterNames = method.getParameterNames();
					if (parameterNames.length == nParams) {
						return suggestArgumentNamesWithProposals(project, parameterNames);
					}
				}
			}
			catch (JavaModelException e) {
				// ignore
			}
		}
		String[][] names = new String[nParams][];
		for (int i = 0; i < names.length; i++) {
			names[i] = new String[] { ""arg"" + i }; //$NON-NLS-1$
		}
		return names;
	}"
996,8102140.txt,none,"    public final void rule__Disjunction__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtext.g:5342:1: ( rule__Disjunction__Group_1__0__Impl rule__Disjunction__Group_1__1 )
            // InternalXtext.g:5343:2: rule__Disjunction__Group_1__0__Impl rule__Disjunction__Group_1__1
            {
            pushFollow(FollowSets000.FOLLOW_26);
            rule__Disjunction__Group_1__0__Impl();

            state._fsp--;

            pushFollow(FollowSets000.FOLLOW_2);
            rule__Disjunction__Group_1__1();

            state._fsp--;


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
997,6370656.txt,none,"	private JobTreeElement[] findJobsToRemove(JobTreeElement info) {

		if (info.isJobInfo()) {
			Job myJob = ((JobInfo) info).getJob();

			if (myJob != null) {

				Object prop = myJob
						.getProperty(ProgressManagerUtil.KEEPONE_PROPERTY);
				if (prop instanceof Boolean && ((Boolean) prop).booleanValue()) {
					ArrayList<JobTreeElement> found = null;
					JobTreeElement[] all;
					synchronized (keptjobinfos) {
						all = keptjobinfos
								.toArray(new JobTreeElement[keptjobinfos.size()]);
					}
					for (JobTreeElement jte : all) {
						if (jte != info && jte.isJobInfo()) {
							Job job = ((JobInfo) jte).getJob();
							if (job != null && job != myJob
									&& job.belongsTo(myJob)) {
								if (found == null) {
									found = new ArrayList<>();
								}
								found.add(jte);
							}
						}
					}
					if (found != null) {
						return found
								.toArray(new JobTreeElement[found.size()]);
					}
				}
			}
		}
		return null;
	}"
998,6427329.txt,none,"	private void notifyClients() {
		Object[] clients = listeners.getListeners();
		for (Object client : clients) {
			((VisibilityListener) client).onVisibilityOrActivationChange();
		}
	}"
999,4788662.txt,major,"  public boolean equals(TListSentryPrivilegesRequest that) {
    if (that == null)
      return false;

    boolean this_present_protocol_version = true;
    boolean that_present_protocol_version = true;
    if (this_present_protocol_version || that_present_protocol_version) {
      if (!(this_present_protocol_version && that_present_protocol_version))
        return false;
      if (this.protocol_version != that.protocol_version)
        return false;
    }

    boolean this_present_requestorUserName = true && this.isSetRequestorUserName();
    boolean that_present_requestorUserName = true && that.isSetRequestorUserName();
    if (this_present_requestorUserName || that_present_requestorUserName) {
      if (!(this_present_requestorUserName && that_present_requestorUserName))
        return false;
      if (!this.requestorUserName.equals(that.requestorUserName))
        return false;
    }

    boolean this_present_roleName = true && this.isSetRoleName();
    boolean that_present_roleName = true && that.isSetRoleName();
    if (this_present_roleName || that_present_roleName) {
      if (!(this_present_roleName && that_present_roleName))
        return false;
      if (!this.roleName.equals(that.roleName))
        return false;
    }

    boolean this_present_authorizableHierarchy = true && this.isSetAuthorizableHierarchy();
    boolean that_present_authorizableHierarchy = true && that.isSetAuthorizableHierarchy();
    if (this_present_authorizableHierarchy || that_present_authorizableHierarchy) {
      if (!(this_present_authorizableHierarchy && that_present_authorizableHierarchy))
        return false;
      if (!this.authorizableHierarchy.equals(that.authorizableHierarchy))
        return false;
    }

    return true;
  }"
1000,4130189.txt,none,"  public SqlNode getNode() {
    return overCall;
  }"
1001,7949921.txt,critical,"	private void processInfoOutput(final BufferedReader stdout) {
		Matcher matcher;

		final MainControllerElement tempRoot = new MainControllerElement(""Temporal root"", this);
		readFullLineOnly(stdout);
		if (fastLine == null) {
			return;
		}
		matcher = MC_STATE_PATTERN.matcher(fastLine);
		if (matcher.matches()) {
			final String mcStateName = matcher.group(1);
			tempRoot.setStateInfo(new InformationElement(""State: "" + mcStateName));
			readFullLineOnly(stdout);

			suspectedLastState = getMCStateFromName(mcStateName);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null && "" host information:"".equals(fastLine)) {
			readFullLineOnly(stdout);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null) {
			if (fastLine.startsWith(""  -"")) {
				// host list
				while (fastLine != null && fastLine.startsWith(""  -"")) {
					processInfoOutputHC(stdout, tempRoot);
				}
			} else if (""  no HCs are connected"".equals(fastLine)) {
				readFullLineOnly(stdout);
			}
		} else {
			fastLine = null;
			return;
		}

		if (fastLine != null && PAUSE_PATTERN.matcher(fastLine).matches()) {
			tempRoot.setPauseInfo(new InformationElement(fastLine.trim()));
			readFullLineOnly(stdout);
		} else {
			fastLine = null;
			return;
		}
		if (fastLine != null && CONSOLE_LOGGING_PATTERN.matcher(fastLine).matches()) {
			tempRoot.setConsoleLoggingInfo(new InformationElement(fastLine.trim()));
		} else {
			fastLine = null;
			return;
		}
		if (mainControllerRoot != null) {
			mainControllerRoot.children().clear();
			mainControllerRoot.transferData(tempRoot);
		}

	}"
1002,3796407.txt,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, getNettyMetrics_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MetricInfo();
                struct.success.read(iprot);
                struct.set_success_isSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
1003,6190494.txt,minor,"  InitializeParams get(String id) throws LanguageServerException {
    InitializeParams initializeParams = new InitializeParams();
    LOG.debug(""Initialize params constructing: started"");

    Boolean locality = localityRegistry.get(id);
    LOG.debug(""Locality: {}"", locality);

    Integer processId = locality ? ProcessIdProvider.get() : null;
    initializeParams.setProcessId(processId);
    LOG.debug(""Process id: {}"", processId);

    String projectsRoot = projectsRootRegistry.getOrNull(id);

    String rootPath;
    if (projectsRoot != null) {
      rootPath = projectsRoot;
    } else {
      rootPath = Paths.get(rootUri).toAbsolutePath().toString();
    }
    initializeParams.setRootPath(rootPath);
    LOG.debug(""Root path: {}"", rootPath);

    String rootUri;
    if (projectsRoot != null) {
      rootUri = Paths.get(projectsRoot).toUri().toString();
    } else {
      rootUri = this.rootUri.toString();
    }
    initializeParams.setRootUri(rootUri);
    LOG.debug(""Root URI: {}"", rootUri);

    ClientCapabilities capabilities = ClientCapabilitiesProvider.get();
    initializeParams.setCapabilities(capabilities);
    LOG.debug(""Client capabilities: {}"", capabilities);

    String clientName = ClientCapabilitiesProvider.CLIENT_NAME;
    initializeParams.setClientName(clientName);
    LOG.debug(""Client name: {}"", clientName);

    LOG.debug(""Initialize params constructing: finished"");
    return initializeParams;
  }"
1004,8322298.txt,none,"	public void setProceedOnError(boolean b) {
		options.proceedOnError = b;
	}"
1005,5768014.txt,none,"        @Override
        public Iterator<SAML2IdPTO> iterator(final long first, final long count) {
            List<SAML2IdPTO> list = restClient.list();
            Collections.sort(list, comparator);
            return list.subList((int) first, (int) first + (int) count).iterator();
        }"
1006,8708216.txt,none,"public void setHeight (int height) {
	checkWidget ();
	if (height < 0) return;
	setBounds (0, 0, width, height, false, true);
	if (expanded) parent.layoutItems (parent.indexOf (this) + 1, true);
}"
1007,5950764.txt,major,"    private void processSingleRecord(final Record record) {

        String data = null;
        final ObjectMapper mapper = new ObjectMapper();
        try {
            final ByteBuffer buffer = record.getData();
            data = new String(buffer.array(), ""UTF-8"");
            final RekognitionOutput output = mapper.readValue(data, RekognitionOutput.class);

            // Get the fragment number from Rekognition Output
            final String fragmentNumber = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getFragmentNumber();
            final Double frameOffsetInSeconds = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getFrameOffsetInSeconds();
            final Double serverTimestamp = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getServerTimestamp();
            final Double producerTimestamp = output
                    .getInputInformation()
                    .getKinesisVideo()
                    .getProducerTimestamp();
            final double detectedTime = output.getInputInformation().getKinesisVideo().getServerTimestamp()
                    + output.getInputInformation().getKinesisVideo().getFrameOffsetInSeconds() * 1000L;
            final RekognizedOutput rekognizedOutput = RekognizedOutput.builder()
                    .fragmentNumber(fragmentNumber)
                    .serverTimestamp(serverTimestamp)
                    .producerTimestamp(producerTimestamp)
                    .frameOffsetInSeconds(frameOffsetInSeconds)
                    .detectedTime(detectedTime)
                    .build();

            // Add face search response
            final List<FaceSearchResponse> responses = output.getFaceSearchResponse();

            responses.forEach(response -> {
                final DetectedFace detectedFace = response.getDetectedFace();
                final List<MatchedFace> matchedFaces = response.getMatchedFaces();
                final RekognizedOutput.FaceSearchOutput faceSearchOutput = RekognizedOutput.FaceSearchOutput.builder()
                        .detectedFace(detectedFace)
                        .matchedFaceList(matchedFaces)
                        .build();
                rekognizedOutput.addFaceSearchOutput(faceSearchOutput);
            });

            // Add it to the index
            log.info(""Found Rekognized results for fragment number : {}"", fragmentNumber);
            rekognizedFragmentsIndex.add(fragmentNumber, producerTimestamp.longValue(),
                    serverTimestamp.longValue(), rekognizedOutput);

        } catch (final NumberFormatException e) {
            log.warn(""Record does not match sample record format. Ignoring record with data : {}"", data, e);
        } catch (final Exception e) {
            log.error(""Unable to process record !"", e);
        }
    }"
1008,5470714.txt,none,"    private UUID cacheIfNecessary(final UUID candidate)
    {
        UUID existing = _uuids.putIfAbsent(candidate, candidate);
        return existing == null ? candidate : existing;
    }"
1009,7954017.txt,none,"	protected void addNodeToCluster(final String name, final Set<NodeDescriptor> cluster) {
		final NodeDescriptor v = mapNameNode.get(name);
		cluster.add(v);
		v.setCluster(cluster);
	}"
1010,5331456.txt,none,"    @Override
    public ProcessGroupEntity createProcessGroup(final Revision revision, final String parentGroupId, final ProcessGroupDTO processGroupDTO) {
        final RevisionUpdate<ProcessGroupDTO> snapshot = createComponent(
                revision,
                processGroupDTO,
                () -> processGroupDAO.createProcessGroup(parentGroupId, processGroupDTO),
                processGroup -> dtoFactory.createProcessGroupDto(processGroup));

        final ProcessGroup processGroup = processGroupDAO.getProcessGroup(processGroupDTO.getId());
        final PermissionsDTO permissions = dtoFactory.createPermissionsDto(processGroup);
        final ProcessGroupStatusDTO status = dtoFactory.createConciseProcessGroupStatusDto(controllerFacade.getProcessGroupStatus(processGroup.getIdentifier()));
        final List<BulletinDTO> bulletins = dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(processGroup.getIdentifier()));
        final List<BulletinEntity> bulletinEntities = bulletins.stream().map(bulletin -> entityFactory.createBulletinEntity(bulletin, permissions.getCanRead())).collect(Collectors.toList());
        return entityFactory.createProcessGroupEntity(snapshot.getComponent(), dtoFactory.createRevisionDTO(snapshot.getLastModification()), permissions, status, bulletinEntities);
    }"
1011,6860231.txt,none,"  @Override
  public void dispose() {
    database.removeListener(listener);
  }"
1012,3814167.txt,none,"      private VoteRunnableHolder(QuorumVote quorumVote, List<VoteRunnable> runnables, int size) {
         this.quorumVote = quorumVote;

         this.runnables = runnables;
         this.size = size;
      }"
1013,3875995.txt,none,"  @ApiModelProperty(name = ServiceConfigVersionResourceProvider.CLUSTER_NAME_PROPERTY_ID)
  public String getClusterName() {
    return clusterName;
  }"
1014,6923161.txt,none,"    private static Range<Integer> union(Range<Integer> x, Range<Integer> y) {
      return x.isEmpty() ? y : y.isEmpty() ? x : x.span(y).canonical(INTEGERS);
    }"
1015,5957064.txt,none,"    public void addHttpFilter(HttpListener listener, String regex) {
        synchronized (filterRegistry) {
            if (!filterRegistry.containsKey(regex)) {
                filterRegistry.put(regex, new ArrayList<HttpListener>());
            }
            filterRegistry.get(regex).add(listener);
        }
    }"
1016,6147959.txt,none,"		@Override
		public IInformationControl createInformationControl(Shell parent) {
			return new AnnotationExpansionControl(parent, SWT.NONE,
					fAnnotationAccess);
		}"
1017,7440963.txt,none,"    @TruffleBoundary
    private LLVMManagedPointer getApplicationArguments() {
        String[] result;
        if (mainArguments == null) {
            result = new String[]{""""};
        } else {
            result = new String[mainArguments.length + 1];
            // we don't have an application path at this point in time. it will be overwritten when
            // _start is called
            result[0] = """";
            for (int i = 1; i < result.length; i++) {
                result[i] = mainArguments[i - 1].toString();
            }
        }
        return toTruffleObjects(result);
    }"
1018,4318753.txt,none,"    @Override
	public void finish() throws StandardException {
		source.finish();
		super.finish();
	}"
1019,6841292.txt,none,"  public static boolean match(
      String patternText,
      ParseTreeNode specimen,
      Map<String, ParseTreeNode> bindings) {
    Map<String, ParseTreeNode> tempBindings = getPatternNode(patternText)
        .match(specimen);

    if (tempBindings != null) {
      bindings.putAll(tempBindings);
      return true;
    }
    return false;
  }"
1020,5608439.txt,none,"    private boolean isValid(Document xml) throws SAXException{
        try{
            String language = ""http://www.w3.org/2001/XMLSchema"";
            SchemaFactory factory = SchemaFactory.newInstance(language);

            Source source = new DOMSource(map.getSchema());
            Schema schema = factory.newSchema(source);
            Validator validator = schema.newValidator();
            validator.validate(new DOMSource(xml));
            
            //if no exceptions where raised, the document is valid
            return true;
        } catch(IOException e) {
            LOG.log(POILogger.ERROR, ""document is not valid"", e);
        }

        return false;
    }"
1021,7141504.txt,none,"  @Deprecated
  @Override
  public <T> void sendRestRequest(final Request<T> request, RequestContext requestContext,
      Callback<RestResponse> callback) {
    if (_restClient == null) {
      throw new UnsupportedOperationException(""sendRestRequest is not supported by the ForwardingRestClient"");
    }
    _restClient.sendRestRequest(request, requestContext, callback);
  }"
1022,4917464.txt,none,"        @Override
        public int compare(PropertyDescriptor d1, PropertyDescriptor d2) {
            String g1 = group(d1);
            String g2 = group(d2);
            Integer go1 = groupOrder(g1);
            Integer go2 = groupOrder(g2);

            int result = go1.compareTo(go2);
            if (result != 0) {
                return result;
            }

            result = g1.compareTo(g2);
            if (result != 0) {
                return result;
            }

            Integer po1 = propertyOrder(d1);
            Integer po2 = propertyOrder(d2);
            result = po1.compareTo(po2);
            if (result != 0) {
                return result;
            }

            return d1.getName().compareTo(d2.getName());
        }"
1023,5048033.txt,none,"    private static Var asVar(Node node)
    {
        if ( Var.isVar(node) )
            return Var.alloc(node) ;
        return null ;
    }"
1024,4404282.txt,none,"    private void initListeners()
    {
        importTemplatesButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                importTemplatesAction();
            }
        } );

        exportTemplatesButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                exportTemplatesAction();
            }
        } );

        removeTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                removeTemplateAction();
            }
        } );

        setDefaultTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                setDefaultTemplateAction();
            }
        } );

        useForAnyEntryButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                useForAnyEntryAction();
            }
        } );

        useForOnlyEntriesWithTemplateButton.addSelectionListener( new SelectionAdapter()
        {
            public void widgetSelected( SelectionEvent e )
            {
                useForOnlyEntriesWithTemplateAction();
            }
        } );
    }"
1025,9159804.txt,none,"    private void retrySetNullParamValue( ParameterName paramName, int paramIndex, 
                                         int parameterType,
                                         Exception lastException ) 
        throws DataException
    {
        switch( parameterType )
        {            
            case Types.CHAR:
            {
                setString( paramName, paramIndex, null );
                return;
            }
            
            case Types.DECIMAL:
            {
                setBigDecimal( paramName, paramIndex, null );
                return;
            }
            case Types.DATE:
            {
                setDate( paramName, paramIndex, null );
                return;
            }
            
            case Types.TIME:
            {
                setTime( paramName, paramIndex, null );
                return;
            }

            case Types.TIMESTAMP:
            {
                setTimestamp( paramName, paramIndex, null );
                return;
            }

            case Types.JAVA_OBJECT:
            {
                setObject( paramName, paramIndex, null );
                return;
            }
            
            default:
                // metadata indicates primitive data types or types not supported for input parameter, 
                // cannot retry with a different ODA API setter to assign 
                // a null input parameter value
                
                getLogger().logp( Level.SEVERE, sm_className, ""retrySetNullParamValue"",  //$NON-NLS-1$
                                ""Input parameter value is null; not able to retry, throws exception from underlying ODA driver."" ); //$NON-NLS-1$
                
                // not able to retry, throw last exception thrown by 
                // the underlying ODA driver
                throwSetParamValueLastException( lastException, ""retrySetNullParamValue"" ); //$NON-NLS-1$
        }
    }"
1026,3940072.txt,none,"	private void processAsSubstitutableExport(boolean isFragment, Requirement requirement, List<Capability> capabilities) {
		String namespace = requirement.getNamespace();
		if (!PackageNamespace.PACKAGE_NAMESPACE.equals(namespace)) {
			return;
		}
		Resource resource = requirement.getResource();
		Wiring wiring = wirings.get(resource);
		if (isFragment) {
			List<Wire> fragmentWires = wiring.getRequiredResourceWires(HostNamespace.HOST_NAMESPACE);
			for (Wire fragmentWire : fragmentWires) {
				Resource host = fragmentWire.getProvider();
				processResourceCapabilities(
						wirings.get(host).getResourceCapabilities(namespace),
						requirement,
						capabilities);
			}
		}
		else {
			List<Capability> resourceCapabilities = wiring.getResourceCapabilities(namespace);
			processResourceCapabilities(resourceCapabilities, requirement, capabilities);
		}
	}"
1027,4462446.txt,none,"  public void configure(OptionManager optionsManager) {
    assert (state == State.CONFIG);
    accuracy = optionsManager.getLong(ExecConstants.HLL_ACCURACY);
    // Now config complete - moving to MERGE state
    state = State.MERGE;
  }"
1028,8526493.txt,none,"    @Override
    public String getCurrentState() {
        // TODO Auto-generated method stub
        return null;
    }"
1029,5684516.txt,none,"    protected List<String> getSelectionsInContext(String label, Collection<String> allEntities, String context) {
        List<String> allEntityString = new ArrayList<String>();

        for (String selectedText : allEntities) {
            if (context.contains(selectedText) && selectedText.compareToIgnoreCase(label) != 0) {
                allEntityString.add(selectedText);
            }

        }

        return allEntityString;
    }"
1030,8614637.txt,none,"    public boolean isAccessed() {
        return accessed;
    }"
1031,5809960.txt,none,"    @Override
    public <A> GraphTraversalSource withSideEffect(final String key, final Supplier<A> initialValue, final BinaryOperator<A> reducer) {
        return (GraphTraversalSource) TraversalSource.super.withSideEffect(key, initialValue, reducer);
    }"
1032,6904479.txt,major,"    private Object invoke(String methodName, Object returnValueIfNonExistent,
                          Class<?>[] paramTypes, Object[] params)
        throws DocletInvokeException {
            Method meth;
            try {
                meth = docletClass.getMethod(methodName, paramTypes);
            } catch (NoSuchMethodException exc) {
                if (returnValueIfNonExistent == null) {
                    messager.error(Messager.NOPOS, ""main.doclet_method_not_found"",
                                   docletClassName, methodName);
                    throw new DocletInvokeException();
                } else {
                    return returnValueIfNonExistent;
                }
            } catch (SecurityException exc) {
                messager.error(Messager.NOPOS, ""main.doclet_method_not_accessible"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            if (!Modifier.isStatic(meth.getModifiers())) {
                messager.error(Messager.NOPOS, ""main.doclet_method_must_be_static"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            ClassLoader savedCCL =
                Thread.currentThread().getContextClassLoader();
            try {
                if (appClassLoader != null) // will be null if doclet class provided via API
                    Thread.currentThread().setContextClassLoader(appClassLoader);
                return meth.invoke(null , params);
            } catch (IllegalArgumentException | NullPointerException exc) {
                messager.error(Messager.NOPOS, ""main.internal_error_exception_thrown"",
                               docletClassName, methodName, exc.toString());
                throw new DocletInvokeException();
            } catch (IllegalAccessException exc) {
                messager.error(Messager.NOPOS, ""main.doclet_method_not_accessible"",
                               docletClassName, methodName);
                throw new DocletInvokeException();
            }
            catch (InvocationTargetException exc) {
                Throwable err = exc.getTargetException();
                if (apiMode)
                    throw new ClientCodeException(err);
                if (err instanceof java.lang.OutOfMemoryError) {
                    messager.error(Messager.NOPOS, ""main.out.of.memory"");
                } else {
                    messager.error(Messager.NOPOS, ""main.exception_thrown"",
                               docletClassName, methodName, exc.toString());
                    exc.getTargetException().printStackTrace(System.err);
                }
                throw new DocletInvokeException();
            } finally {
                Thread.currentThread().setContextClassLoader(savedCCL);
            }
    }"
1033,7563795.txt,major,"	@Override
	public TypedValue read(EvaluationContext context, @Nullable Object target, String name) throws AccessException {
		Assert.state(target != null, ""Target must not be null"");
		Class<?> type = (target instanceof Class ? (Class<?>) target : target.getClass());

		if (type.isArray() && name.equals(""length"")) {
			if (target instanceof Class) {
				throw new AccessException(""Cannot access length on array class itself"");
			}
			return new TypedValue(Array.getLength(target));
		}

		PropertyCacheKey cacheKey = new PropertyCacheKey(type, name, target instanceof Class);
		InvokerPair invoker = this.readerCache.get(cacheKey);
		this.lastReadInvokerPair = invoker;

		if (invoker == null || invoker.member instanceof Method) {
			Method method = (Method) (invoker != null ? invoker.member : null);
			if (method == null) {
				method = findGetterForProperty(name, type, target);
				if (method != null) {
					// Treat it like a property...
					// The readerCache will only contain gettable properties (let's not worry about setters for now).
					Property property = new Property(type, method, null);
					TypeDescriptor typeDescriptor = new TypeDescriptor(property);
					invoker = new InvokerPair(method, typeDescriptor);
					this.lastReadInvokerPair = invoker;
					this.readerCache.put(cacheKey, invoker);
				}
			}
			if (method != null) {
				try {
					ReflectionUtils.makeAccessible(method);
					Object value = method.invoke(target);
					return new TypedValue(value, invoker.typeDescriptor.narrow(value));
				}
				catch (Exception ex) {
					throw new AccessException(""Unable to access property '"" + name + ""' through getter method"", ex);
				}
			}
		}

		if (invoker == null || invoker.member instanceof Field) {
			Field field = (Field) (invoker == null ? null : invoker.member);
			if (field == null) {
				field = findField(name, type, target);
				if (field != null) {
					invoker = new InvokerPair(field, new TypeDescriptor(field));
					this.lastReadInvokerPair = invoker;
					this.readerCache.put(cacheKey, invoker);
				}
			}
			if (field != null) {
				try {
					ReflectionUtils.makeAccessible(field);
					Object value = field.get(target);
					return new TypedValue(value, invoker.typeDescriptor.narrow(value));
				}
				catch (Exception ex) {
					throw new AccessException(""Unable to access field '"" + name + ""'"", ex);
				}
			}
		}

		throw new AccessException(""Neither getter method nor field found for property '"" + name + ""'"");
	}"
1034,8055895.txt,none,"    public final void mT__15() throws RecognitionException {
        try {
            int _type = T__15;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalInheritanceTest3Language.g:13:7: ( '{' )
            // InternalInheritanceTest3Language.g:13:9: '{'
            {
            match('{'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
1035,3799104.txt,none,"    public static void rmpath(String path) {
        LOG.debug(""Removing path "" + path);
        boolean succ = (new File(path)).delete();
        if (!succ) {
            throw new RuntimeException(""Failed to delete "" + path);
        }
    }"
1036,8271243.txt,none,"    public final Boolean entryRuleType() throws RecognitionException {
        Boolean current = false;

        Boolean iv_ruleType = null;


        try {
            // PsiInternalSDomain.g:284:46: (iv_ruleType= ruleType EOF )
            // PsiInternalSDomain.g:285:2: iv_ruleType= ruleType EOF
            {
             markComposite(elementTypeProvider.getTypeElementType()); 
            pushFollow(FOLLOW_1);
            iv_ruleType=ruleType();

            state._fsp--;

             current =iv_ruleType; 
            match(input,EOF,FOLLOW_2); 

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return current;
    }"
1037,4490426.txt,major,"  private void parseQuotedValue(byte prev) throws IOException {
    final byte newLine = this.newLine;
    final byte delimiter = this.delimiter;
    final TextOutput output = this.output;
    final TextInput input = this.input;
    final byte quote = this.quote;

    ch = input.nextCharNoNewLineCheck();

    while (!(prev == quote && (ch == delimiter || ch == newLine || isWhite(ch)))) {
      if (ch != quote) {
        if (prev == quote) { // unescaped quote detected
          if (parseUnescapedQuotes) {
            output.append(quote);
            output.append(ch);
            parseQuotedValue(ch);
            break;
          } else {
            throw new TextParsingException(
                context,
                ""Unescaped quote character '""
                    + quote
                    + ""' inside quoted value of CSV field. To allow unescaped quotes, set 'parseUnescapedQuotes' to 'true' in the CSV parser settings. Cannot parse CSV input."");
          }
        }
        output.append(ch);
        prev = ch;
      } else if (prev == quoteEscape) {
        output.append(quote);
        prev = NULL_BYTE;
      } else {
        prev = ch;
      }
      ch = input.nextCharNoNewLineCheck();
    }

    // Handles whitespaces after quoted value:
    // Whitespaces are ignored (i.e., ch <= ' ') if they are not used as delimiters (i.e., ch != ' ')
    // For example, in tab-separated files (TSV files), '\t' is used as delimiter and should not be ignored
    // Content after whitespaces may be parsed if 'parseUnescapedQuotes' is enabled.
    if (ch != newLine && ch <= ' ' && ch != delimiter) {
      final DrillBuf workBuf = this.workBuf;
      workBuf.resetWriterIndex();
      do {
        // saves whitespaces after value
        workBuf.writeByte(ch);
        ch = input.nextChar();
        // found a new line, go to next record.
        if (ch == newLine) {
          return;
        }
      } while (ch <= ' ' && ch != delimiter);

      // there's more stuff after the quoted value, not only empty spaces.
      if (!(ch == delimiter || ch == newLine) && parseUnescapedQuotes) {

        output.append(quote);
        for(int i =0; i < workBuf.writerIndex(); i++){
          output.append(workBuf.getByte(i));
        }
        // the next character is not the escape character, put it there
        if (ch != quoteEscape) {
          output.append(ch);
        }
        // sets this character as the previous character (may be escaping)
        // calls recursively to keep parsing potentially quoted content
        parseQuotedValue(ch);
      }
    }

    if (!(ch == delimiter || ch == newLine)) {
      throw new TextParsingException(context, ""Unexpected character '"" + ch
          + ""' following quoted value of CSV field. Expecting '"" + delimiter + ""'. Cannot parse CSV input."");
    }
  }"
1038,7604836.txt,none,"	private void onFilter(ExpandableSection expandable, CheckBoxesSection<Dependency> checkboxesSection, String cat) {
		Filter<Dependency> filter = this.filter.getValue();
		checkboxesSection.applyFilter(filter);
		boolean isTrivialFilter = filter==null || filter.isTrivial();
		if (checkboxesSection.isCreated()) {
			boolean hasVisible = checkboxesSection.hasVisible();
			expandable.setVisible(hasVisible);
			if (hasVisible) {
				expandable.getExpansionState().setValue(!isTrivialFilter);
			}
		}
		layout();
	}"
1039,4493485.txt,none,"	private static Function<EventMention, String> getPropertyGetter(final String propertyName) {
		return new Function<EventMention, String>() {
			@Override
			public String apply(EventMention eventMention) {
				EventProperties eventProperties = eventMention.getEvent().getProperties();
				Feature feature = eventProperties.getType().getFeatureByBaseName(propertyName);
				return eventProperties.getFeatureValueAsString(feature);
			}
		};
	}"
1040,7893182.txt,none,"  private HeaderMap(Bucket[] buckets, byte[] stringTable, int numEntries, int maxValueLength) {
    Preconditions.checkArgument(buckets.length > 0, ""The number of buckets must be greater than 0"");
    Preconditions.checkArgument(
        (buckets.length & (buckets.length - 1)) == 0, ""The number of buckets must be a power of 2"");

    this.buckets = buckets;
    this.stringBytes = stringTable;
    this.numEntries = numEntries;
    this.maxValueLength = maxValueLength;
  }"
1041,6842606.txt,none,"  @SuppressWarnings(""unchecked"")
  public <T> T remove(SyntheticAttributeKey<T> k) {
    if (immutable) {
      throw new UnsupportedOperationException();
    }
    return (T) remove((Object) k);
  }"
1042,7374061.txt,none,"	public void setRetentionDuration(String retentionDuration) {
		this.retentionDuration = retentionDuration;
	}"
1043,6905182.txt,critical,"  private TtmlRegion parseRegionAttributes(
      XmlPullParser xmlParser, CellResolution cellResolution, TtsExtent ttsExtent) {
    String regionId = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_ID);
    if (regionId == null) {
      return null;
    }

    float position;
    float line;

    String regionOrigin = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_TTS_ORIGIN);
    if (regionOrigin != null) {
      Matcher originPercentageMatcher = PERCENTAGE_COORDINATES.matcher(regionOrigin);
      Matcher originPixelMatcher = PIXEL_COORDINATES.matcher(regionOrigin);
      if (originPercentageMatcher.matches()) {
        try {
          position = Float.parseFloat(originPercentageMatcher.group(1)) / 100f;
          line = Float.parseFloat(originPercentageMatcher.group(2)) / 100f;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed origin: "" + regionOrigin);
          return null;
        }
      } else if (originPixelMatcher.matches()) {
        if (ttsExtent == null) {
          Log.w(TAG, ""Ignoring region with missing tts:extent: "" + regionOrigin);
          return null;
        }
        try {
          int width = Integer.parseInt(originPixelMatcher.group(1));
          int height = Integer.parseInt(originPixelMatcher.group(2));
          // Convert pixel values to fractions.
          position = width / (float) ttsExtent.width;
          line = height / (float) ttsExtent.height;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed origin: "" + regionOrigin);
          return null;
        }
      } else {
        Log.w(TAG, ""Ignoring region with unsupported origin: "" + regionOrigin);
        return null;
      }
    } else {
      Log.w(TAG, ""Ignoring region without an origin"");
      return null;
      // TODO: Should default to top left as below in this case, but need to fix
      // https://github.com/google/ExoPlayer/issues/2953 first.
      // Origin is omitted. Default to top left.
      // position = 0;
      // line = 0;
    }

    float width;
    float height;
    String regionExtent = XmlPullParserUtil.getAttributeValue(xmlParser, TtmlNode.ATTR_TTS_EXTENT);
    if (regionExtent != null) {
      Matcher extentPercentageMatcher = PERCENTAGE_COORDINATES.matcher(regionExtent);
      Matcher extentPixelMatcher = PIXEL_COORDINATES.matcher(regionExtent);
      if (extentPercentageMatcher.matches()) {
        try {
          width = Float.parseFloat(extentPercentageMatcher.group(1)) / 100f;
          height = Float.parseFloat(extentPercentageMatcher.group(2)) / 100f;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed extent: "" + regionOrigin);
          return null;
        }
      } else if (extentPixelMatcher.matches()) {
        if (ttsExtent == null) {
          Log.w(TAG, ""Ignoring region with missing tts:extent: "" + regionOrigin);
          return null;
        }
        try {
          int extentWidth = Integer.parseInt(extentPixelMatcher.group(1));
          int extentHeight = Integer.parseInt(extentPixelMatcher.group(2));
          // Convert pixel values to fractions.
          width = extentWidth / (float) ttsExtent.width;
          height = extentHeight / (float) ttsExtent.height;
        } catch (NumberFormatException e) {
          Log.w(TAG, ""Ignoring region with malformed extent: "" + regionOrigin);
          return null;
        }
      } else {
        Log.w(TAG, ""Ignoring region with unsupported extent: "" + regionOrigin);
        return null;
      }
    } else {
      Log.w(TAG, ""Ignoring region without an extent"");
      return null;
      // TODO: Should default to extent of parent as below in this case, but need to fix
      // https://github.com/google/ExoPlayer/issues/2953 first.
      // Extent is omitted. Default to extent of parent.
      // width = 1;
      // height = 1;
    }

    @Cue.AnchorType int lineAnchor = Cue.ANCHOR_TYPE_START;
    String displayAlign = XmlPullParserUtil.getAttributeValue(xmlParser,
        TtmlNode.ATTR_TTS_DISPLAY_ALIGN);
    if (displayAlign != null) {
      switch (Util.toLowerInvariant(displayAlign)) {
        case ""center"":
          lineAnchor = Cue.ANCHOR_TYPE_MIDDLE;
          line += height / 2;
          break;
        case ""after"":
          lineAnchor = Cue.ANCHOR_TYPE_END;
          line += height;
          break;
        default:
          // Default ""before"" case. Do nothing.
          break;
      }
    }

    float regionTextHeight = 1.0f / cellResolution.rows;
    return new TtmlRegion(
        regionId,
        position,
        line,
        /* lineType= */ Cue.LINE_TYPE_FRACTION,
        lineAnchor,
        width,
        /* textSizeType= */ Cue.TEXT_SIZE_TYPE_FRACTIONAL_IGNORE_PADDING,
        /* textSize= */ regionTextHeight);
  }"
1044,5456950.txt,none,"    public static boolean isBelowLoadLevel(SystemResourceUsage usage, float thresholdPercentage) {
        return (usage.bandwidthOut.percentUsage() < thresholdPercentage
                && usage.bandwidthIn.percentUsage() < thresholdPercentage
                && usage.cpu.percentUsage() < thresholdPercentage
                && usage.directMemory.percentUsage() < thresholdPercentage);
    }"
1045,6920891.txt,none,"  public boolean hasArchiveNotify() {
    return hasExtension(ArchiveNotify.class);
  }"
1046,3825676.txt,none,"   default int getGroupSequence() {
      return 0;
   }"
1047,3864226.txt,none,"    @Override
    public boolean evaluate(Resource resource) {

      Set<Map<String, Object>> extendedPropertySet = joinedResources.get(resource);

      if (extendedPropertySet == null) {
        return predicate.evaluate(resource);
      }

      for (Map<String, Object> extendedProperties : extendedPropertySet) {
        Resource extendedResource = new ExtendedResourceImpl(resource, extendedProperties);

        if (predicate.evaluate(extendedResource)) {
          return true;
        }
      }
      return false;
    }"
1048,4095482.txt,major,"    public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessorOuter, FrameTupleAccessor accessorInner,
            ITuplePairComparator comparatorsOuter2Inner, int memSize, IPredicateEvaluator predEval, boolean isLeftOuter,
            IMissingWriter[] missingWriters) throws HyracksDataException {
        this.accessorInner = accessorInner;
        this.accessorOuter = accessorOuter;
        this.appender = new FrameTupleAppender();
        this.tpComparator = comparatorsOuter2Inner;
        this.outBuffer = new VSizeFrame(ctx);
        this.innerBuffer = new VSizeFrame(ctx);
        this.appender.reset(outBuffer, true);
        if (memSize < 3) {
            throw new HyracksDataException(""Not enough memory is available for Nested Loop Join"");
        }
        this.outerBufferMngr =
                new VariableFrameMemoryManager(new VariableFramePool(ctx, ctx.getInitialFrameSize() * (memSize - 2)),
                        FrameFreeSlotPolicyFactory.createFreeSlotPolicy(EnumFreeSlotPolicy.LAST_FIT, memSize - 2));

        this.predEvaluator = predEval;
        this.isReversed = false;

        this.isLeftOuter = isLeftOuter;
        if (isLeftOuter) {
            int innerFieldCount = this.accessorInner.getFieldCount();
            missingTupleBuilder = new ArrayTupleBuilder(innerFieldCount);
            DataOutput out = missingTupleBuilder.getDataOutput();
            for (int i = 0; i < innerFieldCount; i++) {
                missingWriters[i].writeMissing(out);
                missingTupleBuilder.addFieldEndOffset();
            }
        } else {
            missingTupleBuilder = null;
        }

        FileReference file =
                ctx.getJobletContext().createManagedWorkspaceFile(this.getClass().getSimpleName() + this.toString());
        runFileWriter = new RunFileWriter(file, ctx.getIoManager());
        runFileWriter.open();
    }"
1049,5655899.txt,none,"        @Override
        public V setValue(final V value) {
            if (value != null) {
                throw new UnsupportedOperationException();
            }
            final V old = get();
            dispose();
            return old;
        }"
1050,5117164.txt,major,"    public void run()
    {
      try
      {
        IThreadContext threadContext = ThreadContextFactory.make();
        while (true)
        {
          try
          {
            if (Thread.currentThread().isInterrupted())
              throw new ManifoldCFException(""Interrupted"",ManifoldCFException.INTERRUPTED);

            checkAgents(threadContext);
            ManifoldCF.sleep(5000L);
          }
          catch (InterruptedException e)
          {
            break;
          }
          catch (ManifoldCFException e)
          {
            if (e.getErrorCode() == ManifoldCFException.INTERRUPTED)
              break;
            if (e.getErrorCode() == ManifoldCFException.SETUP_ERROR)
            {
              System.err.println(""Misconfigured ManifoldCF agents - shutting down"");
              Logging.agents.fatal(""AgentThread configuration exception tossed: ""+e.getMessage(),e);
              System.exit(-200);
            }
            Logging.agents.error(""Exception tossed: ""+e.getMessage(),e);
          }
          catch (OutOfMemoryError e)
          {
            System.err.println(""Agents process ran out of memory - shutting down"");
            e.printStackTrace(System.err);
            System.exit(-200);
          }
          catch (Throwable e)
          {
            Logging.agents.fatal(""Error tossed: ""+e.getMessage(),e);
          }
        }
      }
      catch (Throwable e)
      {
        // Severe error on initialization
        System.err.println(""Agents process could not start - shutting down"");
        Logging.agents.fatal(""AgentThread initialization error tossed: ""+e.getMessage(),e);
        System.exit(-300);
      }
    }"
1051,6984582.txt,none,"  public void test() {
    SubNumber sn = new SubNumber();
    assertTrue((this.equals(sn)));
    assertTrue((equals(sn)));
    assertTrue((!equals(new Object())));

    assertTrue((this.hashCode() == 100));
    assertTrue((hashCode() == 100));

    assertTrue((toString().equals(this.toString())));

    assertTrue((getClass() instanceof Class));
    assertTrue((getClass().equals(this.getClass())));
  }"
1052,7413911.txt,none,"        private LLVMDebugObject dereference() {
            // the pointer may change at runtime, so we cannot just cache the dereferenced object
            if (pointerType == null || (!pointerType.isSafeToDereference() && !value.isAlwaysSafeToDereference(offset))) {
                return null;
            }

            final LLVMDebugValue targetValue = value.dereferencePointer(offset);
            if (targetValue == null) {
                return null;
            }
            return instantiate(pointerType.getBaseType(), 0L, targetValue, null);
        }"
1053,8515408.txt,minor,"    private static List<NameValuePair> getUserDetails(String query) {
        List<NameValuePair> details = new ArrayList<NameValuePair>();
        if (query != null && !query.isEmpty()) {
            StringTokenizer allParams = new StringTokenizer(query, ""&"");
            while (allParams.hasMoreTokens()) {
                String param = allParams.nextToken();
                details.add(new BasicNameValuePair(param.substring(0, param.indexOf(""="")),
                        param.substring(param.indexOf(""="") + 1)));
            }
        }

        return details;
    }"
1054,5416350.txt,minor,"    @Test
    public void testGroupByOrderPreservingDescSort() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(getUrl(), props);
        String tableName = generateUniqueName();
        conn.createStatement().execute(""CREATE TABLE "" + tableName + "" (k1 char(1) not null, k2 char(1) not null,"" +
                "" constraint pk primary key (k1,k2)) split on ('ac','jc','nc')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('a', 'd')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('j', 'd')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'a')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'b')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'c')"");
        conn.createStatement().execute(""UPSERT INTO "" + tableName + "" VALUES('n', 'd')"");
        conn.commit();
        QueryBuilder queryBuilder = new QueryBuilder()
            .setSelectExpression(""K1,COUNT(*)"")
            .setSelectColumns(Lists.newArrayList(""K1""))
            .setFullTableName(tableName)
            .setGroupByClause(""K1"")
            .setOrderByClause(""K1 DESC"");
        ResultSet rs = executeQuery(conn, queryBuilder);
        assertTrue(rs.next());
        assertEquals(""n"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(""j"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertTrue(rs.next());
        assertEquals(""a"", rs.getString(1));
        assertEquals(4, rs.getLong(2));
        assertFalse(rs.next());
        String expectedPhoenixPlan = ""CLIENT PARALLEL 1-WAY REVERSE FULL SCAN OVER "" + tableName + ""\n"" +
                ""    SERVER FILTER BY FIRST KEY ONLY\n"" +
                ""    SERVER AGGREGATE INTO ORDERED DISTINCT ROWS BY [K1]"";
        validateQueryPlan(conn, queryBuilder, expectedPhoenixPlan, null);
    }"
1055,5580164.txt,none,"  @PostMapping(""fromAttribute"")
  public String fromAttribute(@RequestAttribute(""input"") String inputs,
      @RequestAttribute(value = ""input2"") String inputs2, @RequestAttribute(name = ""input3"") String inputs3) {
    return inputs + "","" + inputs2 + "","" + inputs3;
  }"
1056,7156185.txt,none,"    public AddStorageAccountParameters withSuffix(String suffix) {
        if (this.properties == null) {
            this.properties = new Properties();
        }

        this.properties.suffix = suffix;
        return this;
    }"
1057,4073701.txt,none,"    @Override
    public boolean parse(DataOutput out) throws HyracksDataException {
        try {
            resetPools();
            return parseAdmInstance(recordType, out);
        } catch (ParseException e) {
            e.setLocation(filename, admLexer.getLine(), admLexer.getColumn());
            throw e;
        } catch (IOException e) {
            throw new ParseException(e, filename, admLexer.getLine(), admLexer.getColumn());
        }
    }"
1058,4627996.txt,none,"    private void initFields() {
      poolId_ = """";
      blockId_ = 0L;
      numBytes_ = 0L;
      generationStamp_ = 0L;
    }"
1059,9523258.txt,none,"    @Override
    public CODE<T> $class(String value) {
      addAttr(""class"", value);
      return this;
    }"
1060,7706698.txt,none,"    public RaveError(Class<?> clazz, String item, String errorMsg) {
        this.clazz = clazz;
        this.errorMsg = errorMsg;
        classElement = item;
    }"
1061,8496550.txt,none,"    public StateMachine() {
        _initialStateEntry = new StateEntry(null);
    }"
1062,7467151.txt,none,"    private static List<Parameter> parseParametersOptional(MethodSpec spec, List<? extends VariableElement> types) {
        List<Parameter> parsedParams = new ArrayList<>();

        int typeStartIndex = 0;
        List<ParameterSpec> specifications = spec.getOptional();
        outer: for (int specIndex = 0; specIndex < specifications.size(); specIndex++) {
            ParameterSpec specification = specifications.get(specIndex);
            for (int typeIndex = typeStartIndex; typeIndex < types.size(); typeIndex++) {
                VariableElement variable = types.get(typeIndex);
                Parameter optionalParam = matchParameter(specification, variable, -1, -1);
                if (optionalParam != null) {
                    parsedParams.add(optionalParam);
                    typeStartIndex = typeIndex + 1;
                    continue outer;
                }
            }
        }

        if (typeStartIndex < types.size()) {
            // not enough types found
            return null;
        }
        return parsedParams;
    }"
1063,4906096.txt,none,"    public int getRestrictionType(String restrictionName) {
        if (restrictions.containsKey(restrictionName)) {
            return restrictions.get(restrictionName);
        } else {
            return PropertyType.UNDEFINED;
        }
    }"
1064,4487410.txt,none,"    public void add(RawFragmentBatchWrapper batchWrapper) {
      buffer.add(batchWrapper);
    }"
1065,7769131.txt,minor,"  public void validateTwoSegments(final IndexableAdapter adapter1, final IndexableAdapter adapter2)
  {
    if (adapter1.getNumRows() != adapter2.getNumRows()) {
      throw new SegmentValidationException(
          ""Row count mismatch. Expected [%d] found [%d]"",
          adapter1.getNumRows(),
          adapter2.getNumRows()
      );
    }
    {
      final Set<String> dimNames1 = Sets.newHashSet(adapter1.getDimensionNames());
      final Set<String> dimNames2 = Sets.newHashSet(adapter2.getDimensionNames());
      if (!dimNames1.equals(dimNames2)) {
        throw new SegmentValidationException(
            ""Dimension names differ. Expected [%s] found [%s]"",
            dimNames1,
            dimNames2
        );
      }
      final Set<String> metNames1 = Sets.newHashSet(adapter1.getMetricNames());
      final Set<String> metNames2 = Sets.newHashSet(adapter2.getMetricNames());
      if (!metNames1.equals(metNames2)) {
        throw new SegmentValidationException(""Metric names differ. Expected [%s] found [%s]"", metNames1, metNames2);
      }
    }
    final RowIterator it1 = adapter1.getRows();
    final RowIterator it2 = adapter2.getRows();
    long row = 0L;
    while (it1.moveToNext()) {
      if (!it2.moveToNext()) {
        throw new SegmentValidationException(""Unexpected end of second adapter"");
      }
      final RowPointer rp1 = it1.getPointer();
      final RowPointer rp2 = it2.getPointer();
      ++row;
      if (rp1.getRowNum() != rp2.getRowNum()) {
        throw new SegmentValidationException(""Row number mismatch: [%d] vs [%d]"", rp1.getRowNum(), rp2.getRowNum());
      }
      try {
        validateRowValues(rp1, adapter1, rp2, adapter2);
      }
      catch (SegmentValidationException ex) {
        throw new SegmentValidationException(ex, ""Validation failure on row %d: [%s] vs [%s]"", row, rp1, rp2);
      }
    }
    if (it2.moveToNext()) {
      throw new SegmentValidationException(""Unexpected end of first adapter"");
    }
    if (row != adapter1.getNumRows()) {
      throw new SegmentValidationException(
          ""Actual Row count mismatch. Expected [%d] found [%d]"",
          row,
          adapter1.getNumRows()
      );
    }
  }"
1066,3993481.txt,none,        public static void setSize(int sz) { cache.setSize(sz); }
1067,3703084.txt,none,"    public static Header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }"
1068,6094004.txt,none,"	public void copy(VisualizationResource otherResource) {

		// if resource is null, return
		if (otherResource == null) {
			return;
		}

		// copy from super class
		super.copy(otherResource);

		// Copy current values
		// These files are not cloned
		this.file = otherResource.file;
		this.path = otherResource.path;

		// Iteratively clone the entries in properties
		// These items are cloned
		this.properties.clear();
		for (int i = 0; i < otherResource.properties.size(); i++) {
			this.properties.add((VizEntry) otherResource.getProperties().get(i)
					.clone());
		}

		// Copy picture
		this.isPicture = otherResource.isPicture;

		// Copy everything else we need
		fileSetTitle = otherResource.fileSetTitle;
		host = otherResource.host;
		childrenResources.clear();
		childrenResources = (ArrayList<IVizResource>) otherResource.childrenResources
				.clone();
		fileSet = Arrays.copyOf(otherResource.fileSet,
				otherResource.fileSet.length);

	}"
1069,5123754.txt,none,"  @Override
  protected boolean noteNonscriptTag(String tagName, Map<String,String> attributes)
    throws ManifoldCFException
  {
    if (super.noteNonscriptTag(tagName,attributes))
      return true;
    if (tagName.equals(""meta""))
    {
      handler.noteMetaTag(attributes);
    }
    return false;
  }"
1070,8579511.txt,none,"  private static int putUint32(PositionedByteRange dst, int val) {
    dst.put((byte) (val >>> 24))
       .put((byte) (val >>> 16))
       .put((byte) (val >>> 8))
       .put((byte) val);
    return 4;
  }"
1071,6923759.txt,none,"  public static String joinLongs(long[] tokens, String delimiter) {
    if (tokens == null) return """";
    StringBuilder result = new StringBuilder();

    for (int i = 0; i < tokens.length; i++) {
      if (i > 0 && delimiter != null) {
        result.append(delimiter);
      }
      result.append(String.valueOf(tokens[i]));
    }
    return result.toString();
  }"
1072,7581323.txt,none,"	@Override
	public HandlerStrategies.Builder localeContextResolver(LocaleContextResolver localeContextResolver) {
		Assert.notNull(localeContextResolver, ""LocaleContextResolver must not be null"");
		this.localeContextResolver = localeContextResolver;
		return this;
	}"
1073,6340126.txt,none,"  @Pure
  @NonNull
  public Position getPosition() {
    return this.position;
  }"
1074,8334754.txt,none,"	public boolean equals(Object other) {
		if (!(other instanceof ThrowsPattern)) {
			return false;
		}
		ThrowsPattern o = (ThrowsPattern) other;
		boolean ret = o.required.equals(this.required) && o.forbidden.equals(this.forbidden);
		return ret;
	}"
1075,8904876.txt,none,"    @Override
    public void clear() {
      this.cr = null;
    }"
1076,6721230.txt,none,"  @Override
  public @Nullable Object dispatchOnEvent(EventHandler eventHandler, Object eventState) {
    if (ComponentsConfiguration.enableOnErrorHandling && eventHandler.id == ERROR_EVENT_HANDLER_ID) {
      ((Component) this).getErrorHandler().dispatchEvent(((ErrorEvent) eventState));
    }

    // Don't do anything by default, unless we're handling an error.
    return null;
  }"
1077,6735393.txt,none,"	public void testMangleMultipleServerSide2InJSCheckProblems() {
		// get model
		String fileName = getName() + "".html"";
		IStructuredModel structuredModel = getSharedModel(fileName, ""<script> var text = <? serverObject.getText() ?>;  <? serverObject.getText() ?></script>"");
		assertNotNull(""missing test model"", structuredModel);
		
		// do translation
		JsTranslationAdapterFactory.setupAdapterFactory(structuredModel);
		JsTranslationAdapter translationAdapter = (JsTranslationAdapter) ((IDOMModel) structuredModel).getDocument().getAdapterFor(IJsTranslation.class);
		IJsTranslation translation = translationAdapter.getJsTranslation(false);
		String translated = translation.getJsText();
		assertTrue(""translation empty"", translated.length() > 5);
		assertTrue(""server-side script block included"", translated.indexOf(""<?"") < 0);
		assertTrue(""server-side script block included"", translated.indexOf(""?>"") < 0);
		assertTrue(""var dropped"", translated.indexOf(""var text = "") > -1);
		assertTrue(""problems found in translation "", translation.getProblems().isEmpty());

		// release model
		structuredModel.releaseFromRead();
	}"
1078,4264057.txt,major,"    public double correlation(final double[] xArray, final double[] yArray)
            throws DimensionMismatchException {

        if (xArray.length != yArray.length) {
            throw new DimensionMismatchException(xArray.length, yArray.length);
        }

        final int n = xArray.length;
        final long numPairs = sum(n - 1);

        @SuppressWarnings(""unchecked"")
        Pair<Double, Double>[] pairs = new Pair[n];
        for (int i = 0; i < n; i++) {
            pairs[i] = new Pair<>(xArray[i], yArray[i]);
        }

        Arrays.sort(pairs, new Comparator<Pair<Double, Double>>() {
            /** {@inheritDoc} */
            @Override
            public int compare(Pair<Double, Double> pair1, Pair<Double, Double> pair2) {
                int compareFirst = pair1.getFirst().compareTo(pair2.getFirst());
                return compareFirst != 0 ? compareFirst : pair1.getSecond().compareTo(pair2.getSecond());
            }
        });

        long tiedXPairs = 0;
        long tiedXYPairs = 0;
        long consecutiveXTies = 1;
        long consecutiveXYTies = 1;
        Pair<Double, Double> prev = pairs[0];
        for (int i = 1; i < n; i++) {
            final Pair<Double, Double> curr = pairs[i];
            if (curr.getFirst().equals(prev.getFirst())) {
                consecutiveXTies++;
                if (curr.getSecond().equals(prev.getSecond())) {
                    consecutiveXYTies++;
                } else {
                    tiedXYPairs += sum(consecutiveXYTies - 1);
                    consecutiveXYTies = 1;
                }
            } else {
                tiedXPairs += sum(consecutiveXTies - 1);
                consecutiveXTies = 1;
                tiedXYPairs += sum(consecutiveXYTies - 1);
                consecutiveXYTies = 1;
            }
            prev = curr;
        }
        tiedXPairs += sum(consecutiveXTies - 1);
        tiedXYPairs += sum(consecutiveXYTies - 1);

        long swaps = 0;
        @SuppressWarnings(""unchecked"")
        Pair<Double, Double>[] pairsDestination = new Pair[n];
        for (int segmentSize = 1; segmentSize < n; segmentSize <<= 1) {
            for (int offset = 0; offset < n; offset += 2 * segmentSize) {
                int i = offset;
                final int iEnd = FastMath.min(i + segmentSize, n);
                int j = iEnd;
                final int jEnd = FastMath.min(j + segmentSize, n);

                int copyLocation = offset;
                while (i < iEnd || j < jEnd) {
                    if (i < iEnd) {
                        if (j < jEnd) {
                            if (pairs[i].getSecond().compareTo(pairs[j].getSecond()) <= 0) {
                                pairsDestination[copyLocation] = pairs[i];
                                i++;
                            } else {
                                pairsDestination[copyLocation] = pairs[j];
                                j++;
                                swaps += iEnd - i;
                            }
                        } else {
                            pairsDestination[copyLocation] = pairs[i];
                            i++;
                        }
                    } else {
                        pairsDestination[copyLocation] = pairs[j];
                        j++;
                    }
                    copyLocation++;
                }
            }
            final Pair<Double, Double>[] pairsTemp = pairs;
            pairs = pairsDestination;
            pairsDestination = pairsTemp;
        }

        long tiedYPairs = 0;
        long consecutiveYTies = 1;
        prev = pairs[0];
        for (int i = 1; i < n; i++) {
            final Pair<Double, Double> curr = pairs[i];
            if (curr.getSecond().equals(prev.getSecond())) {
                consecutiveYTies++;
            } else {
                tiedYPairs += sum(consecutiveYTies - 1);
                consecutiveYTies = 1;
            }
            prev = curr;
        }
        tiedYPairs += sum(consecutiveYTies - 1);

        final long concordantMinusDiscordant = numPairs - tiedXPairs - tiedYPairs + tiedXYPairs - 2 * swaps;
        final double nonTiedPairsMultiplied = (numPairs - tiedXPairs) * (double) (numPairs - tiedYPairs);
        return concordantMinusDiscordant / FastMath.sqrt(nonTiedPairsMultiplied);
    }"
1079,4068177.txt,none,"    static void registerConfigOptions(IConfigManager configManager) {
        AsterixProperties.registerConfigOptions(configManager);
        ControllerConfig.Option.DEFAULT_DIR
                .setDefaultValue(FileUtil.joinPath(System.getProperty(ConfigurationUtil.JAVA_IO_TMPDIR), ""asterixdb""));
        NCConfig.Option.APP_CLASS.setDefaultValue(NCApplication.class.getName());
        CCConfig.Option.APP_CLASS.setDefaultValue(CCApplication.class.getName());
        try {
            InputStream propertyStream =
                    ApplicationConfigurator.class.getClassLoader().getResourceAsStream(""git.properties"");
            if (propertyStream != null) {
                Properties gitProperties = new Properties();
                gitProperties.load(propertyStream);
                StringWriter sw = new StringWriter();
                gitProperties.store(sw, null);
                configManager.setVersionString(sw.toString());
            }
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }

    }"
1080,5593437.txt,major,"    public static void main(String[] args) throws IOException {
        try (XSSFWorkbook wb = new XSSFWorkbook()) {
            XSSFSheet sheet = wb.createSheet(""linechart"");
            final int NUM_OF_ROWS = 3;
            final int NUM_OF_COLUMNS = 10;

            // Create a row and put some cells in it. Rows are 0 based.
            Row row;
            Cell cell;
            for (int rowIndex = 0; rowIndex < NUM_OF_ROWS; rowIndex++) {
                row = sheet.createRow((short) rowIndex);
                for (int colIndex = 0; colIndex < NUM_OF_COLUMNS; colIndex++) {
                    cell = row.createCell((short) colIndex);
                    cell.setCellValue(colIndex * (rowIndex + 1.0));
                }
            }

            XSSFDrawing drawing = sheet.createDrawingPatriarch();
            XSSFClientAnchor anchor = drawing.createAnchor(0, 0, 0, 0, 0, 5, 10, 15);

            XSSFChart chart = drawing.createChart(anchor);
            XDDFChartLegend legend = chart.getOrAddLegend();
            legend.setPosition(LegendPosition.TOP_RIGHT);

            // Use a category axis for the bottom axis.
            XDDFCategoryAxis bottomAxis = chart.createCategoryAxis(AxisPosition.BOTTOM);
            bottomAxis.setTitle(""x""); // https://stackoverflow.com/questions/32010765
            XDDFValueAxis leftAxis = chart.createValueAxis(AxisPosition.LEFT);
            leftAxis.setTitle(""f(x)"");
            leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);

            XDDFDataSource<Double> xs = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(0, 0, 0, NUM_OF_COLUMNS - 1));
            XDDFNumericalDataSource<Double> ys1 = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(1, 1, 0, NUM_OF_COLUMNS - 1));
            XDDFNumericalDataSource<Double> ys2 = XDDFDataSourcesFactory.fromNumericCellRange(sheet, new CellRangeAddress(2, 2, 0, NUM_OF_COLUMNS - 1));

            XDDFLineChartData data = (XDDFLineChartData) chart.createData(ChartTypes.LINE, bottomAxis, leftAxis);
            XDDFLineChartData.Series series1 = (XDDFLineChartData.Series) data.addSeries(xs, ys1);
            series1.setTitle(""2x"", null); // https://stackoverflow.com/questions/21855842
            series1.setSmooth(false); // https://stackoverflow.com/questions/29014848
            series1.setMarkerStyle(MarkerStyle.STAR); // https://stackoverflow.com/questions/39636138
            XDDFLineChartData.Series series2 = (XDDFLineChartData.Series) data.addSeries(xs, ys2);
            series2.setTitle(""3x"", null);
            series2.setSmooth(true);
            series2.setMarkerSize((short) 6);
            series2.setMarkerStyle(MarkerStyle.TRIANGLE); // https://stackoverflow.com/questions/39636138
            chart.plot(data);

            // if your series have missing values like https://stackoverflow.com/questions/29014848
            // chart.displayBlanksAs(DisplayBlanks.GAP);

            // https://stackoverflow.com/questions/24676460
            solidLineSeries(data, 0, PresetColor.CHARTREUSE);
            solidLineSeries(data, 1, PresetColor.TURQUOISE);

            // Write the output to a file
            try (FileOutputStream fileOut = new FileOutputStream(""ooxml-line-chart.xlsx"")) {
                wb.write(fileOut);
            }
        }
    }"
1081,8844288.txt,none,"    private Runnable getIAMUserProfileUpdater(AuthzToken authzToken, UserProfile userProfile) throws UserProfileServiceException {
        IamAdminServices.Client iamAdminServicesClient = getIamAdminServicesClient();
        return () -> {
            try {
                iamAdminServicesClient.updateUserProfile(authzToken, userProfile);
            } catch (TException e) {
                throw new RuntimeException(""Failed to update user profile in IAM service"", e);
            }
        };
    }"
1082,7291569.txt,none,"	public boolean test(Object receiver, String property, Object[] args,
			Object expectedValue) {
		if (property.equals(IS_GRAILS_APP)) {
			debug(""isGrailsApp? ""+receiver.getClass() +"" = ""+receiver);
			IProject project = toProject(receiver);
			debug(""adapted to IProject = ""+project);
			boolean result = project!=null && GrailsNature.isGrailsAppProject(project);
			debug(""isGrailsApp? => ""+result);
			return result;
		} 
		return false;
	}"
1083,3763789.txt,none,"      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
        return fields;
      }"
1084,6915312.txt,none,"  private static boolean shouldParseContainerAtom(int atom) {
    return atom == Atom.TYPE_moov
        || atom == Atom.TYPE_trak
        || atom == Atom.TYPE_mdia
        || atom == Atom.TYPE_minf
        || atom == Atom.TYPE_stbl
        || atom == Atom.TYPE_edts
        || atom == Atom.TYPE_meta;
  }"
1085,7746473.txt,none,"    @Override
    @Deprecated
    public void reset(org.apache.dubbo.common.Parameters parameters) {
        reset(getUrl().addParameters(parameters.getParameters()));
    }"
1086,9528887.txt,none,"    @Override
    public TFOOT<T> $onmouseover(String value) {
      addAttr(""onmouseover"", value);
      return this;
    }"
1087,6547794.txt,none,"    private WorkbenchWindow newWorkbenchWindow() {
        WorkbenchWindow wbw = ((WorkbenchImplementation) Tweaklets
                .get(WorkbenchImplementation.KEY)).createWorkbenchWindow(getNewWindowNumber());
        return wbw;
    }"
1088,8242801.txt,none,"    public void startElement(String uri,
                             String name,
                             String raw,
                             Attributes attr)
    throws SAXException {
        if (namespaceURI.equals(uri) && ignoreHooksCount == 0) {
            // this is our namespace:
            try {
                startTransformingElement(uri, name, raw, attr);
            } catch (ProcessingException e) {
                throw new SAXException(""ProcessingException: "" + e, e);
            } catch (IOException e) {
                throw new SAXException(""IOException occured during processing: "" + e, e);
            }
        } else {
            if (ignoreEventsCount == 0) {
                super.startElement(uri, name, raw, attr);
            }
        }
    }"
1089,6398866.txt,none,"    protected Color getHandleColor(IConfigRegistry configRegistry) {
        if (configRegistry != null) {
            Color color = configRegistry.getConfigAttribute(
                    FillHandleConfigAttributes.FILL_HANDLE_COLOR,
                    DisplayMode.NORMAL);

            if (color != null) {
                return color;
            }
        }
        return GUIHelper.getColor(0, 125, 10);
    }"
1090,8432784.txt,none,"    public AllRedisProcessorsCreator(RedisClient redisClient, ExchangeConverter exchangeConverter) {
        this.processors.putAll(new ConnectionRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new HashesRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new KeysRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new ListsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new PubSubRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new SetsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new SortedSetsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new StringsRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new TransactionRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
        this.processors.putAll(new GeoRedisProcessorsCreator().getProcessors(redisClient, exchangeConverter));
    }"
1091,4072654.txt,none,"    private Optional<WatchRequest> nextResume() {
        EtcdWatcher pendingWatcher = this.pendingWatchers.peek();
        if (pendingWatcher != null) {
            return Optional.of(this.toWatchCreateRequest(pendingWatcher));
        }
        return Optional.empty();
    }"
1092,4258444.txt,none,"    public FTPFile[] mlistDir(String pathname, FTPFileFilter filter) throws IOException
    {
        FTPListParseEngine engine = initiateMListParsing( pathname);
        return engine.getFiles(filter);
    }"
1093,5419311.txt,none,"	private List<HRegionLocation> getRegionLocationsFromManifest(SnapshotManifest manifest) {
		List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
		Preconditions.checkNotNull(regionManifests);

		List<RegionInfo> regionInfos = Lists.newArrayListWithCapacity(regionManifests.size());
		List<HRegionLocation> hRegionLocations = Lists.newArrayListWithCapacity(regionManifests.size());

		for (SnapshotRegionManifest regionManifest : regionManifests) {
			RegionInfo regionInfo = ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());
			if (isValidRegion(regionInfo)) {
				regionInfos.add(regionInfo);
			}
		}

		regionInfos.sort(RegionInfo.COMPARATOR);

		for (RegionInfo regionInfo : regionInfos) {
			hRegionLocations.add(new HRegionLocation(regionInfo, null));
		}

		return hRegionLocations;
	}"
1094,8532133.txt,major,"    @Override
    public short syncAll(short syncMode) {
        short syncState = SYNC_STATE_IN_SYNC;

        /* vnc classes need to be synchronized with cloudstack */
        s_logger.debug(""syncing cloudstack db with vnc"");
        try {
            for (Class<?> cls : _vncClasses) {

                /* lock the sync mode*/
                _lockSyncMode.lock();
                _rwMode = syncMode == DBSyncGeneric.SYNC_MODE_UPDATE;
                _dbSync.setSyncMode(syncMode);

                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                    s_logger.debug(""sync check start: "" + DBSyncGeneric.getClassName(cls));
                } else {
                    s_logger.debug(""sync start: "" + DBSyncGeneric.getClassName(cls));
                }

                if (_dbSync.sync(cls) == false) {
                    if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                        s_logger.info(""out of sync detected: "" + DBSyncGeneric.getClassName(cls));
                    } else {
                        s_logger.info(""out of sync detected and re-synced: "" + DBSyncGeneric.getClassName(cls));
                    }
                    syncState = SYNC_STATE_OUT_OF_SYNC;
                }
                if (_dbSync.getSyncMode() == DBSyncGeneric.SYNC_MODE_CHECK) {
                    s_logger.debug(""sync check finish: "" + DBSyncGeneric.getClassName(cls));
                } else {
                    s_logger.debug(""sync finish: "" + DBSyncGeneric.getClassName(cls));
                }
                /* unlock the sync mode */
                _lockSyncMode.unlock();
            }
        } catch (Exception ex) {
            s_logger.warn(""DB Synchronization"", ex);
            syncState = SYNC_STATE_UNKNOWN;
            if (_lockSyncMode.isLocked()) {
                _lockSyncMode.unlock();
            }
        }

        return syncState;
    }"
1095,9407577.txt,major,"    final protected Node internalRemoveNamedItemNS(String namespaceURI,
            String name,
            boolean raiseEx) {

        CoreDocumentImpl ownerDocument = ownerNode.ownerDocument();
        if (ownerDocument.errorChecking && isReadOnly()) {
            String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, ""NO_MODIFICATION_ALLOWED_ERR"", null);
            throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, msg);
        }
        int i = findNamePoint(namespaceURI, name);
        if (i < 0) {
            if (raiseEx) {
                String msg = DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN, ""NOT_FOUND_ERR"", null);
                throw new DOMException(DOMException.NOT_FOUND_ERR, msg);
            } else {
                return null;
            }
        }

        AttrImpl n = (AttrImpl)nodes.get(i);

        if (n.isIdAttribute()) {
            ownerDocument.removeIdentifier(n.getValue());
        }
        // If there's a default, add it instead
        String nodeName = n.getNodeName();
        if (hasDefaults()) {
            NamedNodeMapImpl defaults = ((ElementImpl) ownerNode).getDefaultAttributes();
            Node d;
            if (defaults != null
                    && (d = defaults.getNamedItem(nodeName)) != null)
            {
                int j = findNamePoint(nodeName,0);
                if (j>=0 && findNamePoint(nodeName, j+1) < 0) {
                    NodeImpl clone = (NodeImpl)d.cloneNode(true);
                    clone.ownerNode = ownerNode;
                    if (d.getLocalName() != null) {
                        // we must rely on the name to find a default attribute
                        // (""test:attr""), but while copying it from the DOCTYPE
                        // we should not loose namespace URI that was assigned
                        // to the attribute in the instance document.
                        ((AttrNSImpl)clone).namespaceURI = namespaceURI;
                    }
                    clone.isOwned(true);
                    clone.isSpecified(false);
                    nodes.set(i, clone);
                    if (clone.isIdAttribute()) {
                        ownerDocument.putIdentifier(clone.getNodeValue(),
                                (ElementImpl)ownerNode);
                    }
                } else {
                    nodes.remove(i);
                }
            } else {
                nodes.remove(i);
            }
        } else {
            nodes.remove(i);
        }

        //        changed(true);

        // remove reference to owner
        n.ownerNode = ownerDocument;
        n.isOwned(false);
        // make sure it won't be mistaken with defaults in case it's
        // reused
        n.isSpecified(true);
        // update id table if needed
        n.isIdAttribute(false);

        // notify document
        ownerDocument.removedAttrNode(n, ownerNode, name);

        return n;

    } // internalRemoveNamedItemNS(String,String,boolean):Node"
1096,3942097.txt,major,"    private static void weaveDir(File dir, String consumerHeaderKey, String consumerHeaderValue, String bundleClassPath) throws Exception {
        Set<WeavingData> wd = ConsumerHeaderProcessor.processHeader(consumerHeaderKey, consumerHeaderValue);

        URLClassLoader cl = new URLClassLoader(new URL [] {dir.toURI().toURL()}, Main.class.getClassLoader());
        String dirName = dir.getAbsolutePath();

        DirTree dt = new DirTree(dir);
        for (File f : dt.getFiles()) {
            if (!f.getName().endsWith("".class""))
                continue;

            String className = f.getAbsolutePath().substring(dirName.length());
            if (className.startsWith(File.separator))
                className = className.substring(1);
            className = className.substring(0, className.length() - "".class"".length());
            className = className.replace(File.separator, ""."");

            InputStream is = new FileInputStream(f);
            byte[] b;
            try {
                ClassReader cr = new ClassReader(is);
                ClassWriter cw = new StaticToolClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES, cl);
                TCCLSetterVisitor cv = new TCCLSetterVisitor(cw, className, wd);
                cr.accept(cv, ClassReader.SKIP_FRAMES);
                if (cv.isWoven()) {
                    b = cw.toByteArray();
                } else {
                    // if not woven, store the original bytes
                    b = Streams.suck(new FileInputStream(f));
                }
            } finally {
                is.close();
            }

            OutputStream os = new FileOutputStream(f);
            try {
                os.write(b);
            } finally {
                os.close();
            }
        }

        if (bundleClassPath != null) {
            for (String entry : bundleClassPath.split("","")) {
                File jarFile = new File(dir, entry.trim());
                if (jarFile.isFile()) {
                    weaveBCPJar(jarFile, consumerHeaderKey, consumerHeaderValue);
                }
            }
        }
    }"
1097,4602827.txt,minor,"    @Override
    public void writeEdge(I srcId, V srcValue, Edge<I, E> edge)
      throws IOException, InterruptedException {

      if (txcounter == txsize) {
        txcounter = 0;
        isFirstElement = true;
        stopConnection();
        startConnection();
      }

      try {
        JSONObject jsonEdge;
        String suffix;

        /* extract the JSON object of the vertex */
        jsonEdge = getEdge(srcId, srcValue, edge);
        /* determine the suffix to add the object into the JSON array */
        if (isFirstElement) {
          isFirstElement = false;
          suffix = """";
        } else {
          suffix = "","";
        }
        rexsterBufferedStream.write(suffix + jsonEdge);
        txcounter += 1;

      } catch (JSONException e) {
        throw new InterruptedException(""Error writing the edge: "" +
                                       e.getMessage());
      }
    }"
1098,7746730.txt,none,"        @Override
        protected void notifyOverrides() {
            notifyListener.doOverrideIfNecessary();
        }"
1099,3918943.txt,major,"    private ApplicationDTO buildApplicationDTO(
        ApplicationRuntimeInformation ari) {

        ApplicationDTO applicationDTO = new ApplicationDTO(){};

        applicationDTO.name = getServiceName(
            ari._cachingServiceReference::getProperty);
        applicationDTO.base = _whiteboard.getApplicationBase(
            ari._cachingServiceReference::getProperty);
        applicationDTO.serviceId =
            (Long)ari._cachingServiceReference.getProperty(""service.id"");

        applicationDTO.resourceDTOs = getApplicationEndpointsStream(
            applicationDTO.name).toArray(
                ResourceDTO[]::new
            );

        applicationDTO.extensionDTOs = getApplicationExtensionsStream(
            applicationDTO.name).toArray(
                ExtensionDTO[]::new
            );

        Map<String, Set<ExtensionDTO>> nameBoundExtensions =
            new HashMap<>();

        Map<ExtensionDTO, Set<ResourceDTO>> extensionResources =
            new HashMap<>();

        for (ExtensionDTO extensionDTO : applicationDTO.extensionDTOs) {
            if (extensionDTO.nameBindings == null) {
                continue;
            }

            for (String nameBinding : extensionDTO.nameBindings) {
                Set<ExtensionDTO> extensionDTOS =
                    nameBoundExtensions.computeIfAbsent(
                        nameBinding,
                        __ -> new HashSet<>()
                );

                extensionDTOS.add(extensionDTO);
            }
        }

        for (ResourceDTO resourceDTO : applicationDTO.resourceDTOs) {
            for (ResourceMethodInfoDTO resourceMethodInfo :
                resourceDTO.resourceMethods) {

                if (resourceMethodInfo.nameBindings == null) {
                    continue;
                }

                for (String nameBinding : resourceMethodInfo.nameBindings) {
                    Set<ExtensionDTO> extensionDTOS = nameBoundExtensions.get(
                        nameBinding);

                    if (extensionDTOS != null) {
                        for (ExtensionDTO extensionDTO : extensionDTOS) {
                            Set<ResourceDTO> resourceDTOS =
                                extensionResources.computeIfAbsent(
                                    extensionDTO, __ -> new HashSet<>());

                            resourceDTOS.add(resourceDTO);
                        }
                    }
                }
            }
        }

        extensionResources.forEach(
            (extensionDTO, resourceDTOS) ->
                extensionDTO.filteredByName = resourceDTOS.toArray(
                    new ResourceDTO[0])
        );

        CxfJaxrsServiceRegistrator cxfJaxRsServiceRegistrator =
            ari._cxfJaxRsServiceRegistrator;

        Bus bus = cxfJaxRsServiceRegistrator.getBus();
        Iterable<Class<?>> resourceClasses =
            cxfJaxRsServiceRegistrator.getStaticResourceClasses();

        ArrayList<ResourceMethodInfoDTO> resourceMethodInfoDTOS =
            new ArrayList<>();

        for (Class<?> resourceClass : resourceClasses) {
            resourceMethodInfoDTOS.addAll(
                ClassIntrospector.getResourceMethodInfos(resourceClass, bus));
        }

        applicationDTO.resourceMethods = resourceMethodInfoDTOS.toArray(
            new ResourceMethodInfoDTO[0]);

        return applicationDTO;
    }"
1100,8008638.txt,none,"  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ImportUriUiPackage.IMPORT__IMPORT_URI:
        return getImportURI();
    }
    return super.eGet(featureID, resolve, coreType);
  }"
1101,5338990.txt,major,"    @Override
    protected void writeTransactionResponse(ResponseCode response, String explanation) throws IOException {
        HttpCommunicationsSession commSession = (HttpCommunicationsSession) peer.getCommunicationsSession();
        if(TransferDirection.RECEIVE.equals(direction)){
            switch (response) {
                case CONFIRM_TRANSACTION:
                    logger.debug(""{} Confirming transaction. checksum={}"", this, explanation);
                    commSession.setChecksum(explanation);
                    break;
                case TRANSACTION_FINISHED:
                    logger.debug(""{} Finishing transaction."", this);
                    break;
                case CANCEL_TRANSACTION:
                    logger.debug(""{} Canceling transaction. explanation={}"", this, explanation);
                    TransactionResultEntity resultEntity = apiClient.commitReceivingFlowFiles(transactionUrl, ResponseCode.CANCEL_TRANSACTION, null);
                    ResponseCode cancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                    switch (cancelResponse) {
                        case CANCEL_TRANSACTION:
                            logger.debug(""{} CANCEL_TRANSACTION, The transaction is canceled on server properly."", this);
                            break;
                        default:
                            logger.warn(""{} CANCEL_TRANSACTION, Expected the transaction is canceled on server, but received {}."", this, cancelResponse);
                            break;
                    }
                    break;
            }
        } else {
            switch (response) {
                case FINISH_TRANSACTION:
                    // The actual HTTP request will be sent in readTransactionResponse.
                    logger.debug(""{} Finished sending flow files."", this);
                    break;
                case BAD_CHECKSUM: {
                        TransactionResultEntity resultEntity = apiClient.commitTransferFlowFiles(transactionUrl, ResponseCode.BAD_CHECKSUM);
                        ResponseCode badChecksumCancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                        switch (badChecksumCancelResponse) {
                            case CANCEL_TRANSACTION:
                                logger.debug(""{} BAD_CHECKSUM, The transaction is canceled on server properly."", this);
                                break;
                            default:
                                logger.warn(""{} BAD_CHECKSUM, Expected the transaction is canceled on server, but received {}."", this, badChecksumCancelResponse);
                                break;
                        }

                    }
                    break;
                case CONFIRM_TRANSACTION:
                    // The actual HTTP request will be sent in readTransactionResponse.
                    logger.debug(""{} Transaction is confirmed."", this);
                    break;
                case CANCEL_TRANSACTION: {
                        logger.debug(""{} Canceling transaction."", this);
                        TransactionResultEntity resultEntity = apiClient.commitTransferFlowFiles(transactionUrl, ResponseCode.CANCEL_TRANSACTION);
                        ResponseCode cancelResponse = ResponseCode.fromCode(resultEntity.getResponseCode());
                        switch (cancelResponse) {
                            case CANCEL_TRANSACTION:
                                logger.debug(""{} CANCEL_TRANSACTION, The transaction is canceled on server properly."", this);
                                break;
                            default:
                                logger.warn(""{} CANCEL_TRANSACTION, Expected the transaction is canceled on server, but received {}."", this, cancelResponse);
                                break;
                        }
                    }
                    break;
            }
        }
    }"
1102,7699101.txt,none,"    @Override
    public boolean is2G(){
        LuaJavaNetworkState state = new LuaJavaNetworkState(mRapidID, mRapidView);

        return state.isNetworkActive();
    }"
1103,4772031.txt,none,"  @Override
  public double probabilityOfAttributeValueGivenClass(double attVal,
      int classVal) {
    DoubleVector obs = this.attValDistPerClass.get(classVal);
    return obs != null ? (obs.getValue((int) attVal) + 1.0)
        / (obs.sumOfValues() + obs.numValues()) : 0.0;
  }"
1104,5354961.txt,none,"    private Record transform(final Record record, final JoltTransform transform) {
        Map<String, Object> recordMap = (Map<String, Object>) DataTypeUtils.convertRecordFieldtoObject(record, RecordFieldType.RECORD.getRecordDataType(record.getSchema()));

        // JOLT expects arrays to be of type List where our Record code uses Object[].
        // Make another pass of the transformed objects to change Object[] to List.
        recordMap = (Map<String, Object>) normalizeJoltObjects(recordMap);
        final Object transformedObject = transform(transform, recordMap);

        // JOLT expects arrays to be of type List where our Record code uses Object[].
        // Make another pass of the transformed objects to change List to Object[].
        final Object normalizedRecordValues = normalizeRecordObjects(transformedObject);
        final Record updatedRecord = DataTypeUtils.toRecord(normalizedRecordValues, ""r"");
        return updatedRecord;
    }"
1105,7353142.txt,none,"    public _MonthlyDOWRecurrence getMonthlyDOWRecurrence()
    {
        return this.monthlyDOWRecurrence;
    }"
1106,8894429.txt,none,"  protected FastCheckPrecisionScaleStatus fastCheckPrecisionScale(
      int maxPrecision, int maxScale) {
    return
        FastHiveDecimalImpl.fastCheckPrecisionScale(
            fastSignum, fast0, fast1, fast2,
            fastIntegerDigitCount, fastScale,
            maxPrecision, maxScale);
  }"
1107,5700044.txt,minor,"        private void doSmapText(Node n) {
            String text = n.getText();
            int index = 0;
            int next = 0;
            int lineCount = 1;
            int skippedLines = 0;
            boolean slashStarSeen = false;
            boolean beginning = true;

            // Count lines inside text, but skipping comment lines at the
            // beginning of the text.
            while ((next = text.indexOf('\n', index)) > -1) {
                if (beginning) {
                    String line = text.substring(index, next).trim();
                    if (!slashStarSeen && line.startsWith(""/*"")) {
                        slashStarSeen = true;
                    }
                    if (slashStarSeen) {
                        skippedLines++;
                        int endIndex = line.indexOf(""*/"");
                        if (endIndex >= 0) {
                            // End of /* */ comment
                            slashStarSeen = false;
                            if (endIndex < line.length() - 2) {
                                // Some executable code after comment
                                skippedLines--;
                                beginning = false;
                            }
                        }
                    } else if (line.length() == 0 || line.startsWith(""//"")) {
                        skippedLines++;
                    } else {
                        beginning = false;
                    }
                }
                lineCount++;
                index = next + 1;
            }

            doSmap(n, lineCount, 1, skippedLines);
        }"
1108,7730792.txt,minor,"    @Override
    public T get(Duration duration) throws InterruptedException, ExecutionException, TimeoutException {
        long start = System.currentTimeMillis();
        Long end  = duration==null ? null : start + duration.toMillisecondsRoundingUp();
        while (end==null || end > System.currentTimeMillis()) {
            if (cancelled) throw new CancellationException();
            if (internalFuture == null) {
                synchronized (this) {
                    long remaining = end - System.currentTimeMillis();
                    if (internalFuture==null && remaining>0)
                        wait(remaining);
                }
            }
            if (internalFuture != null) break;
        }
        Long remaining = end==null ? null : end -  System.currentTimeMillis();
        if (isDone()) {
            return internalFuture.get(1, TimeUnit.MILLISECONDS);
        } else if (remaining == null) {
            return internalFuture.get();
        } else if (remaining > 0) {
            return internalFuture.get(remaining, TimeUnit.MILLISECONDS);
        } else {
            throw new TimeoutException();
        }
    }"
1109,6010673.txt,none,"    @Override
    @Value.Derived
    public Stacks stacks() {
        return new ReactorStacks(getConnectionContext(), getRootV2(), getTokenProvider());
    }"
1110,4232859.txt,none,"    public static <T> Predicate<T> orPredicate(final Predicate<? super T> predicate1,
                                               final Predicate<? super T> predicate2) {
        return OrPredicate.orPredicate(predicate1, predicate2);
    }"
1111,7542297.txt,minor,"	public CurrentLiveVersion(ReloadableType reloadableType, String versionstamp, byte[] newbytedata) {
		if (GlobalConfiguration.logging && log.isLoggable(Level.FINER)) {
			log.entering(""CurrentLiveVersion"", ""<init>"", "" new version of "" + reloadableType.getName()
					+ "" loaded, version stamp '""
					+ versionstamp + ""'"");
		}
		this.reloadableType = reloadableType;
		this.typeDescriptor = reloadableType.getTypeRegistry().getExtractor().extract(newbytedata, true);
		this.versionstamp = versionstamp;

		if (GlobalConfiguration.assertsMode) {
			if (!this.typeDescriptor.getName().equals(reloadableType.typedescriptor.getName())) {
				throw new IllegalStateException(""New version has wrong name.  Expected ""
						+ reloadableType.typedescriptor.getName()
						+ "" but was "" + typeDescriptor.getName());
			}
		}

		newbytedata = GlobalConfiguration.callsideRewritingOn ? MethodInvokerRewriter.rewrite(
				reloadableType.typeRegistry,
				newbytedata) : newbytedata;

		this.incrementalTypeDescriptor = new IncrementalTypeDescriptor(reloadableType.typedescriptor);
		this.incrementalTypeDescriptor.setLatestTypeDescriptor(this.typeDescriptor);

		// Executors for interfaces simply hold annotations
		this.executor = reloadableType.getTypeRegistry().executorBuilder.createFor(reloadableType, versionstamp,
				typeDescriptor,
				newbytedata);

		if (GlobalConfiguration.classesToDump != null
				&& GlobalConfiguration.classesToDump.contains(reloadableType.getSlashedName())) {
			Utils.dump(Utils.getExecutorName(reloadableType.getName(), versionstamp).replace('.', '/'), this.executor);
		}
		// DEFAULT METHODS - REMOVE THE IF
		if (!typeDescriptor.isInterface()) {
			this.dispatcherName = Utils.getDispatcherName(reloadableType.getName(), versionstamp);
			this.executorName = Utils.getExecutorName(reloadableType.getName(), versionstamp);
			this.dispatcher = DispatcherBuilder.createFor(reloadableType, incrementalTypeDescriptor, versionstamp);
		}
		reloadableType.typeRegistry.checkChildClassLoader(reloadableType);
		define();
	}"
1112,7964380.txt,major,"    public final void mRULE_STRING() throws RecognitionException {
        try {
            int _type = RULE_STRING;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalXImportSectionTestLang.g:6435:13: ( ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? ) )
            // InternalXImportSectionTestLang.g:6435:15: ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? )
            {
            // InternalXImportSectionTestLang.g:6435:15: ( '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )? | '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )? )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0=='\""') ) {
                alt15=1;
            }
            else if ( (LA15_0=='\'') ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("""", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalXImportSectionTestLang.g:6435:16: '\""' ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )* ( '\""' )?
                    {
                    match('\""'); 
                    // InternalXImportSectionTestLang.g:6435:20: ( '\\\\' . | ~ ( ( '\\\\' | '\""' ) ) )*
                    loop11:
                    do {
                        int alt11=3;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0=='\\') ) {
                            alt11=1;
                        }
                        else if ( ((LA11_0>='\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\uFFFF')) ) {
                            alt11=2;
                        }


                        switch (alt11) {
                    	case 1 :
                    	    // InternalXImportSectionTestLang.g:6435:21: '\\\\' .
                    	    {
                    	    match('\\'); 
                    	    matchAny(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalXImportSectionTestLang.g:6435:28: ~ ( ( '\\\\' | '\""' ) )
                    	    {
                    	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uFFFF') ) {
                    	        input.consume();

                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;}


                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);

                    // InternalXImportSectionTestLang.g:6435:44: ( '\""' )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0=='\""') ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // InternalXImportSectionTestLang.g:6435:44: '\""'
                            {
                            match('\""'); 

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // InternalXImportSectionTestLang.g:6435:49: '\\'' ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )* ( '\\'' )?
                    {
                    match('\''); 
                    // InternalXImportSectionTestLang.g:6435:54: ( '\\\\' . | ~ ( ( '\\\\' | '\\'' ) ) )*
                    loop13:
                    do {
                        int alt13=3;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0=='\\') ) {
                            alt13=1;
                        }
                        else if ( ((LA13_0>='\u0000' && LA13_0<='&')||(LA13_0>='(' && LA13_0<='[')||(LA13_0>=']' && LA13_0<='\uFFFF')) ) {
                            alt13=2;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // InternalXImportSectionTestLang.g:6435:55: '\\\\' .
                    	    {
                    	    match('\\'); 
                    	    matchAny(); 

                    	    }
                    	    break;
                    	case 2 :
                    	    // InternalXImportSectionTestLang.g:6435:62: ~ ( ( '\\\\' | '\\'' ) )
                    	    {
                    	    if ( (input.LA(1)>='\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\uFFFF') ) {
                    	        input.consume();

                    	    }
                    	    else {
                    	        MismatchedSetException mse = new MismatchedSetException(null,input);
                    	        recover(mse);
                    	        throw mse;}


                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);

                    // InternalXImportSectionTestLang.g:6435:79: ( '\\'' )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0=='\'') ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // InternalXImportSectionTestLang.g:6435:79: '\\''
                            {
                            match('\''); 

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
1113,9205245.txt,none,"	public String getLayoutString( )
	{
		StringBuffer sb = new StringBuffer( );

		sb.append( ""table "" + table.getFullName( ) + "" layout: \r\n"" ); //$NON-NLS-1$ //$NON-NLS-2$
		sb.append( getHeader( ).getLayoutString( ) );
		sb.append( getGroupHeaders( ).getLayoutString( ) );
		sb.append( getDetail( ).getLayoutString( ) );
		sb.append( getGroupFooters( ).getLayoutString( ) );
		sb.append( getFooter( ).getLayoutString( ) );
		sb.append( ""\r\n"" ); //$NON-NLS-1$

		return sb.toString( );
	}"
1114,7939585.txt,none,"    @Override
    public void caseTRParen(@SuppressWarnings(""unused"") TRParen node)
    {
        this.index = 9;
    }"
1115,6445236.txt,none,"        @Override
        public ContentFilter decode(UaDecoder decoder) throws UaSerializationException {
            ContentFilterElement[] elements =
                decoder.readBuiltinStructArray(
                    ""Elements"",
                    ContentFilterElement.class
                );

            return new ContentFilter(elements);
        }"
1116,8102677.txt,none,"    public final void rule__GeneratedMetamodel__EPackageAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtext.g:8603:1: ( ( ( RULE_STRING ) ) )
            // InternalXtext.g:8604:2: ( ( RULE_STRING ) )
            {
            // InternalXtext.g:8604:2: ( ( RULE_STRING ) )
            // InternalXtext.g:8605:3: ( RULE_STRING )
            {
             before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0()); 
            // InternalXtext.g:8606:3: ( RULE_STRING )
            // InternalXtext.g:8607:4: RULE_STRING
            {
             before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); 
            match(input,RULE_STRING,FollowSets000.FOLLOW_2); 
             after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1()); 

            }

             after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1117,8230789.txt,none,"    protected void addAncestorPath(TraversableSource source, Stack ancestors)
    throws SAXException, ProcessingException {
        if (ancestors.empty()) {
            this.isRequestedSource = true;
            addPath(source, depth);
        } else {
            startNode(COL_NODE_NAME, (TraversableSource) ancestors.pop());
            addAncestorPath(source, ancestors);
            endNode(COL_NODE_NAME);
        }
    }"
1118,5111196.txt,none,"    public void finishUp() throws InterruptedException, IOException {
      join();
      Throwable thr = exception;
      if (thr != null) {
        if (thr instanceof IOException) {
          throw (IOException) thr;
        } else if (thr instanceof RuntimeException) {
          throw (RuntimeException) thr;
        } else {
          throw (Error) thr;
        }
      }
    }"
1119,7093536.txt,none,"        private void siftUp(int k, RunnableScheduledFuture<?> key) {
            while (k > 0) {
                int parent = (k - 1) >>> 1;
                RunnableScheduledFuture<?> e = queue[parent];
                if (key.compareTo(e) >= 0)
                    break;
                queue[k] = e;
                setIndex(e, k);
                k = parent;
            }
            queue[k] = key;
            setIndex(key, k);
        }"
1120,7638064.txt,none,"	private String getMessage(Exception _e) {
		Throwable e = ExceptionUtil.getDeepestCause(_e);

		// If value parse exception, do not append any additional information
		if (e instanceof ValueParseException) {
			String msg = e.getMessage();
			if (StringUtil.hasText(msg)) {
				return msg;
			} else {
				return ""An error occurred: "" + getSimpleError(e);
			}
		} else {
			return ExceptionUtil.getMessage(e);
		}
	}"
1121,8895511.txt,minor,"    private void alterTableStatsForTruncate(RawStore ms, String catName, String dbName,
        String tableName, Table table, List<String> partNames,
        String validWriteIds, long writeId) throws Exception {
      if (partNames == null) {
        if (0 != table.getPartitionKeysSize()) {
          for (Partition partition : ms.getPartitions(catName, dbName, tableName, Integer.MAX_VALUE)) {
            alterPartitionForTruncate(ms, catName, dbName, tableName, table, partition,
                validWriteIds, writeId);
          }
        } else {
          EnvironmentContext environmentContext = new EnvironmentContext();
          updateStatsForTruncate(table.getParameters(), environmentContext);

          if (!transactionalListeners.isEmpty()) {
            MetaStoreListenerNotifier.notifyEvent(transactionalListeners,
                    EventType.ALTER_TABLE,
                    new AlterTableEvent(table, table, true, true,
                            writeId, this));
          }

          if (!listeners.isEmpty()) {
            MetaStoreListenerNotifier.notifyEvent(listeners,
                    EventType.ALTER_TABLE,
                    new AlterTableEvent(table, table, true, true,
                            writeId, this));
          }

          // TODO: this should actually pass thru and set writeId for txn stats.
          if (writeId > 0) {
            table.setWriteId(writeId);
          }
          alterHandler.alterTable(ms, wh, catName, dbName, tableName, table,
              environmentContext, this, validWriteIds);
        }
      } else {
        for (Partition partition : ms.getPartitionsByNames(catName, dbName, tableName, partNames)) {
          alterPartitionForTruncate(ms, catName, dbName, tableName, table, partition,
              validWriteIds, writeId);
        }
      }
      return;
    }"
1122,5343588.txt,minor,"    @Override
    public void onTrigger(final ProcessContext context, final ProcessSession session) {
        List<FlowFile> flowFiles = session.get(context.getProperty(BATCH_SIZE).evaluateAttributeExpressions().asInteger());
        if (flowFiles == null || flowFiles.size() == 0) {
            return;
        }

        Map<ItemKeys, FlowFile> keysToFlowFileMap = new HashMap<>();

        final String table = context.getProperty(TABLE).evaluateAttributeExpressions().getValue();

        final String hashKeyName = context.getProperty(HASH_KEY_NAME).evaluateAttributeExpressions().getValue();
        final String hashKeyValueType = context.getProperty(HASH_KEY_VALUE_TYPE).getValue();
        final String rangeKeyName = context.getProperty(RANGE_KEY_NAME).evaluateAttributeExpressions().getValue();
        final String rangeKeyValueType = context.getProperty(RANGE_KEY_VALUE_TYPE).getValue();
        final String jsonDocument = context.getProperty(JSON_DOCUMENT).evaluateAttributeExpressions().getValue();
        final String charset = context.getProperty(DOCUMENT_CHARSET).evaluateAttributeExpressions().getValue();

        TableWriteItems tableWriteItems = new TableWriteItems(table);

        for (FlowFile flowFile : flowFiles) {
            final Object hashKeyValue = getValue(context, HASH_KEY_VALUE_TYPE, HASH_KEY_VALUE, flowFile);
            final Object rangeKeyValue = getValue(context, RANGE_KEY_VALUE_TYPE, RANGE_KEY_VALUE, flowFile);

            if (!isHashKeyValueConsistent(hashKeyName, hashKeyValue, session, flowFile)) {
                continue;
            }

            if (!isRangeKeyValueConsistent(rangeKeyName, rangeKeyValue, session, flowFile)) {
                continue;
            }

            if (!isDataValid(flowFile, jsonDocument)) {
                flowFile = session.putAttribute(flowFile, AWS_DYNAMO_DB_ITEM_SIZE_ERROR, ""Max size of item + attribute should be 400kb but was "" + flowFile.getSize() + jsonDocument.length());
                session.transfer(flowFile, REL_FAILURE);
                continue;
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            session.exportTo(flowFile, baos);

            try {
                if (rangeKeyValue == null || StringUtils.isBlank(rangeKeyValue.toString())) {
                    tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)
                        .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));
                } else {
                    tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName, hashKeyValue)
                        .withKeyComponent(rangeKeyName, rangeKeyValue)
                        .withJSON(jsonDocument, IOUtils.toString(baos.toByteArray(), charset)));
                }
            } catch (IOException ioe) {
                getLogger().error(""IOException while creating put item : "" + ioe.getMessage());
                flowFile = session.putAttribute(flowFile, DYNAMODB_ITEM_IO_ERROR, ioe.getMessage());
                session.transfer(flowFile, REL_FAILURE);
            }
            keysToFlowFileMap.put(new ItemKeys(hashKeyValue, rangeKeyValue), flowFile);
        }

        if (keysToFlowFileMap.isEmpty()) {
            return;
        }

        final DynamoDB dynamoDB = getDynamoDB();

        try {
            BatchWriteItemOutcome outcome = dynamoDB.batchWriteItem(tableWriteItems);

            handleUnprocessedItems(session, keysToFlowFileMap, table, hashKeyName, hashKeyValueType, rangeKeyName,
                rangeKeyValueType, outcome);

            // Handle any remaining flowfiles
            for (FlowFile flowFile : keysToFlowFileMap.values()) {
                getLogger().debug(""Successful posted items to dynamodb : "" + table);
                session.transfer(flowFile, REL_SUCCESS);
            }
        } catch (AmazonServiceException exception) {
            getLogger().error(""Could not process flowFiles due to service exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processServiceException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        } catch (AmazonClientException exception) {
            getLogger().error(""Could not process flowFiles due to client exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processClientException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        } catch (Exception exception) {
            getLogger().error(""Could not process flowFiles due to exception : "" + exception.getMessage());
            List<FlowFile> failedFlowFiles = processException(session, flowFiles, exception);
            session.transfer(failedFlowFiles, REL_FAILURE);
        }
    }"
1123,6705537.txt,none,"	public int getIndex() {
		IJSONNode parent = getParentNode();
		if (parent == null)
			return -1; // error
		int index = 0;
		for (IJSONNode child = parent.getFirstChild(); child != null; child = child
				.getNextSibling()) {
			if (child == this)
				return index;
			index++;
		}
		return -1; // error
	}"
1124,7255679.txt,none,"    private void initPluginService(String pluginPath) {
        if (pluginPath.length() > 0) {
            try {
                ClassLoader pluginCL = new URLClassLoader(
                        pathToURLs(pluginPath),
                        JConsolePluginWrapper.class.getClassLoader());
                ServiceLoader<JConsolePlugin> plugins =
                        ServiceLoader.load(JConsolePlugin.class, pluginCL);
                // Validate all plugins
                for (JConsolePlugin p : plugins) {
                    LOGGER.finer(""JConsole plugin "" + p.getClass().getName() + "" loaded.""); // NOI18N
                }
                pluginService = plugins;
            } catch (ServiceConfigurationError e) {
                // Error occurs during initialization of plugin
                LOGGER.warning(""Fail to load JConsole plugin: "" + e.getMessage()); // NOI18N
                LOGGER.throwing(JConsolePluginWrapper.class.getName(), ""initPluginService"", e); // NOI18N
            } catch (MalformedURLException e) {
                LOGGER.warning(""Invalid JConsole plugin path: "" + e.getMessage()); // NOI18N
                LOGGER.throwing(JConsolePluginWrapper.class.getName(), ""initPluginService"", e); // NOI18N
            }
        }
        if (pluginService == null) {
            initEmptyPlugin();
        }
    }"
1125,7900945.txt,none,"      private void printRemove(ParsedRuleKeyFile file, Value value) {
        diffPrinter.printRemove(
            String.format(
                ""%s: %s"", String.join(""/"", pathComponents), valueAsReadableString(file, value)));
      }"
1126,9142325.txt,none,"	protected void okPressed( )
	{
		if ( canSelect )
		{
			setResult( selectedColumnName );
			if ( inputElement instanceof DataItemHandle )
			{
				try
				{
					( (DataItemHandle) inputElement ).setResultSetColumn( selectedColumnName );
				}
				catch ( SemanticException e )
				{
					ExceptionHandler.handle( e );
				}
			}
		}
		if( getSelectColumnHandle( ) != null && ExtendedDataModelUIAdapterHelper.isBoundToExtendedData( inputElement ) )
		{
			DataModelAdapterStatus status = DataModelAdapterUtil.validateRelativeTimePeriod( inputElement, getSelectColumnHandle( ));
			if( status.getStatus( ) == DataModelAdapterStatus.Status.FAIL )
			{
				MessageDialog.openError( UIUtil.getDefaultShell( ), null, status.getMessage( ) );
				return;
			}
		}
		super.okPressed( );
	}"
1127,9278801.txt,none,"    public CharsetDecoder newDecoder() {
        return new Decoder(this, plane);
    }"
1128,8231238.txt,none,"    public WebContinuation getContinuation(int level) {
        if (level <= 0) {
            return this;
        } else if (parentContinuation == null) {
            return this;
        } else {
            return parentContinuation.getContinuation(level - 1);
        }
    }"
1129,7588956.txt,major,"	public BindStatus(RequestContext requestContext, String path, boolean htmlEscape) throws IllegalStateException {
		this.requestContext = requestContext;
		this.path = path;
		this.htmlEscape = htmlEscape;

		// determine name of the object and property
		String beanName;
		int dotPos = path.indexOf('.');
		if (dotPos == -1) {
			// property not set, only the object itself
			beanName = path;
			this.expression = null;
		}
		else {
			beanName = path.substring(0, dotPos);
			this.expression = path.substring(dotPos + 1);
		}

		this.errors = requestContext.getErrors(beanName, false);

		if (this.errors != null) {
			// Usual case: A BindingResult is available as request attribute.
			// Can determine error codes and messages for the given expression.
			// Can use a custom PropertyEditor, as registered by a form controller.
			if (this.expression != null) {
				if (""*"".equals(this.expression)) {
					this.objectErrors = this.errors.getAllErrors();
				}
				else if (this.expression.endsWith(""*"")) {
					this.objectErrors = this.errors.getFieldErrors(this.expression);
				}
				else {
					this.objectErrors = this.errors.getFieldErrors(this.expression);
					this.value = this.errors.getFieldValue(this.expression);
					this.valueType = this.errors.getFieldType(this.expression);
					if (this.errors instanceof BindingResult) {
						this.bindingResult = (BindingResult) this.errors;
						this.actualValue = this.bindingResult.getRawFieldValue(this.expression);
						this.editor = this.bindingResult.findEditor(this.expression, null);
					}
					else {
						this.actualValue = this.value;
					}
				}
			}
			else {
				this.objectErrors = this.errors.getGlobalErrors();
			}
			this.errorCodes = initErrorCodes(this.objectErrors);
		}

		else {
			// No BindingResult available as request attribute:
			// Probably forwarded directly to a form view.
			// Let's do the best we can: extract a plain target if appropriate.
			Object target = requestContext.getModelObject(beanName);
			if (target == null) {
				throw new IllegalStateException(""Neither BindingResult nor plain target object for bean name '"" +
						beanName + ""' available as request attribute"");
			}
			if (this.expression != null && !""*"".equals(this.expression) && !this.expression.endsWith(""*"")) {
				BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(target);
				this.value = bw.getPropertyValue(this.expression);
				this.valueType = bw.getPropertyType(this.expression);
				this.actualValue = this.value;
			}
			this.errorCodes = new String[0];
			this.errorMessages = new String[0];
		}

		if (htmlEscape && this.value instanceof String) {
			this.value = HtmlUtils.htmlEscape((String) this.value);
		}
	}"
1130,3904736.txt,none,"    private ArgumentProcessor getProcessor(
            Class< ? extends ArgumentProcessor> processorClass) {
        ArgumentProcessor processor;
        try {
            processor = processorClass.getConstructor().newInstance();
        } catch (Exception e) {
            throw new BuildException(""The argument processor class""
                    + processorClass.getName()
                    + "" could not be instantiated with a default constructor"",
                    e);
        }
        return processor;
    }"
1131,7075067.txt,none,"    public CreateVirtualEnvAction(Project project, PythonDetails pythonDetails,
                                  EditablePythonAbiContainer editablePythonAbiContainer) {
        this.project = project;
        this.pythonDetails = pythonDetails;
        this.editablePythonAbiContainer = editablePythonAbiContainer;
    }"
1132,7810086.txt,none,"  @Override
  protected void setLastModifiedAndAccessedTimes(final long lastModified, final long lastAccessed) {
    _setLastModified(lastModified);
    if (!DISABLE_ACCESS_TIME_UPDATE_ON_PUT) {
      setLastAccessed(lastAccessed);
    }
  }"
1133,4140191.txt,none,"  public static <T, TResult> Queryable<TResult> selectManyN(Queryable<T> source,
      FunctionExpression<Function2<T, Integer, Enumerable<TResult>>> selector) {
    throw Extensions.todo();
  }"
1134,8261354.txt,none,"	public IGrammarAwareElementType getClosureExpression_VerticalLineKeyword_2_0_0ElementType() {
		return ClosureExpression_VerticalLineKeyword_2_0_0_ELEMENT_TYPE;
	}"
1135,8636644.txt,major,"    public static String shortenDbName(String dbName, int desiredLength) {
        StringBuilder dbBuf = new StringBuilder(dbName);
        if (dbBuf.length() > desiredLength) {
            // remove one vowel at a time, starting at beginning
            for (int i = dbBuf.length() - 1; i > 0; i--) {
                // don't remove vowels that are at the beginning of the string (taken care of by the i > 0) or right after an underscore
                if (dbBuf.charAt(i - 1) == '_') {
                    continue;
                }

                char curChar = dbBuf.charAt(i);
                if (vowelBag.indexOf(curChar) > 0) {
                    dbBuf.deleteCharAt(i);
                }
            }
        }

        // remove all double underscores
        while (dbBuf.indexOf(""__"") > 0) {
            dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
        }

        while (dbBuf.length() > desiredLength) {
            boolean removedChars = false;

            int usIndex = dbBuf.lastIndexOf(""_"");
            while (usIndex > 0 && dbBuf.length() > desiredLength) {
                // if this is the first word in the group, don't pull letters off unless it is 4 letters or more
                int prevUsIndex = dbBuf.lastIndexOf(""_"", usIndex - 1);
                if (prevUsIndex < 0 && usIndex < 4) {
                    break;
                }

                // don't remove characters to reduce the size two less than three characters between underscores
                if (prevUsIndex >= 0 && (usIndex - prevUsIndex) <= 4) {
                    usIndex = prevUsIndex;
                    continue;
                }

                // delete the second to last character instead of the last, better chance of being unique
                dbBuf.deleteCharAt(usIndex - 2);
                removedChars = true;
                if (usIndex > 2) {
                    usIndex = dbBuf.lastIndexOf(""_"", usIndex - 2);
                } else {
                    break;
                }
            }

            // now delete the char at the end of the string if necessary
            if (dbBuf.length() > desiredLength) {
                int removeIndex = dbBuf.length() - 1;
                int prevRemoveIndex = dbBuf.lastIndexOf(""_"", removeIndex - 1);
                // don't remove characters to reduce the size two less than two characters between underscores
                if (prevRemoveIndex < 0 || (removeIndex - prevRemoveIndex) >= 3) {
                    // delete the second to last character instead of the last, better chance of being unique
                    dbBuf.deleteCharAt(removeIndex - 1);
                    removedChars = true;
                }
            }

            // remove all double underscores
            while (dbBuf.indexOf(""__"") > 0) {
                dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
                removedChars = true;
            }

            // if we didn't remove anything break out to avoid an infinite loop
            if (!removedChars) {
                break;
            }
        }

        // remove all double underscores
        while (dbBuf.indexOf(""__"") > 0) {
            dbBuf.deleteCharAt(dbBuf.indexOf(""__""));
        }

        while (dbBuf.length() > desiredLength) {
            // still not short enough, get more aggressive
            // don't remove the first segment, just remove the second over and over until we are short enough
            int firstUs = dbBuf.indexOf(""_"");
            if (firstUs > 0) {
                int nextUs = dbBuf.indexOf(""_"", firstUs + 1);
                if (nextUs > 0) {
                    //Debug.logInfo(""couldn't shorten enough normally, removing second segment from "" + dbBuf, module);
                    dbBuf.delete(firstUs, nextUs);
                }
            }
        }

        //Debug.logInfo(""Shortened "" + dbName + "" to "" + dbBuf.toString(), module);
        return dbBuf.toString();
    }"
1136,8919445.txt,none,"      public void read(org.apache.thrift.protocol.TProtocol iprot, alter_table_with_cascade_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // O1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o1 = new InvalidOperationException();
                struct.o1.read(iprot);
                struct.setO1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.o2 = new MetaException();
                struct.o2.read(iprot);
                struct.setO2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }"
1137,5499603.txt,major,"    @Override
    @MultiMQAdminCmdMethod
    public Map<String, ConsumerGroupRollBackStat> resetOffset(ResetOffsetRequest resetOffsetRequest) {
        Map<String, ConsumerGroupRollBackStat> groupRollbackStats = Maps.newHashMap();
        for (String consumerGroup : resetOffsetRequest.getConsumerGroupList()) {
            try {
                Map<MessageQueue, Long> rollbackStatsMap =
                    mqAdminExt.resetOffsetByTimestamp(resetOffsetRequest.getTopic(), consumerGroup, resetOffsetRequest.getResetTime(), resetOffsetRequest.isForce());
                ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);
                List<RollbackStats> rollbackStatsList = consumerGroupRollBackStat.getRollbackStatsList();
                for (Map.Entry<MessageQueue, Long> rollbackStatsEntty : rollbackStatsMap.entrySet()) {
                    RollbackStats rollbackStats = new RollbackStats();
                    rollbackStats.setRollbackOffset(rollbackStatsEntty.getValue());
                    rollbackStats.setQueueId(rollbackStatsEntty.getKey().getQueueId());
                    rollbackStats.setBrokerName(rollbackStatsEntty.getKey().getBrokerName());
                    rollbackStatsList.add(rollbackStats);
                }
                groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);
            }
            catch (MQClientException e) {
                if (ResponseCode.CONSUMER_NOT_ONLINE == e.getResponseCode()) {
                    try {
                        ConsumerGroupRollBackStat consumerGroupRollBackStat = new ConsumerGroupRollBackStat(true);
                        List<RollbackStats> rollbackStatsList = mqAdminExt.resetOffsetByTimestampOld(consumerGroup, resetOffsetRequest.getTopic(), resetOffsetRequest.getResetTime(), true);
                        consumerGroupRollBackStat.setRollbackStatsList(rollbackStatsList);
                        groupRollbackStats.put(consumerGroup, consumerGroupRollBackStat);
                        continue;
                    }
                    catch (Exception err) {
                        logger.error(""op=resetOffset_which_not_online_error"", err);
                    }
                }
                else {
                    logger.error(""op=resetOffset_error"", e);
                }
                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));
            }
            catch (Exception e) {
                logger.error(""op=resetOffset_error"", e);
                groupRollbackStats.put(consumerGroup, new ConsumerGroupRollBackStat(false, e.getMessage()));
            }
        }
        return groupRollbackStats;
    }"
1138,7782626.txt,none,"	protected boolean makeContentVisible()
	{
		// if user is refreshing whole page, the window will not be shown
		if (getWebRequest().isAjax() == false)
		{
			return false;
		}
		else
		{
			return shown;
		}
	}"
1139,4689128.txt,none,"  private void removeTaskFromJob(BSPJobID jobId, TaskInProgress tip) {
    synchronized (runningJobs) {
      RunningJob rjob = runningJobs.get(jobId);
      if (rjob == null) {
        LOG.warn(""Unknown job "" + jobId + "" being deleted."");
      } else {
        synchronized (rjob) {
          rjob.tasks.remove(tip);
        }
      }
    }
  }"
1140,3917525.txt,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }"
1141,6387608.txt,none,"	public List<String> getVariables() {
		if (variables == null) {
			variables = new EDataTypeUniqueEList<String>(String.class, this, ApplicationPackageImpl.APPLICATION__VARIABLES);
		}
		return variables;
	}"
1142,4072597.txt,none,"    public long computeIfAbsent(long key, LongLongFunction provider) {
        checkBiggerEqualZero(key);
        checkNotNull(provider);
        long h = hash(key);
        return getSection(h).put(key, ValueNotFound, (int) h, true, provider);
    }"
1143,7539853.txt,none,"	public static int callSetAndGetInt(Field thiz, Object obj) throws IllegalArgumentException, IllegalAccessException {
		thiz.setInt(obj, thiz.getInt(obj) + 1);
		return thiz.getInt(obj);
	}"
1144,7114027.txt,none,"    public static String join(CharSequence delimiter, Iterable tokens) {
        StringBuilder sb = new StringBuilder();
        boolean firstTime = true;
        for (Object token: tokens) {
            if (firstTime) {
                firstTime = false;
            } else {
                sb.append(delimiter);
            }
            sb.append(token);
        }
        return sb.toString();
    }"
1145,4301429.txt,none,"    protected void toBytes() {
        byte[] bytes = ByteBuffer.allocate(4).putInt(getValue().getValue()).array();
        setBytes(bytes);
    }"
1146,9044882.txt,none,"public void testMethodWithInnerTypeInClassFile2() throws JavaModelException {
	IClassFile cf = getClassFile(""Resolve"", ""zzz.jar"", """", ""MyClass2$Inner.class"");
	IJavaElement[] elements = codeSelect(cf, ""method"", ""method"");
	assertElementsEqual(
		""Unexpected elements"",
		""method(MyClass2.Inner[]) [in MyClass2 [in MyClass2.class [in <default> [in zzz.jar [in Resolve]]]]]"",
		elements
	);

	IMethod method = (IMethod) elements[0];
	ISourceRange sourceRange = method.getSourceRange();
	String methodString = ""void method(MyClass2.Inner[] arg){}"";
	int o = cf.getSource().indexOf(methodString);
	int l = methodString.length();
	assertEquals(""Unexpected offset"", o, sourceRange.getOffset());
	assertEquals(""Unexpected length"", l, sourceRange.getLength());
}"
1147,8580507.txt,none,"    @edu.umd.cs.findbugs.annotations.SuppressWarnings(value=""NN_NAKED_NOTIFY"",
        justification=""This is what we want"")
    public void evict() {
      synchronized (this) {
        this.notifyAll();
      }
    }"
1148,6917981.txt,none,"    private DiffList computeDiffEntries(
        Repository repo, GitilesView view, RevWalk walk, RevCommit commit) throws IOException {
      DiffList result = new DiffList();
      result.revision =
          view.getRevision().matches(commit)
              ? view.getRevision()
              : Revision.peeled(commit.name(), commit);

      AbstractTreeIterator oldTree;
      switch (commit.getParentCount()) {
        case 0:
          result.oldRevision = Revision.NULL;
          oldTree = new EmptyTreeIterator();
          break;
        case 1:
          result.oldRevision =
              Revision.peeled(result.revision.getName() + ""^"", commit.getParent(0));
          oldTree = getTreeIterator(walk, commit.getParent(0));
          break;
        default:
          // TODO(dborowitz): handle merges
          return result;
      }
      AbstractTreeIterator newTree = getTreeIterator(walk, commit);

      try (DiffFormatter diff = new DiffFormatter(NullOutputStream.INSTANCE)) {
        diff.setRepository(repo);
        diff.setDetectRenames(true);
        result.entries = diff.scan(oldTree, newTree);
        return result;
      }
    }"
1149,7784926.txt,none,"		public void supportSessionSerialization(ISerializer serializer)
		{
			this.serializer = Args.notNull(serializer, ""serializer"");
		}"
1150,8123359.txt,minor,"  public <T extends Object> List<NamedSerializationContexts<T>> getNamedContexts(final SerializationContextMap<T> map) {
    final ArrayList<NamedSerializationContexts<T>> result = CollectionLiterals.<NamedSerializationContexts<T>>newArrayList();
    final HashMap<String, Integer> names = CollectionLiterals.<String, Integer>newHashMap();
    List<SerializationContextMap.Entry<T>> _values = map.values();
    for (final SerializationContextMap.Entry<T> e : _values) {
      Set<EClass> _types = e.getTypes();
      for (final EClass t : _types) {
        {
          final List<ISerializationContext> ctx = e.getContexts(t);
          String _xifexpression = null;
          if ((t == null)) {
            _xifexpression = """";
          } else {
            _xifexpression = t.getName();
          }
          String _plus = (_xifexpression + ""_"");
          String _significantGrammarElement = this.getSignificantGrammarElement(ctx);
          final String name = (_plus + _significantGrammarElement);
          final Integer dup = names.get(name);
          String _xifexpression_1 = null;
          if ((dup == null)) {
            String _xblockexpression = null;
            {
              names.put(name, Integer.valueOf(1));
              _xblockexpression = name;
            }
            _xifexpression_1 = _xblockexpression;
          } else {
            String _xblockexpression_1 = null;
            {
              names.put(name, Integer.valueOf(((dup).intValue() + 1)));
              _xblockexpression_1 = ((name + ""_"") + dup);
            }
            _xifexpression_1 = _xblockexpression_1;
          }
          final String unique = _xifexpression_1;
          T _value = e.getValue();
          NamedSerializationContexts<T> _namedSerializationContexts = new NamedSerializationContexts<T>(unique, t, ctx, _value);
          result.add(_namedSerializationContexts);
        }
      }
    }
    return result;
  }"
1151,4694769.txt,none,"  @Override
  public AgentStateModel createNewStateModel(String resourceName, String partitionKey) {
    AgentStateModel model = new AgentStateModel();
    return model;
  }"
1152,8087833.txt,minor,"	private static void handleMarkerAddition(final  IMarker marker, final String type) {
		final IResource resource = marker.getResource();
		final int lineNumber = marker.getAttribute(IMarker.LINE_NUMBER, -1);
		final int offset = marker.getAttribute(IMarker.CHAR_START, -1);
		final int endoffset = marker.getAttribute(IMarker.CHAR_END, -1);
		final long markerId = marker.getId();

		Map<IResource, List<InternalMarker>> typeSpecificMarkers;

		synchronized (MARKERS) {
			if (MARKERS.containsKey(type)) {
				typeSpecificMarkers = MARKERS.get(type);
			} else {
				typeSpecificMarkers = new HashMap<IResource, List<InternalMarker>>();
				MARKERS.put(type, typeSpecificMarkers);
			}

			List<InternalMarker> fileSpecificMarkers;
			if (typeSpecificMarkers.containsKey(resource)) {
				fileSpecificMarkers = typeSpecificMarkers.get(resource);
			} else {
				fileSpecificMarkers = new ArrayList<InternalMarker>();
				typeSpecificMarkers.put(resource, fileSpecificMarkers);
			}

			boolean found = false;
			for (int i = 0; !found && i < fileSpecificMarkers.size(); i++) {
				if (fileSpecificMarkers.get(i).markerID == markerId) {
					found = true;
				}
			}

			if (!found) {
				final InternalMarker temp = new InternalMarker();
				temp.row = lineNumber;
				temp.offset = offset;
				temp.endoffset = endoffset;
				temp.markerID = markerId;
				fileSpecificMarkers.add(temp);
			}

			markUsed(type, resource, markerId);
		}
	}"
1153,8972337.txt,none,"  @Override
  public int docID() {
    return in.docID();
  }"
1154,8184933.txt,none,"    public void add(Sequence value) {
        // TODO we can probably optimize this a bit
        for(long i=value.first; i<value.last+1; i++) {
            add(i);
        }
    }"
1155,7697841.txt,major,"    public static String getOatFileInstructionSet(File oatFile) throws Throwable {
        ShareElfFile elfFile = null;
        String result = """";
        try {
            elfFile = new ShareElfFile(oatFile);
            final ShareElfFile.SectionHeader roDataHdr = elfFile.getSectionHeaderByName("".rodata"");
            if (roDataHdr == null) {
                throw new IOException(""Unable to find .rodata section."");
            }

            final FileChannel channel = elfFile.getChannel();
            channel.position(roDataHdr.shOffset);

            final byte[] oatMagicAndVersion = new byte[8];
            ShareElfFile.readUntilLimit(channel, ByteBuffer.wrap(oatMagicAndVersion), ""Failed to read oat magic and version."");

            if (oatMagicAndVersion[0] != 'o'
                    || oatMagicAndVersion[1] != 'a'
                    || oatMagicAndVersion[2] != 't'
                    || oatMagicAndVersion[3] != '\n') {
                throw new IOException(
                        String.format(""Bad oat magic: %x %x %x %x"",
                                oatMagicAndVersion[0],
                                oatMagicAndVersion[1],
                                oatMagicAndVersion[2],
                                oatMagicAndVersion[3])
                );
            }

            final int versionOffsetFromOatBegin = 4;
            final int versionBytes = 3;

            final String oatVersion = new String(oatMagicAndVersion,
                    versionOffsetFromOatBegin, versionBytes, Charset.forName(""ASCII""));
            try {
                Integer.parseInt(oatVersion);
            } catch (NumberFormatException e) {
                throw new IOException(""Bad oat version: "" + oatVersion);
            }

            ByteBuffer buffer = ByteBuffer.allocate(128);
            buffer.order(elfFile.getDataOrder());
            // TODO This is a risk point, since each oat version may use a different offset.
            // So far it's ok. Perhaps we should use oatVersionNum to judge the right offset in
            // the future.
            final int isaNumOffsetFromOatBegin = 12;
            channel.position(roDataHdr.shOffset + isaNumOffsetFromOatBegin);
            buffer.limit(4);
            ShareElfFile.readUntilLimit(channel, buffer, ""Failed to read isa num."");

            int isaNum = buffer.getInt();
            if (isaNum < 0 || isaNum >= InstructionSet.values().length) {
                throw new IOException(""Bad isa num: "" + isaNum);
            }

            switch (InstructionSet.values()[isaNum]) {
                case kArm:
                case kThumb2:
                    result = ""arm"";
                    break;
                case kArm64:
                    result = ""arm64"";
                    break;
                case kX86:
                    result = ""x86"";
                    break;
                case kX86_64:
                    result = ""x86_64"";
                    break;
                case kMips:
                    result = ""mips"";
                    break;
                case kMips64:
                    result = ""mips64"";
                    break;
                case kNone:
                    result = ""none"";
                    break;
                default:
                    throw new IOException(""Should not reach here."");
            }
        } finally {
            if (elfFile != null) {
                try {
                    elfFile.close();
                } catch (Exception ignored) {
                    // Ignored.
                }
            }
        }
        return result;
    }"
1156,4850810.txt,none,"    @Override
    Path buildPath(boolean workspacePath) throws RepositoryException {
        Path parentPath = parent.buildPath(workspacePath);
        return getPathFactory().create(parentPath, getName(), true);
    }"
1157,9457761.txt,none,"  public MetricsInfo info() {
    return info;
  }"
1158,8298934.txt,minor,"	private void computeOverridesBrowserView(List<ICompletionProposal> proposals) {
		IWorkbenchWindow activeWindow = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
		if (activeWindow == null || activeWindow.getActivePage() == null) {
			return;
		}
		IWorkbenchPage page = activeWindow.getActivePage();
		IViewReference[] references = page.getViewReferences();
		for (int i = 0; i < references.length; i++) {
			IViewReference viewReference = references[i];
			IViewPart view = viewReference.getView(false);
			if (view instanceof OverridesBrowser && page.isPartVisible(view) && textViewer != null) {
				List<ICompletionProposal> advancedCompletionProposals = ((OverridesBrowser)view)
						.getExtendCompletionProposals(textViewer.getDocument(), text, offset);
				if (advancedCompletionProposals.size() > 0) {
					proposals.addAll(0, advancedCompletionProposals);
				}
			}
		}
	}"
1159,4336972.txt,none,"	public PersistentService getServiceType(Object serviceModule) {
		TopService ts = findTopService(serviceModule);

		if (ts == null)
			return null;

		return ts.getServiceType();
	}"
1160,5207888.txt,none,"    private List<FlowSnapshotMetadata> createFlowSnapshotMetdata(final Flow flow) {
        final List<FlowSnapshotMetadata> flowSnapshotMetadataList = new ArrayList<>();

        final Map<Integer, Flow.FlowPointer> versions = flow.getVersions();
        for (Map.Entry<Integer, Flow.FlowPointer> entry : versions.entrySet()) {
            final Integer version = entry.getKey();
            final Flow.FlowPointer flowPointer = entry.getValue();

            final FlowSnapshotMetadata snapshotMetadata = new FlowSnapshotMetadata();
            snapshotMetadata.setVersion(version);
            snapshotMetadata.setAuthor(flowPointer.getAuthor());
            snapshotMetadata.setComments(flowPointer.getComment());
            snapshotMetadata.setCreated(flowPointer.getCreated());
            flowSnapshotMetadataList.add(snapshotMetadata);
        }

        return flowSnapshotMetadataList;
    }"
1161,7332512.txt,none,"        @Override
        public Image getColumnImage(final Object element, final int columnIndex) {
            if (!(element instanceof BuildDefinitionReference) || columnIndex > 0) {
                return null;
            }

            final BuildDefinitionReference definition = (BuildDefinitionReference) element;
            return imageHelper.getBuildDefinitionImage(definition);
        }"
1162,4582889.txt,major,"        public void startElement(String uri, String localName, String qName, Attributes attributes)
                    throws SAXException {
            if (delegate != null) {
                delegateStack.push(qName);
                delegate.startElement(uri, localName, qName, attributes);
            } else if (domImplementation != null) {
                //domImplementation is set so we need to start a new DOM building sub-process
                TransformerHandler handler;
                try {
                    handler = tFactory.newTransformerHandler();
                } catch (TransformerConfigurationException e) {
                    throw new SAXException(""Error creating a new TransformerHandler"", e);
                }
                Document doc = domImplementation.createDocument(uri, qName, null);
                //It's easier to work with an empty document, so remove the root element
                doc.removeChild(doc.getDocumentElement());
                handler.setResult(new DOMResult(doc));
                Area parent = (Area)areaStack.peek();
                ((ForeignObject)parent).setDocument(doc);

                //activate delegate for nested foreign document
                domImplementation = null; //Not needed anymore now
                this.delegate = handler;
                delegateStack.push(qName);
                delegate.startDocument();
                delegate.startElement(uri, localName, qName, attributes);
            } else {
                boolean handled = true;
                if ("""".equals(uri)) {
                    if (localName.equals(""structureTree"")) {

                        /* The area tree parser no longer supports the structure tree. */
                        delegate = new DefaultHandler();

                        delegateStack.push(qName);
                        delegate.startDocument();
                        delegate.startElement(uri, localName, qName, attributes);
                    } else {
                        handled = startAreaTreeElement(localName, attributes);
                    }
                } else {
                    ContentHandlerFactoryRegistry registry
                            = userAgent.getContentHandlerFactoryRegistry();
                    ContentHandlerFactory factory = registry.getFactory(uri);
                    if (factory != null) {
                        delegate = factory.createContentHandler();
                        delegateStack.push(qName);
                        delegate.startDocument();
                        delegate.startElement(uri, localName, qName, attributes);
                    } else {
                        handled = false;
                    }
                }
                if (!handled) {
                    if (uri == null || uri.length() == 0) {
                        throw new SAXException(""Unhandled element "" + localName
                                + "" in namespace: "" + uri);
                    } else {
                        log.warn(""Unhandled element "" + localName
                                + "" in namespace: "" + uri);
                    }
                }
            }
        }"
1163,5275875.txt,none,"    @Override
    public Object copy(Object paramObject) {
        return new HashSet((Collection) paramObject);
    }"
1164,4919602.txt,major,"    public void configure(TestElement el) {
        setName(el.getName());
        Arguments arguments = (Arguments) el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue();

        boolean useRaw = el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW, HTTPSamplerBase.POST_BODY_RAW_DEFAULT);
        if(useRaw) {
            String postBody = computePostBody(arguments, true); // Convert CRLF to CR, see modifyTestElement
            postBodyContent.setInitialText(postBody); 
            postBodyContent.setCaretPosition(0);
            argsPanel.clear();
            postContentTabbedPane.setSelectedIndex(tabRawBodyIndex, false);
        } else {
            postBodyContent.setInitialText("""");
            argsPanel.configure(arguments);
            postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS, false);
        }
        if(showFileUploadPane) {
            filesPanel.configure(el);
        }

        domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));

        String portString = el.getPropertyAsString(HTTPSamplerBase.PORT);

        // Only display the port number if it is meaningfully specified
        if (portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)) {
            port.setText(""""); // $NON-NLS-1$
        } else {
            port.setText(portString);
        }
        protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));
        contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));
        path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));
        if (notConfigOnly){
            method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));
            followRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));
            autoRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));
            useKeepAlive.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));
            useMultipart.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));
            useBrowserCompatibleMultipartMode.setSelected(el.getPropertyAsBoolean(
                    HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART, HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT));
        }
    }"
1165,4473015.txt,none,"  public static void main(String args[]) throws UIMAException, IOException, URISyntaxException
  {
    if (args.length != 2)
    {
      System.err.format(""Syntax: %s input_directory output_directory%n"", RunZoner.class.getName());
    }
    
    File inputDirectory = new File(args[0]);
    File outputDirectory = new File(args[1]);
    
    List<File> inputFiles = listContentsAll(inputDirectory);
    
    RunZoner runner = new RunZoner();
    runner.setInputDirectory(inputDirectory);
    runner.setInputFiles(inputFiles);
    runner.setOutputDirectory(outputDirectory);
    
    runner.execute();
  }"
1166,5110869.txt,none,"  @Override
  public void viewConfiguration(IThreadContext threadContext, IHTTPOutput out, Locale locale, ConfigParams parameters)
    throws ManifoldCFException, IOException
  {
    Map<String,Object> velocityContext = new HashMap<String,Object>();
    fillInDomainControllerTab(velocityContext,out,parameters);
    fillInCacheTab(velocityContext,out,parameters);
    Messages.outputResourceWithVelocity(out,locale,""viewADConfiguration.html"",velocityContext);
  }"
1167,4069589.txt,none,"    static final long hash(long key) {
        long hash = key * HashMixer;
        hash ^= hash >>> R;
        hash *= HashMixer;
        return hash;
    }"
1168,4116762.txt,none,"    private void onContainerAdded(Entity container, boolean rebalanceNow) {
        subscriptions().subscribe(container, Attributes.LOCATION_CHANGED, eventHandler);
        Location location = locationFinder.apply(container);
        
        if (LOG.isTraceEnabled()) LOG.trace(""{} recording addition of container {} in location {}"", new Object[] {this, container, location});
        model.onContainerAdded(container, location);
        
        if (rebalanceNow) scheduleLatencyReductionJig();
    }"
1169,9219509.txt,none,"    static JComponent getPaintingOrigin(JComponent c) {
        Container p = c;
        while ((p = p.getParent()) instanceof JComponent) {
            JComponent jp = (JComponent) p;
            if (jp.isPaintingOrigin()) {
                return jp;
            }
        }
        return null;
    }"
1170,5241294.txt,none,"  private static void closeStream(final Channel closeable) {
    if (closeable != null) {
      try {
        closeable.close();
      } catch (IOException e) {
        // ignore
      }
    }
  }"
1171,6701931.txt,none,"  boolean isInFullImpressionRange() {
    final int allEdgesVisible = FLAG_LEFT_EDGE_VISIBLE
        | FLAG_TOP_EDGE_VISIBLE
        | FLAG_RIGHT_EDGE_VISIBLE
        | FLAG_BOTTOM_EDGE_VISIBLE;

    return (mFlags & allEdgesVisible) == allEdgesVisible;
  }"
1172,5743113.txt,critical,"    private void resizeInstructions() {
        byte[] b = code.data; // bytecode of the method
        int u, v, label; // indexes in b
        int i, j; // loop indexes
        /*
         * 1st step: As explained above, resizing an instruction may require to
         * resize another one, which may require to resize yet another one, and
         * so on. The first step of the algorithm consists in finding all the
         * instructions that need to be resized, without modifying the code.
         * This is done by the following ""fix point"" algorithm:
         * 
         * Parse the code to find the jump instructions whose offset will need
         * more than 2 bytes to be stored (the future offset is computed from
         * the current offset and from the number of bytes that will be inserted
         * or removed between the source and target instructions). For each such
         * instruction, adds an entry in (a copy of) the indexes and sizes
         * arrays (if this has not already been done in a previous iteration!).
         * 
         * If at least one entry has been added during the previous step, go
         * back to the beginning, otherwise stop.
         * 
         * In fact the real algorithm is complicated by the fact that the size
         * of TABLESWITCH and LOOKUPSWITCH instructions depends on their
         * position in the bytecode (because of padding). In order to ensure the
         * convergence of the algorithm, the number of bytes to be added or
         * removed from these instructions is over estimated during the previous
         * loop, and computed exactly only after the loop is finished (this
         * requires another pass to parse the bytecode of the method).
         */
        int[] allIndexes = new int[0]; // copy of indexes
        int[] allSizes = new int[0]; // copy of sizes
        boolean[] resize; // instructions to be resized
        int newOffset; // future offset of a jump instruction

        resize = new boolean[code.length];

        // 3 = loop again, 2 = loop ended, 1 = last pass, 0 = done
        int state = 3;
        do {
            if (state == 3) {
                state = 2;
            }
            u = 0;
            while (u < b.length) {
                int opcode = b[u] & 0xFF; // opcode of current instruction
                int insert = 0; // bytes to be added after this instruction

                switch (ClassWriter.TYPE[opcode]) {
                case ClassWriter.NOARG_INSN:
                case ClassWriter.IMPLVAR_INSN:
                    u += 1;
                    break;
                case ClassWriter.LABEL_INSN:
                    if (opcode > 201) {
                        // converts temporary opcodes 202 to 217, 218 and
                        // 219 to IFEQ ... JSR (inclusive), IFNULL and
                        // IFNONNULL
                        opcode = opcode < 218 ? opcode - 49 : opcode - 20;
                        label = u + readUnsignedShort(b, u + 1);
                    } else {
                        label = u + readShort(b, u + 1);
                    }
                    newOffset = getNewOffset(allIndexes, allSizes, u, label);
                    if (newOffset < Short.MIN_VALUE
                            || newOffset > Short.MAX_VALUE) {
                        if (!resize[u]) {
                            if (opcode == Opcodes.GOTO || opcode == Opcodes.JSR) {
                                // two additional bytes will be required to
                                // replace this GOTO or JSR instruction with
                                // a GOTO_W or a JSR_W
                                insert = 2;
                            } else {
                                // five additional bytes will be required to
                                // replace this IFxxx <l> instruction with
                                // IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx
                                // is the ""opposite"" opcode of IFxxx (i.e.,
                                // IFNE for IFEQ) and where <l'> designates
                                // the instruction just after the GOTO_W.
                                insert = 5;
                            }
                            resize[u] = true;
                        }
                    }
                    u += 3;
                    break;
                case ClassWriter.LABELW_INSN:
                    u += 5;
                    break;
                case ClassWriter.TABL_INSN:
                    if (state == 1) {
                        // true number of bytes to be added (or removed)
                        // from this instruction = (future number of padding
                        // bytes - current number of padding byte) -
                        // previously over estimated variation =
                        // = ((3 - newOffset%4) - (3 - u%4)) - u%4
                        // = (-newOffset%4 + u%4) - u%4
                        // = -(newOffset & 3)
                        newOffset = getNewOffset(allIndexes, allSizes, 0, u);
                        insert = -(newOffset & 3);
                    } else if (!resize[u]) {
                        // over estimation of the number of bytes to be
                        // added to this instruction = 3 - current number
                        // of padding bytes = 3 - (3 - u%4) = u%4 = u & 3
                        insert = u & 3;
                        resize[u] = true;
                    }
                    // skips instruction
                    u = u + 4 - (u & 3);
                    u += 4 * (readInt(b, u + 8) - readInt(b, u + 4) + 1) + 12;
                    break;
                case ClassWriter.LOOK_INSN:
                    if (state == 1) {
                        // like TABL_INSN
                        newOffset = getNewOffset(allIndexes, allSizes, 0, u);
                        insert = -(newOffset & 3);
                    } else if (!resize[u]) {
                        // like TABL_INSN
                        insert = u & 3;
                        resize[u] = true;
                    }
                    // skips instruction
                    u = u + 4 - (u & 3);
                    u += 8 * readInt(b, u + 4) + 8;
                    break;
                case ClassWriter.WIDE_INSN:
                    opcode = b[u + 1] & 0xFF;
                    if (opcode == Opcodes.IINC) {
                        u += 6;
                    } else {
                        u += 4;
                    }
                    break;
                case ClassWriter.VAR_INSN:
                case ClassWriter.SBYTE_INSN:
                case ClassWriter.LDC_INSN:
                    u += 2;
                    break;
                case ClassWriter.SHORT_INSN:
                case ClassWriter.LDCW_INSN:
                case ClassWriter.FIELDORMETH_INSN:
                case ClassWriter.TYPE_INSN:
                case ClassWriter.IINC_INSN:
                    u += 3;
                    break;
                case ClassWriter.ITFMETH_INSN:
                case ClassWriter.INDYMETH_INSN:
                    u += 5;
                    break;
                // case ClassWriter.MANA_INSN:
                default:
                    u += 4;
                    break;
                }
                if (insert != 0) {
                    // adds a new (u, insert) entry in the allIndexes and
                    // allSizes arrays
                    int[] newIndexes = new int[allIndexes.length + 1];
                    int[] newSizes = new int[allSizes.length + 1];
                    System.arraycopy(allIndexes, 0, newIndexes, 0,
                            allIndexes.length);
                    System.arraycopy(allSizes, 0, newSizes, 0, allSizes.length);
                    newIndexes[allIndexes.length] = u;
                    newSizes[allSizes.length] = insert;
                    allIndexes = newIndexes;
                    allSizes = newSizes;
                    if (insert > 0) {
                        state = 3;
                    }
                }
            }
            if (state < 3) {
                --state;
            }
        } while (state != 0);

        // 2nd step:
        // copies the bytecode of the method into a new bytevector, updates the
        // offsets, and inserts (or removes) bytes as requested.

        ByteVector newCode = new ByteVector(code.length);

        u = 0;
        while (u < code.length) {
            int opcode = b[u] & 0xFF;
            switch (ClassWriter.TYPE[opcode]) {
            case ClassWriter.NOARG_INSN:
            case ClassWriter.IMPLVAR_INSN:
                newCode.putByte(opcode);
                u += 1;
                break;
            case ClassWriter.LABEL_INSN:
                if (opcode > 201) {
                    // changes temporary opcodes 202 to 217 (inclusive), 218
                    // and 219 to IFEQ ... JSR (inclusive), IFNULL and
                    // IFNONNULL
                    opcode = opcode < 218 ? opcode - 49 : opcode - 20;
                    label = u + readUnsignedShort(b, u + 1);
                } else {
                    label = u + readShort(b, u + 1);
                }
                newOffset = getNewOffset(allIndexes, allSizes, u, label);
                if (resize[u]) {
                    // replaces GOTO with GOTO_W, JSR with JSR_W and IFxxx
                    // <l> with IFNOTxxx <l'> GOTO_W <l>, where IFNOTxxx is
                    // the ""opposite"" opcode of IFxxx (i.e., IFNE for IFEQ)
                    // and where <l'> designates the instruction just after
                    // the GOTO_W.
                    if (opcode == Opcodes.GOTO) {
                        newCode.putByte(200); // GOTO_W
                    } else if (opcode == Opcodes.JSR) {
                        newCode.putByte(201); // JSR_W
                    } else {
                        newCode.putByte(opcode <= 166 ? ((opcode + 1) ^ 1) - 1
                                : opcode ^ 1);
                        newCode.putShort(8); // jump offset
                        newCode.putByte(200); // GOTO_W
                        // newOffset now computed from start of GOTO_W
                        newOffset -= 3;
                    }
                    newCode.putInt(newOffset);
                } else {
                    newCode.putByte(opcode);
                    newCode.putShort(newOffset);
                }
                u += 3;
                break;
            case ClassWriter.LABELW_INSN:
                label = u + readInt(b, u + 1);
                newOffset = getNewOffset(allIndexes, allSizes, u, label);
                newCode.putByte(opcode);
                newCode.putInt(newOffset);
                u += 5;
                break;
            case ClassWriter.TABL_INSN:
                // skips 0 to 3 padding bytes
                v = u;
                u = u + 4 - (v & 3);
                // reads and copies instruction
                newCode.putByte(Opcodes.TABLESWITCH);
                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);
                label = v + readInt(b, u);
                u += 4;
                newOffset = getNewOffset(allIndexes, allSizes, v, label);
                newCode.putInt(newOffset);
                j = readInt(b, u);
                u += 4;
                newCode.putInt(j);
                j = readInt(b, u) - j + 1;
                u += 4;
                newCode.putInt(readInt(b, u - 4));
                for (; j > 0; --j) {
                    label = v + readInt(b, u);
                    u += 4;
                    newOffset = getNewOffset(allIndexes, allSizes, v, label);
                    newCode.putInt(newOffset);
                }
                break;
            case ClassWriter.LOOK_INSN:
                // skips 0 to 3 padding bytes
                v = u;
                u = u + 4 - (v & 3);
                // reads and copies instruction
                newCode.putByte(Opcodes.LOOKUPSWITCH);
                newCode.putByteArray(null, 0, (4 - newCode.length % 4) % 4);
                label = v + readInt(b, u);
                u += 4;
                newOffset = getNewOffset(allIndexes, allSizes, v, label);
                newCode.putInt(newOffset);
                j = readInt(b, u);
                u += 4;
                newCode.putInt(j);
                for (; j > 0; --j) {
                    newCode.putInt(readInt(b, u));
                    u += 4;
                    label = v + readInt(b, u);
                    u += 4;
                    newOffset = getNewOffset(allIndexes, allSizes, v, label);
                    newCode.putInt(newOffset);
                }
                break;
            case ClassWriter.WIDE_INSN:
                opcode = b[u + 1] & 0xFF;
                if (opcode == Opcodes.IINC) {
                    newCode.putByteArray(b, u, 6);
                    u += 6;
                } else {
                    newCode.putByteArray(b, u, 4);
                    u += 4;
                }
                break;
            case ClassWriter.VAR_INSN:
            case ClassWriter.SBYTE_INSN:
            case ClassWriter.LDC_INSN:
                newCode.putByteArray(b, u, 2);
                u += 2;
                break;
            case ClassWriter.SHORT_INSN:
            case ClassWriter.LDCW_INSN:
            case ClassWriter.FIELDORMETH_INSN:
            case ClassWriter.TYPE_INSN:
            case ClassWriter.IINC_INSN:
                newCode.putByteArray(b, u, 3);
                u += 3;
                break;
            case ClassWriter.ITFMETH_INSN:
            case ClassWriter.INDYMETH_INSN:
                newCode.putByteArray(b, u, 5);
                u += 5;
                break;
            // case MANA_INSN:
            default:
                newCode.putByteArray(b, u, 4);
                u += 4;
                break;
            }
        }

        // recomputes the stack map frames
        if (frameCount > 0) {
            if (compute == FRAMES) {
                frameCount = 0;
                stackMap = null;
                previousFrame = null;
                frame = null;
                Frame f = new Frame();
                f.owner = labels;
                Type[] args = Type.getArgumentTypes(descriptor);
                f.initInputFrame(cw, access, args, maxLocals);
                visitFrame(f);
                Label l = labels;
                while (l != null) {
                    /*
                     * here we need the original label position. getNewOffset
                     * must therefore never have been called for this label.
                     */
                    u = l.position - 3;
                    if ((l.status & Label.STORE) != 0 || (u >= 0 && resize[u])) {
                        getNewOffset(allIndexes, allSizes, l);
                        // TODO update offsets in UNINITIALIZED values
                        visitFrame(l.frame);
                    }
                    l = l.successor;
                }
            } else {
                /*
                 * Resizing an existing stack map frame table is really hard.
                 * Not only the table must be parsed to update the offets, but
                 * new frames may be needed for jump instructions that were
                 * inserted by this method. And updating the offsets or
                 * inserting frames can change the format of the following
                 * frames, in case of packed frames. In practice the whole table
                 * must be recomputed. For this the frames are marked as
                 * potentially invalid. This will cause the whole class to be
                 * reread and rewritten with the COMPUTE_FRAMES option (see the
                 * ClassWriter.toByteArray method). This is not very efficient
                 * but is much easier and requires much less code than any other
                 * method I can think of.
                 */
                cw.invalidFrames = true;
            }
        }
        // updates the exception handler block labels
        Handler h = firstHandler;
        while (h != null) {
            getNewOffset(allIndexes, allSizes, h.start);
            getNewOffset(allIndexes, allSizes, h.end);
            getNewOffset(allIndexes, allSizes, h.handler);
            h = h.next;
        }
        // updates the instructions addresses in the
        // local var and line number tables
        for (i = 0; i < 2; ++i) {
            ByteVector bv = i == 0 ? localVar : localVarType;
            if (bv != null) {
                b = bv.data;
                u = 0;
                while (u < bv.length) {
                    label = readUnsignedShort(b, u);
                    newOffset = getNewOffset(allIndexes, allSizes, 0, label);
                    writeShort(b, u, newOffset);
                    label += readUnsignedShort(b, u + 2);
                    newOffset = getNewOffset(allIndexes, allSizes, 0, label)
                            - newOffset;
                    writeShort(b, u + 2, newOffset);
                    u += 10;
                }
            }
        }
        if (lineNumber != null) {
            b = lineNumber.data;
            u = 0;
            while (u < lineNumber.length) {
                writeShort(
                        b,
                        u,
                        getNewOffset(allIndexes, allSizes, 0,
                                readUnsignedShort(b, u)));
                u += 4;
            }
        }
        // updates the labels of the other attributes
        Attribute attr = cattrs;
        while (attr != null) {
            Label[] labels = attr.getLabels();
            if (labels != null) {
                for (i = labels.length - 1; i >= 0; --i) {
                    getNewOffset(allIndexes, allSizes, labels[i]);
                }
            }
            attr = attr.next;
        }

        // replaces old bytecodes with new ones
        code = newCode;
    }"
1173,7483890.txt,none,"	public Customer970Service(Customer970Repository repo) {
	}"
1174,4471010.txt,none,"  @Override
  public void computeScalePrecision(int leftPrecision, int leftScale, int rightPrecision, int rightScale) {

    // compute the output scale and precision here
    outputScale = Math.max(leftScale, rightScale);
    int leftIntegerDigits = leftPrecision - leftScale;

    outputPrecision = DRILL_REL_DATATYPE_SYSTEM.getMaxNumericPrecision();

    if (outputScale + leftIntegerDigits > outputPrecision) {
      outputScale = outputPrecision - leftIntegerDigits;
    }

    // Output precision should at least be greater or equal to the input precision
    outputPrecision = Math.min(outputPrecision, Math.max(leftPrecision, rightPrecision));
  }"
1175,7910366.txt,none,"  public static TProtocol newProtocolInstance(ThriftProtocol protocol, TTransport transport) {
    return getProtocolFactory(protocol).getProtocol(transport);
  }"
1176,8194817.txt,none,"  @Override
  public byte[] getByteArrayValue(final String name) {
    Object _value = this.getValue(name);
    return ((byte[]) _value);
  }"
1177,7355243.txt,major,"        private Action createAction(final ProjectInfo project, final TeamConfiguration team) {
            Check.notNull(project, ""project""); //$NON-NLS-1$
            Check.notNull(team, ""team""); //$NON-NLS-1$

            final String projectGUID = project.getGUID();

            // Omit the team name for the default team
            final String actionName = team.isDefaultTeam() ? project.getName()
                : MessageFormat.format(
                    Messages.getString(""TeamExplorerControl.ProjectSlashTeamFormat""), //$NON-NLS-1$
                    project.getName(),
                    team.getTeamName());

            final Action action = new Action(actionName) {
                @Override
                public void run() {
                    final String beforeChangeProjectGUID = context.getCurrentProjectInfo().getGUID();
                    if (!projectGUID.equals(beforeChangeProjectGUID) || !team.equals(context.getCurrentTeam())) {
                        context.setCurrentProject(projectGUID);
                        context.setCurrentTeam(team);

                        TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();

                        // Only invoke this listener if team project changed
                        if (!projectGUID.equals(beforeChangeProjectGUID)) {
                            final boolean tfvc =
                                context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(
                                    SourceControlCapabilityFlags.TFS);
                            TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);
                        }
                    }
                }
            };

            if (projectGUID.equals(context.getCurrentProjectInfo().getGUID())
                && team.equals(context.getCurrentTeam())) {
                action.setChecked(true);
            }

            return action;
        }"
1178,6648229.txt,none,"  public void removeFeedback()
  {
    getStructureFigure().removeSelectionFeedback();
    super.removeFeedback();    
  }"
1179,6552410.txt,none,"  public void setLocation( int x, int y ) {
    checkWidget();
    if( ( style & ( SWT.BAR | SWT.DROP_DOWN ) ) == 0 ) {
      this.x = x;
      this.y = y;
      hasLocation = true;
    }
  }"
1180,4783162.txt,none,"    public static String getACZK(Configuration conf) {
        return conf.get(AC_ZK_PROP);
    }"
1181,5515872.txt,none,"    public RocketmqLog4jAppender() {
    }"
1182,6459500.txt,none,"    public RangeDecoderFromBuffer(int inputSizeMax, ArrayCache arrayCache) {
        // We will use the *end* of the array so if the cache gives us
        // a bigger-than-requested array, we still want to use buf.length.
        buf = arrayCache.getByteArray(inputSizeMax - INIT_SIZE, false);
        pos = buf.length;
    }"
1183,6953316.txt,none,"	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case DomPackage.CONTENT_NODE__OWNER:
				setOwner((Composite)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}"
1184,4455712.txt,none,"  @SuppressWarnings(""unused"")
  public void setTimestamp(String field, String value) {
    if (value != null) {
      //Convert the date string into a long
      long ts = 0;
      try {
        Date d = this.dateFormatter.parse(value);
        ts = d.getTime();
      } catch (Exception e) {
        //If the date formatter does not successfully create a date, the timestamp will fall back to zero
        //Do not throw exception
      }
      final TimeStampWriter tw = times.get(field);
      if (tw != null) {
        LOG.trace(""Parsed field: {}, as time: {}"", field, value);
        tw.writeTimeStamp(ts);
      } else {
        LOG.warn(""No 'timestamp' writer found for field: {}"", field);
      }
    }
  }"
1185,5698693.txt,none,"	public PropertiesVocabSource(Properties prop) {
		assert (prop != null);
		this.prop = prop;
		vocabs = readVocab(prop);
	}"
1186,8711809.txt,none,"	@Override
	public void beginSession() {
		getPaintSurface().setStatusMessage(PaintExample.getResourceString(
			""session.Text.message""));
	}"
1187,6310723.txt,none,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + (this.alias == null ? 0 : this.alias.hashCode());
        result = prime * result + (this.ciphers == null ? 0 : this.ciphers.hashCode());
        result = prime * result + (this.hostnameVerification ? 1231 : 1237);
        result = prime * result + (this.keyStore == null ? 0 : this.keyStore.hashCode());
        result = prime * result + Arrays.hashCode(this.keyStorePassword);
        result = prime * result + (this.protocol == null ? 0 : this.protocol.hashCode());
        result = prime * result + (this.sslManagerOpts == null ? 0 : this.sslManagerOpts.hashCode());
        result = prime * result + (this.trustStore == null ? 0 : this.trustStore.hashCode());
        return result;
    }"
1188,6381040.txt,none,"	@Override
	public void start(BundleContext context) throws Exception {
		super.start(context);
		plugin = this;
	}"
1189,8728601.txt,none,"      public updateUnicoreJobSubmissionDetails_args getEmptyArgsInstance() {
        return new updateUnicoreJobSubmissionDetails_args();
      }"
1190,8719880.txt,none,"Resource(Device device) {
	if (device == null) device = Device.getDevice();
	if (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
	this.device = device;
}"
1191,5440125.txt,none,"    @Override
    public void clear() {
        if (length > 0) {
            items = new Object[items.length];
            length = 0;
            modificationCount++;

            if (listListeners != null) {
                listListeners.listCleared(this);
            }
        }
    }"
1192,8768716.txt,none,"      public addSSHJobSubmissionDetails_args getEmptyArgsInstance() {
        return new addSSHJobSubmissionDetails_args();
      }"
1193,6668271.txt,none,"	public void testGetAutoEditStrategies() {

		// probably no display
		if (!fDisplayExists)
			return;

		IAutoEditStrategy[] strategies = fConfig.getAutoEditStrategies(fViewer, IDTDPartitions.DTD_DEFAULT);
		assertNotNull(strategies);
		assertTrue(""there are no auto edit strategies"", strategies.length > 0);
	}"
1194,6624215.txt,major,"  @Override
  public void start(Stage stage) {

    try {

      // create splitPane pane and JavaFX app scene
      SplitPane splitPane = new SplitPane();
      splitPane.setOrientation(Orientation.VERTICAL);
      Scene fxScene = new Scene(splitPane);

      // set title, size, and add JavaFX scene to stage
      stage.setTitle(""Feature Layer Rendering Mode Map Sample"");
      stage.setWidth(800);
      stage.setHeight(700);
      stage.setScene(fxScene);
      stage.show();

      // create a map (top) and set it to render all features in static rendering mode
      ArcGISMap mapTop = new ArcGISMap();
      mapTop.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);
      mapTop.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);
      mapTop.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);

      // create a map (bottom) and set it to render all features in dynamic rendering mode
      ArcGISMap mapBottom = new ArcGISMap();
      mapBottom.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);
      mapBottom.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);
      mapBottom.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);

      // creating top map view
      mapViewTop = new MapView();
      mapViewTop.setMap(mapTop);
      splitPane.getItems().add(mapViewTop);
      // creating bottom map view
      mapViewBottom = new MapView();
      mapViewBottom.setMap(mapBottom);
      splitPane.getItems().add(mapViewBottom);

      // create service feature table using a point, polyline, and polygon service
      ServiceFeatureTable pointServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/0"");
      ServiceFeatureTable polylineServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/8"");
      ServiceFeatureTable polygonServiceFeatureTable = new ServiceFeatureTable(""http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/9"");

      // create feature layer from service feature tables
      FeatureLayer pointFeatureLayer = new FeatureLayer(pointServiceFeatureTable);
      FeatureLayer polylineFeatureLayer = new FeatureLayer(polylineServiceFeatureTable);
      FeatureLayer polygonFeatureLayer = new FeatureLayer(polygonServiceFeatureTable);

      // add each layer to top and bottom map
      mapTop.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer, polylineFeatureLayer, polygonFeatureLayer));
      mapBottom.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer.copy(), polylineFeatureLayer.copy(), polygonFeatureLayer.copy()));

      // viewpoint locations for map view to zoom in and out to
      Viewpoint zoomOutPoint = new Viewpoint(new Point(-118.37, 34.46, SpatialReferences.getWgs84()), 650000, 0);
      Viewpoint zoomInPoint = new Viewpoint(new Point(-118.45, 34.395, SpatialReferences.getWgs84()), 50000, 90);
      mapViewTop.setViewpoint(zoomOutPoint);
      mapViewBottom.setViewpoint(zoomOutPoint);

      //loop an animation into and out from the zoom in point (5 seconds each) with a 2 second gap between zooming
      timeline = new Timeline();
      timeline.setCycleCount(Animation.INDEFINITE);
      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(7), event -> zoomTo(zoomInPoint)));
      timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(14), event -> zoomTo(zoomOutPoint)));
      timeline.play();

    } catch (Exception e) {
      // on any error, display the stack trace.
      e.printStackTrace();
    }
  }"
1195,6265027.txt,none,"	@Test
	public void checkEquality() {

		// Construct a component to test against.
		HeatExchanger component = new HeatExchanger();
		component.setInnerRadius(2.0);
		component.setLength(3.0);
		component.setNumElements(4);

		// Construct a component equal to the first.
		HeatExchanger equalComponent = new HeatExchanger();
		equalComponent.setInnerRadius(2.0);
		equalComponent.setLength(3.0);
		equalComponent.setNumElements(4);

		// Construct a component equal to the first for checking transitivity
		HeatExchanger transComponent = new HeatExchanger();
		transComponent.setInnerRadius(2.0);
		transComponent.setLength(3.0);
		transComponent.setNumElements(4);

		// Construct a component not equal to the first.
		HeatExchanger unequalComponent = new HeatExchanger();

		// Check that component and unequalComponet are not the same.
		assertFalse(component.equals(unequalComponent));
		assertFalse(unequalComponent.equals(component));

		// Check that equality also fails with illegal values
		assertFalse(component == null);
		assertFalse(component.equals(11));
		assertFalse(""House Lannister"".equals(component));

		// Check is equals() is reflexive and symmetric.
		assertTrue(component.equals(component));
		assertTrue(component.equals(equalComponent)
				&& equalComponent.equals(component));

		// Check equals() is transitive.
		if (component.equals(transComponent)
				&& transComponent.equals(equalComponent)) {
			assertTrue(component.equals(equalComponent));
		} else {
			fail();
		}
		// Check the hashCode values.
		assertEquals(component.hashCode(), component.hashCode());
		assertEquals(component.hashCode(), equalComponent.hashCode());
		assertFalse(component.hashCode() == unequalComponent.hashCode());

		return;

	}"
1196,7298896.txt,none,"	@Override
	public void declareExchange(final Exchange exchange) {
		try {
			this.rabbitTemplate.execute(channel -> {
				declareExchanges(channel, exchange);
				return null;
			});
		}
		catch (AmqpException e) {
			logOrRethrowDeclarationException(exchange, ""exchange"", e);
		}
	}"
1197,8978631.txt,none,"  protected void markLargestWriterPending(DocumentsWriterFlushControl control,
      ThreadState perThreadState, final long currentBytesPerThread) {
    ThreadState largestNonPendingWriter = findLargestNonPendingWriter(control, perThreadState);
    if (largestNonPendingWriter != null) {
      control.setFlushPending(largestNonPendingWriter);
    }
  }"
1198,5302732.txt,none,"    @Override
    public void valueChanged(Value val) {
    	if (val != null && val.matches(""DataCacheTimeout"")) {
    		_cacheTimeout = Integer.MIN_VALUE;
    	}
    }"
1199,8574638.txt,none,"  @SuppressWarnings(""unchecked"")
  public E loadInstance(Class<?> implClass) throws IOException {
    // create the instance
    E impl;
    Object o = null;
    try {
      o = implClass.getDeclaredConstructor().newInstance();
      impl = (E)o;
    } catch (Exception e) {
      throw new IOException(e);
    }

    return impl;
  }"
1200,9118161.txt,none,"	private DataSetHandle getDataSet( ScalarParameterHandle handle )
	{
		if ( !isSingle( ) )
		{
			if ( handle != null && handle.getDataSet( ) != null )
			{
				return handle.getDataSet( );
			}
			return null;
		}
		return inputParameterGroup.getDataSet( );
	}"
1201,5384197.txt,major,"    private void removeAndReconnect(MapReduceOper mr, MapReduceOper newMR) throws VisitorException {
        List<MapReduceOper> mapperSuccs = getPlan().getSuccessors(mr);
        List<MapReduceOper> mapperPreds = getPlan().getPredecessors(mr);

        // make a copy before removing operator
        ArrayList<MapReduceOper> succsCopy = null;
        ArrayList<MapReduceOper> predsCopy = null;
        if (mapperSuccs != null) {
            succsCopy = new ArrayList<MapReduceOper>(mapperSuccs);
        }
        if (mapperPreds != null) {
            predsCopy = new ArrayList<MapReduceOper>(mapperPreds);
        }
        getPlan().remove(mr);

        // reconnect the mapper's successors
        if (succsCopy != null) {
            for (MapReduceOper succ : succsCopy) {
                try {
                    getPlan().connect(newMR, succ);
                } catch (PlanException e) {
                    int errCode = 2133;
                    String msg = ""Internal Error. Unable to connect map plan with successors for optimization."";
                    throw new OptimizerException(msg, errCode, PigException.BUG, e);
                }
            }
        }

        // reconnect the mapper's predecessors
        if (predsCopy != null) {
            for (MapReduceOper pred : predsCopy) {
                if (newMR.getOperatorKey().equals(pred.getOperatorKey())) {
                    continue;
                }
                try {
                    getPlan().connect(pred, newMR);
                } catch (PlanException e) {
                    int errCode = 2134;
                    String msg = ""Internal Error. Unable to connect map plan with predecessors for optimization."";
                    throw new OptimizerException(msg, errCode, PigException.BUG, e);
                }
            }
        }

        mergeMROperProperties(mr, newMR);
    }"
1202,6465533.txt,none,"    private void buildNode1076()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=11692""), new QualifiedName(0, ""OutputArguments""), new LocalizedText(""en"", ""OutputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=11690""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=37""), ExpandedNodeId.parse(""svr=0;i=78""), NodeClass.Object, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=11692""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=11690""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
1203,9173266.txt,none,"		public static ContentProvider newInstance( LegendData lgData )
				throws ChartException
		{
			LegendItemType itemType = lgData.lg.getItemType( );
			if ( itemType.getValue( ) == LegendItemType.CATEGORIES )
			{
				return new CategoryContentProvider( lgData );
			}
			else if ( itemType.getValue( ) == LegendItemType.SERIES )
			{
				return new ValueContentProvider( lgData );
			}
			else
			{
				throw new ChartException( ChartEnginePlugin.ID,
						ChartException.GENERATION,
						""exception.illegal.rendering.legend.itemtype"", //$NON-NLS-1$
						new Object[]{
							itemType
						},
						Messages.getResourceBundle( lgData.rtc.getULocale( ) ) );
			}

		}"
1204,5235970.txt,none,"  public static Map<String, Object> getXmlRpcElementHashTable(Element element) {
    Map<String, Object> elementHash = new Hashtable<String, Object>();

    elementHash.put(""id"", element.getElementId());
    elementHash.put(""name"", element.getElementName());
    elementHash.put(""dcElement"", element.getDCElement() != null ? element
        .getDCElement() : """");
    elementHash.put(""description"",
        element.getDescription() != null ? element.getDescription()
                                         : """");

    return elementHash;
  }"
1205,5769657.txt,none,"    @Override
    public void setIntValues(final Item orgUnitItem, final Attribute attr, final RealmTO realmTO) {
        List<Object> values = null;
        if (attr != null) {
            values = attr.getValue();
            for (ItemTransformer transformer : MappingUtils.getItemTransformers(orgUnitItem)) {
                values = transformer.beforePull(orgUnitItem, realmTO, values);
            }
        }

        if (values != null && !values.isEmpty() && values.get(0) != null) {
            switch (orgUnitItem.getIntAttrName()) {
                case ""name"":
                    realmTO.setName(values.get(0).toString());
                    break;

                case ""fullpath"":
                    String parentFullPath = StringUtils.substringBeforeLast(values.get(0).toString(), ""/"");
                    Realm parent = realmDAO.findByFullPath(parentFullPath);
                    if (parent == null) {
                        LOG.warn(""Could not find Realm with path {}, ignoring"", parentFullPath);
                    } else {
                        realmTO.setParent(parent.getFullPath());
                    }
                    break;

                default:
            }
        }
    }"
1206,4488901.txt,minor,"  public <SEARCH_T extends Annotation> List<Feature> extract(JCas jCas,
      Annotation focusAnnotation, Bounds bounds,
      Class<SEARCH_T> annotationClass, FeatureExtractor1<SEARCH_T> extractor)
      throws CleartkExtractorException {
    LinkedHashMap<String,Double> runningTotals = new LinkedHashMap<>();

    for (Context context : this.contexts) {
      for (Feature feature : context.extract(
          jCas,
          focusAnnotation,
          bounds,
          annotationClass,
          extractor)) {
        try{
          double val = Double.parseDouble(feature.getValue().toString());
          if(!runningTotals.containsKey(feature.getName())){
            runningTotals.put(feature.getName(), 0.0);
          }
          runningTotals.put(feature.getName(), runningTotals.get(feature.getName()) + val);
        }catch(Exception e){
          // just ignore this feature?
        }
      }
    }
    List<Feature> features = new ArrayList<>();
    for(String key : runningTotals.keySet()){
      features.add(new Feature(this.name + ""_"" + key, runningTotals.get(key)));
    }
    return features;
  }"
1207,5894091.txt,minor,"    public boolean matchesAllInstances(SequenceType testST) {
        Quantifier stq = sequenceType.getQuantifier();
        ItemType it = sequenceType.getItemType();
        if (stq.isSubQuantifier(testST.getQuantifier())) {
            if (it instanceof AnyItemType) {
                return true;
            } else if (it.isAtomicType() && testST.getItemType().isAtomicType()) {
                AtomicType ait = (AtomicType) it;
                AtomicType testIT = (AtomicType) testST.getItemType();
                if (BuiltinTypeRegistry.INSTANCE.isBuiltinTypeId(testIT.getTypeId())) {
                    SchemaType vType = BuiltinTypeRegistry.INSTANCE.getSchemaTypeById(testIT.getTypeId());
                    while (vType != null && vType.getTypeId() != ait.getTypeId()) {
                        vType = vType.getBaseType();
                    }
                    return vType != null;
                }
            } else if (it instanceof NodeType && testST.getItemType() instanceof NodeType) {
                NodeType nt = (NodeType) it;
                NodeKind kind = nt.getNodeKind();
                NodeType testNT = (NodeType) testST.getItemType();
                NodeKind testKind = testNT.getNodeKind();
                if (kind == NodeKind.ANY || kind == testKind) {
                    return true;
                }
            }
            return false;
        }
        return false;
    }"
1208,8432596.txt,none,"    public AggregationStrategy getAggregationStrategy() {
        return aggregationStrategy;
    }"
1209,4315157.txt,none,"    @Override
    public String getOidByName( String name ) throws LdapException
    {
        return immutableMatchingRuleUseRegistry.getOidByName( name );
    }"
1210,4162084.txt,none,"    @Override
    public StoredObject createPolicy(String name, String policyText, Map<String, PropertyData<?>> propMap, String user,
            Acl addACEs, Acl removeACEs) {
        PolicyImpl policy = new PolicyImpl();
        policy.createSystemBasePropertiesWhenCreated(propMap, user);
        policy.setCustomProperties(propMap);
        policy.setRepositoryId(fRepositoryId);
        policy.setName(name);
        policy.setPolicyText(policyText);
        String id = storeObject(policy);
        policy.setId(id);
        applyAcl(policy, addACEs, removeACEs);
        return policy;
    }"
1211,8935536.txt,none,"    public com.google.protobuf.ByteString
        getHiveQueryIdBytes() {
      java.lang.Object ref = hiveQueryId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        hiveQueryId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }"
1212,4045338.txt,none,"    private static void insertInitialDataverses(MetadataTransactionContext mdTxnCtx) throws AlgebricksException {
        String dataFormat = NonTaggedDataFormat.NON_TAGGED_DATA_FORMAT;
        MetadataManager.INSTANCE.addDataverse(mdTxnCtx,
                new Dataverse(MetadataConstants.METADATA_DATAVERSE_NAME, dataFormat, MetadataUtil.PENDING_NO_OP));
        MetadataManager.INSTANCE.addDataverse(mdTxnCtx, MetadataBuiltinEntities.DEFAULT_DATAVERSE);
    }"
1213,9516021.txt,none,"  private void lostFoundInit(DFSClient dfs) {
    lfInited = true;
    try {
      String lfName = ""/lost+found"";

      final HdfsFileStatus lfStatus = dfs.getFileInfo(lfName);
      if (lfStatus == null) { // not exists
        lfInitedOk = dfs.mkdirs(lfName, null, true);
        lostFound = lfName;
      } else if (!lfStatus.isDirectory()) { // exists but not a directory
        LOG.warn(""Cannot use /lost+found : a regular file with this name exists."");
        lfInitedOk = false;
      }  else { // exists and is a directory
        lostFound = lfName;
        lfInitedOk = true;
      }
    }  catch (Exception e) {
      e.printStackTrace();
      lfInitedOk = false;
    }
    if (lostFound == null) {
      LOG.warn(""Cannot initialize /lost+found ."");
      lfInitedOk = false;
      internalError = true;
    }
  }"
1214,7927736.txt,none,"	public EReference getEnumParameterType_ParameterValue() {
		return (EReference)enumParameterTypeEClass.getEStructuralFeatures().get(2);
	}"
1215,8044671.txt,none,"	protected String getArrayComponentTypeSimpleName(String typeName) {
		int idx = typeName.indexOf('[');
		if (idx != -1) {
			return getSimpleName(typeName.substring(0, idx));
		}
		return null;
	}"
1216,9379644.txt,none,"    private static Class<?> loadClass2(String className, Class<?> callingClass)
        throws ClassNotFoundException {
        try {
            return Class.forName(className);
        } catch (ClassNotFoundException ex) {
            try {
                if (ClassLoaderUtils.class.getClassLoader() != null) {
                    return ClassLoaderUtils.class.getClassLoader().loadClass(className);
                }
            } catch (ClassNotFoundException exc) {
                if (callingClass != null && callingClass.getClassLoader() != null) {
                    return callingClass.getClassLoader().loadClass(className);
                }
            }
            LOG.debug(ex.getMessage(), ex);
            throw ex;
        }
    }"
1217,8575719.txt,none,"  public AuthenticationKey(int keyId, long expirationDate, SecretKey key) {
    this.id = keyId;
    this.expirationDate = expirationDate;
    this.secret = key;
  }"
1218,5243521.txt,critical,"  private EntityCollection createETStreamOnComplexProp(Edm edm, OData odata) {
    EntityCollection entityCollection = new EntityCollection();

    Link readLink = new Link();
    readLink.setRel(Constants.NS_MEDIA_READ_LINK_REL);
    readLink.setHref(""readLink"");
    Entity entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyStream"", createImage(""darkturquoise"")));
    readLink.setInlineEntity(entity);
    
    Link readLink1 = new Link();
    readLink1.setRel(Constants.NS_MEDIA_READ_LINK_REL);
    readLink1.setHref(""readLink"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyEntityStream"", createImage(""darkturquoise"")));
    readLink1.setInlineEntity(entity);
    
    entityCollection.getEntities().add(new Entity()
        .addProperty(createPrimitive(""PropertyInt16"", Short.MAX_VALUE))
        .addProperty(createPrimitive(""PropertyInt32"", Integer.MAX_VALUE))
        .addProperty(new Property(null, ""PropertyEntityStream"", ValueType.PRIMITIVE, readLink1))
        .addProperty(createComplex(""PropertyCompWithStream"",
            ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),
            new Property(null, ""PropertyStream"", ValueType.PRIMITIVE, readLink),
            createComplex(""PropertyComp"", 
                ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),
                createPrimitive(""PropertyInt16"", (short) 333),
                createPrimitive(""PropertyString"", ""TEST123"")))));
    
    Link editLink = new Link();
    editLink.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);
    editLink.setHref(""http://mediaserver:1234/editLink"");
    editLink.setMediaETag(""eTag"");
    editLink.setType(""image/jpeg"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyStream"", createImage(""royalblue"")));
    editLink.setInlineEntity(entity);
    
    Link editLink2 = new Link();
    editLink2.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);
    editLink2.setHref(""http://mediaserver:1234/editLink"");
    editLink2.setMediaETag(""eTag"");
    editLink2.setType(""image/jpeg"");
    entity = new Entity();
    entity.addProperty(createPrimitive(""PropertyEntityStream"", createImage(""royalblue"")));
    editLink2.setInlineEntity(entity);

    entityCollection.getEntities().add(new Entity()
        .addProperty(createPrimitive(""PropertyInt16"", (short) 7))
        .addProperty(createPrimitive(""PropertyInt32"", (Integer) 10))
        .addProperty(new Property(null, ""PropertyEntityStream"", ValueType.PRIMITIVE, editLink2))
        .addProperty(createComplex(""PropertyCompWithStream"",
            ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),
            new Property(null, ""PropertyStream"", ValueType.PRIMITIVE, editLink),
            createComplex(""PropertyComp"", 
                ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),
                createPrimitive(""PropertyInt16"", (short) 333),
                createPrimitive(""PropertyString"", ""TEST123"")))));

    setEntityType(entityCollection, edm.getEntityType(EntityTypeProvider.nameETStreamOnComplexProp));
    createEntityId(edm, odata, ""ESStreamOnComplexProp"", entityCollection);
    createOperations(""ESStreamOnComplexProp"", entityCollection, EntityTypeProvider.nameETStreamOnComplexProp);
    return entityCollection;
  }"
1219,6277868.txt,none,"		@Override
		public void checkWants(UploadPack up, List<ObjectId> wants)
				throws PackProtocolException, IOException {
			checkNotAdvertisedWants(up, wants,
					refIdSet(up.getAdvertisedRefs().values()));
		}"
1220,7513758.txt,none,"    public static boolean isVirtualStackSlot(Value value) {
        assert value != null;
        return value instanceof VirtualStackSlot;
    }"
1221,9046923.txt,minor,"public void testBug427626() {
	runNegativeTest(
		new String[] {
			""X.java"",
			""import java.util.Arrays;\n"" + 
			""import java.util.List;\n"" + 
			""\n"" + 
			""public class X {\n"" + 
			""	void m() {\n"" + 
			""        List<String> ss = Arrays.asList(\""1\"", \""2\"", \""3\"");\n"" + 
			""        \n"" + 
			""        ss.stream().map(s -> {\n"" + 
			""          class L1 {};\n"" + 
			""          class L2 {\n"" + 
			""            void mm(L1 l) {}\n"" + 
			""          }\n"" + 
			""          return new L2().mm(new L1());\n"" + 
			""        }).forEach(e -> System.out.println(e));\n"" + 
			""	}\n"" + 
			""}""
		},
		// 8u20 emits just one message inferred type not conforming to upper bound.
		""----------\n"" + 
		""1. ERROR in X.java (at line 8)\n"" +
		""	ss.stream().map(s -> {\n"" +
		""          class L1 {};\n"" +
		""          class L2 {\n"" +
		""            void mm(L1 l) {}\n"" +
		""          }\n"" +
		""          return new L2().mm(new L1());\n"" +
		""        }).forEach(e -> System.out.println(e));\n"" +
		""	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"" +
		""Cannot infer type argument(s) for <R> map(Function<? super T,? extends R>)\n"" +
		""----------\n"" +
		""2. ERROR in X.java (at line 13)\n"" + 
		""	return new L2().mm(new L1());\n"" + 
		""	^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n"" + 
		""Cannot return a void result\n"" + 
		""----------\n"");
}"
1222,8333384.txt,none,"		public final Thread start() {
			if (!init) {
				throw new IllegalStateException(""not initialized"");
			}
			synchronized (this) {
				if (started) {
					throw new IllegalStateException(""already started"");
				}
				started = true;
			}
			try {
				process = Runtime.getRuntime().exec(command);
			} catch (IOException e) {
				stop(e, Integer.MIN_VALUE);
				return null;
			}
			errStream = new FileUtil.Pipe(process.getErrorStream(), System.err);
			if (null != errSnoop) {
				errStream.setSnoop(errSnoop);
			}
			outStream = new FileUtil.Pipe(process.getInputStream(), System.out);
			if (null != outSnoop) {
				outStream.setSnoop(outSnoop);
			}
			inStream = new FileUtil.Pipe(System.in, process.getOutputStream());
			// start 4 threads, process & pipes for in, err, out
			Runnable processRunner = new Runnable() {
				@Override
				public void run() {
					Throwable thrown = null;
					int result = Integer.MIN_VALUE;
					try {
						// pipe threads are children
						new Thread(errStream).start();
						new Thread(outStream).start();
						new Thread(inStream).start();
						process.waitFor();
						result = process.exitValue();
					} catch (Throwable e) {
						thrown = e;
					} finally {
						stop(thrown, result);
					}
				}
			};
			Thread result = new Thread(processRunner, label);
			result.start();
			return result;
		}"
1223,4553401.txt,none,"    private Money handleInstallmentTransaction(final RecurringDepositScheduleInstallment currentInstallment,
            final Money transactionAmountUnprocessed, final LocalDate transactionDate) {

        Money transactionAmountRemaining = transactionAmountUnprocessed;
        Money depositAmountPortion = Money.zero(transactionAmountRemaining.getCurrency());

        depositAmountPortion = currentInstallment.payInstallment(transactionDate, transactionAmountRemaining);
        transactionAmountRemaining = transactionAmountRemaining.minus(depositAmountPortion);

        return transactionAmountRemaining;

    }"
1224,3963415.txt,none,"  @Override
  public String toString()
  {
    return indexMap.toString();
  }"
1225,4691358.txt,none,"    @Override
    public void enterBarrier(BSPJobID jobId, TaskAttemptID taskId,
        long superstep) throws SyncException {
      try {
        barrier.await();
      } catch (Exception e) {
        throw new SyncException(e.toString());
      }
    }"
1226,8708013.txt,none,"private String[] splitString(String text) {
    String[] lines = new String[1];
    int start = 0, pos;
    do {
        pos = text.indexOf('\n', start);
        if (pos == -1) {
        	lines[lines.length - 1] = text.substring(start);
        } else {
            boolean crlf = (pos > 0) && (text.charAt(pos - 1) == '\r');
            lines[lines.length - 1] = text.substring(start, pos - (crlf ? 1 : 0));
            start = pos + 1;
            String[] newLines = new String[lines.length+1];
            System.arraycopy(lines, 0, newLines, 0, lines.length);
       		lines = newLines;
        }
    } while (pos != -1);
    return lines;
}"
1227,6014861.txt,none,"    @Override
    public Mono<ListMembersResponse> listMembers(ListMembersRequest request) {
        return get(request, ListMembersResponse.class, builder -> builder.pathSegment(""Groups"", request.getGroupId(), ""members""))
            .checkpoint();
    }"
1228,8967998.txt,none,"  private void asJson(OutputStream out, Map<String, Object> data)
      throws HiveException
      {
    try {
      new ObjectMapper().writeValue(out, data);
    } catch (IOException e) {
      throw new HiveException(""Unable to convert to json"", e);
    }
      }"
1229,7254402.txt,none,"    public static String fixLibsDirPath(final String libsDirPath, final String args, boolean createTmp) {
        if (createTmp) {
            try {
                File tmpFile = File.createTempFile(BINARIES_TMP_PREFIX, BINARIES_TMP_EXT);
                String tmpPath = tmpFile.getAbsolutePath();
                tmpFile.delete();
                Runtime.getRuntime().exec(new String[]{""/bin/ln"",""-s"",libsDirPath,tmpPath});    // NOI18N
                new File(tmpPath).deleteOnExit();
                return args.replace(libsDirPath,tmpPath);
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        } else {
            return args.replaceAll(""agentpath:(.*?)=(.*?),(.*)"", ""agentpath:\""$1\""=\""$2\"",$3"");
        }
    }"
1230,7478016.txt,none,"    public boolean isReference() {
        if (isCachedLanguage()) {
            return !ElementUtils.typeEquals(getLanguageType(), getParameter().getType());
        } else {
            return ElementUtils.typeEquals(getReferenceType(), getParameter().getType());
        }
    }"
1231,8748649.txt,none,"  void setIncludePattern(Pattern includePattern) {
    this.includePattern = includePattern;
  }"
1232,4534763.txt,none,"    protected void warn(String msg, Object ... params) {
	if (LOG_LEVEL >= LogService.LOG_WARNING) {
	    log(LogService.LOG_WARNING, params.length > 0 ? String.format(msg, params) : msg);
	}
    }"
1233,8819009.txt,none,"    public deleteExperiment_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }"
1234,7595459.txt,none,"	public boolean hasAnyScope(String... scopes) {
		boolean result = OAuth2ExpressionUtils.hasAnyScope(authentication, scopes);
		if (!result) {
			missingScopes.addAll(Arrays.asList(scopes));
		}
		return result;
	}"
1235,8009299.txt,none,"	public TitaniumDAGLayout(final Graph<V, E> g, final Dimension size) {
		super(g, size);
	}"
1236,4924493.txt,none,"    @Override
    protected void setNumberValue(Number n) {
        value = n.longValue();
    }"
1237,6548279.txt,none,"  private static Font[] getCellFonts( TreeItem item ) {
    return getTreeItemAdapter( item ).getCellFonts();
  }"
1238,8914719.txt,none,"    public void unsetEnvironment_context() {
      this.environment_context = null;
    }"
1239,9006040.txt,major,"  private void doDefensiveChecks(DistribPhase phase) {
    boolean isReplayOrPeersync = (updateCommand.getFlags() & (UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC)) != 0;
    if (isReplayOrPeersync) return;

    String from = req.getParams().get(DISTRIB_FROM);
    ClusterState clusterState = zkController.getClusterState();

    DocCollection docCollection = clusterState.getCollection(collection);
    Slice mySlice = docCollection.getSlice(cloudDesc.getShardId());
    boolean localIsLeader = cloudDesc.isLeader();
    if (DistribPhase.FROMLEADER == phase && localIsLeader && from != null) { // from will be null on log replay
      String fromShard = req.getParams().get(DISTRIB_FROM_PARENT);
      if (fromShard != null) {
        if (mySlice.getState() == Slice.State.ACTIVE)  {
          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
              ""Request says it is coming from parent shard leader but we are in active state"");
        }
        // shard splitting case -- check ranges to see if we are a sub-shard
        Slice fromSlice = docCollection.getSlice(fromShard);
        DocRouter.Range parentRange = fromSlice.getRange();
        if (parentRange == null) parentRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);
        if (mySlice.getRange() != null && !mySlice.getRange().isSubsetOf(parentRange)) {
          throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
              ""Request says it is coming from parent shard leader but parent hash range is not superset of my range"");
        }
      } else {
        String fromCollection = req.getParams().get(DISTRIB_FROM_COLLECTION); // is it because of a routing rule?
        if (fromCollection == null)  {
          log.error(""Request says it is coming from leader, but we are the leader: "" + req.getParamString());
          SolrException solrExc = new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, ""Request says it is coming from leader, but we are the leader"");
          solrExc.setMetadata(""cause"", ""LeaderChanged"");
          throw solrExc;
        }
      }
    }

    int count = 0;
    while (((isLeader && !localIsLeader) || (isSubShardLeader && !localIsLeader)) && count < 5) {
      count++;
      // re-getting localIsLeader since we published to ZK first before setting localIsLeader value
      localIsLeader = cloudDesc.isLeader();
      try {
        Thread.sleep(500);
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      }
    }

    if ((isLeader && !localIsLeader) || (isSubShardLeader && !localIsLeader)) {
      log.error(""ClusterState says we are the leader, but locally we don't think so"");
      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,
          ""ClusterState says we are the leader ("" + zkController.getBaseUrl()
              + ""/"" + req.getCore().getName() + ""), but locally we don't think so. Request came from "" + from);
    }
  }"
1240,7770031.txt,none,"  @Benchmark
  @BenchmarkMode(Mode.AverageTime)
  @OutputTimeUnit(TimeUnit.MICROSECONDS)
  public void uncompressed(Blackhole blackhole)
  {
    final ImmutableConciseSet set = ImmutableConciseSet.complement(null, emptyRows);
    blackhole.consume(set);
    assert (emptyRows == set.size());
  }"
1241,9481908.txt,none,"    public String getValueOrNull(String name) throws InvalidXmlException {
      if (!subtrees.containsKey(name)) {
        return null;
      }
      LinkedList <Stanza> l = subtrees.get(name);
      if (l.size() != 1) {
        throw new InvalidXmlException(""More than one value found for "" + name);
      }
      return l.get(0).getValue();
    }"
1242,4969461.txt,none,"    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (!(obj instanceof Quota))
            return false;
        Quota that = (Quota) obj;
        return (that.bound == this.bound) && (that.upper == this.upper);
    }"
1243,4354720.txt,none,"	private void bindSQRTABS()
			throws StandardException
	{
		TypeId	operandType;
		int 	jdbcType;

		/*
		** Check the type of the operand 
		*/
		operandType = operand.getTypeId();

		/*
	 	 * If the operand is not a build-in type, generate a bound conversion
		 * tree to build-in types.
		 */
		if (operandType.userType() )
		{
			operand = operand.genSQLJavaSQLTree();
		}
		/* DB2 doesn't cast string types to numeric types for numeric functions  */

		jdbcType = operandType.getJDBCTypeId();

		/* Both SQRT and ABS are only allowed on numeric types */
		if (!operandType.isNumericTypeId())
			throw StandardException.newException(
						SQLState.LANG_UNARY_FUNCTION_BAD_TYPE, 
						getOperatorString(), operandType.getSQLTypeName());

		/* For SQRT, if operand is not a DOUBLE, convert it to DOUBLE */
       if (kind == K_SQRT &&
            jdbcType != Types.DOUBLE)
		{
            operand = new CastNode(
					operand,
					new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.DOUBLE), true),
					getContextManager());
			((CastNode) operand).bindCastNodeOnly();
		}
	}"
1244,7416545.txt,none,"	public static EvictionActionType valueOfIgnoreCase(final String name) {

		for (EvictionActionType evictionActionType : values()) {
			if (evictionActionType.name().equalsIgnoreCase(name)) {
				return evictionActionType;
			}
		}

		return null;
	}"
1245,6761580.txt,none,"    public APIRequestGet requestProductSetField (boolean value) {
      this.requestField(""product_set"", value);
      return this;
    }"
1246,7238349.txt,none,"  @Override
  public void finishActivity(Activity activity) {
    checkNotNull(controller);
    checkState(controller.get() == activity);
    activity.finish();
    Stage stage = ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);
    switch (stage) {
      case RESUMED:
        controller.pause().stop().destroy();
        return;
      case PAUSED:
        controller.stop().destroy();
        return;
      case STOPPED:
        controller.destroy();
        return;
      default:
        throw new IllegalStateException(
            String.format(
                ""Activity's stage must be RESUMED, PAUSED or STOPPED but was %s."", stage));
    }
  }"
1247,6511643.txt,none,"  public static Class<Float[]> call(Float[] param) {
    return Float[].class;
  }"
1248,7357208.txt,none,"    public UsernamePasswordCredentials(final String username, final String password) {
        super();

        if (username == null) {
            throw new IllegalArgumentException(""Username may not be null"");
        }

        this.username = username;
        this.password = password;
    }"
1249,9481601.txt,none,"  @Override
  public GetCompInstancesResponseProto getCompInstances(
      GetCompInstancesRequestProto request) throws IOException, YarnException {
    try {
      return proxy.getCompInstances(null, request);
    } catch (ServiceException e) {
      RPCUtil.unwrapAndThrowException(e);
    }
    return null;
  }"
1250,8097613.txt,none,"    public final void rule__Action__OperatorAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXtextGrammarTestLanguage.g:6076:1: ( ( ( rule__Action__OperatorAlternatives_2_2_0 ) ) )
            // InternalXtextGrammarTestLanguage.g:6077:2: ( ( rule__Action__OperatorAlternatives_2_2_0 ) )
            {
            // InternalXtextGrammarTestLanguage.g:6077:2: ( ( rule__Action__OperatorAlternatives_2_2_0 ) )
            // InternalXtextGrammarTestLanguage.g:6078:3: ( rule__Action__OperatorAlternatives_2_2_0 )
            {
             before(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0()); 
            // InternalXtextGrammarTestLanguage.g:6079:3: ( rule__Action__OperatorAlternatives_2_2_0 )
            // InternalXtextGrammarTestLanguage.g:6079:4: rule__Action__OperatorAlternatives_2_2_0
            {
            pushFollow(FOLLOW_2);
            rule__Action__OperatorAlternatives_2_2_0();

            state._fsp--;


            }

             after(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1251,7743333.txt,none,"    public static boolean checkExplicitUserPassword(ManagementContext mgmt, String user, String password) {
        BrooklynProperties properties = ((ManagementContextInternal)mgmt).getBrooklynProperties();
        String expectedPassword = properties.getConfig(BrooklynWebConfig.PASSWORD_FOR_USER(user));
        String salt = properties.getConfig(BrooklynWebConfig.SALT_FOR_USER(user));
        String expectedSha256 = properties.getConfig(BrooklynWebConfig.SHA256_FOR_USER(user));
        
        return checkPassword(password, expectedPassword, expectedSha256, salt);
    }"
1252,5389537.txt,none,"    public static boolean is64bitJVM() {
        String arch = System.getProperties().getProperty(""sun.arch.data.model"",
                System.getProperty(""com.ibm.vm.bitmode""));
        return arch != null && arch.equals(""64"");
    }"
1253,7810336.txt,none,"  private void rehash(Entry[] oldMap, int newCount, int newCapacity) {
    int oldCapacity = oldMap.length;

    Entry newMap[] = new Entry[newCapacity];

    synchronized (rehashLock) {
      for (int i = oldCapacity; i-- > 0;) {
        for (Entry old = oldMap[i]; old != null;) {
          Entry e = old;
          old = old.next;

          if (e.value != null && e.value instanceof WeakReference) {
            WeakReference r = (WeakReference) e.value;
            if (r.get() == null) {
              // don't copy this one into the new table since its value was gc'd
              newCount--;
              continue;
            }
          }
          int index = Math.abs(e.key) % newCapacity;
          e.next = newMap[index];
          newMap[index] = e;
        }
      }

      threshold = (int) (newCapacity * loadFactor);
      count = newCount;
      table = newMap;
    }
  }"
1254,7245995.txt,none,"    public void notifyActivated() {
        resetResults();
        
        resetter = Lookup.getDefault().lookup(ObjectsResetter.class);
        resetter.controller = this;
        
        if (getSession().inProgress() && !currentMode.currentSettingsValid()) {
            final String oldMode = currentMode.getName();
            final String newMode = allClassesMode.getName();
            setMode(allClassesMode);
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    ProfilerDialogs.displayInfo(Bundle.MethodsFeature_modeReset(
                                                oldMode, newMode));
                }
            });
        }
    }"
1255,5551982.txt,none,"  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TPrivilegePrincipalType)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    }
  }"
1256,5618836.txt,none,"    public Collection fromRealm(String realmName) {
        if (realmPrincipals == null || realmPrincipals.isEmpty()) {
            return Collections.EMPTY_SET;
        }
        Set principals = realmPrincipals.get(realmName);
        if (principals == null || principals.isEmpty()) {
            principals = Collections.EMPTY_SET;
        }
        return Collections.unmodifiableSet(principals);
    }"
1257,6913795.txt,none,"  @Override
  public void enable() {
    lastBufferEvaluationMs = C.TIME_UNSET;
  }"
1258,3964331.txt,none,"  public void setMatchKeyList(ArrayList<String> matchKeyList)
  {
    this.matchKeyList = matchKeyList;
  }"
1259,5206791.txt,none,"  @Override
  protected void encodeBadge(FacesContext facesContext, AbstractUICommand command) throws IOException {
    final AbstractUIButton button = (AbstractUIButton) command;

    for (final UIComponent child : button.getChildren()) {
      if (child instanceof AbstractUIBadge) {
        child.encodeAll(facesContext);
      }
    }
  }"
1260,7276259.txt,none,"    protected final void setBufferType(int bufferType) {
        if (this.bufferType == bufferType) return;
        if (bufferType == BUFFER_NONE ||
            bufferType == BUFFER_IMAGE ||
            bufferType == BUFFER_VOLATILE_IMAGE) {
            this.bufferType = bufferType;
            releaseOffscreenImage();
            repaintImpl(0, 0, getWidth(), getHeight());
        } else {
            throw new IllegalArgumentException(""Unknown buffer type: "" + bufferType); // NOI18N
        }
    }"
1261,8017975.txt,none,"	@Override
	/** {@inheritDoc} */
	public SubtypeConstraint intersection(final SubtypeConstraint other) {
		final StringSubtypeTreeElement o = (StringSubtypeTreeElement) other;
		if (o instanceof StringSetConstraint) {
			final StringSetConstraint ssc = (StringSetConstraint) o;
			if (ssc.constraintType == constraintType) {
				return new StringSetConstraint(stringType, constraintType,
						constraint.intersection(((StringSetConstraint) o).constraint));
			}
		}

		final StringSetOperation returnValue = new StringSetOperation(stringType, OperationType.INTERSECTION, this, o);
		return returnValue.evaluate();
	}"
1262,5014423.txt,none,"  public XFlattenedColumnTable(XFlattenedColumns flattenedColumns, String table) {
    this.table = table;
    for (XFlattenedColumn column : flattenedColumns.getFlattenedColumn()) {
      XField field = firstNonNull(column.getDimAttribute(), column.getMeasure(), column.getExpression());
      if (field != null) {
        if (!tables.containsKey(field.getClass())) {
          tables.put(field.getClass(), CollectionTableFactory.getCollectionTable(field.getClass(), table));
        }
        tables.get(field.getClass()).getCollection().add(column);
      } else {
        if (column.getChainName() != null) {
          chainNames.add(column.getChainName());
        }
        if (column.getTableName() != null) {
          tableNames.add(column.getTableName());
        }
      }
    }
  }"
1263,3738168.txt,none,"      public Builder clear() {
        super.clear();
        tableId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        schemaName_ = """";
        bitField0_ = (bitField0_ & ~0x00000002);
        tableName_ = """";
        bitField0_ = (bitField0_ & ~0x00000004);
        eventType_ = """";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (oldKeysBuilder_ == null) {
          oldKeys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          oldKeysBuilder_.clear();
        }
        if (keysBuilder_ == null) {
          keys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          keysBuilder_.clear();
        }
        if (columnsBuilder_ == null) {
          columns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          columnsBuilder_.clear();
        }
        executeTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000080);
        pairId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000100);
        syncMode_ = """";
        bitField0_ = (bitField0_ & ~0x00000200);
        syncConsistency_ = """";
        bitField0_ = (bitField0_ & ~0x00000400);
        size_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        remedy_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        sql_ = """";
        bitField0_ = (bitField0_ & ~0x00002000);
        ddlSchemaName_ = """";
        bitField0_ = (bitField0_ & ~0x00004000);
        hint_ = """";
        bitField0_ = (bitField0_ & ~0x00008000);
        withoutSchema_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }"
1264,7671918.txt,none,"    public QMUIAlphaImageButton addRightImageButton(int drawableResId, int viewId) {
        return mTopBar.addRightImageButton(drawableResId, viewId);
    }"
1265,6581292.txt,none,"    public int hashCode() {
        if (hashCode == HASH_INITIAL) {
            hashCode = hashCode * HASH_FACTOR
                    + Util.hashCode(activityRequirementBindings);
            hashCode = hashCode * HASH_FACTOR
                    + Util.hashCode(activityPatternBindings);
            hashCode = hashCode * HASH_FACTOR + Util.hashCode(defined);
            hashCode = hashCode * HASH_FACTOR + Util.hashCode(enabled);
            hashCode = hashCode * HASH_FACTOR + Util.hashCode(id);
            hashCode = hashCode * HASH_FACTOR + Util.hashCode(name);
            if (hashCode == HASH_INITIAL) {
				hashCode++;
			}
        }

        return hashCode;
    }"
1266,7902495.txt,none,"  private ReferenceCountedWriter createReferenceCountedWriter(Path logFilePath) {
    try {
      Files.createDirectories(logFilePath.getParent());
      return new ReferenceCountedWriter(
          new OutputStreamWriter(
              new FileOutputStream(logFilePath.toString()), StandardCharsets.UTF_8));
    } catch (FileNotFoundException e) {
      throw new RuntimeException(String.format(""Could not create file [%s]."", logFilePath), e);
    } catch (IOException e) {
      throw new RuntimeException(String.format(""Exception wrapping file [%s]."", logFilePath), e);
    }
  }"
1267,7136727.txt,none,"  @Override
  public Map<String, Object> getRequestContextLocalAttrs()
  {
    return Collections.unmodifiableMap(_context.getRawRequestContext().getLocalAttrs());
  }"
1268,7294696.txt,none,"	@Override
	public IVMInstall verifyVMInstall(ILaunchConfiguration conf) throws CoreException {
		IVMInstall javaInstall = super.verifyVMInstall(conf);
		IGrailsInstall grailsInstall = GrailsLaunchArgumentUtils.getGrailsInstall(conf);
		grailsInstall.verifyJavaInstall(javaInstall);
		return javaInstall;
	}"
1269,3920271.txt,none,"  public int getIteratorsSize() {
    return (this.iterators == null) ? 0 : this.iterators.size();
  }"
1270,4301341.txt,none,"    public GSSCredentialSpi getCredentialElement(GSSNameSpi name,
                                                 int initLifetime,
                                                 int acceptLifetime,
                                                 int usage)
            throws GSSException {
        if (name != null && !(name instanceof GssNameElement)) {
            name = GssNameElement.getInstance(name.toString(), name.getStringNameType());
        }

        GssCredElement credElement;

        if (usage == GSSCredential.INITIATE_ONLY) {
            credElement = GssInitCred.getInstance(caller, (GssNameElement) name, initLifetime);
        } else if (usage == GSSCredential.ACCEPT_ONLY) {
            credElement = GssAcceptCred.getInstance(caller, (GssNameElement) name, acceptLifetime);
        } else if (usage == GSSCredential.INITIATE_AND_ACCEPT) {
            throw new GSSException(GSSException.FAILURE, -1, ""Unsupported usage mode: INITIATE_AND_ACCEPT"");
        } else {
            throw new GSSException(GSSException.FAILURE, -1, ""Unknown usage mode: "" + usage);
        }

        return credElement;
    }"
1271,4572409.txt,none,"        static GlyphSubstitutionSubtable create(String id, int sequence, int flags, int format, GlyphCoverageTable coverage, List entries) {
            if (format == 1) {
                return new ReverseChainedSingleSubtableFormat1(id, sequence, flags, format, coverage, entries);
            } else {
                throw new UnsupportedOperationException();
            }
        }"
1272,8904487.txt,none,"    @Override
    public Object process(Node nd, Stack<Node> stack, NodeProcessorCtx procCtx,
        Object... nodeOutputs) throws SemanticException {

      MapJoinWalkerCtx ctx = (MapJoinWalkerCtx) procCtx;
      AbstractMapJoinOperator<? extends MapJoinDesc> mapJoin = ctx.getCurrMapJoinOp();
      List<AbstractMapJoinOperator<? extends MapJoinDesc>> listRejectedMapJoins = ctx
          .getListRejectedMapJoins();

      // the mapjoin has already been handled
      if ((listRejectedMapJoins != null) && (listRejectedMapJoins.contains(mapJoin))) {
        return null;
      }
      addNoReducerMapJoinToCtx(ctx, mapJoin);
      return null;
    }"
1273,6270951.txt,none,"	@Override
	protected void blockingFetch(Repository repo, ReplicaFetchRequest req)
			throws NotSupportedException, TransportException {
		try (Transport transport = Transport.open(repo, uri)) {
			RemoteConfig rc = getRemoteConfig();
			if (rc != null) {
				transport.applyConfig(rc);
			}
			fetch(transport, req);
		}
	}"
1274,6981479.txt,none,"  @Override
  public ProjectConfig loadConfiguration(String configFilename) throws InvalidProject {
    return parse(projectConfigs.get(configFilename));
  }"
1275,3727277.txt,none,"    @Override
    public String getString(int parameterIndex) throws SQLException {
        try {
            return stmt.getString(parameterIndex);
        } catch (Throwable t) {
            throw checkException(t);
        }
    }"
1276,4273565.txt,none,"    @Override
    public void init() throws FileSystemException {
        addCapabilities(caps);
    }"
1277,6386818.txt,none,"	@Override
	public final int hashCode() {
		if (hashCode == HASH_CODE_NOT_COMPUTED) {
			hashCode = HASH_INITIAL * HASH_FACTOR + Util.hashCode(root);
			if (hashCode == HASH_CODE_NOT_COMPUTED) {
				hashCode++;
			}
		}
		return hashCode;
	}"
1278,7023035.txt,none,"  public OperationStats(final Operation operation, final long operations, final long bytes, final long latencies,
                        final Map<Integer, Long> statusCodes, long timestampStart, long timestampFinish) {
    this.operation = operation;
    this.operations = operations;
    this.bytes = bytes;
    this.latencies = latencies;
    this.statusCodes = ImmutableSortedMap.copyOf(statusCodes);
    if (this.operations > 0) {
      double average = (double) this.latencies / this.operations;
      this.averageLatency = Math.round(average * 100.00) / 100.00;
    }
    this.runtime = ((double) (timestampFinish - timestampStart)) / TimeUnit.SECONDS.toMillis(1);
  }"
1279,7700031.txt,none,"    public void write(short[] shorts) {
        ensureBufferSize(shorts.length * SizeOf.USHORT);
        for (short s : shorts) {
            writeShort(s);
        }
        if (this.data.position() > this.dataBound) {
            this.dataBound = this.data.position();
        }
    }"
1280,7294753.txt,none,"        @SuppressWarnings(""rawtypes"")
        protected Class createClass(byte[] code, ClassNode classNode) {
            theClass = classNode;
            return super.createClass(code, classNode);
        }"
1281,7501823.txt,none,"    @Override
    public String getNameAndSignature() {
        String className = method.getDeclaringClass().getName();
        return className + ""."" + method.getName() + method.getSignature().toMethodDescriptor();
    }"
1282,9532758.txt,none,"  @Private
  @Unstable
  public static GetQueueInfoResponse newInstance(QueueInfo queueInfo) {
    GetQueueInfoResponse response = Records.newRecord(GetQueueInfoResponse.class);
    response.setQueueInfo(queueInfo);
    return response;
  }"
1283,6147315.txt,none,"	@Override
	public int match(MethodDeclaration node, MatchingNodeSet nodeSet) {
		// this locator matches only references
		return IMPOSSIBLE_MATCH;
	}"
1284,6243619.txt,none,"    public IAnnulusWedgeCriteria create() {
        switch (this) {
        case LEAF_NUMBER:
            return new AnnulusWedgeByLeafs();
        case NODE_SIZE:
            return new AnnulusWedgeByNodeSpace();
        default:
            throw new IllegalArgumentException(
                    ""No implementation is available for the layout option "" + this.toString());
        }
    }"
1285,3725026.txt,none,"    public ImmediatelyThrowsEvent makeImmediatelyThrowsEvent(final int processId,
                                                             final int invokeId,
                                                             final Throwable throwable) {
        if (null == immediatelyThrowsEvent) {
            immediatelyThrowsEvent = new ImmediatelyThrowsEvent(ILLEGAL_PROCESS_ID, ILLEGAL_INVOKE_ID, null);
        }
        unsafe.putInt(immediatelyThrowsEvent, processIdFieldInInvokeEventOffset, processId);
        unsafe.putInt(immediatelyThrowsEvent, invokeIdFieldInInvokeEventOffset, invokeId);
        unsafe.putObject(immediatelyThrowsEvent, throwableFieldInThrowsEventOffset, throwable);
        return immediatelyThrowsEvent;
    }"
1286,8922371.txt,major,"    public void read(org.apache.thrift.protocol.TProtocol iprot, WMTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESOURCE_PLAN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resourcePlanName = iprot.readString();
              struct.setResourcePlanNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRIGGER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerName = iprot.readString();
              struct.setTriggerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRIGGER_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.triggerExpression = iprot.readString();
              struct.setTriggerExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTION_EXPRESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionExpression = iprot.readString();
              struct.setActionExpressionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_IN_UNMANAGED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isInUnmanaged = iprot.readBool();
              struct.setIsInUnmanagedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ns = iprot.readString();
              struct.setNsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }"
1287,3879673.txt,none,"  protected DeleteAlertGroupRequestAuditEvent() {
  }"
1288,4910241.txt,none,"        private long numChildNodes(Node node) throws RepositoryException {
            NodeIterator iterator = node.getNodes();
            if (iterator.getSize() >= 0) {
                return iterator.getSize();
            } else {
                int num = 0;
                while (iterator.hasNext() && num < BUCKET_SIZE) {
                    iterator.nextNode();
                    num++;
                }
                return num;
            }
        }"
1289,4002437.txt,none,"    public AbstractView getView() {
        return view;
    }"
1290,5294252.txt,none,"    protected Builder(InputFile file) {
      this.readSupport = null;
      this.file = checkNotNull(file, ""file"");
      this.path = null;
      if (file instanceof HadoopInputFile) {
        this.conf = ((HadoopInputFile) file).getConfiguration();
      } else {
        this.conf = new Configuration();
      }
      optionsBuilder = HadoopReadOptions.builder(conf);
    }"
1291,7385876.txt,none,"    @Before
    public void setup() throws Exception {
        RepositoryFactorySupport factory = new CouchbaseRepositoryFactory(operationsMapping, indexManager);
        bookRepository = factory.getRepository(BookRepository.class);
        authorRepository = factory.getRepository(AuthorRepository.class);
        addressRepository = factory.getRepository(AddressRepository.class);
    }"
1292,5161273.txt,none,"    public StorageResponseGTScatter(GTScanRequest scanRequest, IPartitionStreamer partitionStreamer,
            StorageContext context) {
        this.info = scanRequest.getInfo();
        this.partitionStreamer = partitionStreamer;
        this.blocks = partitionStreamer.asByteArrayIterator();
        this.columns = scanRequest.getColumns();
        this.groupByDims = scanRequest.getAggrGroupBy();
        this.needSorted = (context.getFinalPushDownLimit() != Integer.MAX_VALUE) || context.isStreamAggregateEnabled();
    }"
1293,4308723.txt,major,"    private LdapComparator<?> classLoadComparator( SchemaManager schemaManager, String oid, String className,
        Attribute byteCode ) throws LdapException
    {
        // Try to class load the comparator
        LdapComparator<?> comparator;
        Class<?> clazz;
        String byteCodeStr = StringConstants.EMPTY;

        if ( byteCode == null )
        {
            try
            {
                clazz = Class.forName( className );
            }
            catch ( ClassNotFoundException cnfe )
            {
                LOG.error( I18n.err( I18n.ERR_16056_CANNOT_FIND_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16057_CANNOT_FIND_CMP_CLASS, cnfe.getMessage() ) );
            }
        }
        else
        {
            classLoader.setAttribute( byteCode );
            
            try
            {
                clazz = classLoader.loadClass( className );
            }
            catch ( ClassNotFoundException cnfe )
            {
                LOG.error( I18n.err( I18n.ERR_16058_CANNOT_LOAD_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16059_CANNOT_LOAD_CMP_CLASS, cnfe.getMessage() ) );
            }

            byteCodeStr = new String( Base64.encode( byteCode.getBytes() ) );
        }

        // Create the comparator instance. Either we have a no argument constructor,
        // or we have one which takes an OID. Lets try the one with an OID argument first
        try
        {
            Constructor<?> constructor = clazz.getConstructor( new Class[]
                { String.class } );
            
            try
            {
                comparator = ( LdapComparator<?> ) constructor.newInstance( oid );
            }
            catch ( InvocationTargetException ite )
            {
                LOG.error( I18n.err( I18n.ERR_16060_CANNOT_INVOKE_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16061_CANNOT_INVOKE_CMP_CLASS, ite.getMessage() ) );
            }
            catch ( InstantiationException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );
            }
            catch ( IllegalAccessException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, ie.getMessage() ) );
            }
        }
        catch ( NoSuchMethodException nsme )
        {
            // Ok, let's try with the constructor without argument.
            // In this case, we will have to check that the OID is the same than
            // the one we got in the Comparator entry
            try
            {
                clazz.getConstructor();
            }
            catch ( NoSuchMethodException nsme2 )
            {
                LOG.error( I18n.err( I18n.ERR_16066_CANNOT_FIND_CMP_CTOR_METH_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16067_CANNOT_FIND_CMP_CTOR_METH, nsme2.getMessage() ) );
            }
            
            try
            { 
                comparator = ( LdapComparator<?> ) clazz.newInstance();
            }
            catch ( InstantiationException ie )
            {
                LOG.error( I18n.err( I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16063_CANNOT_INST_CMP_CLASS, ie.getMessage() ) );
            }
            catch ( IllegalAccessException iae )
            {
                LOG.error( I18n.err( I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR, className ) );
                throw new LdapSchemaException( I18n.err( I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS, iae.getMessage() ) );
            }

            if ( !comparator.getOid().equals( oid ) )
            {
                String msg = I18n.err( I18n.ERR_16021_DIFFERENT_COMPARATOR_OID, oid, comparator.getOid() );
                throw new LdapInvalidAttributeValueException( ResultCodeEnum.UNWILLING_TO_PERFORM, msg, nsme );
            }
        }

        // Update the loadable fields
        comparator.setBytecode( byteCodeStr );
        comparator.setFqcn( className );

        // Inject the SchemaManager for the comparator who needs it
        comparator.setSchemaManager( schemaManager );

        return comparator;
    }"
1294,8674686.txt,minor,"    private void sessionEnd0(@Nullable IgniteInternalTx tx, boolean threwEx) throws IgniteCheckedException {
        try {
            if (tx == null) {
                if (sesLsnrs != null && sesHolder.get().contains(store)) {
                    for (CacheStoreSessionListener lsnr : sesLsnrs)
                        lsnr.onSessionEnd(locSes, !threwEx);
                }

                if (!sesHolder.get().ended(store))
                    store.sessionEnd(!threwEx);
            }
        }
        catch (Exception e) {
            if (!threwEx)
                throw U.cast(e);
        }
        finally {
            if (sesHolder != null)
                sesHolder.set(null);
        }
    }"
1295,4448520.txt,none,"    @Override
    public void output() {
      if (work.obj != null) {
        com.clearspring.analytics.stream.cardinality.HyperLogLog hll =
                (com.clearspring.analytics.stream.cardinality.HyperLogLog) work.obj;

        try {
          byte[] ba = hll.getBytes();
          out.buffer = buffer.reallocIfNeeded(ba.length);
          out.start = 0;
          out.end = ba.length;
          out.buffer.setBytes(0, ba);
          out.isSet = 1;
        } catch (java.io.IOException e) {
          throw new org.apache.drill.common.exceptions.DrillRuntimeException(""Failed to get HyperLogLog output"", e);
        }
      } else {
        out.isSet = 0;
      }
    }"
1296,8903115.txt,none,"  @Override
  public int compareTo(RecordIdentifier other) {
    if (other.getClass() != RecordIdentifier.class) {
      //WTF?  assumes that other instanceof OrcRawRecordMerger.ReaderKey???
      return -other.compareTo(this);
    }
    return compareToInternal(other);
  }"
1297,7077563.txt,none,"    public void setExtendedKeyUsage(Set<String> keyPurposeSet) throws IOException {
        if ((keyPurposeSet == null) || keyPurposeSet.isEmpty()) {
            this.keyPurposeSet = null;
            keyPurposeOIDSet = null;
        } else {
            this.keyPurposeSet =
                Collections.unmodifiableSet(new HashSet<String>(keyPurposeSet));
            keyPurposeOIDSet = new HashSet<ObjectIdentifier>();
            for (String s : this.keyPurposeSet) {
                keyPurposeOIDSet.add(new ObjectIdentifier(s));
            }
        }
    }"
1298,6569509.txt,none,"    public final void rule__XSynchronizedExpression__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalEntities.g:13463:1: ( rule__XSynchronizedExpression__Group__1__Impl rule__XSynchronizedExpression__Group__2 )
            // InternalEntities.g:13464:2: rule__XSynchronizedExpression__Group__1__Impl rule__XSynchronizedExpression__Group__2
            {
            pushFollow(FOLLOW_66);
            rule__XSynchronizedExpression__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__XSynchronizedExpression__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1299,7360627.txt,none,"	@Override
	public ReactiveCassandraBatchOperations delete(Iterable<?> entities, WriteOptions options) {

		assertNotExecuted();

		Assert.notNull(entities, ""Entities must not be null"");
		Assert.notNull(options, ""WriteOptions must not be null"");

		this.batchMonos.add(Mono.just(doDelete(entities, options)));

		return this;
	}"
1300,8723959.txt,none,"void headerHideToolTip() {
	if (toolTipShell == null) return;
	for (int toolTipEvent : toolTipEvents) {
		header.removeListener (toolTipEvent, toolTipListener);
	}
	toolTipShell.dispose ();
	toolTipShell = null;
	toolTipLabel = null;
}"
1301,7749788.txt,none,"    public static int execSingleProcess(List<String> cmdWords, Map<String,?> env, File directory, OutputStream out, OutputStream err, Object contextForLogging) {
        StreamGobbler errgobbler = null;
        StreamGobbler outgobbler = null;
        
        ProcessBuilder pb = new ProcessBuilder(cmdWords);
        if (env!=null) {
            for (Map.Entry<String,?> kv: env.entrySet()) pb.environment().put(kv.getKey(), String.valueOf(kv.getValue())); 
        }
        if (directory != null) {
            pb.directory(directory);
        }
        
        try {
            Process p = pb.start();
            
            if (out != null) {
                InputStream outstream = p.getInputStream();
                outgobbler = new StreamGobbler(outstream, out, (Logger) null);
                outgobbler.start();
            }
            if (err != null) {
                InputStream errstream = p.getErrorStream();
                errgobbler = new StreamGobbler(errstream, err, (Logger) null);
                errgobbler.start();
            }
            
            int result = p.waitFor();
            
            if (outgobbler != null) outgobbler.blockUntilFinished();
            if (errgobbler != null) errgobbler.blockUntilFinished();
            
            if (result==255)
                // this is not definitive, but tests (and code?) expects throw exception if can't connect;
                // only return exit code when it is exit code from underlying process;
                // we have no way to distinguish 255 from ssh failure from 255 from the command run through ssh ...
                // but probably 255 is from CLI ssh
                throw new SshException(""exit code 255 from CLI ssh; probably failed to connect"");
            
            return result;
        } catch (InterruptedException e) {
            throw Exceptions.propagate(e);
        } catch (IOException e) {
            throw Exceptions.propagate(e);
        } finally {
            closeWhispering(outgobbler, contextForLogging, ""execProcess"");
            closeWhispering(errgobbler, contextForLogging, ""execProcess"");
        }
    }"
1302,3698860.txt,none,"    @Override
    public String toString() {
        return ""RouteMeta{"" +
                ""type="" + type +
                "", rawType="" + rawType +
                "", destination="" + destination +
                "", path='"" + path + '\'' +
                "", group='"" + group + '\'' +
                "", priority="" + priority +
                "", extra="" + extra +
                "", paramsType="" + paramsType +
                "", name='"" + name + '\'' +
                '}';
    }"
1303,9375078.txt,none,"        private PublishingBodySubscriber() {
            completionCF = new MinimalFuture<>();
            completionCF.whenComplete(
                    (r,t) -> subscribedCF.thenAccept( s -> complete(s, t)));
        }"
1304,4430308.txt,none,"    public IndexDefinition[] getIndexes() {
        return indexes;
    }"
1305,4745800.txt,none,"    private void checkAccess(int index) throws ArrayIndexOutOfBoundsException {
        if (index < 0 || index >= size) {
            throw new ArrayIndexOutOfBoundsException();
        }
    }"
1306,7599926.txt,none,"	static JwtHeader create(Signer signer, Map<String, String> params) {
		Map<String, String> map = new LinkedHashMap<String, String>(params);
		map.put(""alg"", sigAlg(signer.algorithm()));
		HeaderParameters p = new HeaderParameters(map);
		return new JwtHeader(serializeParams(p), p);
	}"
1307,8008599.txt,none,"	public Class<? extends ContentAssistContext.Factory> bindContentAssistContext$Factory() {
		return DelegatingContentAssistContextFactory.class;
	}"
1308,3986210.txt,none,"    public static Class<?> createProxyClass(ClassLoader mainTypeClassLoader, Class<?>[] interfaces) {
        ClassLoader effectiveClassLoader = Thread.currentThread().getContextClassLoader();
        if (effectiveClassLoader == null) {
            effectiveClassLoader = mainTypeClassLoader;
        }
        return Proxy.getProxyClass(effectiveClassLoader, interfaces);
    }"
1309,3859697.txt,none,"    public synchronized void setDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
    }"
1310,7803956.txt,none,"  @Override
  public void afterUpdate(EntryEvent<K, V> event) {
    addEvent(event);
    try {
      afterUpdate2(event);
    } catch (VirtualMachineError e) {
      SystemFailure.initiateFailure(e);
      throw e;
    } catch (Throwable t) {
      this.callbackError = t;
    }
  }"
1311,5596973.txt,none,"    private static int[][] getCoordinates(List<ShapeRecord> records)
    {
        int[][] coordinates = new int[records.size()][2];
        ShapeRecord record;
        for(int i=0; i<records.size(); i++)
        {
            record = records.get(i);
            if (record instanceof StyleChangeRecord)
            {
                StyleChangeRecord scr = (StyleChangeRecord)record;
                coordinates[i][0] = scr.getMoveDeltaX();
                coordinates[i][1] = scr.getMoveDeltaY();
            }
            else if (record instanceof StraightEdgeRecord)
            {
                StraightEdgeRecord ser = (StraightEdgeRecord)record;
                coordinates[i][0] = coordinates[i-1][0] + ser.getDeltaX();
                coordinates[i][1] = coordinates[i-1][1] + ser.getDeltaY();
            }
            else if (record instanceof CurvedEdgeRecord)
            {
                CurvedEdgeRecord cer = (CurvedEdgeRecord)record;                    
                coordinates[i][0] = coordinates[i-1][0] + cer.getControlDeltaX() + cer.getAnchorDeltaX();
                coordinates[i][1] = coordinates[i-1][1] + cer.getControlDeltaY() + cer.getAnchorDeltaY();
            }                  
        }
        return coordinates;
    }"
1312,5578507.txt,none,"  public static ConcurrentCompositeConfiguration createLocalConfig() {
    MicroserviceConfigLoader loader = new MicroserviceConfigLoader();
    loader.loadAndSort();
    if (localConfig.size() > 0) {
      ConfigModel model = new ConfigModel();
      model.setConfig(localConfig);
      loader.getConfigModels().add(model);
    }

    LOGGER.info(""create local config:"");
    for (ConfigModel configModel : loader.getConfigModels()) {
      LOGGER.info("" {}."", configModel.getUrl());
    }

    ConcurrentCompositeConfiguration config = ConfigUtil.createLocalConfig(loader.getConfigModels());
    ConfigUtil.setMicroserviceConfigLoader(config, loader);
    return config;
  }"
1313,4475154.txt,none,"	static boolean isPronoun (Markable m) {
		if (m.getContent() instanceof BaseToken) {
			BaseToken t = (BaseToken) m.getContent();
			if (t.getPartOfSpeech().startsWith(""PRP"")) // TODO: since only 3rd person pronouns are added as markables, no need to check
				return true;
		}
		return false;
	}"
1314,5040675.txt,none,"    @Override
    public void sync() {
        if ( dirty )
            writeState();
    }"
1315,5723163.txt,none,"  @Override
  public Expr visitDatetime_literal(@NotNull Datetime_literalContext ctx) {
    if (checkIfExist(ctx.time_literal())) {
      return visitTime_literal(ctx.time_literal());
    } else if (checkIfExist(ctx.date_literal())) {
      return visitDate_literal(ctx.date_literal());
    } else if (checkIfExist(ctx.interval_literal())) {
      return visitInterval_literal(ctx.interval_literal());
    } else {
      return visitTimestamp_literal(ctx.timestamp_literal());
    }
  }"
1316,8039190.txt,none,"    public final void mT__60() throws RecognitionException {
        try {
            int _type = T__60;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalSequencerTestLanguage.g:57:7: ( 'kwp3' )
            // InternalSequencerTestLanguage.g:57:9: 'kwp3'
            {
            match(""kwp3""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
1317,8812297.txt,none,"    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CS_EXCEPTION:
        return getCsException();

      }
      throw new IllegalStateException();
    }"
1318,4909319.txt,none,"    @Override
    public ConcurrentMap<K, V> asMap() {
        return new ConcurrentMap<K, V>() {

            @Override
            public int size() {
                long size = CacheLIRS.this.size();
                return (int) Math.min(size, Integer.MAX_VALUE);
            }

            @Override
            public boolean isEmpty() {
                return CacheLIRS.this.size() == 0;
            }

            @Override
            public boolean containsKey(Object key) {
                return CacheLIRS.this.containsKey(key);
            }

            @Override
            public boolean containsValue(Object value) {
                return CacheLIRS.this.containsValue(value);
            }

            @SuppressWarnings(""unchecked"")
            @Override
            public V get(Object key) {
                return CacheLIRS.this.peek((K) key);
            }

            @Override
            public V put(K key, V value) {
                return CacheLIRS.this.put(key, value, sizeOf(key, value));
            }

            @Override
            public V remove(Object key) {
                @SuppressWarnings(""unchecked"")
                V old = CacheLIRS.this.getUnchecked((K) key);
                CacheLIRS.this.invalidate(key);
                return old;
            }

            @Override
            public void putAll(Map<? extends K, ? extends V> m) {
                for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
                    put(e.getKey(), e.getValue());
                }                
            }

            @Override
            public void clear() {
                CacheLIRS.this.clear();
            }

            @Override
            public Set<K> keySet() {
                return CacheLIRS.this.keySet();
            }

            @Override
            public Collection<V> values() {
                return CacheLIRS.this.values();
            }

            @Override
            public Set<java.util.Map.Entry<K, V>> entrySet() {
                return CacheLIRS.this.entrySet();
            }

            @Override
            public V putIfAbsent(K key, V value) {
                return CacheLIRS.this.putIfAbsent(key, value);
            }

            @Override
            public boolean remove(Object key, Object value) {
                return CacheLIRS.this.remove(key, value);
            }

            @Override
            public boolean replace(K key, V oldValue, V newValue) {
                return CacheLIRS.this.replace(key, oldValue, newValue);
            }

            @Override
            public V replace(K key, V value) {
                return CacheLIRS.this.replace(key, value);
            }
            
        };
    }"
1319,7580470.txt,minor,"	static ResolvableType forType(
			@Nullable Type type, @Nullable TypeProvider typeProvider, @Nullable VariableResolver variableResolver) {

		if (type == null && typeProvider != null) {
			type = SerializableTypeWrapper.forTypeProvider(typeProvider);
		}
		if (type == null) {
			return NONE;
		}

		// For simple Class references, build the wrapper right away -
		// no expensive resolution necessary, so not worth caching...
		if (type instanceof Class) {
			return new ResolvableType(type, typeProvider, variableResolver, (ResolvableType) null);
		}

		// Purge empty entries on access since we don't have a clean-up thread or the like.
		cache.purgeUnreferencedEntries();

		// Check the cache - we may have a ResolvableType which has been resolved before...
		ResolvableType resultType = new ResolvableType(type, typeProvider, variableResolver);
		ResolvableType cachedType = cache.get(resultType);
		if (cachedType == null) {
			cachedType = new ResolvableType(type, typeProvider, variableResolver, resultType.hash);
			cache.put(cachedType, cachedType);
		}
		resultType.resolved = cachedType.resolved;
		return resultType;
	}"
1320,7725810.txt,none,"    String get(String subsystem, String name, boolean verboseResolution) {
        String key = buildKey(subsystem, name);
        String value = getProperty(key);
        if (value == null) {
            key = toSnakeUpperCase(Utils.PROPERTY_NAME_PREFIX + subsystem).replace(""."", """");
            key = key + '_' + toSnakeUpperCase(name);
            value = getEnv(key);
            if (value != null) {
                logFoundEnvVar(verboseResolution, key, value);
            }
        } else {
            logFoundSystemProperty(verboseResolution, key, value);
        }

        if (value == null || value.length() == 0) {
            return null;
        }

        return value;
    }"
1321,6536222.txt,none,"    private URI map(String pathWithScheme) {
        java.net.URI javaNetUri = toURI(pathWithScheme, clientLocation);
        logger.trace(""Going to map path {}"", javaNetUri);
        URI ret = URI.createURI(toPathAsInXtext212(javaNetUri));
        logger.trace(""Mapped path {} to {}"", pathWithScheme, ret);
        return ret;
    }"
1322,5326926.txt,major,"    public SystemDiagnosticsDTO createSystemDiagnosticsDto(final SystemDiagnostics sysDiagnostics) {

        final SystemDiagnosticsDTO dto = new SystemDiagnosticsDTO();
        final SystemDiagnosticsSnapshotDTO snapshot = new SystemDiagnosticsSnapshotDTO();
        dto.setAggregateSnapshot(snapshot);

        snapshot.setStatsLastRefreshed(new Date(sysDiagnostics.getCreationTimestamp()));

        // processors
        snapshot.setAvailableProcessors(sysDiagnostics.getAvailableProcessors());
        snapshot.setProcessorLoadAverage(sysDiagnostics.getProcessorLoadAverage());

        // threads
        snapshot.setDaemonThreads(sysDiagnostics.getDaemonThreads());
        snapshot.setTotalThreads(sysDiagnostics.getTotalThreads());

        // heap
        snapshot.setMaxHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxHeap()));
        snapshot.setMaxHeapBytes(sysDiagnostics.getMaxHeap());
        snapshot.setTotalHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalHeap()));
        snapshot.setTotalHeapBytes(sysDiagnostics.getTotalHeap());
        snapshot.setUsedHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedHeap()));
        snapshot.setUsedHeapBytes(sysDiagnostics.getUsedHeap());
        snapshot.setFreeHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeHeap()));
        snapshot.setFreeHeapBytes(sysDiagnostics.getFreeHeap());
        if (sysDiagnostics.getHeapUtilization() != -1) {
            snapshot.setHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getHeapUtilization()));
        }

        // non heap
        snapshot.setMaxNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxNonHeap()));
        snapshot.setMaxNonHeapBytes(sysDiagnostics.getMaxNonHeap());
        snapshot.setTotalNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalNonHeap()));
        snapshot.setTotalNonHeapBytes(sysDiagnostics.getTotalNonHeap());
        snapshot.setUsedNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedNonHeap()));
        snapshot.setUsedNonHeapBytes(sysDiagnostics.getUsedNonHeap());
        snapshot.setFreeNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeNonHeap()));
        snapshot.setFreeNonHeapBytes(sysDiagnostics.getFreeNonHeap());
        if (sysDiagnostics.getNonHeapUtilization() != -1) {
            snapshot.setNonHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getNonHeapUtilization()));
        }

        // flow file disk usage
        final SystemDiagnosticsSnapshotDTO.StorageUsageDTO flowFileRepositoryStorageUsageDto = createStorageUsageDTO(null, sysDiagnostics.getFlowFileRepositoryStorageUsage());
        snapshot.setFlowFileRepositoryStorageUsage(flowFileRepositoryStorageUsageDto);

        // content disk usage
        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> contentRepositoryStorageUsageDtos = new LinkedHashSet<>();
        snapshot.setContentRepositoryStorageUsage(contentRepositoryStorageUsageDtos);
        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getContentRepositoryStorageUsage().entrySet()) {
            contentRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));
        }

        // provenance disk usage
        final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO> provenanceRepositoryStorageUsageDtos = new LinkedHashSet<>();
        snapshot.setProvenanceRepositoryStorageUsage(provenanceRepositoryStorageUsageDtos);
        for (final Map.Entry<String, StorageUsage> entry : sysDiagnostics.getProvenanceRepositoryStorageUsage().entrySet()) {
            provenanceRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(), entry.getValue()));
        }

        // garbage collection
        final Set<SystemDiagnosticsSnapshotDTO.GarbageCollectionDTO> garbageCollectionDtos = new LinkedHashSet<>();
        snapshot.setGarbageCollection(garbageCollectionDtos);
        for (final Map.Entry<String, GarbageCollection> entry : sysDiagnostics.getGarbageCollection().entrySet()) {
            garbageCollectionDtos.add(createGarbageCollectionDTO(entry.getKey(), entry.getValue()));
        }

        // version info
        final SystemDiagnosticsSnapshotDTO.VersionInfoDTO versionInfoDto = createVersionInfoDTO();
        snapshot.setVersionInfo(versionInfoDto);

        // uptime
        snapshot.setUptime(FormatUtils.formatHoursMinutesSeconds(sysDiagnostics.getUptime(), TimeUnit.MILLISECONDS));

        return dto;
    }"
1323,4950142.txt,none,"	@Override /* BeanContextBuilder */
	public JsonSchemaGeneratorBuilder useInterfaceProxies(boolean value) {
		super.useInterfaceProxies(value);
		return this;
	}"
1324,8246323.txt,none,"    private void setResponse(CachedSourceResponse response) throws IOException {
        this.response = response;
        if (this.expires != 0) {
            try {
                this.cache.store(this.cacheKey, this.response);
            } catch (ProcessingException e) {
                throw new CascadingIOException(""Failure storing response."", e);
            }
        }
    }"
1325,7432284.txt,major,"	private void setOptionalAttribute(BeanDefinitionBuilder builder,
				Map<String, Object> providedProperties,
				String propertyPrefix,
				String attributeValue,
				String attributeName) {
		String propertyKey;
		if (""username"".equals(attributeName)) {
			String userKey = (propertyPrefix != null ?
					propertyPrefix + ""user"" :
					""user"");
			if (providedProperties.containsKey(userKey)) {
				propertyKey = userKey;
			}
			else {
				propertyKey = (propertyPrefix != null ?
						propertyPrefix + attributeName :
						attributeName);
			}
		}
		else {
			propertyKey = (propertyPrefix != null ?
					propertyPrefix + attributeToPropertyMap.get(attributeName) :
					attributeToPropertyMap.get(attributeName));
		}

		if (StringUtils.hasText(attributeValue)) {
			if (logger.isDebugEnabled()) {
				if (""password"".equals(attributeName)) {
					logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
							"" with attribute value ******"");
				}
				else {
					logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
							"" with attribute value "" + attributeValue);
				}
			}
			builder.addPropertyValue(attributeToPropertyMap.get(attributeName), attributeValue);
		}
		else if (providedProperties.containsKey(propertyKey)) {
			if (logger.isDebugEnabled()) {
				logger.debug(""Registering optional attribute "" + attributeToPropertyMap.get(attributeName) +
						"" with property value "" +
						(""password"".equals(attributeName) ? ""******"" : providedProperties.get(propertyKey)));
			}
			builder.addPropertyValue(attributeToPropertyMap.get(attributeName), providedProperties.get(propertyKey));
		}
		removeProvidedProperty(providedProperties, propertyKey);
	}"
1326,8494231.txt,minor,"    @Override
    public List<? extends Host> discoverHosts(final AddHostCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
        Long dcId = cmd.getZoneId();
        final Long podId = cmd.getPodId();
        final Long clusterId = cmd.getClusterId();
        String clusterName = cmd.getClusterName();
        final String url = cmd.getUrl();
        final String username = cmd.getUsername();
        final String password = cmd.getPassword();
        final List<String> hostTags = cmd.getHostTags();

        dcId = _accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(), dcId);

        // this is for standalone option
        if (clusterName == null && clusterId == null) {
            clusterName = ""Standalone-"" + url;
        }

        if (clusterId != null) {
            final ClusterVO cluster = _clusterDao.findById(clusterId);
            if (cluster == null) {
                final InvalidParameterValueException ex = new InvalidParameterValueException(""can not find cluster for specified clusterId"");
                ex.addProxyObject(clusterId.toString(), ""clusterId"");
                throw ex;
            } else {
                if (cluster.getGuid() == null) {
                    final List<HostVO> hosts = listAllHostsInCluster(clusterId);
                    if (!hosts.isEmpty()) {
                        final CloudRuntimeException ex =
                                new CloudRuntimeException(""Guid is not updated for cluster with specified cluster id; need to wait for hosts in this cluster to come up"");
                        ex.addProxyObject(cluster.getUuid(), ""clusterId"");
                        throw ex;
                    }
                }
            }
        }

        return discoverHostsFull(dcId, podId, clusterId, clusterName, url, username, password, cmd.getHypervisor(), hostTags, cmd.getFullUrlParams(), false);
    }"
1327,3775458.txt,none,"    private static short checkAndCastYear(int year)
    {
        if (year < 1 || year > 9999)
        {
            throw new IllegalArgumentException(String.format(""Year %s must be between 1 and 9999 inclusive"", year));
        }

        return (short) year;
    }"
1328,4371443.txt,none,"    public static String getOpenIdScope() {
        return OPENID_SCOPE;
    }"
1329,4098093.txt,none,"    @Override
    public void close() throws HyracksDataException {
        Throwable failure = releaseResources();
        failure = CleanupUtils.close(writer, failure);
        if (failure != null) {
            throw HyracksDataException.create(failure);
        }
    }"
1330,4140914.txt,none,"    public Collection<Function> getFunctions(String name) {
      return CalciteSchema.this.getFunctions(name, true);
    }"
1331,9147019.txt,none,"	public EList<Trigger> getTriggers( )
	{
		if ( triggers == null )
		{
			triggers = new EObjectContainmentEList<Trigger>( Trigger.class,
					this,
					ComponentPackage.MARKER_RANGE__TRIGGERS );
		}
		return triggers;
	}"
1332,9414619.txt,none,"    private static void relinkComposableInvoker(final CallSite cs, final CompiledFunction inv, final boolean constructor) {
        final HandleAndAssumptions handleAndAssumptions = inv.getValidOptimisticInvocation(new Supplier<MethodHandle>() {
            @Override
            public MethodHandle get() {
                return inv.getInvokerOrConstructor(constructor);
            }
        });
        final MethodHandle handle = handleAndAssumptions.handle;
        final SwitchPoint assumptions = handleAndAssumptions.assumptions;
        final MethodHandle target;
        if(assumptions == null) {
            target = handle;
        } else {
            final MethodHandle relink = MethodHandles.insertArguments(RELINK_COMPOSABLE_INVOKER, 0, cs, inv, constructor);
            target = assumptions.guardWithTest(handle, MethodHandles.foldArguments(cs.dynamicInvoker(), relink));
        }
        cs.setTarget(target.asType(cs.type()));
    }"
1333,7337628.txt,none,"    private static String[] getColumnProperties() {
        final String[] columnProperties = new String[COLUMN_DATA.length];
        for (int i = 0; i < columnProperties.length; i++) {
            columnProperties[i] = COLUMN_DATA[i].name;
        }
        return columnProperties;
    }"
1334,6537386.txt,none,"    private static String getInputLabel(TranslationProvider i18nProvider, Bundle bundle, String moduleTypeUID,
            String inputName, String defaultLabel, Locale locale) {
        String key = I18nUtil.stripConstantOr(defaultLabel, () -> inferInputKey(moduleTypeUID, inputName, ""label""));
        return i18nProvider.getText(bundle, key, defaultLabel, locale);
    }"
1335,4217571.txt,none,"    private static String[] enumerationToArray(Enumeration<String> values) {
        ArrayList<String> list = new ArrayList<String>();

        while (values.hasMoreElements()) {
            list.add(values.nextElement());
        }

        return list.toArray(new String[list.size()]);
    }"
1336,5858827.txt,none,"    @Override
    public void init()
    {
        super.init();
        this.introspector = new Introspector(this.log);
    }"
1337,7745170.txt,none,"    protected void checkDuringManage() {
        if (!inManage.get() || app == null) {
            throw new IllegalStateException(""Operation only permitted during manage, e.g. called from doBuild() of ""+this);
        }
    }"
1338,4301198.txt,none,"        @Override
        public int getValue() {
            return ordinal();
        }"
1339,9517356.txt,none,"  private void writeRawBytes(Writable writable) throws IOException {
    if (writable instanceof BytesWritable) {
      BytesWritable bw = (BytesWritable) writable;
      byte[] bytes = bw.getBytes();
      int length = bw.getLength();
      clientOut.writeInt(length);
      clientOut.write(bytes, 0, length);
    } else {
      bufferOut.reset();
      writable.write(bufferDataOut);
      byte[] bytes = bufferOut.toByteArray();
      clientOut.writeInt(bytes.length);
      clientOut.write(bytes);
    }
  }"
1340,8970572.txt,none,"  default BooleanConsumer andThen(BooleanConsumer after) {
    Objects.requireNonNull(after);
    return (boolean t) -> { accept(t); after.accept(t); };
  }"
1341,7747391.txt,none,"    @Override
    public void onManagementStarting() {
        super.onManagementStarting();
        
        exchange = (getConfig(EXCHANGE_NAME) != null) ? getConfig(EXCHANGE_NAME) : getDefaultExchangeName();
        virtualHost = getConfig(RabbitBroker.VIRTUAL_HOST_NAME);
        sensors().set(RabbitBroker.VIRTUAL_HOST_NAME, virtualHost);
        
        machine = (SshMachineLocation) Iterables.find(getParent().getLocations(), Predicates.instanceOf(SshMachineLocation.class));
        shellEnvironment = getParent().getShellEnvironment();
    }"
1342,3945316.txt,none,"	public Clause getClause(Resource resource) {
		String symbolicName = ResourceHelper.getSymbolicNameAttribute(resource);
		Version version = ResourceHelper.getVersionAttribute(resource);
		String type = ResourceHelper.getTypeAttribute(resource);
		for (Clause clause : clauses) {
			if (symbolicName.equals(clause.getPath())
					&& clause.getDeployedVersion().equals(version)
					&& type.equals(clause.getType()))
				return clause;
		}
		return null;
	}"
1343,6372035.txt,none,"	@Override
	protected Control createControl(Composite parent) {
		Font font = parent.getFont();
		Color bg = parent.getBackground();

		button = new Button(parent, getStyle() | SWT.CHECK);
		button.setFont(font);
		button.setBackground(bg);

		button.addKeyListener(new KeyAdapter() {

			@Override
			public void keyReleased(KeyEvent e) {
				if( e.character == SWT.ESC ) {
					fireCancelEditor();
				}
			}

		});

		return button;
	}"
1344,6417561.txt,none,"    private IFileEditorMapping[] getInput() {
        //Filter the mappings to be just those with a wildcard extension
        if (currentInput == null) {
            List wildcardEditors = new ArrayList();
            IFileEditorMapping[] allMappings = ((EditorRegistry)PlatformUI.getWorkbench()
                    .getEditorRegistry()).getUnifiedMappings();
            for (IFileEditorMapping allMapping : allMappings) {
                if (allMapping.getName().equals(""*"")) { //$NON-NLS-1$
					wildcardEditors.add(allMapping);
				}
            }
            currentInput = new IFileEditorMapping[wildcardEditors.size()];
            wildcardEditors.toArray(currentInput);
        }
        return currentInput;
    }"
1345,8536673.txt,none,"    public String getDisplayText() {
        return displayText;
    }"
1346,7551760.txt,none,"	@Override
	public <T> T getValue(Class<T> desiredResultType) throws EvaluationException {
		return org.springframework.expression.common.ExpressionUtils
				.convertTypedValue(null, this.typedResultValue, desiredResultType);
	}"
1347,8894493.txt,none,"  public void unsetTable_name() {
    this.table_name = null;
  }"
1348,5602164.txt,major,"    @Test
    public void writeRead() throws IOException {
        try (XSSFWorkbook workbook = XSSFTestDataSamples.openSampleWorkbook(""WithVariousData.xlsx"")) {
            XSSFSheet sheet1 = workbook.getSheetAt(0);
            XSSFSheet sheet2 = workbook.getSheetAt(1);

            assertTrue(sheet1.hasComments());
            assertFalse(sheet2.hasComments());

            // Change on comment on sheet 1, and add another into
            //  sheet 2
            Row r5 = sheet1.getRow(4);
            Comment cc5 = r5.getCell(2).getCellComment();
            cc5.setAuthor(""Apache POI"");
            cc5.setString(new XSSFRichTextString(""Hello!""));

            Row r2s2 = sheet2.createRow(2);
            Cell c1r2s2 = r2s2.createCell(1);
            assertNull(c1r2s2.getCellComment());

            Drawing<?> dg = sheet2.createDrawingPatriarch();
            Comment cc2 = dg.createCellComment(new XSSFClientAnchor());
            cc2.setAuthor(""Also POI"");
            cc2.setString(new XSSFRichTextString(""A new comment""));
            c1r2s2.setCellComment(cc2);

            // Save, and re-load the file
            try (XSSFWorkbook workbookBack = XSSFTestDataSamples.writeOutAndReadBack(workbook)) {
                // Check we still have comments where we should do
                sheet1 = workbookBack.getSheetAt(0);
                sheet2 = workbookBack.getSheetAt(1);
                assertNotNull(sheet1.getRow(4).getCell(2).getCellComment());
                assertNotNull(sheet1.getRow(6).getCell(2).getCellComment());
                assertNotNull(sheet2.getRow(2).getCell(1).getCellComment());

                // And check they still have the contents they should do
                assertEquals(""Apache POI"",
                        sheet1.getRow(4).getCell(2).getCellComment().getAuthor());
                assertEquals(""Nick Burch"",
                        sheet1.getRow(6).getCell(2).getCellComment().getAuthor());
                assertEquals(""Also POI"",
                        sheet2.getRow(2).getCell(1).getCellComment().getAuthor());

                assertEquals(""Hello!"",
                        sheet1.getRow(4).getCell(2).getCellComment().getString().getString());
            }
        }
    }"
1349,5409414.txt,none,"    @GET
    @Path(""list"")
    public Collection<Subject> list() {
        return dao.findAll();
    }"
1350,8956366.txt,none,"    public WMDropPoolRequestTupleScheme getScheme() {
      return new WMDropPoolRequestTupleScheme();
    }"
1351,4437678.txt,none,"    public LaterunEvent(String clusterName, String wfId, String parentId, long msgInsertTime,
                        long delay, String entityType, String entityName,
                        String instance, int runId, String workflowUser) {
        super(clusterName, wfId, parentId, msgInsertTime, delay, entityType, entityName,
                instance, runId, workflowUser);
    }"
1352,5839532.txt,none,"    public static String adjustRelativePath(String path) throws FileNotFoundException {
        // Empty or null path can't point to anything useful. The assumption is
        // that the value is deliberately empty / null so leave it that way.
        if (path == null || path.length() == 0) {
            return path;
        }
        String newPath = path;
        File f = new File(newPath);
        if ( !f.isAbsolute()) {
            newPath = System.getProperty(Constants.CATALINA_BASE_PROP) + File.separator + newPath;
            f = new File(newPath);
        }
        if (!f.exists()) {
            throw new FileNotFoundException(sm.getString(""sslHostConfig.fileNotFound"", newPath));
        }
        return newPath;
    }"
1353,4318037.txt,none,"    @Override
    CostEstimate getFinalCostEstimate()
		throws StandardException
	{
		if (getCandidateFinalCostEstimate() != null)
        {
			return getCandidateFinalCostEstimate();
        }

		CostEstimate leftCE = leftResultSet.getFinalCostEstimate();
		CostEstimate rightCE = rightResultSet.getFinalCostEstimate();

		setCandidateFinalCostEstimate( getNewCostEstimate() );
		getCandidateFinalCostEstimate().setCost(
			leftCE.getEstimatedCost() + rightCE.getEstimatedCost(),
			getRowCountEstimate(leftCE.rowCount(), rightCE.rowCount()),
			getSingleScanRowCountEstimate(leftCE.singleScanRowCount(),
				rightCE.singleScanRowCount()));

		return getCandidateFinalCostEstimate();
	}"
1354,6471245.txt,none,"	public JavaVMOption(String optionString, ImagePointer extraInfo) {
		if (optionString == null) {
			throw new IllegalArgumentException();
		}
		_optionString = optionString;
		_extraInfo = extraInfo;
	}"
1355,8030414.txt,minor,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_1 = input.LA(1);

                         
                        int index102_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_InternalDomainmodel()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index102_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }"
1356,7031904.txt,none,"    @Deprecated
    public AmazonS3EncryptionClient(AWSCredentials credentials,
            EncryptionMaterialsProvider encryptionMaterialsProvider) {
        this(credentials, encryptionMaterialsProvider,
                configFactory.getConfig(), new CryptoConfiguration());
    }"
1357,9267168.txt,none,"    public static ValueNode create(ValueNode forValue, ConstantReflectionProvider constantReflection) {
        if (forValue instanceof NewArrayNode) {
            NewArrayNode newArray = (NewArrayNode) forValue;
            return newArray.length();
        }

        ValueNode length = readArrayLength(forValue, constantReflection);
        if (length != null) {
            return length;
        }
        return new ArrayLengthNode(forValue);
    }"
1358,6492213.txt,none,"	public IRIFunction(ValueExpr arg) {
		super(arg);
	}"
1359,7628757.txt,none,"	private void formatElement(IProgressMonitor monitor) {
		FormatProcessorXML formatProcessor = new FormatProcessorXML();
		formatProcessor.setProgressMonitor(monitor);
		formatProcessor.getFormatPreferences().setClearAllBlankLines(true);
		formatProcessor.formatModel(model);

		CleanupProcessorXML bla = new CleanupProcessorXML();
		bla.getCleanupPreferences().setCompressEmptyElementTags(true);
		bla.cleanupModel(model);
	}"
1360,3848916.txt,none,"    public void setLocal(boolean local) {
        this.local = local;
    }"
1361,6935551.txt,none,"  public static ExtensionDescription getDefaultDescription(boolean required,
      boolean repeatable) {
    ExtensionDescription desc =
        ExtensionDescription.getDefaultDescription(GphotoPhotoId.class);
    desc.setRequired(required);
    desc.setRepeatable(repeatable);
    return desc;
  }"
1362,6119512.txt,none,"        @Override
        public boolean accept(Object anObject)
        {
            return !this.collection.contains(anObject);
        }"
1363,9018110.txt,none,"  private void registerReporter(String registry, String name, String tag, SolrMetricReporter reporter) throws Exception {
    try {
      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {
        throw new Exception(""Could not obtain lock to modify reporters registry: "" + registry);
      }
    } catch (InterruptedException e) {
      throw new Exception(""Interrupted while trying to obtain lock to modify reporters registry: "" + registry);
    }
    try {
      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);
      if (perRegistry == null) {
        perRegistry = new HashMap<>();
        reporters.put(registry, perRegistry);
      }
      if (tag != null && !tag.isEmpty()) {
        name = name + ""@"" + tag;
      }
      SolrMetricReporter oldReporter = perRegistry.get(name);
      if (oldReporter != null) { // close it
        log.info(""Replacing existing reporter '"" + name + ""' in registry '"" + registry + ""': "" + oldReporter.toString());
        oldReporter.close();
      }
      perRegistry.put(name, reporter);

    } finally {
      reportersLock.unlock();
    }
  }"
1364,6281757.txt,none,"    protected void findScheduler() throws Exception
    {
        if (_scheduler == null)
        {
            if (_sessionIdManager instanceof DefaultSessionIdManager)
            {
                //try and use a common scheduler, fallback to own
                _scheduler = ((DefaultSessionIdManager)_sessionIdManager).getServer().getBean(Scheduler.class);
            }

            if (_scheduler == null)
            {
                _scheduler = new ScheduledExecutorScheduler(String.format(""Session-HouseKeeper-%x"",hashCode()),false);
                _ownScheduler = true;
                _scheduler.start();
                if (LOG.isDebugEnabled()) LOG.debug(""Using own scheduler for scavenging"");
            }
            else if (!_scheduler.isStarted())
                throw new IllegalStateException(""Shared scheduler not started"");
        }
    }"
1365,4743999.txt,none,"  public static Protos.FrameworkID toFrameworkID(ByteBuffer bb) {
    try {
      return Protos.FrameworkID.parseFrom(getBytes(bb, bb.getInt()));
    } catch (Exception e) {
      throw new RuntimeException(""Failed to parse Framework ID"", e);
    }
  }"
1366,7144792.txt,none,"    public HttpResponse(int code, String message,Map<String, List<String>> headers,
                        String content) {
        this.code = code;
        this.message = message;
        this.headers = new HashMap<>(headers);
        this.content = content;
    }"
1367,8895014.txt,none,"  public void addToAborted(long elem) {
    if (this.aborted == null) {
      this.aborted = new HashSet<Long>();
    }
    this.aborted.add(elem);
  }"
1368,3927368.txt,none,"      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelCompaction_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.login = iprot.readBinary();
          struct.setLoginIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tableName = iprot.readString();
          struct.setTableNameIsSet(true);
        }
      }"
1369,4550371.txt,none,"	@Override
	public void validateSelfUserAccountMapping(Long accountId) {

		if (!this.appuserSavingsMapperReadService.isSavingsMappedToUser(accountId,
				this.context.getAuthenticatedUserIfPresent().getId())) {
			throw new SavingsAccountNotFoundException(accountId);

		}
	}"
1370,8537914.txt,minor,"    @Override
    public String getVMPassword(final GetVMPasswordCmd cmd) {
        final Account caller = getCaller();

        final UserVmVO vm = _userVmDao.findById(cmd.getId());
        if (vm == null) {
            final InvalidParameterValueException ex = new InvalidParameterValueException(""No VM with specified id found."");
            ex.addProxyObject(cmd.getId().toString(), ""vmId"");
            throw ex;
        }

        // make permission check
        _accountMgr.checkAccess(caller, null, true, vm);

        _userVmDao.loadDetails(vm);
        final String password = vm.getDetail(""Encrypted.Password"");
        if (password == null || password.equals("""")) {
            final InvalidParameterValueException ex = new InvalidParameterValueException(
                    ""No password for VM with specified id found. "" + ""If VM is created from password enabled template and SSH keypair is assigned to VM then only password can be retrieved."");
            ex.addProxyObject(vm.getUuid(), ""vmId"");
            throw ex;
        }

        return password;
    }"
1371,4578782.txt,none,"        public long outputCrossReferenceObject(OutputStream stream,
                TrailerDictionary trailerDictionary, int first, int last, int size) throws IOException {
            // Outputting the object streams should not have created new indirect objects
            assert objects.isEmpty();
            new CrossReferenceStream(PDFDocument.this, ++objectcount, trailerDictionary, position,
                    indirectObjectOffsets,
                    structureTreeObjectStreams.getCompressedObjectReferences())
                    .output(stream);
            return position;
        }"
1372,5093717.txt,none,"  @Override
  public void clear() {
    Arrays.fill(this.state, 0, state.length - 1, FREE);
    distinct = 0;
    freeEntries = table.length; // delta
    trimToSize();
  }"
1373,6598935.txt,none,"    public void logAction(String actionName, LogLevels level) {
        toLog(format(shortLogMessagesFormat
                ? ""%s for %s""
                : ""Perform action '%s' with Element (%s)"", actionName, this.toString()), level);
    }"
1374,6863460.txt,none,"  private void colorLoops() {
    try {
      for (final INaviViewNode currentNode : getGraph().getNodes()) {
        if (currentNode.getParents().isEmpty()) {
          CLoopHighlighter.colorLoops(getGraph(), currentNode);
          break;
        }
      }
    } catch (final MalformedGraphException exception) {
      NaviLogger.warning(""Error: Graph is malformed, can not color loops"");
    }
  }"
1375,5070999.txt,none,"        @Override
        public void run() {
            while (!shutdown) {
                try {
                    sleep(factoryData.reconnectIntervalMillis);
                    reconnect();
                } catch (final InterruptedException | SQLException e) {
                    logger().debug(""Cannot reestablish JDBC connection to {}: {}"", factoryData, e.getLocalizedMessage(),
                            e);
                } finally {
                    latch.countDown();
                }
            }
        }"
1376,4139640.txt,none,"    @Override public ColumnStrategy generationStrategy(RelOptTable table,
        int iColumn) {
      final ModifiableViewTable viewTable =
          table.unwrap(ModifiableViewTable.class);
      assert iColumn < viewTable.columnMapping.size();

      // Use the view constraint to generate the default value if the column is
      // constrained.
      final int mappedOrdinal = viewTable.columnMapping.get(iColumn);
      final RexNode viewConstraint = projectMap.get(mappedOrdinal);
      if (viewConstraint != null) {
        return ColumnStrategy.DEFAULT;
      }

      // Otherwise use the default value of the underlying table.
      final Table schemaTable = viewTable.getTable();
      if (schemaTable instanceof Wrapper) {
        final InitializerExpressionFactory initializerExpressionFactory =
            ((Wrapper) schemaTable).unwrap(InitializerExpressionFactory.class);
        if (initializerExpressionFactory != null) {
          return initializerExpressionFactory.generationStrategy(table,
              iColumn);
        }
      }
      return super.generationStrategy(table, iColumn);
    }"
1377,5395652.txt,none,"    public static Schema newBagSchema(String bagName, String tupleName,
            List<String> fieldNames, List<Byte> dataTypes)
            throws FrontendException {
        checkParameters(fieldNames, dataTypes);

        Schema tupleSchema = newTupleSchema(tupleName, fieldNames, dataTypes);
        Schema.FieldSchema bagField = new Schema.FieldSchema(bagName,
                tupleSchema, DataType.BAG);

        return new Schema(bagField);
    }"
1378,8543153.txt,none,"    @Override
    public void execute() {
        CallContext.current().setEventDetails(""Virtual router element Id: "" + getEntityId());
        VirtualRouterProvider result = _service.get(0).getInternalLoadBalancerElement(getEntityId());
        if (result != null) {
            InternalLoadBalancerElementResponse response = _responseGenerator.createInternalLbElementResponse(result);
            response.setResponseName(getCommandName());
            this.setResponseObject(response);
        } else {
            throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR, ""Failed to add Virtual Router entity to physical network"");
        }
    }"
1379,4553880.txt,none,"    boolean isSQLDateAndTimeTimeZoneSameAsNormal() {
        if (cachedSQLDateAndTimeTimeZoneSameAsNormal == null) {
            cachedSQLDateAndTimeTimeZoneSameAsNormal = Boolean.valueOf(
                    getSQLDateAndTimeTimeZone() == null
                            || getSQLDateAndTimeTimeZone().equals(getTimeZone()));
        }
        return cachedSQLDateAndTimeTimeZoneSameAsNormal.booleanValue();
    }"
1380,3698602.txt,none,"        public GenericRequestMapper<Input, Output> build() {
            return new BaseRequestMapper<>(handlerChains);
        }"
1381,6938240.txt,none,"  public static GphotoId from(Long id) {
    return new GphotoId(id == null ? null : Long.toString(id));
  }"
1382,7916535.txt,major,"    static Class findProviderClass(String className, ClassLoader cl,
                                           boolean doFallback)
        throws ClassNotFoundException, ConfigurationError
    {   
        //throw security exception if the calling thread is not allowed to access the
        //class. Restrict the access to the package classes as specified in java.security policy.
        SecurityManager security = System.getSecurityManager();
        try{
                if (security != null){
                    final int lastDot = className.lastIndexOf('.');
                    String packageName = className;
                    if (lastDot != -1) packageName = className.substring(0, lastDot);
                    security.checkPackageAccess(packageName);
                 }   
        }catch(SecurityException e){
            throw e;
        }
        
        Class providerClass;
        if (cl == null) {
            // XXX Use the bootstrap ClassLoader.  There is no way to
            // load a class using the bootstrap ClassLoader that works
            // in both JDK 1.1 and Java 2.  However, this should still
            // work b/c the following should be true:
            //
            // (cl == null) iff current ClassLoader == null
            //
            // Thus Class.forName(String) will use the current
            // ClassLoader which will be the bootstrap ClassLoader.
            providerClass = Class.forName(className);
        } else {
            try {
                providerClass = cl.loadClass(className);
            } catch (ClassNotFoundException x) {
                if (doFallback) {
                    // Fall back to current classloader
                    ClassLoader current = ObjectFactory.class.getClassLoader();
                    if (current == null) {
                        providerClass = Class.forName(className);
                    } else if (cl != current) {
                        cl = current;
                        providerClass = cl.loadClass(className);
                    } else {
                        throw x;
                    }
                } else {
                    throw x;
                }
            }
        }

        return providerClass;
    }"
1383,7158488.txt,none,"    final int readIntBigEndian() throws SQLServerException {
        if (payloadOffset + 4 <= currentPacket.payloadLength) {
            int value = Util.readIntBigEndian(currentPacket.payload, payloadOffset);
            payloadOffset += 4;
            return value;
        }

        return Util.readIntBigEndian(readWrappedBytes(4), 0);
    }"
1384,7002844.txt,none,"  public static TimeOfYear fromDateTime(DateTime dateTime) {
    DateTime nextYear = dateTime.plusYears(1);  // This turns February 29 into February 28.
    TimeOfYear instance = new TimeOfYear();
    instance.timeString = String.format(
        ""%02d %02d %08d"",
        nextYear.getMonthOfYear(),
        nextYear.getDayOfMonth(),
        nextYear.getMillisOfDay());
    return instance;
  }"
1385,5841731.txt,none,"    public void setLogArgs(boolean logArgs) {
        this.logArgs = logArgs;
    }"
1386,8548537.txt,none,"    @Override
    public int hashCode() {
        return new HashCodeBuilder()
                .appendSuper(super.hashCode())
                .append(_syncType)
                .append(_nuageVspCmsId)
                .append(_success)
                .toHashCode();
    }"
1387,8650167.txt,none,"    public static boolean isSignedFloat(String s) {
        if (isEmpty(s)) {
            return defaultEmptyOK;
        }
        try {
            Float.parseFloat(s);
            return true;
        } catch (Exception e) {
            return false;
        }
    }"
1388,6235739.txt,none,"	@Test
	public void test_getSize() {
		forRectangles(new IAction() {
			@Override
			public void action(Rectangle rect, Point tl, Point br) {
				assertEquals(new Dimension(br.x - tl.x, br.y - tl.y),
						rect.getSize());
			}
		});
	}"
1389,8739715.txt,none,"  public void applicationFinished(ApplicationId applicationId) {
    processDelegationTokenRenewerEvent(new DelegationTokenRenewerEvent(
        applicationId,
        DelegationTokenRenewerEventType.FINISH_APPLICATION));
  }"
1390,4700005.txt,none,"    public final HttpAsyncClientBuilder disableAutomaticRetries() {
        automaticRetriesDisabled = true;
        return this;
    }"
1391,4661344.txt,none,"    @SuppressWarnings(""unchecked"")
    private Comparable increment(Object value, Number step) {
        return (Comparable) plus((Number) value, step);
    }"
1392,7233796.txt,none,"  @Implementation
  protected synchronized int checkSlicePermission(Uri uri, int pid, int uid) {
    if (uid == 0) {
      return PackageManager.PERMISSION_GRANTED;
    }
    Collection<Uri> uris = packageUidsToPermissionGrantedSliceUris.get(uid);
    if (uris != null && uris.contains(uri)) {
      return PackageManager.PERMISSION_GRANTED;
    }
    return PackageManager.PERMISSION_DENIED;
  }"
1393,7002266.txt,none,"    private Atom getSTTSAtom() {
        Atom atom = new Atom(""stts"", (byte)0, 0);
        int numAudioFrames = mFrameSize.length - 1;
        atom.setData(new byte[] {
                0, 0, 0, 0x02,  // entry count
                0, 0, 0, 0x01,  // first frame contains no audio
                0, 0, 0, 0,
                (byte)((numAudioFrames >> 24) & 0xFF), (byte)((numAudioFrames >> 16) & 0xFF),
                (byte)((numAudioFrames >> 8) & 0xFF), (byte)(numAudioFrames & 0xFF),
                0, 0, 0x04, 0,  // delay between frames = 1024 samples (cf. timescale = Fs)
        });
        return atom;
    }"
1394,7357164.txt,none,"    public void sourceControlChanged(final boolean tfvc) {
        getSourceControlListener().onSourceControlChanged(tfvc);
    }"
1395,7855032.txt,none,"  @Override
  public void removeHealthMonitor(InternalDistributedMember owner, int theId) {
    final HealthMonitor hm = getHealthMonitor(owner);
    if (hm != null && hm.getId() == theId) {
      hm.stop();
      this.hmMap.remove(owner);
    }
  }"
1396,6248023.txt,none,"    private Pattern getPatternFindAnyCharacter() {
        final String regexCharacters = characters.stream().map(RegexChar::getRegExp)
                .collect(Collectors.joining());
        final String regularExpression = String.format("".*[%s]+.*"", regexCharacters);
        return Pattern.compile(regularExpression);
    }"
1397,6400040.txt,minor,"    private void setPropertyValue(Object object, String propertyName, Object value) {
        assert object != null : ""object can not be null!""; //$NON-NLS-1$

        try {
            Object singlePropertyObject = null;
            String singlePropertyName = null;
            if (propertyName.contains(""."")) { //$NON-NLS-1$
                singlePropertyObject = getPropertyValue(
                        object,
                        propertyName.substring(0, propertyName.lastIndexOf("".""))); //$NON-NLS-1$
                singlePropertyName = propertyName.substring(propertyName.lastIndexOf(""."") + 1); //$NON-NLS-1$
            } else {
                singlePropertyObject = object;
                singlePropertyName = propertyName;
            }

            String setterName = ""set"" //$NON-NLS-1$
                    + singlePropertyName.substring(0, 1).toUpperCase()
                    + singlePropertyName.substring(1);
            Method setterMethod = null;
            if (value != null) {
                setterMethod = singlePropertyObject.getClass().getMethod(
                        setterName, new Class<?>[] { value.getClass() });
            } else {
                // as the value is null we can not access the setter method
                // directly and have to search for the method
                Method[] methods = singlePropertyObject.getClass().getMethods();
                for (Method m : methods) {
                    if (m.getName().equals(setterName)) {
                        setterMethod = m;
                    }
                }
            }
            setterMethod.invoke(singlePropertyObject, value);
        } catch (Exception e) {
            log.error(""Error on reflective accessing the data model"", e); //$NON-NLS-1$
            throw new RuntimeException(e);
        }
    }"
1398,8334400.txt,none,"    public static void main (String[] args) {
    }"
1399,8201390.txt,none,"	public IGrammarAwareElementType getCallExpression_LeftParenthesisKeyword_1_1ElementType() {
		return CallExpression_LeftParenthesisKeyword_1_1_ELEMENT_TYPE;
	}"
1400,6986522.txt,none,"  public SynchronizedStatement(SourcePosition sourcePosition, Expression expression, Block body) {
    super(sourcePosition);
    this.expression = checkNotNull(expression);
    this.body = checkNotNull(body);
  }"
1401,5145744.txt,none,"    public String getStdErr()
    {
        StringBuilder str = new StringBuilder();
        for ( String line : stderr )
        {
            str.append( line );
        }
        return str.toString();
    }"
1402,8967424.txt,none,"  public Text evaluate(String xml, String path) {
    String s = xpath.evalString(xml, path);
    if (s == null) {
      return null;
    }

    result.set(s);
    return result;
  }"
1403,8051978.txt,none,"    public final void rule__ParserRuleParameters__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalTwoParametersTestLanguage.g:1073:1: ( rule__ParserRuleParameters__Group_1_2__1__Impl )
            // InternalTwoParametersTestLanguage.g:1074:2: rule__ParserRuleParameters__Group_1_2__1__Impl
            {
            pushFollow(FollowSets000.FOLLOW_2);
            rule__ParserRuleParameters__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1404,4535026.txt,none,"        public LoanRescheduleRequestRowMapper() {
            final StringBuilder sqlBuilder = new StringBuilder(200);

            sqlBuilder.append(""lr.id as id, lr.loan_id as loanId, lr.status_enum as statusEnum, "");
            sqlBuilder.append(""mc.display_name as clientName, "");
            sqlBuilder.append(""mc.id as clientId, "");
            sqlBuilder.append(""ml.account_no as loanAccountNumber, "");
            sqlBuilder.append(""lr.reschedule_from_installment as rescheduleFromInstallment, "");
            sqlBuilder.append(""lr.reschedule_from_date as rescheduleFromDate, "");
            sqlBuilder.append(""lr.recalculate_interest as recalculateInterest, "");
            sqlBuilder.append(""lr.reschedule_reason_cv_id as rescheduleReasonCvId, "");
            sqlBuilder.append(""cv.code_value as rescheduleReasonCvValue, "");
            sqlBuilder.append(""lr.reschedule_reason_comment as rescheduleReasonComment, "");

            sqlBuilder.append(""lr.submitted_on_date as submittedOnDate, "");
            sqlBuilder.append(""sbu.username as submittedByUsername, "");
            sqlBuilder.append(""sbu.firstname as submittedByFirstname, "");
            sqlBuilder.append(""sbu.lastname as submittedByLastname, "");

            sqlBuilder.append(""lr.approved_on_date as approvedOnDate, "");
            sqlBuilder.append(""abu.username as approvedByUsername, "");
            sqlBuilder.append(""abu.firstname as approvedByFirstname, "");
            sqlBuilder.append(""abu.lastname as approvedByLastname, "");

            sqlBuilder.append(""lr.rejected_on_date as rejectedOnDate, "");
            sqlBuilder.append(""rbu.username as rejectedByUsername, "");
            sqlBuilder.append(""rbu.firstname as rejectedByFirstname, "");
            sqlBuilder.append(""rbu.lastname as rejectedByLastname, "");
            
            sqlBuilder.append(""tv.id as termId,"");
            sqlBuilder.append(""tv.term_type as termType,"");
            sqlBuilder.append(""tv.applicable_date as variationApplicableFrom, "");
            sqlBuilder.append(""tv.decimal_value as decimalValue, "");
            sqlBuilder.append(""tv.date_value as dateValue, "");
            sqlBuilder.append(""tv.is_specific_to_installment as isSpecificToInstallment "");

            sqlBuilder.append(""from "" + loanRescheduleRequestTableName() + "" lr "");
            sqlBuilder.append(""left join m_code_value cv on cv.id = lr.reschedule_reason_cv_id "");
            sqlBuilder.append(""left join m_appuser sbu on sbu.id = lr.submitted_by_user_id "");
            sqlBuilder.append(""left join m_appuser abu on abu.id = lr.approved_by_user_id "");
            sqlBuilder.append(""left join m_appuser rbu on rbu.id = lr.rejected_by_user_id "");
            sqlBuilder.append(""left join m_loan ml on ml.id = lr.loan_id "");
            sqlBuilder.append(""left join m_client mc on mc.id = ml.client_id "");
            sqlBuilder.append(""join m_loan_reschedule_request_term_variations_mapping rrtvm on lr.id = rrtvm.loan_reschedule_request_id "");
            sqlBuilder.append(""join m_loan_term_variations tv on tv.id = rrtvm.loan_term_variations_id and tv.parent_id is null"") ;

            this.schema = sqlBuilder.toString();
        }"
1405,7496080.txt,none,"	@Override
	public byte[] dump(byte[] key) {

		Assert.notNull(key, ""Key must not be null!"");

		return connection.getClusterCommandExecutor()
				.executeCommandOnSingleNode((JedisClusterCommandCallback<byte[]>) client -> client.dump(key),
						connection.getTopologyProvider().getTopology().getKeyServingMasterNode(key))
				.getValue();
	}"
1406,6858458.txt,none,"  @Override
  public IHelpInformation getHelpInformation() {
    return new CPasswordHelp();
  }"
1407,5625012.txt,minor,"        @Override
        public void startElement(final String uri, final String localName, final String qname, final Attributes attributes) throws SAXException
        {
            // Verify and initialize the context stack at root element.
            if (contextStack.size() == 0)
            {
                if (!qname.equals(rootElement))
                {
                    throw new SAXConfigurationException(
                            new ConfigurationException.IncorrectElement(rootElement, qname, this.source, locator.getLineNumber()),
                            locator);
                }                
                String all = attributes.getValue(""includeAllClasses"");
                if (""true"".equals(all))
                    allClasses = true;
                contextStack.push(qname);
                return;
            }
            else
            {
                if (qname.equals(""classEntry""))
                {
                    String path = attributes.getValue(""path"");
                    includedClasses.add(path);
                }
                else if (qname.equals(""namespaceManifestEntry""))
                {
                    String manifest = attributes.getValue(""manifest"");
                    String namespace = attributes.getValue(""namespace"");
                    fbArgs.add(""-namespace"");
                    fbArgs.add(namespace);
                    String mf = contextPath + ""/"" + manifest;
                    File f = new File(mf);
                    if (!f.exists())
                    {
                        mf = contextPath + ""/src/"" + manifest;
                    }
                    fbArgs.add(mf);
                    fbArgs.add(""-include-namespaces"");
                    fbArgs.add(namespace);                    
                }
            }
        }"
1408,7957449.txt,major,"        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA60_0 = input.LA(1);

                         
                        int index60_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA60_0==RULE_ID) ) {s = 1;}

                        else if ( (LA60_0==14) ) {s = 2;}

                        else if ( (LA60_0==39) && (synpred33_InternalXbaseWithAnnotations())) {s = 3;}

                        else if ( ((LA60_0>=RULE_STRING && LA60_0<=RULE_DECIMAL)||(LA60_0>=18 && LA60_0<=19)||LA60_0==26||(LA60_0>=42 && LA60_0<=43)||LA60_0==48||LA60_0==55||LA60_0==59||LA60_0==61||(LA60_0>=65 && LA60_0<=67)||(LA60_0>=70 && LA60_0<=82)||LA60_0==84) ) {s = 4;}

                         
                        input.seek(index60_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA60_1 = input.LA(1);

                         
                        int index60_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalXbaseWithAnnotations()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index60_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA60_2 = input.LA(1);

                         
                        int index60_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred33_InternalXbaseWithAnnotations()) ) {s = 3;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index60_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 60, _s, input);
            error(nvae);
            throw nvae;
        }"
1409,9097958.txt,none,"    @Specialization
    protected RIntVector match(RAbstractRawVector x, @SuppressWarnings(""unused"") RAbstractComplexVector table, @SuppressWarnings(""unused"") int nomatch) {
        return RDataFactory.createIntVector(x.getLength(), true);
    }"
1410,5832184.txt,none,"    @Override
    public PreparedStatement prepareStatement(final String sql, final int resultSetType, final int resultSetConcurrency)
            throws SQLException {
        if (null == pstmtPool) {
            throw new SQLException(""Statement pool is null - closed or invalid PoolingConnection."");
        }
        try {
            return pstmtPool.borrowObject(createKey(sql, resultSetType, resultSetConcurrency));
        } catch (final NoSuchElementException e) {
            throw new SQLException(""MaxOpenPreparedStatements limit reached"", e);
        } catch (final RuntimeException e) {
            throw e;
        } catch (final Exception e) {
            throw new SQLException(""Borrow prepareStatement from pool failed"", e);
        }
    }"
1411,4527035.txt,none,"    public SpellCheckerGui() {
        super();
        initComponents();
        this.setTitle(""Spellchecker Gui"");
    }"
1412,5718043.txt,none,"		@Override
		public Iterator<Tuple2<ValueIndexPair,Double>> call(Tuple2<MatrixIndexes,MatrixBlock> arg0) 
			throws Exception 
		{
			ArrayList<Tuple2<ValueIndexPair,Double>> ret = new ArrayList<>(); 
			MatrixIndexes ix = arg0._1();
			MatrixBlock mb = arg0._2();
			
			long ixoffset = (ix.getRowIndex()-1)*_brlen;
			for( int i=0; i<mb.getNumRows(); i++) {
				double val = mb.quickGetValue(i, 0);
				ret.add(new Tuple2<>(new ValueIndexPair(val,ixoffset+i+1), val));
			}
			
			return ret.iterator();
		}"
1413,4175236.txt,minor,"	static boolean evaluateImpl(Object o1, Object o2) {
		// TODO: maybe we need a comparison ""strategy"" here, instead of
		// a switch of all possible cases? ... there were other requests for
		// more relaxed type-unsafe comparison (e.g. numbers to strings)

		if (o1 == null && o2 == null) {
			return true;
		} else if (o1 != null) {
			// Per CAY-419 we perform 'in' comparison if one object is a list, and other is not
			if (o2 instanceof Collection) {
				for (Object element : ((Collection<?>) o2)) {
					if (element != null && Evaluator.evaluator(element).eq(element, o1)) {
						return true;
					}
				}
				return false;
			}

			return Evaluator.evaluator(o1).eq(o1, o2);
		}
		return false;
	}"
1414,6462072.txt,none,"    private void buildNode515()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=14143""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=14142""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=14143""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=14142""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
1415,6871109.txt,none,"    public final void rule__DefaultFormalParameter__HasInitializerAssignmentAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalTypesParser.g:15171:1: ( ( ( EqualsSign ) ) )
            // InternalTypesParser.g:15172:2: ( ( EqualsSign ) )
            {
            // InternalTypesParser.g:15172:2: ( ( EqualsSign ) )
            // InternalTypesParser.g:15173:3: ( EqualsSign )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }
            // InternalTypesParser.g:15174:3: ( EqualsSign )
            // InternalTypesParser.g:15175:4: EqualsSign
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }
            match(input,EqualsSign,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1416,8894479.txt,none,"  public SQLUniqueConstraint deepCopy() {
    return new SQLUniqueConstraint(this);
  }"
1417,6985429.txt,none,"    ClosureType toNonNullable() {
      return isNullable() ? new ClosureBangDecoratedType(this) : this;
    }"
1418,9361156.txt,none,"    @Transient
    public Rectangle2D getFrame() {
        return new Rectangle2D.Double(getX(), getY(), getWidth(), getHeight());
    }"
1419,6793253.txt,none,"  @Nullable
  public final QualifiedName getQualifiedNameObject() {
    return isQualifiedName() ? new QualifiedName.NodeQname(this) : null;
  }"
1420,7925259.txt,major,"	public static BPMNDiagram findBPMNDiagram(final BaseElement baseElement, boolean contains) {
		if (baseElement==null || baseElement.eResource()==null)
			return null;
		ResourceSet resourceSet = baseElement.eResource().getResourceSet();
		if (resourceSet==null)
			return null;
		for (Resource r : resourceSet.getResources()) {
			if (r instanceof Bpmn2Resource) {
				for (EObject o : r.getContents()) {
					if (o instanceof DocumentRoot) {
						DocumentRoot root = (DocumentRoot)o;
						Definitions defs = root.getDefinitions();
						BaseElement bpmnElement;
						for (BPMNDiagram d : defs.getDiagrams()) {
							BPMNDiagram bpmnDiagram = (BPMNDiagram)d;
							bpmnElement = bpmnDiagram.getPlane().getBpmnElement();
							if (bpmnElement == baseElement)
								return bpmnDiagram;
						}
						if (contains) {
							for (BPMNDiagram d : defs.getDiagrams()) {
								BPMNDiagram bpmnDiagram = (BPMNDiagram)d;
								for (DiagramElement de : bpmnDiagram.getPlane().getPlaneElement()) {
									if (de instanceof BPMNShape)
										bpmnElement = ((BPMNShape)de).getBpmnElement();
									else if (de instanceof BPMNEdge)
										bpmnElement = ((BPMNEdge)de).getBpmnElement();
									else
										continue;
									if (bpmnElement == baseElement)
										return bpmnDiagram;
								}
							}
							EObject parent = baseElement.eContainer();
							if (parent instanceof BaseElement && !(parent instanceof Definitions)) {
								BPMNDiagram bpmnDiagram = findBPMNDiagram((BaseElement)parent, true);
								if (bpmnDiagram!=null)
									return bpmnDiagram;
							}
						}
//						for (BPMNDiagram d : defs.getDiagrams()) {
//							BPMNDiagram bpmnDiagram = (BPMNDiagram)d;
//							bpmnElement = bpmnDiagram.getPlane().getBpmnElement();
//							if (bpmnElement instanceof Collaboration) {
//								Collaboration collaboration = (Collaboration)bpmnElement;
//								for (Participant p : collaboration.getParticipants()) {
//									if (baseElement==p)
//										return bpmnDiagram;
//									if (baseElement==p.getProcessRef())
//										return bpmnDiagram;
//								}
//							}
//						}
					}
				}
			}
		}
		return null;
	}"
1421,6453968.txt,none,"    @Override
    public int hashCode ()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ( this.predicate == null ? 0 : this.predicate.hashCode () );
        return result;
    }"
1422,5353485.txt,none,"	@Override
	public void stop(BundleContext context) throws Exception {
		instance = null;
		super.stop(context);
	}"
1423,7727842.txt,none,"    public void selectOwner(String selectorPath, String key, Operation op) {
        if (isStopping()) {
            op.fail(new CancellationException(""Host is stopping""));
            return;
        }

        SelectAndForwardRequest body = this.selectOwnerRequests.get();
        body.key = key;

        NodeSelectorService nss = findNodeSelectorService(selectorPath, op);
        if (nss == null) {
            return;
        }

        nss.selectAndForward(op, body);
    }"
1424,7094260.txt,none,"  public int peek(int n)
  {
    try {
      return m_map[m_firstFree-(1+n)];
    }
    catch (ArrayIndexOutOfBoundsException e)
    {
      throw new EmptyStackException();
    }
  }"
1425,4571455.txt,minor,"    public float computeTableUnit(PercentBaseContext percentBaseContext, int contentAreaIPD) {

        int sumCols = 0;
        float factors = 0;
        float unit = 0;

        /* calculate the total width (specified absolute/percentages),
         * and work out the total number of factors to use to distribute
         * the remaining space (if any)
         */
        for (Object colWidth1 : colWidths) {
            Length colWidth = (Length) colWidth1;
            if (colWidth != null) {
                sumCols += colWidth.getValue(percentBaseContext);
                if (colWidth instanceof RelativeNumericProperty) {
                    factors += ((RelativeNumericProperty) colWidth).getTableUnits();
                } else if (colWidth instanceof TableColLength) {
                    factors += ((TableColLength) colWidth).getTableUnits();
                }
            }
        }

        /* distribute the remaining space over the accumulated
         * factors (if any)
         */
        if (factors > 0) {
            if (sumCols < contentAreaIPD) {
                unit = (contentAreaIPD - sumCols) / factors;
            } else {
                log.warn(""No space remaining to distribute over columns."");
            }
        }

        return unit;
    }"
1426,7209681.txt,none,"  public Step deleteJobAsync(
      String name,
      String namespace,
      V1DeleteOptions deleteOptions,
      ResponseStep<V1Status> responseStep) {
    return createRequestAsync(
        responseStep, new RequestParams(""deleteJob"", namespace, name, deleteOptions), DELETE_JOB);
  }"
1427,4038375.txt,none,"    public ShutdownAllCommand(Args args) {
        super(args, ""?all=true"");
    }"
1428,5719331.txt,none,"    private static Field getLabelField(final String name) {
        try {
            Field f = Label.class.getDeclaredField(name);
            f.setAccessible(true);
            return f;
        } catch (NoSuchFieldException e) {
            return null;
        }
    }"
1429,3701417.txt,none,"    public final long getUlong56() {
        if (position + 6 >= origin + limit) throw new IllegalArgumentException(""limit excceed: ""
                                                                               + (position - origin + 6));

        byte[] buf = buffer;
        return ((long) (0xff & buf[position++])) | ((long) (0xff & buf[position++]) << 8)
               | ((long) (0xff & buf[position++]) << 16) | ((long) (0xff & buf[position++]) << 24)
               | ((long) (0xff & buf[position++]) << 32) | ((long) (0xff & buf[position++]) << 40)
               | ((long) (0xff & buf[position++]) << 48);
    }"
1430,7929441.txt,none,"	public ImageFigure() {
		this(null, PositionConstants.CENTER);
	}"
1431,5355489.txt,major,"    private Map<String, String> tika_parse(InputStream sourceStream, String prefix, Integer maxAttribs,
                                           Integer maxAttribLen) throws IOException, TikaException, SAXException {
        final Metadata metadata = new Metadata();
        final TikaInputStream tikaInputStream = TikaInputStream.get(sourceStream);
        try {
            autoDetectParser.parse(tikaInputStream, new DefaultHandler(), metadata);
        } finally {
            tikaInputStream.close();
        }

        final Map<String, String> results = new HashMap<>();
        final Pattern metadataKeyFilter = metadataKeyFilterRef.get();
        final StringBuilder dataBuilder = new StringBuilder();
        for (final String key : metadata.names()) {
            if (metadataKeyFilter != null && !metadataKeyFilter.matcher(key).matches()) {
                continue;
            }
            dataBuilder.setLength(0);
            if (metadata.isMultiValued(key)) {
                for (String val : metadata.getValues(key)) {
                    if (dataBuilder.length() > 1) {
                        dataBuilder.append("", "");
                    }
                    if (dataBuilder.length() + val.length() < maxAttribLen) {
                        dataBuilder.append(val);
                    } else {
                        dataBuilder.append(""..."");
                        break;
                    }
                }
            } else {
                dataBuilder.append(metadata.get(key));
            }
            if (prefix == null) {
                results.put(key, dataBuilder.toString().trim());
            } else {
                results.put(prefix + key, dataBuilder.toString().trim());
            }

            // cutoff at max if provided
            if (maxAttribs != null && results.size() >= maxAttribs) {
                break;
            }
        }
        return results;
    }"
1432,3872015.txt,none,"  protected String getHash(T data, String salt) {
    String json = null;
    try {
      json = MAPPER.writeValueAsString(data);
    } catch (JsonProcessingException e) {
      throw new RuntimeException(""Error during mapping message to calculate hash"", e);
    }
    String generatedPassword = null;
    try {
      MessageDigest md = MessageDigest.getInstance(""SHA-512"");
      md.update(salt.getBytes(""UTF-8""));
      byte[] bytes = md.digest(json.getBytes(""UTF-8""));
      StringBuilder sb = new StringBuilder();
      for (byte b : bytes) {
        sb.append(Integer.toString((b & 0xff) + 0x100, 16).substring(1));
      }
      generatedPassword = sb.toString();
    } catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
      e.printStackTrace();
    }
    return generatedPassword;
  }"
1433,4494161.txt,none,"   static private String getSwapInfoScript() {
      String functionText = ""  function iaf(txt) {\n"" +
            ""    var aff=txt.replace( /"" + AFFIRMED + ""/g,\""<br><h3>Affirmed</h3>\"" );\n"" +
            ""    var neg=aff.replace( /"" + NEGATED + ""/g,\""<br><h3>Negated</h3>\"" );\n"" +
            ""    var unc=neg.replace( /"" + UNCERTAIN + ""/g,\""<br><h3>Uncertain</h3>\"" );\n"" +
            ""    var unn=unc.replace( /"" + UNCERTAIN_NEGATED + ""/g,\""<br><h3>Uncertain, Negated</h3>\"" );\n"" +
            ""    var gnr=unn.replace( /"" + GENERIC + ""/g,\""\"" );\n"" +

            ""    var wik1=gnr.replace( /"" + WIKI_BEGIN
            + ""/g,\""<a href=\\\""https://vsearch.nlm.nih.gov/vivisimo/cgi-bin/query-meta?v%3Aproject=medlineplus&v%3Asources=medlineplus-bundle&query=\"" );\n"" +
            ""    var wik2=wik1.replace( /"" + WIKI_CENTER + ""/g,\""\\\"" target=\\\""_blank\\\"">\"" );\n"" +
            ""    var wik3=wik2.replace( /"" + WIKI_END + ""/g,\""</a>\"" );\n"";

      String previousCode = ""wik3"";
      for ( SemanticMarkup markup : SemanticMarkup.values() ) {
         functionText += createSemanticReplacements( markup, previousCode );
         previousCode = markup.getEncoding()
               .toLowerCase();
      }
      functionText +=
            ""    var spc=_unk_.replace( /"" + SPACER + ""/g,\""&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"" );\n"" +
                  ""    var prf1=spc.replace( /\\[/g,\""<i>\"" );\n"" +
                  ""    var prf2=prf1.replace( /\\]/g,\""</i>\"" );\n"" +
                  ""    var nl=prf2.replace( /"" + NEWLINE + ""/g,\""<br>\"" );\n"" +
                  ""    document.getElementById(\""ia\"").innerHTML = nl;\n"" +
                  ""  }\n"";
      return functionText;
   }"
1434,6546622.txt,none,"	public WILDCARDElements getWILDCARDAccess() {
		return pWILDCARD;
	}"
1435,7693328.txt,none,"    @Override
    JSONObject getSimulateJsonResult(JSONObject requestJson) {
        JSONObject result = new JSONObject();
        try {
            result.put(KEY_RESULT_IS_SUPPORT, true);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return result;
    }"
1436,7120110.txt,none,"	public String getMediaType() {
		return mediaType;
	}"
1437,5297721.txt,none,"  public BufferedProtocolReadToWrite(StructType thriftType, FieldIgnoredHandler errorHandler) {
    super();
    this.thriftType = thriftType;
    this.errorHandler = errorHandler;
  }"
1438,5873847.txt,none,"    @Override
    public int getMaxVersion() {

        int max = 0;

        for(DataMigration entityMigration: entityDataMigrations){
            max = Math.max( max, entityMigration.getMaxVersion() );
        }

        return max;
    }"
1439,8595846.txt,none,"  public static void encrypt(OutputStream out, byte[] src, int offset,
      int length, Encryptor e) throws IOException {
    OutputStream cout = e.createEncryptionStream(out);
    try {
      cout.write(src, offset, length);
    } finally {
      cout.close();
    }
  }"
1440,3917547.txt,none,"    public renameNamespace_args setNewNamespaceName(@org.apache.thrift.annotation.Nullable java.lang.String newNamespaceName) {
      this.newNamespaceName = newNamespaceName;
      return this;
    }"
1441,7357470.txt,none,"    public LegacyActionKeyBindingSupport(final IWorkbench workbench, final Shell shell) {
        this(workbench, shell, null);
    }"
1442,4301991.txt,none,"        public AuthorizationData getAuthzData() {
            if (authzData == null) {
                authzData = getFieldAs(IntendedForApplicationClassField.IFAC_elements, AuthorizationData.class);
            }
            return authzData;
        }"
1443,7345031.txt,minor,"    public ServiceDefinition[] findServicesByToolID(final String toolId) {
        try {
            ensureDiskCacheLoaded();
            accessLock.readLock().lock();

            final boolean returnAll = toolId == null || toolId.length() == 0;
            final List<ServiceDefinition> requestedDefinitions = new ArrayList<ServiceDefinition>();

            // Iterate the map of service types. Values are a map of service
            // instances.
            for (final Map<GUID, ServiceDefinition> mapServiceInstances : mapServices.values()) {
                for (final ServiceDefinition definition : mapServiceInstances.values()) {
                    /*
                     * NB! some service definitions in Dev12 QU1 may have null
                     * ToolID
                     */
                    if (returnAll || toolId.equalsIgnoreCase(definition.getToolID())) {
                        requestedDefinitions.add((ServiceDefinition) definition.clone());
                    }
                }
            }

            // Return null if no matching definitions were found.
            if (requestedDefinitions.size() == 0) {
                return null;
            }

            // Return an array of the matching service definitions.
            return requestedDefinitions.toArray(new ServiceDefinition[requestedDefinitions.size()]);
        } finally {
            accessLock.readLock().unlock();
        }
    }"
1444,4817472.txt,none,"  public static String getRequiredAPIElements(int iRequestType)
  {
    String strElements = """";
    
    // cases higher up in the list are supersets of those that come below -
    // hence no ""break"" statements are required, because 'falling through' the
    // switch statement is the desired behaviour in this case
    switch (iRequestType) {
      case Resource.REQUEST_FULL_PREVIEW:
        strElements += ""created-at,updated-at,internal-pack-items,external-pack-items,tags,comments,"";
      case Resource.REQUEST_FULL_LISTING:
        strElements += ""owner,"";
      case Resource.REQUEST_SHORT_LISTING:
        strElements += ""id,title,description,privileges"";
    }
    
    return (strElements);
  }"
1445,5389735.txt,none,"    public static boolean isParent(final ClassLoader supposedParent, final ClassLoader supposedChild) {
        ClassLoader parent = supposedChild;
        while (parent != null) {
            if (parent == supposedParent) {
                return true;
            }
            parent = parent.getParent();
        }

        return false;
    }"
1446,8180004.txt,none,"    @Override
    public long size() {
        return 0;
    }"
1447,6654627.txt,none,"  public void resolve()
  {
    XSDSchemaPrefixRenamer xsdSchemaPrefixRenamer = new XSDSchemaPrefixRenamer();
    xsdSchemaPrefixRenamer.visitSchema(xsdSchema);
  }"
1448,9209895.txt,none,"    public static Element getParent(Element elem) {
        Node parent = elem.getParentNode();
        if (parent instanceof Element)
            return (Element)parent;
        return null;
    } // getParent(Element):Element"
1449,6816458.txt,none,"  private void checkBasicCall(CallBasicNode node, TemplateRegistry registry) {
    TemplateMetadata callee = registry.getBasicTemplateOrElement(node.getCalleeName());

    if (callee == null) {
      String extraErrorMessage =
          SoyErrors.getDidYouMeanMessage(
              registry.getBasicTemplateOrElementNames(), node.getCalleeName());
      errorReporter.report(
          node.getSourceLocation(),
          CALL_TO_UNDEFINED_TEMPLATE,
          node.getCalleeName(),
          extraErrorMessage);
    } else {
      SoyFileKind calleeKind = callee.getSoyFileKind();
      String callerFilePath = node.getSourceLocation().getFilePath();
      String calleeFilePath = callee.getSourceLocation().getFilePath();
      if (calleeKind == SoyFileKind.INDIRECT_DEP) {
        errorReporter.report(
            node.getSourceLocation(),
            CALL_TO_INDIRECT_DEPENDENCY,
            calleeFilePath);
      }
    }
  }"
1450,7906258.txt,none,"    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
      return fields;
    }"
1451,4434538.txt,none,"    @Override
    public InstancesResult resumeInstances(Entity entity, Date start, Date end,
                                           Properties props, List<LifeCycle> lifeCycles) throws FalconException {
        return doJobAction(JobAction.RESUME, entity, start, end, props, lifeCycles);
    }"
1452,6328221.txt,none,"    @SuppressWarnings(""unused"")
    private String format(String s, Object[] arguments) {

        if (arguments == null) {
            return s;
        }

        // A very simple implementation of format
        int i = 0;
        while (i < arguments.length) {
            String delimiter = ""{"" + i + ""}"";
            while (s.contains(delimiter)) {
                s = s.replace(delimiter, String.valueOf(arguments[i]));
            }
            i++;
        }
        return s;
    }"
1453,6078132.txt,none,"    @Nonnull
    @Override
    public RetrieveFeaturesLiveCommandAnswerBuilder answer() {
        return RetrieveFeaturesLiveCommandAnswerBuilderImpl.newInstance(this);
    }"
1454,8001801.txt,none,"    public final boolean synpred87_InternalBacktrackingContentAssistTestLanguage() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalBacktrackingContentAssistTestLanguage_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println(""impossible: ""+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }"
1455,4474548.txt,none,"  public static void main(String[] args) throws ResourceInitializationException, SAXException, IOException {
    AggregateBuilder aggregateBuilder = new AggregateBuilder();
    aggregateBuilder.add(SimpleSegmentAnnotator.createAnnotatorDescription());
    aggregateBuilder.add(SentenceDetectorAnnotatorBIO.getDescription(sentModelPath));
    
    aggregateBuilder.createAggregateDescription().toXML(new FileWriter(""desc/analysis_engine/SentenceAnnotatorBIOAggregate.xml""));
    SentenceDetectorAnnotatorBIO.getDescription(sentModelPath).toXML(new FileWriter(""desc/analysis_engine/SentenceDetectorAnnotatorBIO.xml""));    
  }"
1456,8971411.txt,none,"  public void testSortedSetEnumAdvanceIndependently() throws IOException {
    Directory directory = newDirectory();
    Analyzer analyzer = new MockAnalyzer(random());
    IndexWriterConfig iwconfig = newIndexWriterConfig(analyzer);
    iwconfig.setMergePolicy(newLogMergePolicy());
    RandomIndexWriter iwriter = new RandomIndexWriter(random(), directory, iwconfig);
    
    Document doc = new Document();
    SortedSetDocValuesField field1 = new SortedSetDocValuesField(""field"", new BytesRef(""2""));
    SortedSetDocValuesField field2 = new SortedSetDocValuesField(""field"", new BytesRef(""3""));
    doc.add(field1);
    doc.add(field2);
    iwriter.addDocument(doc);
    field1.setBytesValue(new BytesRef(""1""));
    iwriter.addDocument(doc);
    field2.setBytesValue(new BytesRef(""2""));
    iwriter.addDocument(doc);

    iwriter.commit();
    iwriter.forceMerge(1);

    DirectoryReader ireader = iwriter.getReader();
    iwriter.close();

    SortedSetDocValues dv = getOnlyLeafReader(ireader).getSortedSetDocValues(""field"");
    doTestSortedSetEnumAdvanceIndependently(dv);

    ireader.close();
    directory.close();
  }"
1457,5020389.txt,none,"    public void stop() throws Exception {
        service.stopInstance(name);
    }"
1458,6761533.txt,none,"    @Override
    public APINode execute(Map<String, Object> extraParams) throws APIException {
      ResponseWrapper rw = executeInternal(extraParams);
      lastResponse = parseResponse(rw.getBody(), rw.getHeader());
      return lastResponse;
    }"
1459,8724018.txt,none,"public void setColumnOrder (int [] order) {
	checkWidget ();
	if (order == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
	if (columns.length == 0) {
		if (order.length != 0) SWT.error (SWT.ERROR_INVALID_ARGUMENT);
		return;
	}
	if (order.length != columns.length) SWT.error (SWT.ERROR_INVALID_ARGUMENT);
	boolean reorder = false;
	boolean [] seen = new boolean [columns.length];
	int[] oldOrder = getColumnOrder ();
	for (int i = 0; i < order.length; i++) {
		int index = order [i];
		if (index < 0 || index >= columns.length) SWT.error (SWT.ERROR_INVALID_RANGE);
		if (seen [index]) SWT.error (SWT.ERROR_INVALID_ARGUMENT);
		seen [index] = true;
		if (index != oldOrder [i]) reorder = true;
	}
	if (!reorder) return;

	headerHideToolTip ();
	int[] oldX = new int [columns.length];
	for (int i = 0; i < columns.length; i++) {
		oldX [i] = columns [i].getX ();
	}
	orderedColumns = new CTableColumn [order.length];
	for (int i = 0; i < order.length; i++) {
		orderedColumns [i] = columns [order [i]];
	}
	for (CTableColumn orderedColumn : orderedColumns) {
		CTableColumn column = orderedColumn;
		if (!column.isDisposed () && column.getX () != oldX [column.getIndex ()]) {
			column.notifyListeners (SWT.Move, new Event ());
		}
	}

	redraw ();
	if (drawCount <= 0 && header.isVisible ()) header.redraw ();
}"
1460,8904378.txt,none,"  public void setDelegationToken(String delegationToken) {
    this.delegationToken = delegationToken;
  }"
1461,6454619.txt,none,"	static void decompress(char[] array1, int start1, char[] array2, int start2, int length) {
		for (int i = 0; i < length; ++i) {
			helpers.putCharInArrayByIndex(array2, start2 + i, helpers.byteToCharUnsigned(helpers.getByteFromArrayByIndex(array1, start1 + i)));
		}
	}"
1462,8959710.txt,none,"  @Override
  public void initialize(Configuration conf, Properties tbl) throws SerDeException {
    super.initialize(conf, tbl);
    try {
      @SuppressWarnings(""unchecked"")
      Parser<? extends Message> tmpParser = (Parser<? extends Message>)protoMessageClass
          .getField(""PARSER"").get(null);
      this.parser = tmpParser;
    } catch (IllegalArgumentException | IllegalAccessException | NoSuchFieldException
        | SecurityException e) {
      throw new SerDeException(""Unable get PARSER from class: "" + protoMessageClass.getName(), e);
    }
  }"
1463,5690366.txt,none,"        public BundleConfigurationProvider(String filename, Bundle bundle, BundleContext bundleContext) {
            super(filename, false);
            this.bundle = bundle;
            this.bundleContext = bundleContext;
        }"
1464,7987571.txt,major,"    public final EObject ruleXOtherOperatorExpression() throws RecognitionException {
        EObject current = null;

        EObject this_XAdditiveExpression_0 = null;

        EObject lv_rightOperand_3_0 = null;



        	enterRule();

        try {
            // InternalXbase.g:873:2: ( (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* ) )
            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            {
            // InternalXbase.g:874:2: (this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )* )
            // InternalXbase.g:875:3: this_XAdditiveExpression_0= ruleXAdditiveExpression ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            {
            if ( state.backtracking==0 ) {

              			newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0());
              		
            }
            pushFollow(FOLLOW_14);
            this_XAdditiveExpression_0=ruleXAdditiveExpression();

            state._fsp--;
            if (state.failed) return current;
            if ( state.backtracking==0 ) {

              			current = this_XAdditiveExpression_0;
              			afterParserOrEnumRuleCall();
              		
            }
            // InternalXbase.g:883:3: ( ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) ) )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) ) ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    {
            	    // InternalXbase.g:884:4: ( ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) ) )
            	    // InternalXbase.g:885:5: ( ( () ( ( ruleOpOther ) ) ) )=> ( () ( ( ruleOpOther ) ) )
            	    {
            	    // InternalXbase.g:895:5: ( () ( ( ruleOpOther ) ) )
            	    // InternalXbase.g:896:6: () ( ( ruleOpOther ) )
            	    {
            	    // InternalXbase.g:896:6: ()
            	    // InternalXbase.g:897:7: 
            	    {
            	    if ( state.backtracking==0 ) {

            	      							current = forceCreateModelElementAndSet(
            	      								grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            	      								current);
            	      						
            	    }

            	    }

            	    // InternalXbase.g:903:6: ( ( ruleOpOther ) )
            	    // InternalXbase.g:904:7: ( ruleOpOther )
            	    {
            	    // InternalXbase.g:904:7: ( ruleOpOther )
            	    // InternalXbase.g:905:8: ruleOpOther
            	    {
            	    if ( state.backtracking==0 ) {

            	      								if (current==null) {
            	      									current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
            	      								}
            	      							
            	    }
            	    if ( state.backtracking==0 ) {

            	      								newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0());
            	      							
            	    }
            	    pushFollow(FOLLOW_4);
            	    ruleOpOther();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      								afterParserOrEnumRuleCall();
            	      							
            	    }

            	    }


            	    }


            	    }


            	    }

            	    // InternalXbase.g:921:4: ( (lv_rightOperand_3_0= ruleXAdditiveExpression ) )
            	    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    {
            	    // InternalXbase.g:922:5: (lv_rightOperand_3_0= ruleXAdditiveExpression )
            	    // InternalXbase.g:923:6: lv_rightOperand_3_0= ruleXAdditiveExpression
            	    {
            	    if ( state.backtracking==0 ) {

            	      						newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0());
            	      					
            	    }
            	    pushFollow(FOLLOW_14);
            	    lv_rightOperand_3_0=ruleXAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return current;
            	    if ( state.backtracking==0 ) {

            	      						if (current==null) {
            	      							current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
            	      						}
            	      						set(
            	      							current,
            	      							""rightOperand"",
            	      							lv_rightOperand_3_0,
            	      							""org.eclipse.xtext.xbase.Xbase.XAdditiveExpression"");
            	      						afterParserOrEnumRuleCall();
            	      					
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            }

            if ( state.backtracking==0 ) {

              	leaveRule();

            }
        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
1465,9093819.txt,none,"    public static ToolsRFFI getToolsRFFI() {
        return getRFFI().toolsRFFI;
    }"
1466,7944714.txt,none,"	protected JvmField createField(Field field) {
		JvmField result;
		int modifiers = field.getModifiers();
		if (!field.isEnumConstant()) {
			result = TypesFactory.eINSTANCE.createJvmField();
		} else
			result = TypesFactory.eINSTANCE.createJvmEnumerationLiteral();
		String fieldName = field.getName();
		result.internalSetIdentifier(field.getDeclaringClass().getName() + ""."" + fieldName);
		result.setSimpleName(fieldName);
		result.setFinal(Modifier.isFinal(modifiers));
		result.setStatic(Modifier.isStatic(modifiers));
		result.setTransient(Modifier.isTransient(modifiers));
		result.setVolatile(Modifier.isVolatile(modifiers));
		setVisibility(result, modifiers);
		Type fieldType = null;
		try {
			fieldType = field.getGenericType();
		} catch (GenericSignatureFormatError error) {
			logSignatureFormatError(field.getDeclaringClass());
			fieldType = field.getType();
		} catch (MalformedParameterizedTypeException error) {
			logSignatureFormatError(field.getDeclaringClass());
			fieldType = field.getType();
		}
		result.setType(createTypeReference(fieldType));
		createAnnotationValues(field, result);
		return result;
	}"
1467,8565824.txt,none,"  @Override
  protected void enqueue(final Procedure procedure, final boolean addFront) {
    if (addFront) {
      runnables.addFirst(procedure);
    } else {
      runnables.addLast(procedure);
    }
  }"
1468,8625002.txt,none,"    @Override public <K1, V1> GridCacheProxyImpl<K1, V1> keepBinary() {
        if (opCtx != null && opCtx.isKeepBinary())
            return (GridCacheProxyImpl<K1, V1>)this;

        return new GridCacheProxyImpl<>((GridCacheContext<K1, V1>)ctx,
            (GridCacheAdapter<K1, V1>)delegate,
            opCtx != null ? opCtx.keepBinary() :
                new CacheOperationContext(false, null, true, null, false, null, false, DFLT_ALLOW_ATOMIC_OPS_IN_TX));
    }"
1469,4866077.txt,none,"    @Override
    public boolean removeCheckpoint(String name) {
        checkNotNull(name);

        // try 5 times
        for (int i = 0; i < 5; i++) {
            if (commitSemaphore.tryAcquire()) {
                try {
                    refreshHead(true);

                    SegmentNodeState state = head.get();
                    SegmentNodeBuilder builder = state.builder();

                    NodeBuilder cp = builder.child(""checkpoints"").child(name);
                    if (cp.exists()) {
                        cp.remove();
                        SegmentNodeState newState = builder.getNodeState();
                        if (revisions.setHead(state.getRecordId(), newState.getRecordId())) {
                            refreshHead(false);
                            return true;
                        }
                    }
                } finally {
                    commitSemaphore.release();
                }
            }
        }
        return false;
    }"
1470,6244944.txt,none,"    @Override
    public void get(
            final String tenantId,
            final String type,
            final String authId,
            final JsonObject clientContext,
            final Span span,
            final Handler<AsyncResult<CredentialsResult<JsonObject>>> resultHandler) {

        Objects.requireNonNull(tenantId);
        Objects.requireNonNull(type);
        Objects.requireNonNull(authId);
        Objects.requireNonNull(resultHandler);

        final JsonObject data = getSingleCredentials(tenantId, authId, type, clientContext, span);
        if (data == null) {
            resultHandler.handle(Future.succeededFuture(CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND)));
        } else {
            resultHandler.handle(Future.succeededFuture(
                    CredentialsResult.from(HttpURLConnection.HTTP_OK, data.copy(), CacheDirective.noCacheDirective())));
        }
    }"
1471,7451699.txt,none,"    @Override
    public boolean isInConfiguration(IsInConfigurationAccess access) {
        return access.findClassByName(""org.codehaus.groovy.reflection.ClassInfo"") != null;
    }"
1472,9301230.txt,major,"    NativeKeyHolder(P11Key p11Key, long keyID, Session keySession,
            boolean extractKeyInfo, boolean isTokenObject) {
        this.p11Key = p11Key;
        this.keyID = keyID;
        this.refCount = -1;
        byte[] ki = null;
        if (isTokenObject) {
            this.ref = null;
        } else {
            this.ref = new SessionKeyRef(p11Key, keyID, keySession);

            // Try extracting key info, if any error, disable it
            Token token = p11Key.token;
            if (extractKeyInfo) {
                try {
                    if (p11Key.sensitive && nativeKeyWrapperKeyID == 0) {
                        synchronized(NativeKeyHolder.class) {
                            // Create a global wrapping/unwrapping key
                            CK_ATTRIBUTE[] wrappingAttributes = token.getAttributes
                                (O_GENERATE, CKO_SECRET_KEY, CKK_AES, new CK_ATTRIBUTE[] {
                                    new CK_ATTRIBUTE(CKA_CLASS, CKO_SECRET_KEY),
                                    new CK_ATTRIBUTE(CKA_VALUE_LEN, 256 >> 3),
                                });
                            Session wrappingSession = null;
                            try {
                                wrappingSession = token.getObjSession();
                                nativeKeyWrapperKeyID = token.p11.C_GenerateKey
                                    (wrappingSession.id(),
                                    new CK_MECHANISM(CKM_AES_KEY_GEN),
                                    wrappingAttributes);
                                byte[] iv = new byte[16];
                                JCAUtil.getSecureRandom().nextBytes(iv);
                                nativeKeyWrapperMechanism = new CK_MECHANISM
                                    (CKM_AES_CBC_PAD, iv);
                            } catch (PKCS11Exception e) {
                                // best effort
                            } finally {
                                token.releaseSession(wrappingSession);
                            }
                        }
                    }
                    Session opSession = null;
                    try {
                        opSession = token.getOpSession();
                        ki = p11Key.token.p11.getNativeKeyInfo(opSession.id(),
                            keyID, nativeKeyWrapperKeyID, nativeKeyWrapperMechanism);
                    } catch (PKCS11Exception e) {
                        // best effort
                    } finally {
                        token.releaseSession(opSession);
                    }
                } catch (PKCS11Exception e) {
                    // best effort
                }
            }
        }
        this.nativeKeyInfo = ((ki == null || ki.length == 0)? null : ki);
    }"
1473,3725378.txt,none,"        @Override
        protected List<ClassStructure> initialValue() {
            final List<ClassStructure> annotationTypeClassStructures = new ArrayList<ClassStructure>();
            accept(new ClassVisitor(ASM7) {

                @Override
                public AnnotationVisitor visitAnnotation(String desc, boolean visible) {
                    if (visible) {
                        final ClassStructure annotationTypeClassStructure = newInstance(Type.getType(desc).getClassName());
                        if (null != annotationTypeClassStructure) {
                            annotationTypeClassStructures.add(annotationTypeClassStructure);
                        }
                    }
                    return super.visitAnnotation(desc, visible);
                }

            });
            return annotationTypeClassStructures;
        }"
1474,8350294.txt,none,"    public void doAssert() {
        assert(true);
    }"
1475,4301941.txt,none,"    public String getAdminRealm() {
        return adminServerSetting.getAdminRealm();
    }"
1476,4256584.txt,none,"    public void send(byte[] data, int length, InetAddress host, int port)
    throws IOException
    {
        _sendPacket.setData(data);
        _sendPacket.setLength(length);
        _sendPacket.setAddress(host);
        _sendPacket.setPort(port);
        _socket_.send(_sendPacket);
    }"
1477,7454470.txt,none,"    <T> T lookup(Class<T> serviceClass, boolean wrapExceptions) {
        engine.checkState();
        if (cache.supportsService(serviceClass)) {
            try {
                ensureCreated();
            } catch (Throwable t) {
                if (wrapExceptions) {
                    throw PolyglotImpl.wrapGuestException(engine, t);
                } else {
                    throw t;
                }
            }
            return INSTRUMENT.getInstrumentationHandlerService(engine.instrumentationHandler, this, serviceClass);
        } else {
            return null;
        }
    }"
1478,6989848.txt,none,"  public static <T, K, V> Collector<T, ?, ImmutableSetMultimap<K, V>> toImmutableSetMultimap(
      Function<? super T, ? extends K> keyFunction,
      Function<? super T, ? extends V> valueFunction) {
    checkNotNull(keyFunction, ""keyFunction"");
    checkNotNull(valueFunction, ""valueFunction"");
    return Collector.of(
        ImmutableSetMultimap::<K, V>builder,
        (builder, t) -> builder.put(keyFunction.apply(t), valueFunction.apply(t)),
        ImmutableSetMultimap.Builder::combine,
        ImmutableSetMultimap.Builder::build);
  }"
1479,7207168.txt,none,"        @com.fasterxml.jackson.annotation.JsonValue
        public String getValue() {
            return value;
        }"
1480,4465426.txt,none,"    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }"
1481,4415593.txt,none,"        @SuppressWarnings(""unchecked"")
        @Override
        public void write(T data) throws IOException {
            Class<?> actualCls = entityCls != Object.class ? entityCls : data.getClass();
            if (writer == null) {
                writer = (MessageBodyWriter<T>)providers.getMessageBodyWriter(actualCls, actualCls, anns, mt);
                if (writer == null) {
                    throw new InternalServerErrorException();
                }
            }
            writer.writeTo(data, actualCls, actualCls, anns, mt, headers, os);
        }"
1482,9279084.txt,critical,"    private JPEGImageMetadataFormat() {
        super(JPEG.nativeImageMetadataFormatName,
              CHILD_POLICY_ALL);

        addElement(""JPEGvariety"",
                   JPEG.nativeImageMetadataFormatName,
                   CHILD_POLICY_CHOICE);

        addElement(""markerSequence"",
                   JPEG.nativeImageMetadataFormatName,
                   CHILD_POLICY_SEQUENCE);

        addElement(""app0JFIF"", ""JPEGvariety"", CHILD_POLICY_SOME);

        addStreamElements(""markerSequence"");

        addElement(""app14Adobe"", ""markerSequence"", CHILD_POLICY_EMPTY);

        addElement(""sof"", ""markerSequence"", 1, 4);

        addElement(""sos"", ""markerSequence"", 1, 4);

        addElement(""JFXX"", ""app0JFIF"", 1, Integer.MAX_VALUE);

        addElement(""app0JFXX"", ""JFXX"", CHILD_POLICY_CHOICE);

        addElement(""app2ICC"", ""app0JFIF"", CHILD_POLICY_EMPTY);

        addAttribute(""app0JFIF"",
                     ""majorVersion"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""0"", ""255"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""minorVersion"",
                     DATATYPE_INTEGER,
                     false,
                     ""2"",
                     ""0"", ""255"",
                     true, true);
        List<String> resUnits = new ArrayList<>();
        resUnits.add(""0"");
        resUnits.add(""1"");
        resUnits.add(""2"");
        addAttribute(""app0JFIF"",
                     ""resUnits"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     resUnits);
        addAttribute(""app0JFIF"",
                     ""Xdensity"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""1"", ""65535"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""Ydensity"",
                     DATATYPE_INTEGER,
                     false,
                     ""1"",
                     ""1"", ""65535"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""255"",
                     true, true);
        addAttribute(""app0JFIF"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""255"",
                     true, true);

        addElement(""JFIFthumbJPEG"", ""app0JFXX"", CHILD_POLICY_SOME);
        addElement(""JFIFthumbPalette"", ""app0JFXX"", CHILD_POLICY_EMPTY);
        addElement(""JFIFthumbRGB"", ""app0JFXX"", CHILD_POLICY_EMPTY);

        List<String> codes = new ArrayList<>();
        codes.add(""16""); // Hex 10
        codes.add(""17""); // Hex 11
        codes.add(""19""); // Hex 13
        addAttribute(""app0JFXX"",
                     ""extensionCode"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     codes);

        addChildElement(""markerSequence"", ""JFIFthumbJPEG"");

        addAttribute(""JFIFthumbPalette"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""JFIFthumbPalette"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);

        addAttribute(""JFIFthumbRGB"",
                     ""thumbWidth"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""JFIFthumbRGB"",
                     ""thumbHeight"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""255"",
                     true, true);

        addObjectValue(""app2ICC"", ICC_Profile.class, false, null);

        addAttribute(""app14Adobe"",
                     ""version"",
                     DATATYPE_INTEGER,
                     false,
                     ""100"",
                     ""100"", ""255"",
                     true, true);
        addAttribute(""app14Adobe"",
                     ""flags0"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""65535"",
                     true, true);
        addAttribute(""app14Adobe"",
                     ""flags1"",
                     DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""65535"",
                     true, true);

        List<String> transforms = new ArrayList<>();
        transforms.add(""0"");
        transforms.add(""1"");
        transforms.add(""2"");
        addAttribute(""app14Adobe"",
                     ""transform"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     transforms);

        addElement(""componentSpec"", ""sof"", CHILD_POLICY_EMPTY);

        List<String> procs = new ArrayList<>();
        procs.add(""0"");
        procs.add(""1"");
        procs.add(""2"");
        addAttribute(""sof"",
                     ""process"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     procs);
        addAttribute(""sof"",
                     ""samplePrecision"",
                     DATATYPE_INTEGER,
                     false,
                     ""8"");
        addAttribute(""sof"",
                     ""numLines"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""65535"",
                     true, true);
        addAttribute(""sof"",
                     ""samplesPerLine"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     ""0"", ""65535"",
                     true, true);
        List<String> comps = new ArrayList<>();
        comps.add(""1"");
        comps.add(""2"");
        comps.add(""3"");
        comps.add(""4"");
        addAttribute(""sof"",
                     ""numFrameComponents"",
                     DATATYPE_INTEGER,
                     false,
                     null,
                     comps);

        addAttribute(""componentSpec"",
                     ""componentId"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""componentSpec"",
                     ""HsamplingFactor"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""1"", ""255"",
                     true, true);
        addAttribute(""componentSpec"",
                     ""VsamplingFactor"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""1"", ""255"",
                     true, true);
        List<String> tabids = new ArrayList<>();
        tabids.add(""0"");
        tabids.add(""1"");
        tabids.add(""2"");
        tabids.add(""3"");
        addAttribute(""componentSpec"",
                     ""QtableSelector"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);

        addElement(""scanComponentSpec"", ""sos"", CHILD_POLICY_EMPTY);

        addAttribute(""sos"",
                     ""numScanComponents"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     comps);
        addAttribute(""sos"",
                     ""startSpectralSelection"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""63"",
                     true, true);
        addAttribute(""sos"",
                     ""endSpectralSelection"",
                      DATATYPE_INTEGER,
                     false,
                     ""63"",
                     ""0"", ""63"",
                     true, true);
        addAttribute(""sos"",
                     ""approxHigh"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""15"",
                     true, true);
        addAttribute(""sos"",
                     ""approxLow"",
                      DATATYPE_INTEGER,
                     false,
                     ""0"",
                     ""0"", ""15"",
                     true, true);

        addAttribute(""scanComponentSpec"",
                     ""componentSelector"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     ""0"", ""255"",
                     true, true);
        addAttribute(""scanComponentSpec"",
                     ""dcHuffTable"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);
        addAttribute(""scanComponentSpec"",
                     ""acHuffTable"",
                     DATATYPE_INTEGER,
                     true,
                     null,
                     tabids);
    }"
1483,8350391.txt,none,"	@Override
	public void postRead(ResolvedType enclosingType) {
		typePattern.postRead(enclosingType);
	}"
1484,7074998.txt,none,"  private <T> Task<Response<T>> createTask(final String name, final Request<T> request,
      final RequestContext requestContext, RequestConfig config) {
    LOGGER.debug(""createTask, name: '{}', config: {}"", name, config);
    if (_d2RequestTimeoutEnabled) {
      return createTaskWithD2Timeout(name, request, requestContext, config);
    } else {
      return createTaskWithTimeout(name, request, requestContext, config);
    }
  }"
1485,3919083.txt,none,"    @Override
    public <R> Promise<R> put(Entity<?> entity, Class<R> aClass) {
        return method(HttpMethod.PUT, entity, aClass);
    }"
1486,7138422.txt,none,"  public OptionsRequest(Map<String, String> headers,
                        List<HttpCookie> cookies,
                        Map<String, Object> queryParams,
                        Map<String, Class<?>> queryParamClasses,
                        ResourceSpec resourceSpec,
                        String baseUriTemplate,
                        Map<String, Object> pathKeys,
                        RestliRequestOptions requestOptions)
  {
    super(ResourceMethod.OPTIONS,
          null,
          headers,
          cookies,
          new OptionsResponseDecoder(),
          resourceSpec,
          queryParams,
          queryParamClasses,
          null,
          baseUriTemplate,
          pathKeys,
          requestOptions,
          null);
  }"
1487,6212333.txt,none,"  public MouseEvent getEvent() {
    return event;
  }"
1488,6666849.txt,none,"    @Override
    public APIRequestUpdate setParam(String param, Object value) {
      setParamInternal(param, value);
      return this;
    }"
1489,8225151.txt,none,"	public IGrammarAwareElementType getPRFNamed_RefAssignment_1_0_1ElementType() {
		return PRFNamed_RefAssignment_1_0_1_ELEMENT_TYPE;
	}"
1490,4327219.txt,none,    public  static  double   double_double_double( Blob a ) { return -1.0; }
1491,9506659.txt,none,"  public ConnectionPoolId(final UserGroupInformation ugi, final String nnId,
      final Class<?> proto) {
    this.nnId = nnId;
    this.ugi = ugi;
    this.protocol = proto;
  }"
1492,3873345.txt,none,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    LinkAttributeFilter that = (LinkAttributeFilter) o;
    return isVisible() == that.isVisible() && Objects.equals(linkAttribute, that.linkAttribute);
  }"
1493,9324338.txt,none,"    public String getMessage() {
        if (minor == 0)
            return (getMajorString());

        return (getMajorString()
                + "" (Mechanism level: "" + getMinorString() + "")"");
    }"
1494,4865255.txt,none,"    public QPropertyDefinition[] getMandatoryQPropertyDefinitions() {
        // since mandatory items must have a name,
        // we're only searching the named item definitions
        if (namedItemDefs.size() == 0) {
            return QPropertyDefinition.EMPTY_ARRAY;
        }
        ArrayList<QItemDefinition> defs = new ArrayList<QItemDefinition>(namedItemDefs.size());
        for (List<QItemDefinition> list : namedItemDefs.values()) {
            for (QItemDefinition qDef : list) {
                if (!qDef.definesNode() && qDef.isMandatory()) {
                    defs.add(qDef);
                }
            }
        }
        if (defs.size() == 0) {
            return QPropertyDefinition.EMPTY_ARRAY;
        }
        return defs.toArray(new QPropertyDefinition[defs.size()]);
    }"
1495,9312894.txt,none,"    private ConfigurationInfo(CompositeData cd) {
        this.settings = createMap(cd.get(""settings""));
        this.name = (String) cd.get(""name"");
        this.label = (String) cd.get(""label"");
        this.description = (String) cd.get(""description"");
        this.provider = (String) cd.get(""provider"");
        this.contents = (String) cd.get(""contents"");
    }"
1496,4980296.txt,none,"    @Override
    public String toString() {
        return String.format(""Partition(topic = %s, partition = %d, leader = %s, replicas = %s, isr = %s, offlineReplicas = %s)"",
                             topic,
                             partition,
                             leader == null ? ""none"" : leader.idString(),
                             formatNodeIds(replicas),
                             formatNodeIds(inSyncReplicas),
                             formatNodeIds(offlineReplicas));
    }"
1497,7720540.txt,none,"    public String getHost() {
        return host;
    }"
1498,7284429.txt,none,"    @Override
    public final void connect(Repository source, ProxyInfoProvider proxyInfoProvider) throws ConnectionException,
            AuthenticationException {
        connect(source, null, proxyInfoProvider);
    }"
1499,7273237.txt,none,"        ExternalJavaClass(JavaClass javaClass, boolean retained) {
            allInstancesSize = javaClass.getAllInstancesSize();
            isArray = javaClass.isArray();
            instanceSize = javaClass.getInstanceSize();
            instancesCount = javaClass.getInstancesCount();
            retainedSizeByClass = retained ? javaClass.getRetainedSizeByClass() : DataType.RETAINED_SIZE.getNotAvailableValue();
            javaClassId = javaClass.getJavaClassId();
            name = javaClass.getName();
        }"
1500,9115884.txt,none,"	private ColorHandle doGetColorHandle( String memberName )
	{
		return new ColorHandle( getElementHandle( ), StructureContextUtil
				.createStructureContext( this, memberName ) );
	}"
1501,9245741.txt,none,"        @Override
        protected void uninstallListeners(JComponent scrollPane) {
            super.uninstallListeners(scrollPane);
            scrollPane.removePropertyChangeListener(propertyChangeHandler);
        }"
1502,6368019.txt,none,"    protected void getAllContributedActions(HashSet set, IContributionItem item) {
        if (item instanceof MenuManager) {
			for (IContributionItem subItem : ((MenuManager) item).getItems()) {
				getAllContributedActions(set, subItem);
			}
        } else if (item instanceof ActionContributionItem) {
            set.add(((ActionContributionItem) item).getAction());
        }
    }"
1503,9320426.txt,none,"    @Override
    public String toString() {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        writeTo(baos);
        return baos.toString();
    }"
1504,3897308.txt,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEC:
        return getSec();

      case TOPE:
        return getTope();

      }
      throw new java.lang.IllegalStateException();
    }"
1505,7473205.txt,none,	protected Customer377() {}
1506,5469798.txt,minor,"    @Override
    public Provider createProvider(URI remoteURI, ProviderFutureFactory futureFactory) throws Exception {
        CompositeData composite = URISupport.parseComposite(remoteURI);
        Map<String, String> options = composite.getParameters();

        Map<String, String> filtered = PropertyUtil.filterProperties(options, FAILOVER_OPTION_PREFIX);
        Map<String, String> nested = PropertyUtil.filterProperties(filtered, FAILOVER_NESTED_OPTION_PREFIX_ADDON);

        Map<String, String> providerOptions = PropertyUtil.filterProperties(options, ""provider."");
        // If we have been given a futures factory to use then we ignore any URI options indicating
        // what to create and just go with what we are given.
        if (futureFactory == null) {
            // Create a configured ProviderFutureFactory for use by the resulting AmqpProvider
            futureFactory = ProviderFutureFactory.create(providerOptions);
            if (!providerOptions.isEmpty()) {
                String msg = """"
                    + "" Not all Provider options could be applied during Failover Provider creation.""
                    + "" Check the options are spelled correctly.""
                    + "" Unused parameters=["" + providerOptions + ""].""
                    + "" This provider instance cannot be started."";
                throw new IllegalArgumentException(msg);
            }
        }

        FailoverProvider provider = new FailoverProvider(composite.getComponents(), nested, futureFactory);
        Map<String, String> unused = PropertyUtil.setProperties(provider, filtered);
        if (!unused.isEmpty()) {
            String msg = """"
                + "" Not all options could be set on the Failover provider.""
                + "" Check the options are spelled correctly.""
                + "" Unused parameters=["" + unused + ""].""
                + "" This Provider cannot be started."";
            throw new IllegalArgumentException(msg);
        }

        return provider;
    }"
1507,4075888.txt,none,"    private void finalizeCheckpoint(String checkpointId,
                                    File checkpointedDir,
                                    byte[] txid) throws IOException {
        File[] files = checkpointedDir.listFiles();

        CheckpointMetadata.Builder metadataBuilder = CheckpointMetadata.newBuilder();
        for (File file : files) {
            metadataBuilder.addFiles(file.getName());
        }
        if (null != txid) {
            metadataBuilder.setTxid(UnsafeByteOperations.unsafeWrap(txid));
        }
        metadataBuilder.setCreatedAt(System.currentTimeMillis());

        String destCheckpointPath = RocksUtils.getDestCheckpointMetadataPath(dbPrefix, checkpointId);
        try (OutputStream os = checkpointStore.openOutputStream(destCheckpointPath)) {
            os.write(metadataBuilder.build().toByteArray());
        }
    }"
1508,8104990.txt,none,"  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP:
        setOp(OP_EDEFAULT);
        return;
      case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE:
        setSource((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }"
1509,6299837.txt,minor,"    private static boolean resolveGenericRef(GenericRef ref, Class<?> clazz, Type type)
    {
        if (type instanceof Class)
        {
            if (type == ref.ifaceClass)
            {
                // is this a straight ref or a TypeVariable?
                // debug(""Found ref (as class): %s"",toShortName(type));
                ref.setGenericFromType(type,0);
                return true;
            }
            else
            {
                // Keep digging
                return resolveGenericRef(ref,type);
            }
        }

        if (type instanceof ParameterizedType)
        {
            ParameterizedType ptype = (ParameterizedType)type;
            Type rawType = ptype.getRawType();
            if (rawType == ref.ifaceClass)
            {
                // debug(""Found ref on [%s] as ParameterizedType [%s]"",toShortName(clazz),toShortName(ptype));
                // Always get the raw type parameter, let unwrap() solve for what it is
                ref.setGenericFromType(ptype.getActualTypeArguments()[0],0);
                return true;
            }
            else
            {
                // Keep digging
                return resolveGenericRef(ref,rawType);
            }
        }
        return false;
    }"
1510,8934890.txt,none,"    @Override
    public AggregationBuffer getNewAggregationBuffer() throws HiveException {
      NGramAggBuf result = new NGramAggBuf();
      result.nge = new NGramEstimator();
      reset(result);
      return result;
    }"
1511,6201491.txt,none,"  @Override
  protected SystemPermissionsImpl getEntity(String userId, String instanceId)
      throws NotFoundException, ServerException {
    try {
      final List<SystemPermissionsImpl> existent = doGetByUser(userId);
      if (existent.isEmpty()) {
        throw new NotFoundException(format(""System permissions for user '%s' not found"", userId));
      }
      return existent.get(0);
    } catch (RuntimeException e) {
      throw new ServerException(e.getMessage(), e);
    }
  }"
1512,5843392.txt,none,"  public JavaCharStream(java.io.InputStream dstream, String encoding, int startline,
  int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException
  {
    this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
  }"
1513,7786250.txt,none,"	public Bytes getFileMaxSize()
	{
		return fileMaxSize;
	}"
1514,8244590.txt,none,"    public static int getAttributeAsInteger(Element element, 
            String attributeName) throws Exception {
        String attrValue = getAttribute(element, attributeName);
        try {
            return Integer.parseInt(attrValue);
        } catch (NumberFormatException e) {
            throw new Exception(""Cannot parse the value \"""" + attrValue + 
                    ""\"" as an integer in the attribute \"""" + attributeName + 
                    ""\"" on the element \"""" + element.getTagName() + 
                    ""\"" at "" + getLocation(element));
        }
    }"
1515,4360681.txt,none,"    public static Test clientExistingServerSuite(Class testClass, String hostName, int portNumber)
    {
               // Will not start server and does not stop it when done!.
        return existingServerDecorator(bareClientServerSuite(testClass),
                hostName, portNumber);
    }"
1516,4032154.txt,none,"    private QuantileBuffer<T> collapse(Iterable<QuantileBuffer<T>> buffers) {
      int newLevel = 0;
      long newWeight = 0;
      for (QuantileBuffer<T> buffer : buffers) {
        // As presented in the paper, there should always be at least two
        // buffers of the same (minimal) level to collapse, but it is possible
        // to violate this condition when combining buffers from independently
        // computed shards.  If they differ we take the max.
        newLevel = Math.max(newLevel, buffer.level + 1);
        newWeight += buffer.weight;
      }
      List<T> newElements = interpolate(buffers, bufferSize, newWeight, offset(newWeight));
      return new QuantileBuffer<>(newLevel, newWeight, newElements);
    }"
1517,9352823.txt,none,"  public byte getByteAt(long index) {
    return addr.getJByteAt(baseOffset + index);
  }"
1518,9484885.txt,none,"  protected void createAInfo(ServiceRecord record) throws Exception {
    AContainerRecordDescriptor recordInfo = new AContainerRecordDescriptor(
        getPath(), record);
    registerRecordDescriptor(Type.A, recordInfo);
  }"
1519,7022945.txt,none,"    public Builder withAuthentication(final HttpAuth authentication) {
      this.authentication = authentication;
      return this;
    }"
1520,4212572.txt,none,"    public static Class<?> getPropertyEditorClass(final Object bean, final String name)
            throws IllegalAccessException, InvocationTargetException,
            NoSuchMethodException {

        return PropertyUtilsBean.getInstance().getPropertyEditorClass(bean, name);

    }"
1521,8026786.txt,none,		public RuleCall getInitExpressionExpressionParserRuleCall_4_0() { return cInitExpressionExpressionParserRuleCall_4_0; }
1522,3824920.txt,none,"   @Override
   public void reset() {
      RepeatableIteratorWrapper<E> changedIterator = this.changedIterator;
      if (changedIterator != null) {
         currentIterator = changedIterator;
         changedIteratorFieldUpdater.compareAndSet(this, changedIterator, null);
      }
      currentIterator.reset();
   }"
1523,5907719.txt,none,"    public Type typeCheck(SymbolTable stable) throws TypeCheckError {
	if (argumentCount() > 0) {
	    argument().typeCheck(stable);
	}
	return _type = Type.Real;
    }"
1524,9255886.txt,none,"    private static void emitStackMove(CompilationResultBuilder crb, AArch64MacroAssembler masm, AllocatableValue result, Value input) {
        try (ScratchRegister r1 = masm.getScratchRegister()) {
            try (ScratchRegister r2 = masm.getScratchRegister()) {
                Register rscratch1 = r1.getRegister();
                Register rscratch2 = r2.getRegister();
                // use the slot kind to define the operand size
                PlatformKind kind = input.getPlatformKind();
                final int size = kind.getSizeInBytes() * Byte.SIZE;

                // Always perform stack -> stack copies through integer registers
                crb.blockComment(""[stack -> stack copy]"");
                AArch64Address src = loadStackSlotAddress(crb, masm, asStackSlot(input), rscratch2);
                masm.ldr(size, rscratch1, src);
                AArch64Address dst = loadStackSlotAddress(crb, masm, asStackSlot(result), rscratch2);
                masm.str(size, rscratch1, dst);
            }
        }
    }"
1525,7501278.txt,none,"		private DeleteCommand(@Nullable ByteBuffer key, List<RecordId> recordIds) {

			super(key);
			this.recordIds = recordIds;
		}"
1526,6563293.txt,none,"@Override
protected boolean flushCache(Control control) {
  return true;
}"
1527,7864012.txt,none,"  public static EvictionAction parseAction(String s) {
    if (s == null)
      return NONE;
    if (s.length() < 1)
      return NONE;
    for (int i = 0; i < stringTable.length; ++i) {
      if (s.equals(stringTable[i])) {
        return enumValueTable[i];
      }
    }
    return NONE;
  }"
1528,8574748.txt,none,"  public static void concurrentVisitReferencedFiles(final Configuration conf, final FileSystem fs,
      final SnapshotManifest manifest, final String desc, final StoreFileVisitor visitor)
      throws IOException {

    final Path snapshotDir = manifest.getSnapshotDir();
    List<SnapshotRegionManifest> regionManifests = manifest.getRegionManifests();
    if (regionManifests == null || regionManifests.isEmpty()) {
      LOG.debug(""No manifest files present: "" + snapshotDir);
      return;
    }

    ExecutorService exec = SnapshotManifest.createExecutor(conf, desc);

    try {
      concurrentVisitReferencedFiles(conf, fs, manifest, exec, visitor);
    } finally {
      exec.shutdown();
    }
  }"
1529,6507301.txt,none,"	public CordovaCLIResult version(final IProgressMonitor monitor) throws CoreException{
		final CordovaCLIStreamListener streamListener = new CordovaCLIStreamListener();
		IProcess process = startShell(streamListener, monitor, getLaunchConfiguration(""cordova -version""));
		String cordovaCommand = ""cordova -version\n"";
		sendCordovaCommand(process, cordovaCommand, monitor);
		CordovaCLIResult result = new CordovaCLIResult(streamListener.getMessage());
		return result;		
	}"
1530,9294785.txt,none,"        private void setElem(final int index, final double elem) {
            try {
                if (index < nb.limit()) {
                    nb.put(index, elem);
                }
            } catch (final IndexOutOfBoundsException e) {
                throw new ClassCastException();
             }
        }"
1531,8560556.txt,critical,"  @SuppressWarnings(""unchecked"")
  protected Map<byte[], List<Path>>[] handleBulkLoad(List<TableName> sTableList)
          throws IOException {
    Map<byte[], List<Path>>[] mapForSrc = new Map[sTableList.size()];
    List<String> activeFiles = new ArrayList<>();
    List<String> archiveFiles = new ArrayList<>();
    Pair<Map<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>>, List<byte[]>> pair =
            backupManager.readBulkloadRows(sTableList);
    Map<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>> map = pair.getFirst();
    FileSystem tgtFs;
    try {
      tgtFs = FileSystem.get(new URI(backupInfo.getBackupRootDir()), conf);
    } catch (URISyntaxException use) {
      throw new IOException(""Unable to get FileSystem"", use);
    }
    Path rootdir = FSUtils.getRootDir(conf);
    Path tgtRoot = new Path(new Path(backupInfo.getBackupRootDir()), backupId);

    for (Map.Entry<TableName, Map<String, Map<String, List<Pair<String, Boolean>>>>> tblEntry :
      map.entrySet()) {
      TableName srcTable = tblEntry.getKey();

      int srcIdx = getIndex(srcTable, sTableList);
      if (srcIdx < 0) {
        LOG.warn(""Couldn't find "" + srcTable + "" in source table List"");
        continue;
      }
      if (mapForSrc[srcIdx] == null) {
        mapForSrc[srcIdx] = new TreeMap<>(Bytes.BYTES_COMPARATOR);
      }
      Path tblDir = FSUtils.getTableDir(rootdir, srcTable);
      Path tgtTable = new Path(new Path(tgtRoot, srcTable.getNamespaceAsString()),
          srcTable.getQualifierAsString());
      for (Map.Entry<String,Map<String,List<Pair<String, Boolean>>>> regionEntry :
        tblEntry.getValue().entrySet()){
        String regionName = regionEntry.getKey();
        Path regionDir = new Path(tblDir, regionName);
        // map from family to List of hfiles
        for (Map.Entry<String,List<Pair<String, Boolean>>> famEntry :
          regionEntry.getValue().entrySet()) {
          String fam = famEntry.getKey();
          Path famDir = new Path(regionDir, fam);
          List<Path> files;
          if (!mapForSrc[srcIdx].containsKey(Bytes.toBytes(fam))) {
            files = new ArrayList<>();
            mapForSrc[srcIdx].put(Bytes.toBytes(fam), files);
          } else {
            files = mapForSrc[srcIdx].get(Bytes.toBytes(fam));
          }
          Path archiveDir = HFileArchiveUtil.getStoreArchivePath(conf, srcTable, regionName, fam);
          String tblName = srcTable.getQualifierAsString();
          Path tgtFam = new Path(new Path(tgtTable, regionName), fam);
          if (!tgtFs.mkdirs(tgtFam)) {
            throw new IOException(""couldn't create "" + tgtFam);
          }
          for (Pair<String, Boolean> fileWithState : famEntry.getValue()) {
            String file = fileWithState.getFirst();
            int idx = file.lastIndexOf(""/"");
            String filename = file;
            if (idx > 0) {
              filename = file.substring(idx+1);
            }
            Path p = new Path(famDir, filename);
            Path tgt = new Path(tgtFam, filename);
            Path archive = new Path(archiveDir, filename);
            if (fs.exists(p)) {
              if (LOG.isTraceEnabled()) {
                LOG.trace(""found bulk hfile "" + file + "" in "" + famDir + "" for "" + tblName);
              }
              if (LOG.isTraceEnabled()) {
                LOG.trace(""copying "" + p + "" to "" + tgt);
              }
              activeFiles.add(p.toString());
            } else if (fs.exists(archive)){
              LOG.debug(""copying archive "" + archive + "" to "" + tgt);
              archiveFiles.add(archive.toString());
            }
            files.add(tgt);
          }
        }
      }
    }

    copyBulkLoadedFiles(activeFiles, archiveFiles);
    backupManager.deleteBulkLoadedRows(pair.getSecond());
    return mapForSrc;
  }"
1532,6315350.txt,none,"    protected void modified(final Map<String, Object> properties) throws Exception {
        logger.debug(""Updating properties: {}"", properties);
        try {
            if (isRestartNeeded(properties)) {
                logger.info(""Need restart"");
                stop();
                start(properties);
            }

            // apply current routes

            applyRoutes(properties);
        } catch (Exception e) {
            logger.warn(""Problem updating component"", e);
            throw e;
        }
    }"
1533,9312050.txt,none,"    private static Void checkPermission() {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null)
            sm.checkPermission(new RuntimePermission(""selectorProvider""));
        return null;
    }"
1534,6174003.txt,none,"  private String resolve(String template) throws TemplateNotFoundException {
    try (Reader reader = new InputStreamReader(IoUtil.getResource(template))) {
      return CharStreams.toString(reader);
    } catch (IOException e) {
      throw new TemplateNotFoundException(e.getMessage(), e);
    }
  }"
1535,8579440.txt,none,"    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAll_args)
        return this.equals((deleteAll_args)that);
      return false;
    }"
1536,6666668.txt,none,"  public ProductItemCommerceInsights() {
  }"
1537,4476433.txt,none,"  @VisibleForTesting
  public int getPreferredMergeBatchSize() { return preferredMergeBatchSize; }"
1538,6848482.txt,none,"  public static boolean validateTypeSize(final Component parent, final JTextField size) {
    if (validateTypeSize(size)) {
      return true;
    } else {
      CMessageBox.showWarning(parent, ""Please enter a valid type size."");
      return false;
    }
  }"
1539,4275268.txt,none,"        double getRemB() {
            return finalRemB;
        }"
1540,8615469.txt,none,"    ClientCacheQueryResponse(long requestId, ClientCacheQueryCursor cursor) {
        super(requestId);

        assert cursor != null;

        this.cursor = cursor;
    }"
1541,5845283.txt,minor,"    private static void orderFragments(Set<WebXml> orderedFragments,
            Set<WebXml> unordered) {
        Set<WebXml> addedThisRound = new HashSet<>();
        Set<WebXml> addedLastRound = new HashSet<>();
        while (unordered.size() > 0) {
            Iterator<WebXml> source = unordered.iterator();
            while (source.hasNext()) {
                WebXml fragment = source.next();
                for (WebXml toRemove : addedLastRound) {
                    fragment.getAfterOrdering().remove(toRemove.getName());
                }
                if (fragment.getAfterOrdering().isEmpty()) {
                    addedThisRound.add(fragment);
                    orderedFragments.add(fragment);
                    source.remove();
                }
            }
            if (addedThisRound.size() == 0) {
                // Circular
                throw new IllegalArgumentException(
                        sm.getString(""webXml.mergeConflictOrder""));
            }
            addedLastRound.clear();
            addedLastRound.addAll(addedThisRound);
            addedThisRound.clear();
        }
    }"
1542,4059491.txt,none,"    @Override
    public void saw(T element) {
      long thisElementIndex = nextElementIndex;
      nextElementIndex++;
      if (thisElementIndex == nextIndexToReport) {
        nextIndexToReport = nextElementIndex;
        report(element);
      }
    }"
1543,7356682.txt,none,"    @Override
    public NegotiateState initialize() throws NegotiateException {
        throw new RuntimeException(MESSAGE);
    }"
1544,6562963.txt,none,"	public void setForeground(Color fg) {
		super.setForeground(fg);
		titleRegion.setForeground(fg);
		if (messageRegion != null)
			messageRegion.setForeground(fg);
	}"
1545,5340257.txt,none,"    @Override
    public long exportTo(final ContentClaim claim, final Path destination, final boolean append, final long offset, final long length) throws IOException {
        if (claim == null) {
            if (append) {
                return 0L;
            }
            Files.createFile(destination);
            return 0L;
        }

        final StandardOpenOption openOption = append ? StandardOpenOption.APPEND : StandardOpenOption.CREATE;
        try (final InputStream in = read(claim);
                final OutputStream destinationStream = Files.newOutputStream(destination, openOption)) {

            if (offset > 0) {
                StreamUtils.skip(in, offset);
            }

            StreamUtils.copy(in, destinationStream, length);
            return length;
        }
    }"
1546,7458584.txt,none,"        @Override
        public void remove() {
            throw new UnsupportedOperationException();
        }"
1547,8418552.txt,none,"    @Override
    public WorkflowDefinitionFactory getWorkflowDefinitionFactory(WorkflowType workflowType) {
        WorkflowTypeRegistrationOptions registrationOptions = configuration.getWorkflowTypeRegistrationOptions() != null
                ? configuration.getWorkflowTypeRegistrationOptions() : new WorkflowTypeRegistrationOptions();
        DataConverter dataConverter = configuration.getDataConverter() != null
                ? configuration.getDataConverter() : new JsonDataConverter();
        return new CamelWorkflowDefinitionFactory(swfWorkflowConsumer, workflowType, registrationOptions, dataConverter);
    }"
1548,7056882.txt,major,"  public static int reconfigureNetworking()
  {
    // This uses values from the property settings
    if (Sage.getBoolean(NET_CONFIG_WIRED, true))
    {
      // Bring down the wireless interface if it's there
      bringDownWireless();

      setupNetworking(Sage.get(""linux/wired_network_port"", ""eth0""));
    }
    else
    {
      // Bring down the wired interface if it's there
      if (Sage.getBoolean(""linux/disable_wired_when_wireless_is_enabled"", false))
        bringDownWired();

      // Be sure the wired interface is loaded (it may need to be before it is configured)
      IOUtils.exec2(""ifconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" up"");

      // Setup the wireless networking properties before we try to connect to the network or it won't work
      IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" essid "" + Sage.get(NET_CONFIG_SSID, ""any""));

      String crypto = Sage.get(NET_CONFIG_ENCRYPTION, ""WPA"");
      if (""None"".equals(crypto))
      {
        IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key off"");
      }
      else
      {
        // Check if the key is all hex
        String key = Sage.get(NET_CONFIG_ENCRYPTION_KEY, """");
        boolean hexKey = true;
        for (int i = 0; i < key.length(); i++)
        {
          if (Character.digit(key.charAt(i), 16) < 0)
          {
            hexKey = false;
            break;
          }
        }
        if (""WEP"".equals(crypto))
        {
          IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key on"");
          if (hexKey)
            IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key "" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, """"));
          else
            IOUtils.exec2(""iwconfig "" + Sage.get(""linux/wireless_network_port"", ""eth1"") + "" key s:"" + Sage.get(NET_CONFIG_ENCRYPTION_KEY, """"));
        }
        else // WPA
        {
          // NOT FINISHED YET, we'll need to setup a configuration file for wpa_supplicant and then run it
        }
      }

      setupNetworking(Sage.get(""linux/wireless_network_port"", ""eth1""));
    }
    return 0;
  }"
1549,5627395.txt,none,"        @Override
        boolean innerToOuter()
        {
            return true;
        } "
1550,6627471.txt,none,"	public int findWkid(String unit) {
		if (!wkidLookup.containsKey(unit)) {
			throw new IllegalArgumentException();
		}
		return wkidLookup.get(unit);
	}"
1551,7359431.txt,none,"    public _Failure[] getFailures()
    {
        return this.failures;
    }"
1552,4059172.txt,none,"    @Override
    public String apply(TableReferenceProto.TableReference from) {
      return toTableSpec(from);
    }"
1553,5450135.txt,none,"	protected void handleDefaultEscapeXML() {

      PortletConfig portletConfig = (PortletConfig) pageContext.getRequest().getAttribute(Constants.PORTLET_CONFIG);
      Map<String, String[]> containerRuntimeOptions = portletConfig.getContainerRuntimeOptions();
      if (containerRuntimeOptions != null) {
         String[] result = containerRuntimeOptions.get(Constants.ESCAPE_XML_RUNTIME_OPTION);
         if (result != null) {
            if (result.length > 0) {
               setEscapeXml(result[0]);
            }
         }
      }

	}"
1554,5616304.txt,none,"    public void destroy() {
        if (cacheManagerImplicitlyCreated) {
            try {
                net.sf.ehcache.CacheManager cacheMgr = getCacheManager();
                cacheMgr.shutdown();
            } catch (Throwable t) {
                if (log.isWarnEnabled()) {
                    log.warn(""Unable to cleanly shutdown implicitly created CacheManager instance.  "" +
                            ""Ignoring (shutting down)..."", t);
                }
            } finally {
                this.manager = null;
                this.cacheManagerImplicitlyCreated = false;
            }
        }
    }"
1555,6615560.txt,none,"public static String
toString(byte [] b) {
	ByteArrayOutputStream os = new ByteArrayOutputStream();

	for (int i = 0; i < b.length; i++) {
		short value = (short) (b[i] & 0xFF);
		byte high = (byte) (value >> 4);
		byte low = (byte) (value & 0xF);
		os.write(Base16.charAt(high));
		os.write(Base16.charAt(low));
	}
	return new String(os.toByteArray());
}"
1556,8953833.txt,none,"    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }"
1557,6915447.txt,none,"  @Override
  public void prepare(MediaSource mediaSource, boolean resetPosition, boolean resetState) {
    throw new UnsupportedOperationException();
  }"
1558,3993831.txt,none,"    public WritableRaster copyData(WritableRaster wr) {
        // Get my source.
        CachableRed srcRed = (CachableRed)getSources().get(0);

        SampleModel sm = srcRed.getSampleModel();
        if (sm.getNumBands() == 1)
            // Already one band of data so we just use it...
            return srcRed.copyData(wr);

        // Two band case so we need to multiply them...
        // Note: Our source will always have either one or two bands
        // since we insert an Any2Lum transform before ourself in the
        // rendering chain.

        Raster srcRas = srcRed.getData(wr.getBounds());
        PixelInterleavedSampleModel srcSM;
        srcSM = (PixelInterleavedSampleModel)srcRas.getSampleModel();

        DataBufferByte srcDB = (DataBufferByte)srcRas.getDataBuffer();
        byte []        src   = srcDB.getData();
        
        PixelInterleavedSampleModel dstSM;
        dstSM = (PixelInterleavedSampleModel)wr.getSampleModel();

        DataBufferByte dstDB = (DataBufferByte)wr.getDataBuffer();
        byte []        dst   = dstDB.getData();

        int srcX0 = srcRas.getMinX()-srcRas.getSampleModelTranslateX();
        int srcY0 = srcRas.getMinY()-srcRas.getSampleModelTranslateY();

        int dstX0 = wr.getMinX()-wr.getSampleModelTranslateX();
        int dstX1 = dstX0+wr.getWidth()-1;
        int dstY0 = wr.getMinY()-wr.getSampleModelTranslateY();

        int    srcStep = srcSM.getPixelStride();
        int [] offsets = srcSM.getBandOffsets();
        int    srcLOff = offsets[0];
        int    srcAOff = offsets[1];

        if (srcRed.getColorModel().isAlphaPremultiplied()) {
            // Lum is already multiplied by alpha so we just copy lum channel.
            for (int y=0; y<srcRas.getHeight(); y++) {
                int srcI  = srcDB.getOffset() + srcSM.getOffset(srcX0,  srcY0);
                int dstI  = dstDB.getOffset() + dstSM.getOffset(dstX0,  dstY0);
                int dstE  = dstDB.getOffset() + dstSM.getOffset(dstX1+1,dstY0);

                srcI += srcLOff; // Go to Lum Channel (already mult by alpha).

                while (dstI < dstE) {
                    dst[dstI++] = src[srcI];
                        srcI += srcStep; // Go to next pixel
                }
                srcY0++;
                dstY0++;
            }
        }
        else {
            // This allows me to pre-adjust my index by srcLOff
            // Then only add the offset for srcAOff
            srcAOff = srcAOff-srcLOff;

            for (int y=0; y<srcRas.getHeight(); y++) {
                int srcI  = srcDB.getOffset() + srcSM.getOffset(srcX0,  srcY0);
                int dstI  = dstDB.getOffset() + dstSM.getOffset(dstX0,  dstY0);
                int dstE  = dstDB.getOffset() + dstSM.getOffset(dstX1+1,dstY0);

                srcI += srcLOff;

                while (dstI < dstE) {
                    int sl = (src[srcI])&0xFF; // LOff already included
                    int sa = (src[srcI+srcAOff])&0xFF;
                    // the + 0x80 forces proper rounding.
                    dst[dstI++] = (byte)((sl*sa+0x80)>>8);

                    srcI+= srcStep; //  next pixel
                }
                srcY0++;
                dstY0++;
            }
        }

        return wr;
    }"
1559,3722097.txt,none,"    private final int register_mime_types(F filter, String prefix) {
        final Iterator<String> i = filter.typesIterator();
        if (i == null) {
            return 0;
        }

        int num = 0;
        while (i.hasNext()) {
            String name = i.next();
            num++;
            String baseName = name;
            final int slashpos = name.indexOf('/');
            if (slashpos > 0) {
                baseName = name.substring(0, slashpos).intern();
            } else {
                name = name + ""/*"";
            }

            addFilter(mTypeToFilter, name, filter);

            if (slashpos > 0) {
                addFilter(mBaseTypeToFilter, baseName, filter);
            } else {
                addFilter(mWildTypeToFilter, baseName, filter);
            }
        }

        return num;
    }"
1560,3893413.txt,minor,"    protected static void initialize()
    {
      STRAM.setChildren(Sets.newHashSet(APPLICATION, TEMPLATE));
      APPLICATION.setChildren(Sets.newHashSet(GATEWAY, OPERATOR, STREAM));
      OPERATOR.setChildren(Sets.newHashSet(PORT));
      PORT.setChildren(Sets.newHashSet(UNIFIER));

      STRAM_ELEMENT_TO_CONF_ELEMENT.clear();

      //Initialize StramElement to ConfElement
      for (ConfElement confElement: ConfElement.values()) {
        STRAM_ELEMENT_TO_CONF_ELEMENT.put(confElement.getStramElement(), confElement);

        for (StramElement sElement: confElement.getAllRelatedElements()) {
          STRAM_ELEMENT_TO_CONF_ELEMENT.put(sElement, confElement);
        }
      }

      //Initialize attributes
      for (ConfElement confElement: ConfElement.values()) {
        if (confElement.getParent() == null) {
          continue;
        }

        setAmbiguousAttributes(confElement);
      }

      // build context to conf element map
      CONTEXT_TO_CONF_ELEMENT.clear();

      for (ConfElement confElement: ConfElement.values()) {
        CONTEXT_TO_CONF_ELEMENT.put(confElement.getContextClass(), confElement);
      }

      //Check if all the context classes are accounted for
      Set<Class<? extends Context>> confElementContextClasses = Sets.newHashSet();

      for (ConfElement confElement: ConfElement.values()) {
        if (confElement.getContextClass() == null) {
          continue;
        }

        confElementContextClasses.add(confElement.getContextClass());
      }

      if (!ContextUtils.CONTEXT_CLASSES.equals(confElementContextClasses)) {
        throw new IllegalStateException(""All the context classes "" + ContextUtils.CONTEXT_CLASSES + "" found in ""
                                        + Context.class + "" are not used by ConfElements "" + confElementContextClasses);
      }
    }"
1561,8928769.txt,none,"  public void initParseCtx(ParseContext pctx) {
    opToPartPruner = pctx.getOpToPartPruner();
    opToPartList = pctx.getOpToPartList();
    opToSamplePruner = pctx.getOpToSamplePruner();
    topOps = pctx.getTopOps();
    loadTableWork = pctx.getLoadTableWork();
    loadFileWork = pctx.getLoadFileWork();
    ctx = pctx.getContext();
    destTableId = pctx.getDestTableId();
    idToTableNameMap = pctx.getIdToTableNameMap();
    uCtx = pctx.getUCtx();
    listMapJoinOpsNoReducer = pctx.getListMapJoinOpsNoReducer();
    prunedPartitions = pctx.getPrunedPartitions();
    tabNameToTabObject = pctx.getTabNameToTabObject();
    fetchTask = pctx.getFetchTask();
    setLineageInfo(pctx.getLineageInfo());
  }"
1562,5690795.txt,none,"	public int delete(IdEntity object) throws CreateException {
		if (object == null) {
			throw new CreateException(""Cannot delete null object"");
		}
		return delete(object.getClass(), object.getId());
	}"
1563,5182985.txt,minor,"    @Override
    protected boolean isUnreachableException(Throwable ex) {
        if (super.isUnreachableException(ex)) {
            return true;
        }

        if (ex instanceof SocketTimeoutException)
            return true;

        List<String> exceptionList = new ArrayList<>();
        exceptionList.add(ex.getClass().getName());

        Throwable t = ex.getCause();
        int depth = 0;
        while (t != null && depth < 5) {
            exceptionList.add(t.getClass().getName());
            depth++;
            if (t instanceof ConnectException) {
                return true;
            }
            t = t.getCause();
        }

        logger.trace(""Not an unreachable exception with causes {}"", exceptionList);
        return false;
    }"
1564,5625637.txt,none,"        @Override
        public int getDefaultBackgroundColor()
        {
            return 0;
        }"
1565,4434430.txt,none,"    private void goNextPage() {
        LOGGER.info(""Navigating to next page..."");
        WebElement nextButton = driver.findElement(By.xpath(ACTIVE_NXT_BTN));
        nextButton.click();
        waitForElement(expectedElement, DEFAULT_TIMEOUT, ""Next page didn't load"");
    }"
1566,3998684.txt,none,"        protected String getEventType(String eventName) {
            if (eventName.equals(""focusin"")) {
                return ""DOMFocusIn"";
            } else if (eventName.equals(""focusout"")) {
                return ""DOMFocusOut"";
            } else if (eventName.equals(""activate"")) {
                return ""DOMActivate"";
            }
            if (isSVG12) {
                if (animationEventNames12.contains(eventName)) {
                    return eventName;
                }
            } else {
                if (animationEventNames11.contains(eventName)) {
                    return eventName;
                }
            }
            return null;
        }"
1567,8571818.txt,none,"  public boolean isUnassignable() {
    return isUnassignable(state);
  }"
1568,5657989.txt,none,"    protected void assertNotClosed() throws SQLConnectionClosedException {
        this.statement.assertNotClosed();

        if (this.isClosed) {
            throw new SQLConnectionClosedException(format(Level.WARNING, ""excp.closed_resultset"", this.sql, getFile().getName()), this.sql, getFile());
        }
    }"
1569,4316776.txt,none,"	public long update(long t)
	{
		counter = t;
		//		System.out.println(""counter updated to "" + this);
		initialized = true;
		return counter;
	}"
1570,7198476.txt,none,"    @Override
    public void setRegion(String regionId) {
        regionId = regionId.toLowerCase(Locale.ENGLISH);
        try {
            com.oracle.bmc.Region region = com.oracle.bmc.Region.fromRegionId(regionId);
            setRegion(region);
        } catch (IllegalArgumentException e) {
            LOG.info(""Unknown regionId '{}', falling back to default endpoint format"", regionId);
            String endpoint = com.oracle.bmc.Region.formatDefaultRegionEndpoint(SERVICE, regionId);
            setEndpoint(endpoint);
        }
    }"
1571,8024427.txt,none,"		public PREGEN__RECORD__OF__OCTETSTRING replace(final int index, final int len, final PREGEN__RECORD__OF__OCTETSTRING_template repl) {
			if (!repl.is_value()) {
				throw new TtcnError(""The fourth argument of function replace() is a template with non-specific value."");
			}
			return replace(index, len, repl.valueof());
		}"
1572,5424715.txt,none,"    @Override
    public int add(final T item) {
        int index = -1;

        if (comparator == null) {
            index = getLength();
        } else {
            // Perform a binary search to find the insertion point
            index = Collections.binarySearch(list, item, comparator);
            if (index < 0) {
                index = -(index + 1);
            }
        }

        list.add(index, item);
        listListeners.itemInserted(this, index);

        return index;
    }"
1573,8009118.txt,none,"		public TimerAnyTimeoutType_template() {
		}"
1574,6972360.txt,none,"    @Override
    public boolean equals(@Nullable Object object) {
      if (object instanceof Multiset.Entry) {
        Multiset.Entry<?> that = (Multiset.Entry<?>) object;
        return this.getCount() == that.getCount()
            && Objects.equal(this.getElement(), that.getElement());
      }
      return false;
    }"
1575,9224432.txt,none,"    public void setEditFormatter(JFormattedTextField.AbstractFormatter atf) {
        editFormat = atf;
    }"
1576,7907397.txt,none,"  @Override
  public Optional<JavacOptionsProvider> createToolchain(
      ToolchainProvider toolchainProvider, ToolchainCreationContext context) {
    JavaBuckConfig javaConfig = context.getBuckConfig().getView(JavaBuckConfig.class);
    JavacOptions defaultJavacOptions = javaConfig.getDefaultJavacOptions();

    return Optional.of(JavacOptionsProvider.of(defaultJavacOptions));
  }"
1577,8845205.txt,none,"      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException(""Field "" + fieldId + "" doesn't exist!"");
        return fields;
      }"
1578,8521588.txt,none,"    public UsageVMSnapshotVO(long id, long zoneId, long accountId, long domainId, long vmId, Long diskOfferingId, long size, Date created, Date processed) {
        this.zoneId = zoneId;
        this.accountId = accountId;
        this.domainId = domainId;
        this.diskOfferingId = diskOfferingId;
        this.id = id;
        this.size = size;
        this.created = created;
        this.vmId = vmId;
        this.processed = processed;
    }"
1579,6665183.txt,none,"	public String unparse() {
		StringBuffer text = new StringBuffer(100);
		if (getPublicID() == null || getPublicID().equals("""")) { //$NON-NLS-1$
			text.append(""SYSTEM ""); //$NON-NLS-1$
		}
		else {
			text.append(""PUBLIC \"""").append(getPublicID()).append(""\"" ""); //$NON-NLS-1$ //$NON-NLS-2$
		}
		String systemId = getSystemID();

		text.append(""\"""").append(systemId).append(""\""""); //$NON-NLS-1$ //$NON-NLS-2$

		DTDNotation notation = getNotation();
		if (notation != null)
			text.append("" NDATA "").append(notation.getName()); //$NON-NLS-1$

		return text.toString();
	}"
1580,4122935.txt,none,"    @Override
    protected Optional<HostAndPort> getMappedEndpoint(Entity source, MachineLocation machine, int port) {
        String address = source.sensors().get(Attributes.SUBNET_ADDRESS);
        if (Strings.isNonBlank(address)) {
            return Optional.of(HostAndPort.fromParts(address, port));
        } else {
            return Optional.absent();
        }
    }"
1581,7586356.txt,none,"	private boolean matchesReturnValue(Class<?> type, Method method, @Nullable Object returnValue) {
		if (returnValue != null) {
			return ClassUtils.isAssignableValue(type, returnValue);
		}
		else if (Object.class == type && void.class == method.getReturnType()) {
			return true;
		}
		else {
			return ClassUtils.isAssignable(type, method.getReturnType());
		}
	}"
1582,4737230.txt,none,"  public static Schema readSchemaFromLogFile(FileSystem fs, Path path) throws IOException {
    Reader reader = HoodieLogFormat.newReader(fs, new HoodieLogFile(path), null);
    HoodieAvroDataBlock lastBlock = null;
    while (reader.hasNext()) {
      HoodieLogBlock block = reader.next();
      if (block instanceof HoodieAvroDataBlock) {
        lastBlock = (HoodieAvroDataBlock) block;
      }
    }
    reader.close();
    if (lastBlock != null) {
      return lastBlock.getSchema();
    }
    return null;
  }"
1583,8791597.txt,major,"    @Override
    public void updateExperiment(String airavataExperimentId, ExperimentModel experiment) throws RegistryServiceException, TException {
        try {
            experimentCatalog = RegistryFactory.getDefaultExpCatalog();
            if (!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT, airavataExperimentId)) {
                logger.error(airavataExperimentId, ""Update request failed, Experiment {} doesn't exist."", airavataExperimentId);
                throw new RegistryServiceException(""Requested experiment id "" + airavataExperimentId + "" does not exist in the system.."");
            }

            ExperimentStatus experimentStatus = getExperimentStatusInternal(airavataExperimentId);
            if (experimentStatus != null){
                ExperimentState experimentState = experimentStatus.getState();
                switch (experimentState){
                    case CREATED: case VALIDATED:
                        if(experiment.getUserConfigurationData() != null && experiment.getUserConfigurationData()
                                .getComputationalResourceScheduling() != null){
                            String compResourceId = experiment.getUserConfigurationData()
                                    .getComputationalResourceScheduling().getResourceHostId();
                            ComputeResourceDescription computeResourceDescription = appCatalog.getComputeResource()
                                    .getComputeResource(compResourceId);
                            if(!computeResourceDescription.isEnabled()){
                                logger.error(""Compute Resource is not enabled by the Admin!"");
                                AiravataSystemException exception = new AiravataSystemException();
                                exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
                                exception.setMessage(""Compute Resource is not enabled by the Admin!"");
                                throw exception;
                            }
                        }
                        experimentCatalog.update(ExperimentCatalogModelType.EXPERIMENT, experiment, airavataExperimentId);
                        logger.debug(airavataExperimentId, ""Successfully updated experiment {} "", experiment.getExperimentName());
                        break;
                    default:
                        logger.error(airavataExperimentId, ""Error while updating experiment. Update experiment is only valid for experiments "" +
                                ""with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given "" +
                                ""experiment is in one of above statuses... "");
                        AiravataSystemException exception = new AiravataSystemException();
                        exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);
                        exception.setMessage(""Error while updating experiment. Update experiment is only valid for experiments "" +
                                ""with status CREATED, VALIDATED, CANCELLED, FAILED and UNKNOWN. Make sure the given "" +
                                ""experiment is in one of above statuses... "");
                        throw exception;
                }
            }
        } catch (RegistryException e) {
            logger.error(airavataExperimentId, ""Error while updating experiment"", e);
            RegistryServiceException exception = new RegistryServiceException();
            exception.setMessage(""Error while updating experiment. More info : "" + e.getMessage());
            throw exception;
        } catch (AppCatalogException e) {
            logger.error(airavataExperimentId, ""Error while updating experiment"", e);
            RegistryServiceException exception = new RegistryServiceException();
            exception.setMessage(""Error while updating experiment. More info : "" + e.getMessage());
            throw exception;
        }
    }"
1584,9258251.txt,none,"    @SuppressWarnings(""deprecation"")
    public void show() {
        Component component = getComponent();

        if (component != null) {
            component.show();
        }
    }"
1585,4042328.txt,none,"    @Override
    public Mutation apply(Key key) {
      // Verify that the entity to delete has a complete key.
      checkArgument(
          isValidKey(key),
          ""Keys to be deleted from the Cloud Datastore must be complete:\n%s"",
          key);

      return makeDelete(key).build();
    }"
1586,7811951.txt,none,"  @Override
  public void setIgnoreDepartedMembers(boolean ignore) {
    this.ignoreDepartedMembers = ignore;
    if (ignore) {
      setWaitOnExceptionFlag(true);
    }
  }"
1587,7228404.txt,none,"        @Override
        public Flux<?> flux() {
            sender = sender(senderOptions());
            Flux<Person> srcFlux = source().flux();
            return sender
                    .sendTransactionally(srcFlux.map(p -> records(p)))
                    .concatMap(r -> r)
                    .doOnNext(r -> log.info(""Sent record successfully {}"", r))
                    .doOnError(e -> log.error(""Send failed, terminating."", e))
                    .doOnCancel(() -> close());
        }"
1588,4586123.txt,none,"    public int bidiLevelAt(int position) throws IndexOutOfBoundsException {
        if ((position < 0) || (position >= length())) {
            throw new IndexOutOfBoundsException();
        } else if (bidiLevels != null) {
            return bidiLevels [ position ];
        } else {
            return -1;
        }
    }"
1589,4171343.txt,none,"    @Override
    public String getPresentationName() {
        return ""Create DataNode"";
    }"
1590,9469461.txt,major,"  private XMLEvent expectTag(String expected, boolean allowEnd)
      throws IOException {
    XMLEvent ev = null;
    while (true) {
      try {
        ev = events.nextEvent();
      } catch (XMLStreamException e) {
        throw new IOException(""Expecting "" + expected +
            "", but got XMLStreamException"", e);
      }
      switch (ev.getEventType()) {
      case XMLEvent.ATTRIBUTE:
        throw new IOException(""Got unexpected attribute: "" + ev);
      case XMLEvent.CHARACTERS:
        if (!ev.asCharacters().isWhiteSpace()) {
          throw new IOException(""Got unxpected characters while "" +
              ""looking for "" + expected + "": "" +
              ev.asCharacters().getData());
        }
        break;
      case XMLEvent.END_ELEMENT:
        if (!allowEnd) {
          throw new IOException(""Got unexpected end event "" +
              ""while looking for "" + expected);
        }
        return ev;
      case XMLEvent.START_ELEMENT:
        if (!expected.startsWith(""["")) {
          if (!ev.asStartElement().getName().getLocalPart().
                equals(expected)) {
            throw new IOException(""Failed to find <"" + expected + "">; "" +
                ""got "" + ev.asStartElement().getName().getLocalPart() +
                "" instead."");
          }
        }
        return ev;
      default:
        // Ignore other event types like comment, etc.
        if (LOG.isTraceEnabled()) {
          LOG.trace(""Skipping XMLEvent of type "" +
              ev.getEventType() + ""("" +  ev + "")"");
        }
        break;
      }
    }
  }"
1591,3856911.txt,none,"  protected void addRequiredAlertProperties(Set<String> properties) {
    properties.add(AlertResourceProvider.ALERT_STATE);
    properties.add(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);
    properties.add(AlertResourceProvider.ALERT_MAINTENANCE_STATE);
  }"
1592,7273316.txt,none,"    public JAntiLabel(String text) {
        super(text);
    }"
1593,7255045.txt,none,"    public static boolean isWindows(String osName) {
        return (getOperatingSystem(osName) & OS_WINDOWS_MASK) != 0;
    }"
1594,8038797.txt,none,"	public static Iterator<EObject> getNonDerivedContents(EObject eObject) {
		EClassImpl.FeatureSubsetSupplier featureSupplier = (EClassImpl.FeatureSubsetSupplier) eObject.eClass().getEAllStructuralFeatures();
		EStructuralFeature[] eStructuralFeatures = featureSupplier.containments();

		return (eStructuralFeatures == null 
				? EContentsEList.<EObject> emptyContentsEList()
				: new EContentsEList<EObject>(eObject, eStructuralFeatures) {
					@Override
					protected ListIterator<EObject> newResolvingListIterator() {
						return new ResolvingFeatureIteratorImpl<EObject>(eObject, eStructuralFeatures) {
							@Override
							protected boolean isIncluded(EStructuralFeature eStructuralFeature) {
								return !eStructuralFeature.isDerived();
							}
						};
					}
				}).iterator();
	}"
1595,7587149.txt,none,"  private Reference getReference(final Attributes attributes) {
    return new Reference(attributes.getValue(DatabaseXmlUtils.LOCAL),
        attributes.getValue(DatabaseXmlUtils.FOREIGN));
  }"
1596,9449118.txt,none,"        @Override
        public Void visitAnnotation(Annotation_element_value ev, Boolean resolveIndices) {
            print((char) ev.tag);
            AnnotationWriter.this.write(ev.annotation_value, resolveIndices);
            return null;
        }"
1597,7056433.txt,minor,"  void getHashes(List<Integer> searchHashes, int bitShift)
  {
    // We don't need to include 0 because that's always assumed in look ups. If we do return 0, that
    // means this agent isn't sure what it needs, but the inverse is acceptable because that just
    // means the airing doesn't know what it matches and it will be tested on all of the agents.
    searchHashes.clear();

    if (title != null)
    {
      searchHashes.add((title.ignoreCaseHash >>> bitShift));
    }

    if (person != null)
    {
      addHash(person.ignoreCaseHash, searchHashes, bitShift);
    }

    if (category != null)
    {
      addHash(category.ignoreCaseHash, searchHashes, bitShift);
    }

    if (subCategory != null)
    {
      addHash(subCategory.ignoreCaseHash, searchHashes, bitShift);
    }

    if (chanName.length() > 0)
    {
      addHash(chanName.hashCode(), searchHashes, bitShift);
    }

    if (chanNames != null && chanNames.length > 0)
    {
      for (String chanName : chanNames)
      {
        addHash(chanName.hashCode(), searchHashes, bitShift);
      }
    }

    if (network != null)
    {
      addHash(network.ignoreCaseHash, searchHashes, bitShift);
    }

    if (rated != null)
    {
      addHash(rated.ignoreCaseHash, searchHashes, bitShift);
    }

    if (year != null)
    {
      addHash(year.ignoreCaseHash, searchHashes, bitShift);
    }

    if (pr != null)
    {
      addHash(pr.ignoreCaseHash, searchHashes, bitShift);
    }

    // This will ensure that we do a full search since 0 means at least one of our items doesn't
    // have a ""valid"" hash.
    if (searchHashes.contains(0))
      searchHashes.clear();
  }"
1598,8618517.txt,major,"    @Override public boolean readFrom(ByteBuffer buf, MessageReader reader) {
        reader.setBuffer(buf);

        if (!reader.beforeMessageRead())
            return false;

        if (!super.readFrom(buf, reader))
            return false;

        switch (reader.state()) {
            case 3:
                futId = reader.readLong(""futId"");

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 4:
                locksArr = reader.readObjectArray(""locksArr"", MessageCollectionItemType.MSG, TxLockList.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 5:
                nearTxKeysArr = reader.readObjectArray(""nearTxKeysArr"", MessageCollectionItemType.MSG, IgniteTxKey.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

            case 6:
                txKeysArr = reader.readObjectArray(""txKeysArr"", MessageCollectionItemType.MSG, IgniteTxKey.class);

                if (!reader.isLastRead())
                    return false;

                reader.incrementState();

        }

        return reader.afterMessageRead(TxLocksResponse.class);
    }"
1599,7621803.txt,none,"	protected IProject getProject(Object obj) {
		IProject project = null;
		if (obj instanceof IProject) {
			project = (IProject) obj;
		} else if (obj instanceof IJavaProject) {
			project = ((IJavaProject) obj).getProject();
		} else if (obj instanceof IAdaptable) {
			project = (IProject) ((IAdaptable) obj).getAdapter(IProject.class);
		} else if (obj instanceof BootDashElement) {
			project = ((BootDashElement) obj).getProject();
		}
		return project;
	}"
1600,6147418.txt,none,"		@Override
		public void mouseDown(MouseEvent e) {
			Item item = (Item) ((Widget) e.getSource()).getData();
			// TODO for now, to make double click work: disable single click on
			// the first item
			// disable later when the annotationlistener selectively handles
			// input
			if (item != null && e.button == 1) // && item.fAnnotation !=
												// fInput.fAnnotations[0])
				item.defaultSelected();
		}"
1601,7775896.txt,none,"  synchronized void removeSegment(DataSegment segment)
  {
    if (segments.remove(segment)) {
      currSize -= segment.getSize();
    }
  }"
1602,3926825.txt,none,"    @Override
    public String toString() {
      return new StringBuilder(""v"").append(major).append(""."").append(minor).toString();
    }"
1603,5771277.txt,none,"    private ConnIdSpecialName() {
        // private constructor for static utility class
    }"
1604,7026461.txt,critical,"  private int addManualRecord(Airing recAir, UIClient uiClient)
  {
    // Check to make sure we have an encoder that can receive this station
    Set<EncoderState> tryUs = new HashSet<EncoderState>(encoderStateMap.values());
    Iterator<EncoderState> walker = tryUs.iterator();
    // We only need to worry about conflicts with other recordings that occur within the same set of stations. If
    // encoder A has no intersection with the stations on encoder B; then there's no reason to prompt about conflicts from
    // that tuner since it won't help resolve scheduling issues. So this set will be all the stations that either directly or
    // indirectly could resolve a conflict with the new recording.
    // Due to the indirect nature of this; we have to keep checking through the encoders until this set stops growing in size
    Set<Integer> unifiedStationSet = new HashSet<Integer>();
    boolean encoderExists = false;
    while (walker.hasNext())
    {
      EncoderState es = walker.next();
      synchronized (es.stationSet) {
        if (es.stationSet.contains(recAir.stationID))
        {
          encoderExists = true;
          unifiedStationSet.addAll(es.stationSet);
          walker.remove(); // to avoid redundant checking below
          break;
        }
      }
    }
    if (!encoderExists)
      return VideoFrame.WATCH_FAILED_NO_ENCODERS_HAVE_STATION;

    int lastSetSize;
    do
    {
      lastSetSize = unifiedStationSet.size();
      walker = tryUs.iterator();
      while (walker.hasNext())
      {
        EncoderState es = walker.next();
        synchronized (es.stationSet) {
          if (unifiedStationSet.removeAll(es.stationSet))
          {
            // There was an intersection, so use all of these stations, then ignore this one for later
            unifiedStationSet.addAll(es.stationSet);
            walker.remove();
          }
        }
      }

    } while (lastSetSize != unifiedStationSet.size() && !tryUs.isEmpty());

    long defaultStartPadding = Sage.getLong(""default_mr_start_padding"", 0);
    long defaultStopPadding = Sage.getLong(""default_mr_stop_padding"", 0);
    long requestedStart = recAir.getStartTime() - defaultStartPadding;
    long requestedStop = recAir.getEndTime() + defaultStopPadding;
    long requestedDuration = requestedStop - requestedStart;

    Airing schedAir = recAir;
    if (defaultStartPadding != 0 || defaultStopPadding != 0)
    {
      schedAir = new Airing(0);
      schedAir.time = requestedStart;
      schedAir.duration = requestedDuration;
      schedAir.stationID = recAir.stationID;
      schedAir.showID = recAir.showID;
    }
    Vector<Airing> parallelRecords = new Vector<Airing>();
    Vector<Airing> lastParallel = null;
    do
    {
      parallelRecords.clear();
      ManualRecord[] manualMustSee = wiz.getManualRecordsSortedByTime();
      Vector<ManualRecord> parallelRecurs = new Vector<ManualRecord>();
      for (int i = 0; i < manualMustSee.length; i++)
      {
        ManualRecord currRec = manualMustSee[i];
        if (currRec.getContentAiring() == recAir)
          return VideoFrame.WATCH_OK;
        if (currRec.getEndTime() <= Sage.time()) continue;
        if (currRec.doRecurrencesOverlap(requestedStart, requestedDuration, 0))
        {
          parallelRecords.addElement(manualMustSee[i].getSchedulingAiring());
          if (currRec.recur != 0)
            parallelRecurs.add(currRec);
          else
            parallelRecurs.add(null);
        }
      }

      if (parallelRecords.isEmpty()) break;

      parallelRecords.addElement(schedAir);
      parallelRecurs.add(null);
      if (sched.testMultiTunerSchedulingPermutation(parallelRecords))
        break;
      // Remove any recurrence duplicates from the parallel list that is presented to the user
      for (int i = 0; i < parallelRecurs.size(); i++)
      {
        ManualRecord currRecur = parallelRecurs.get(i);
        if (currRecur == null) continue;
        for (int j = 0; j < parallelRecords.size(); j++)
        {
          if (i == j || parallelRecurs.get(j) == null) continue;

          ManualRecord otherRecur = parallelRecurs.get(j);
          if (currRecur.stationID == otherRecur.stationID && currRecur.duration == otherRecur.duration &&
              currRecur.recur == otherRecur.recur && currRecur.isSameRecurrence(otherRecur.startTime))
          {
            parallelRecurs.remove(j);
            parallelRecords.remove(j);
            j--;
          }
        }
      }

      // Conflict exists, we need to kill a recording that's on an encoder that's capable
      // of recording this
      // Conflict resolution, ask about what you're going to kill
      parallelRecords.remove(schedAir);

      // Remove any items from the conflict options that would not end up in station set overlap either directly or indirectly
      for (int i = 0; i < parallelRecords.size(); i++)
        if (!unifiedStationSet.contains(parallelRecords.get(i).stationID))
          parallelRecords.remove(i--);

      // If we have the same conflicts as when we just checked, then bail. Most likely they
      // aren't processing the Hook correctly and we'll be in an infinite loop.
      if (lastParallel != null && parallelRecords.equals(lastParallel))
        return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;
      Object hookRes = (uiClient == null) ? null : uiClient.processUIClientHook(""RecordRequestScheduleConflict"", new Object[] { recAir, parallelRecords });
      if (!(hookRes instanceof Boolean) || !((Boolean) hookRes))
        return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;
      lastParallel = new Vector<Airing>(parallelRecords);
    } while (true);

    ManualRecord newMR;
    if (schedAir.getStartTime() < Sage.time())
    {
      int[] errorReturn = new int[1];
      EncoderState es = findBestEncoderForNow(schedAir, true, uiClient, errorReturn);
      if (es == null)
      {
        if (errorReturn[0] == 0)
          errorReturn[0] = VideoFrame.WATCH_FAILED_GENERAL_CANT_FIND_ENCODER;
        return errorReturn[0];
      }
      synchronized (this)
      {
        es = checkForFoundBestEncoderNowRecordSwitch(es, recAir);
        // Set the acquisition state to manual if it has already started recording
        MediaFile mf = wiz.getFileForAiring(recAir);
        if (mf != null)
          mf.setAcquisitionTech(MediaFile.ACQUISITION_MANUAL);
        newMR = wiz.addManualRecord(requestedStart, requestedDuration, 0, recAir.stationID,
            """", """", recAir.id, 0);
        es.forceWatch = newMR.getSchedulingAiring();
        es.forceProcessed = false;
        work();
      }
    }
    else
      newMR = wiz.addManualRecord(requestedStart, requestedDuration, 0, recAir.stationID,
          """", """", recAir.id, 0);
    PluginEventManager.postEvent(PluginEventManager.MANUAL_RECORD_ADDED,
        new Object[] { PluginEventManager.VAR_AIRING, newMR.getSchedulingAiring() });
    return VideoFrame.WATCH_OK;
  }"
1605,9474336.txt,none,"    @Override
    public synchronized int read() throws IOException {
      int data = blockInputStream.read();
      return data;
    }"
1606,5412639.txt,none,"    public String submit() {
        invocation.getMethodParameters().clear();
        for (ParameterInfo info : methodParameters) {
            invocation.getMethodParameters().add(info.getValue());
        }
        methodParameters.clear();
        methodParameters = null;
        return ""ejb-invoker?faces-redirect=true"";
    }"
1607,7172860.txt,none,"    public <TValue> void addIfNotEmpty(String parameterName, List<TValue> values) {
        if (values != null && !values.isEmpty()) {
            put(parameterName, StringUtil.join("","", values)); //$NON-NLS-1$
        }
    }"
1608,5870587.txt,none,"    @Override
    public void run() {
      mTableViewer.getTree().selectAll();
      mTableViewer.setSelection(mTableViewer.getSelection());
    }"
1609,6024615.txt,none,"    @Override
    public CachingBuildActionExecuter<T> addProgressListener(org.gradle.tooling.events.ProgressListener listener, OperationType... operationTypes) {
        this.cacheKey.markInvalid();
        this.delegate.addProgressListener(listener, operationTypes);
        return this;
    }"
1610,4237161.txt,none,"    @Override
    public boolean hasNext() {
        try {
            return !rs.isLast();
        } catch (final SQLException e) {
            rethrow(e);
            return false;
        }
    }"
1611,5626154.txt,none,"	public boolean isSuspended() throws NotConnectedException
	{
		if (!isConnected())
			throw new NotConnectedException();

		return m_isHalted;
	}"
1612,7905552.txt,major,"  @Override
  public ExitCode runWithoutHelp(CommandRunnerParams params) throws Exception {
    ProjectFilesystem projectFilesystem = params.getCell().getFilesystem();
    try (ProjectBuildFileParser parser =
        new DefaultProjectBuildFileParserFactory(
                new DefaultTypeCoercerFactory(),
                params.getConsole(),
                new ParserPythonInterpreterProvider(
                    params.getCell().getBuckConfig(), params.getExecutableFinder()),
                params.getKnownRuleTypesProvider(),
                params.getManifestServiceSupplier(),
                params.getFileHashCache())
            .createBuildFileParser(
                params.getBuckEventBus(), params.getCell(), params.getWatchman())) {
      /*
       * The super console does a bunch of rewriting over the top of the console such that
       * simultaneously writing to stdout and stderr in an interactive session is problematic.
       * (Overwritten characters, lines never showing up, etc). As such, writing to stdout directly
       * stops superconsole rendering (no errors appear). Because of all of this, we need to
       * just buffer the output and print it to stdout at the end fo the run. The downside
       * is that we have to buffer all of the output in memory, and it could potentially be large,
       * however, we'll just have to accept that tradeoff for now to get both error messages
       * from the parser, and the final output
       */

      try (ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
          PrintStream out = new PrintStream(new BufferedOutputStream(byteOut))) {
        for (String pathToBuildFile : getArguments()) {
          // Print a comment with the path to the build file.
          out.printf(""# %s\n\n"", pathToBuildFile);

          // Resolve the path specified by the user.
          Path path = Paths.get(pathToBuildFile);
          if (!path.isAbsolute()) {
            Path root = projectFilesystem.getRootPath();
            path = root.resolve(path);
          }

          // Parse the rules from the build file.
          ImmutableMap<String, Map<String, Object>> rawRules =
              parser.getBuildFileManifest(path).getTargets();

          // Format and print the rules from the raw data, filtered by type.
          ImmutableSet<String> types = getTypes();
          Predicate<String> includeType = type -> types.isEmpty() || types.contains(type);
          printRulesToStdout(out, rawRules, includeType);
        }

        // Make sure we tell the event listener to flush, otherwise there is a race condition where
        // the event listener might not have flushed, we dirty the stream, and then it will not
        // render the last frame (see {@link SuperConsoleEventListener})
        params.getBuckEventBus().post(new FlushConsoleEvent());
        out.close();
        params.getConsole().getStdOut().write(byteOut.toByteArray());
      }
    }

    return ExitCode.SUCCESS;
  }"
1613,4417713.txt,none,"    public OptionEntry(Object value, String text)
    {
        this.value = value;
        this.text = text;
    }"
1614,7900059.txt,none,"  @Override
  public int hashCode() {
    return Objects.hash(id);
  }"
1615,9205375.txt,none,"	public void endContainer( IContainerContent container )
			throws BirtException
	{
		_endContainer( container );
	}"
1616,6346063.txt,none,"		public ConsoleView build() {
			final ConsoleView consoleView = Mockito.mock(ConsoleView.class);
			Mockito.when(consoleView.getConsoleText()).thenReturn(this.msg);
			return consoleView;
		}"
1617,5702663.txt,none,"    void prepare(Map<String, Object> topoConf, TopologyContext context, OutputCollector collector,
                 KeyValueState<TaskStream, WindowState> windowState) {
        init(topoConf, context, collector, windowState);
        super.prepare(topoConf, context, collector);
    }"
1618,6940151.txt,none,"  public List<Version> getDefaultVersions() {
    return defaultVersions;
  }"
1619,7876519.txt,none,"  public ImmutableList<BuildLogEntry> getBuildLogs() throws IOException {
    // Remove commands with unknown args or invocations of buck rage.
    // Sort the remaining logs based on time, reverse order.
    ImmutableList.Builder<BuildLogEntry> logEntries = ImmutableList.builder();
    for (Path logFile : getAllBuckLogFiles()) {
      BuildLogEntry entry = newBuildLogEntry(logFile);
      if (entry.getCommandArgs().isPresent()
          && entry.getCommandArgs().get().size() > 0
          && !entry.getCommandArgs().get().get(0).matches(""^(rage|doctor|server|launch)$"")) {
        logEntries.add(newBuildLogEntry(logFile));
      }
    }
    return logEntries
        .build()
        .stream()
        .sorted(Comparator.comparing(BuildLogEntry::getLastModifiedTime).reversed())
        .collect(ImmutableList.toImmutableList());
  }"
1620,8429775.txt,none,"    public void setContentTypeHeader(Boolean contentTypeHeader) {
        this.contentTypeHeader = contentTypeHeader;
    }"
1621,6475184.txt,none,"	void setValue(String value) throws IllegalArgumentException {
		if (value.equalsIgnoreCase(""true"") || value.equalsIgnoreCase(""yes"")) {
			formatTimestamp = true;
		} else if (value.equalsIgnoreCase(""false"") || value.equalsIgnoreCase(""no"")) {
			formatTimestamp = false;
		} else {
			throw new IllegalArgumentException(""The value \""""+value+""\"" specified for format timestamp is not valid, must be true or false"");
		}
	}"
1622,4514232.txt,critical,"    public synchronized void start(BundleContext context) throws Exception
    {
        PermissionAdminImpl pai = null;

        SecureAction action = new SecureAction();

        Permissions permissions = new Permissions(context, action);

        File tmp = context.getDataFile(""security"" + File.separator + ""tmp"");
        if ((tmp == null) || (!tmp.isDirectory() && !tmp.mkdirs()))
        {
            throw new IOException(""Can't create tmp dir."");
        }
        // TODO: log something if we can not clean-up the tmp dir
        File[] old = tmp.listFiles();
        if (old != null)
        {
            for (int i = 0; i < old.length; i++)
            {
                old[i].delete();
            }
        }

        if (""TRUE"".equalsIgnoreCase(getProperty(context,
            SecurityConstants.ENABLE_PERMISSIONADMIN_PROP,
            SecurityConstants.ENABLE_PERMISSIONADMIN_VALUE)))
        {
            File cache = context.getDataFile(""security"" + File.separator
                + ""pa.txt"");
            if ((cache == null) || (!cache.isFile() && !cache.createNewFile()))
            {
                throw new IOException(""Can't create cache file"");
            }
            pai = new PermissionAdminImpl(permissions, new PropertiesCache(
                cache, tmp, action));
        }

        ConditionalPermissionAdminImpl cpai = null;

        if (""TRUE"".equalsIgnoreCase(getProperty(context,
            SecurityConstants.ENABLE_CONDPERMADMIN_PROP,
            SecurityConstants.ENABLE_CONDPERMADMIN_VALUE)))
        {
            File cpaCache = context.getDataFile(""security"" + File.separator
                + ""cpa.txt"");
            if ((cpaCache == null)
                || (!cpaCache.isFile() && !cpaCache.createNewFile()))
            {
                throw new IOException(""Can't create cache file"");
            }

            LocalPermissions localPermissions = new LocalPermissions(
                permissions);

            cpai = new ConditionalPermissionAdminImpl(permissions,
                new Conditions(action), localPermissions, new PropertiesCache(
                    cpaCache, tmp, action), pai);
        }

        if ((pai != null) || (cpai != null))
        {
            String crlList = getProperty(context,
                SecurityConstants.CRL_FILE_PROP,
                SecurityConstants.CRL_FILE_VALUE);
            String storeList = getProperty(context,
                SecurityConstants.KEYSTORE_FILE_PROP,
                SecurityConstants.KEYSTORE_FILE_VALUE);
            String passwdList = getProperty(context,
                SecurityConstants.KEYSTORE_PASS_PROP,
                SecurityConstants.KEYSTORE_PASS_VALUE);
            String typeList = getProperty(context,
                SecurityConstants.KEYSTORE_TYPE_PROP,
                SecurityConstants.KEYSTORE_TYPE_VALUE);
            String osgi_keystores = getProperty(context,
                Constants.FRAMEWORK_TRUST_REPOSITORIES, null);
            if (osgi_keystores != null)
            {
                StringTokenizer tok = new StringTokenizer(osgi_keystores,
                    File.pathSeparator);

                if (storeList.length() == 0)
                {
                    storeList += ""file:"" + tok.nextToken();
                    passwdList += "" "";
                    typeList += ""JKS"";
                }
                while (tok.hasMoreTokens())
                {
                    storeList += ""|file:"" + tok.nextToken();
                    passwdList += ""| "";
                    typeList += ""|JKS"";
                }
            }

            StringTokenizer storeTok = new StringTokenizer(storeList, ""|"");
            StringTokenizer passwdTok = new StringTokenizer(passwdList, ""|"");
            StringTokenizer typeTok = new StringTokenizer(typeList, ""|"");

            if ((storeTok.countTokens() != typeTok.countTokens())
                || (passwdTok.countTokens() != storeTok.countTokens()))
            {
                throw new BundleException(
                    ""Each CACerts keystore must have one type and one passwd entry and vice versa."");
            }

            SecurityProvider provider = new SecurityProviderImpl(crlList,
                typeList, passwdList, storeList, pai, cpai, action, ((Felix) context.getBundle(0)).getLogger());

            ((Felix) context.getBundle(0)).setSecurityProvider(provider);
        }

        if (pai != null)
        {
            context.registerService(PermissionAdmin.class.getName(), pai, null);
        }

        if (cpai != null)
        {
            context.registerService(ConditionalPermissionAdmin.class.getName(),
                cpai, null);
        }
    }"
1623,8953444.txt,none,"    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }"
1624,7201768.txt,major,"    @Override
    public java.util.concurrent.Future<GenerateAutonomousDatabaseWalletResponse>
            generateAutonomousDatabaseWallet(
                    final GenerateAutonomousDatabaseWalletRequest request,
                    final com.oracle.bmc.responses.AsyncHandler<
                                    GenerateAutonomousDatabaseWalletRequest,
                                    GenerateAutonomousDatabaseWalletResponse>
                            handler) {
        LOG.trace(""Called async generateAutonomousDatabaseWallet"");
        final GenerateAutonomousDatabaseWalletRequest interceptedRequest =
                GenerateAutonomousDatabaseWalletConverter.interceptRequest(request);
        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                GenerateAutonomousDatabaseWalletConverter.fromRequest(client, interceptedRequest);
        final com.google.common.base.Function<
                        javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>
                transformer = GenerateAutonomousDatabaseWalletConverter.fromResponse();

        com.oracle.bmc.responses.AsyncHandler<
                        GenerateAutonomousDatabaseWalletRequest,
                        GenerateAutonomousDatabaseWalletResponse>
                handlerToUse = handler;
        if (handler != null
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            handlerToUse =
                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<
                            GenerateAutonomousDatabaseWalletRequest,
                            GenerateAutonomousDatabaseWalletResponse>(
                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                                    this.authenticationDetailsProvider,
                            handler) {
                        @Override
                        public void retryCall() {
                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>
                                    onSuccess =
                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                                    this, transformer, interceptedRequest);
                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                            this, interceptedRequest);
                            client.post(
                                    ib,
                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    };
        }

        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                handlerToUse, transformer, interceptedRequest);
        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                handlerToUse, interceptedRequest);

        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =
                client.post(
                        ib,
                        interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                        interceptedRequest,
                        onSuccess,
                        onError);

        if (this.authenticationDetailsProvider
                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<
                    javax.ws.rs.core.Response, GenerateAutonomousDatabaseWalletResponse>(
                    responseFuture,
                    transformer,
                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider,
                    new com.google.common.base.Supplier<
                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {
                        @Override
                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {
                            return client.post(
                                    ib,
                                    interceptedRequest.getGenerateAutonomousDatabaseWalletDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    });
        } else {
            return new com.oracle.bmc.util.internal.TransformingFuture<>(
                    responseFuture, transformer);
        }
    }"
1625,8593029.txt,none,"    public java.nio.ByteBuffer bufferForRow() {
      return org.apache.thrift.TBaseHelper.copyBinary(row);
    }"
1626,7997206.txt,none,"	protected void appendDefaultLiteral(ITreeAppendable b, /* @Nullable */ LightweightTypeReference type) {
		if (type != null && type.isPrimitive()) {
			Primitive primitiveKind = type.getPrimitiveKind();
			switch (primitiveKind) {
				case Boolean:
					b.append(""false"");
					break;
				default:
					b.append(""0"");
					break;
			}
		} else {
			b.append(""null"");
		}
	}"
1627,8409842.txt,none,"    public int forceCompletionOfGroup(String key) {
        if (processor != null) {
            return processor.forceCompletionOfGroup(key);
        } else {
            return 0;
        }
    }"
1628,7274045.txt,none,"        public void propertyChange(PropertyChangeEvent evt) {
            if (!evt.getNewValue().equals(Stateful.STATE_AVAILABLE)) {
                ((Application)evt.getSource()).removePropertyChangeListener(
                        Stateful.PROPERTY_STATE, this);
                client.disconnectImpl(false);
                availabilityListener = null;
            }
        }"
1629,8837684.txt,none,"      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }"
1630,7279934.txt,none,"                    public ImageArguments crop(CropRegion value) {
                        if (value != null) {
                            startArgument(""crop"");
                            _queryBuilder.append(value.toString());
                        }
                        return this;
                    }"
1631,6778053.txt,none,"    public APIRequestGetBusinessActivities requestTargetBusinessObjectIdField () {
      return this.requestTargetBusinessObjectIdField(true);
    }"
1632,7445434.txt,none,"        public LoadDataOp(AllocatableValue result, DataPointerConstant data) {
            super(TYPE);
            this.result = result;
            this.data = data;
        }"
1633,4576061.txt,minor,"    public void bind(PropertyList pList) throws FOPException {
        super.bind(pList);
        alignmentAdjust = pList.get(PR_ALIGNMENT_ADJUST).getLength();
        alignmentBaseline = pList.get(PR_ALIGNMENT_BASELINE).getEnum();
        baselineShift = pList.get(PR_BASELINE_SHIFT).getLength();
        dominantBaseline = pList.get(PR_DOMINANT_BASELINE).getEnum();
        leaderAlignment = pList.get(PR_LEADER_ALIGNMENT).getEnum();
        leaderLength = pList.get(PR_LEADER_LENGTH).getLengthRange();
        leaderPattern = pList.get(PR_LEADER_PATTERN).getEnum();
        leaderPatternWidth = pList.get(PR_LEADER_PATTERN_WIDTH).getLength();
        // use default rule thickness as a default
        ruleThickness = getPropertyMakerFor(PR_RULE_THICKNESS).make(pList).getLength();
        switch(leaderPattern) {
        case EN_SPACE:
            // use Space
            break;
        case EN_RULE:
            // the following properties only apply
            // for leader-pattern = ""rule""
            ruleStyle = pList.get(PR_RULE_STYLE).getEnum();
            // use specified rule thickness to override default (established above)
            ruleThickness = pList.get(PR_RULE_THICKNESS).getLength();
            break;
        case EN_DOTS:
            break;
        case EN_USECONTENT:
            // use inline layout manager to create inline areas
            // add the inline parent multiple times until leader full
            break;
        default:
            throw new RuntimeException(""Invalid leader pattern: "" + leaderPattern);
        }
        // letterSpacing = pList.get(PR_LETTER_SPACING);
        // textShadow = pList.get(PR_TEXT_SHADOW);
    }"
1634,8997948.txt,none,"  public void write(String baseDir) throws IOException {
    String filename = baseDir + File.separator +
      CharacterDefinition.class.getName().replace('.', File.separatorChar) + CharacterDefinition.FILENAME_SUFFIX;
    new File(filename).getParentFile().mkdirs();
    OutputStream os = new FileOutputStream(filename);
    try {
      os = new BufferedOutputStream(os);
      final DataOutput out = new OutputStreamDataOutput(os);
      CodecUtil.writeHeader(out, CharacterDefinition.HEADER, CharacterDefinition.VERSION);
      out.writeBytes(characterCategoryMap, 0, characterCategoryMap.length);
      for (int i = 0; i < CharacterDefinition.CLASS_COUNT; i++) {
        final byte b = (byte) (
          (invokeMap[i] ? 0x01 : 0x00) | 
          (groupMap[i] ? 0x02 : 0x00)
        );
        out.writeByte(b);
      }
    } finally {
      os.close();
    }
  }"
1635,4546223.txt,none,"    @Override
    public void stopScheduler(final String name) {
        final Scheduler scheduler = this.schedulers.remove(name);
        try {
            scheduler.shutdown();
        } catch (final SchedulerException e) {
            logger.error(e.getMessage(), e);
        }
    }"
1636,5845274.txt,minor,"    private <T extends ResourceBase> boolean mergeResourceMap(
            Map<String, T> fragmentResources, Map<String, T> mainResources,
            Map<String, T> tempResources, WebXml fragment) {
        for (T resource : fragmentResources.values()) {
            String resourceName = resource.getName();
            if (mainResources.containsKey(resourceName)) {
                mainResources.get(resourceName).getInjectionTargets().addAll(
                        resource.getInjectionTargets());
            } else {
                // Not defined in main web.xml
                T existingResource = tempResources.get(resourceName);
                if (existingResource != null) {
                    if (!existingResource.equals(resource)) {
                        log.error(sm.getString(
                                ""webXml.mergeConflictResource"",
                                resourceName,
                                fragment.getName(),
                                fragment.getURL()));
                        return false;
                    }
                } else {
                    tempResources.put(resourceName, resource);
                }
            }
        }
        return true;
    }"
1637,6247819.txt,none,"    public ActionCreatedEvent() {
        // for serialization libs like jackson
    }"
1638,9066219.txt,none,"public void testBug128877b() throws CoreException {
	IType type = getPackageFragment(""JavaSearchBugs"", ""lib/b128877.jar"", ""pack"").getOrdinaryClassFile(""Test.class"").getType();
	IMethod method = type.getMethod(""Test"", new String[] { ""Ljava.lang.String;"" });
	search(method, REFERENCES);
	assertSearchResults(
		""lib/b128877.jar pack.X$Sub(pack.X, java.lang.String) EXACT_MATCH""
	);
}"
1639,5141751.txt,none,"    private void generateReport( Locale locale, LinkcheckModel linkcheckModel )
    {
        LinkcheckReportGenerator reportGenerator = new LinkcheckReportGenerator( i18n );

        reportGenerator.setExcludedHttpStatusErrors( excludedHttpStatusErrors );
        reportGenerator.setExcludedHttpStatusWarnings( excludedHttpStatusWarnings );
        reportGenerator.setExcludedLinks( excludedLinks );
        reportGenerator.setExcludedPages( excludedPages );
        reportGenerator.setHttpFollowRedirect( httpFollowRedirect );
        reportGenerator.setHttpMethod( httpMethod );
        reportGenerator.setOffline( offline );

        reportGenerator.generateReport( locale, linkcheckModel, getSink() );
        closeReport();

        // Copy the images
        copyStaticResources();
    }"
1640,6303431.txt,none,"    @Override
    public String toString()
    {
        return String.format(""%s[requested=\""%s\"", negotiated=\""%s\""]"",
                getClass().getSimpleName(),
                configRequested.getParameterizedName(),
                configNegotiated.getParameterizedName());
    }"
1641,7496459.txt,none,"	@Override
	public void killClient(String host, int port) {

		Assert.hasText(host, ""Host for 'CLIENT KILL' must not be 'null' or 'empty'."");

		String client = String.format(""%s:%s"", host, port);
		try {
			if (isPipelined()) {
				pipeline(connection.newLettuceStatusResult(getAsyncConnection().clientKill(client)));
				return;
			}
			getConnection().clientKill(client);
		} catch (Exception e) {
			throw convertLettuceAccessException(e);
		}
	}"
1642,6446899.txt,none,"	public void delete(UserInfo user) throws CoreException {
		JSONObject sites = getSites(user);
		if (!sites.has(getId())) {
			//nothing to do, site does not exist
			return;
		}
		sites.remove(getId());
		user.setProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS, sites.toString());
		OrionConfiguration.getMetaStore().updateUser(user);
	}"
1643,3831179.txt,none,"      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOGIN
            return LOGIN;
          case 2: // TABLE_NAME
            return TABLE_NAME;
          case 3: // VERSIONING_ITER
            return VERSIONING_ITER;
          case 4: // TYPE
            return TYPE;
          default:
            return null;
        }
      }"
1644,4302252.txt,none,"    public int confounderSize() {
        return 16;
    }"
1645,5982466.txt,major,"    @Override
    @SuppressWarnings(""unchecked"")
    public int executeUpdate(final String inSql) throws SQLException {
        this.sql = inSql;
        if (this.sql == null) {
            throw new SQLException(""sql is null"");
        }

        trimSQL();

        if (this.sql.length() == 0) {
            throw new SQLException(""empty sql"");
        }

        String lowcaseSql = this.sql.toLowerCase();

        Object req = null;
        // TODO use patterns
        if (lowcaseSql.startsWith(""create domain"") || lowcaseSql.startsWith(""create table"")) { //$NON-NLS-1$
            int pos = this.sql.lastIndexOf("" "");
            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(pos + 1).trim(),
                    DELIMITED_IDENTIFIER_QUOTE);
            req = new CreateDomainRequest().withDomainName(domain);
        } else if (lowcaseSql.startsWith(""delete domain"") || lowcaseSql.startsWith(""delete table"") //$NON-NLS-1$
                || lowcaseSql.startsWith(""drop table"")) {
            int pos = this.sql.lastIndexOf("" "");
            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(pos + 1).trim(),
                    DELIMITED_IDENTIFIER_QUOTE);
            List<String> pending = this.conn.getPendingColumns(domain);
            if (pending != null) {
                pending = new ArrayList<>(pending);
                for (String attr : pending) {
                    this.conn.removePendingColumn(domain, attr);
                }
            }
            req = new DeleteDomainRequest().withDomainName(domain);
        } else if (lowcaseSql.startsWith(""delete from"")) {
            req = prepareDeleteRowRequest();
        } else if (lowcaseSql.startsWith(""alter table "")) {
            req = prepareDropAttributeRequest();
        } else if (lowcaseSql.startsWith(""insert "")) {
            req = prepareInsertRequest();
        } else if (lowcaseSql.startsWith(""update "")) {
            req = prepareUpdateRequest();
        } else if (lowcaseSql.startsWith(""create testdomain "")) {
            req = new ArrayList<>();

            String domain = convertSQLIdentifierToCatalogFormat(this.sql.substring(this.sql.lastIndexOf("" "") + 1).trim(), //$NON-NLS-1$
                    DELIMITED_IDENTIFIER_QUOTE);
            ((List<Object>) req).add(new CreateDomainRequest().withDomainName(domain));

            ReplaceableAttribute attr  = new ReplaceableAttribute().withName(""attr1"").withValue(""val1"").withReplace(Boolean.TRUE);
            for (int i = 0; i < 570; i++) {
                ((List<Object>) req).add(new PutAttributesRequest().withDomainName(domain).withItemName(""item"" + i).withAttributes(attr));
            }
        }

        if (req != null) {
            int result = executeSDBRequest(req);
            if (this.params != null) {
                for (Object obj : this.params) {
                    if (obj instanceof SimpleDBItemName) {
                        ((SimpleDBItemName) obj).setPersisted(true);
                    }
                }
            }
            return result;
        }

        throw new SQLException(""unsupported update: "" + this.sql);
    }"
1646,7272514.txt,none,"    void showInThreads(Instance instance) {
        ((OverviewControllerUI) getPanel()).showInThreads(instance);
    }"
1647,4439983.txt,none,"  @Permittable(value = AcceptedTokenType.TENANT, groupId = PermittableGroupIds.IDENTIFICATIONS)
  @RequestMapping(
          value = ""/customers/{identifier}/identifications"",
          method = RequestMethod.POST,
          produces = MediaType.APPLICATION_JSON_VALUE,
          consumes = MediaType.APPLICATION_JSON_VALUE
  )
  public
  @ResponseBody
  ResponseEntity<Void> createIdentificationCard(@PathVariable(""identifier"") final String identifier,
                                @RequestBody @Valid final IdentificationCard identificationCard) {
    if (this.customerService.customerExists(identifier)) {
      if (this.customerService.identificationCardExists(identificationCard.getNumber())) {
        throw ServiceException.conflict(""IdentificationCard {0} already exists."", identificationCard.getNumber());
      }

      this.commandGateway.process(new CreateIdentificationCardCommand(identifier, identificationCard));
    } else {
      throw ServiceException.notFound(""Customer {0} not found."", identifier);
    }

    return ResponseEntity.accepted().build();
  }"
1648,8169457.txt,none,"    protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat, DataInput dataIn)
        throws IOException {
        return wireFormat.looseUnmarshalNestedObject(dataIn);
    }"
1649,6455346.txt,minor,"	private void addUTF8Region(StructurePointer clazz, String slotName,
			String additionalInfo, AbstractPointer utf8String)
			throws CorruptDataException {
		long offset = utf8String.getAddress() - clazz.getAddress();
		/* We do not want to print UTF8 outside of the ROM class. */
		long clazzSize = ((J9ROMClassPointer) clazz).romSize().longValue();
		if ((offset > 0) && (offset < clazzSize)) {
			if (utf8String.notNull()) {
				long UTF8Length = getUTF8Length(J9UTF8Pointer.cast(utf8String));
				if (utf8String.getAddress() < firstJ9_ROM_UTF8) {
					firstJ9_ROM_UTF8 = utf8String.getAddress();
				}
				if ((utf8String.getAddress() + UTF8Length) > lastJ9_ROM_UTF8) {
					lastJ9_ROM_UTF8 = utf8String.getAddress() + UTF8Length;
				}
				classRegions.add(new J9ClassRegion(utf8String,
						SlotType.J9_ROM_UTF8, slotName, additionalInfo,
						UTF8Length, offset, true));
			}
		}
	}"
1650,6436372.txt,none,"    @Nullable
    static Integer doubleToInt32(@Nonnull Double d) {
        long rounded = Math.round(d);

        if (rounded >= Integer.MIN_VALUE && rounded <= Integer.MAX_VALUE) {
            return (int) rounded;
        } else {
            return null;
        }
    }"
1651,8430479.txt,none,"    public String getType() {
        return type;
    }"
1652,5520984.txt,none,"    @Override
    public void setRememberMeServices(RememberMeServices rememberMeServices) {
	if (logger.isDebugEnabled()) {
	    logger.debug(""setRememberMeServices() enter: rememberMeServices=""
		    + rememberMeServices.toString());
	}
	super.setRememberMeServices(rememberMeServices);
    }"
1653,8697369.txt,none,"    public ModelMenuCondition(ModelMenuItem modelMenuItem, Element conditionElement) {
        this.passStyleExdr = FlexibleStringExpander.getInstance(conditionElement.getAttribute(""pass-style""));
        this.failStyleExdr = FlexibleStringExpander.getInstance(conditionElement.getAttribute(""disabled-style""));
        this.condition = AbstractModelCondition.DEFAULT_CONDITION_FACTORY.newInstance(modelMenuItem, conditionElement);
    }"
1654,3739360.txt,minor,"    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        checkState();

        PreparedStatementHolder stmtHolder = null;
        PreparedStatementKey key = new PreparedStatementKey(sql, getCatalog(), MethodType.Precall_1);

        boolean poolPreparedStatements = holder.isPoolPreparedStatements();

        if (poolPreparedStatements) {
            stmtHolder = holder.getStatementPool().get(key);
        }

        if (stmtHolder == null) {
            try {
                stmtHolder = new PreparedStatementHolder(key, conn.prepareCall(sql));
                holder.getDataSource().incrementPreparedStatementCount();
            } catch (SQLException ex) {
                handleException(ex, sql);
            }
        }

        initStatement(stmtHolder);

        DruidPooledCallableStatement rtnVal = new DruidPooledCallableStatement(this, stmtHolder);

        holder.addTrace(rtnVal);

        return rtnVal;
    }"
1655,9093538.txt,none,"        public RBuiltinNode getBuiltin() {
            return builtin;
        }"
1656,6875532.txt,none,"  @Override
  public void selectFile(final String name) throws DebugExceptionWrapper {
    ensureConnection();
    try {
      connection.sendSelectFileMessage(name);
    } catch (final IOException e) {
      throw new DebugExceptionWrapper(e);
    }
  }"
1657,6652229.txt,none,"	public ResultSequence evaluate(Collection args, org.eclipse.wst.xml.xpath2.api.EvaluationContext ec) throws DynamicError {
		return string_to_codepoints(args);
	}"
1658,4395308.txt,none,"    public PullPoint create(String queueName) throws UnableToCreatePullPointFault {
        org.oasis_open.docs.wsn.b_2.CreatePullPoint request
            = new org.oasis_open.docs.wsn.b_2.CreatePullPoint();
        request.getOtherAttributes().put(NotificationBroker.QNAME_PULLPOINT_QUEUE_NAME, queueName);
        CreatePullPointResponse response = createPullPoint.createPullPoint(request);
        return new PullPoint(response.getPullPoint());
    }"
1659,5396847.txt,none,"    public String getQueryString() {
        return delegate.getClass().getName() + "" doesn't support getQueryString() method: '"" + delegate.toString() + ""'"";
    }"
1660,4356398.txt,critical,"    @Override
    ValueNode preprocess(int numTables,
								FromList outerFromList,
								SubqueryList outerSubqueryList,
								PredicateList outerPredicateList) 
					throws StandardException
	{
		/* Only preprocess this node once.  We may get called multiple times
		 * due to tree transformations.
		 */
		if (preprocessed)
		{
			return this;
		}
		preprocessed = true;

		boolean		flattenable;
		ValueNode	topNode = this;

        final boolean haveOrderBy; // need to remember for flattening decision

        // Push the order by list down to the ResultSet
        if (orderByList != null) {
            haveOrderBy = true;
            // If we have more than 1 ORDERBY columns, we may be able to
            // remove duplicate columns, e.g., ""ORDER BY 1, 1, 2"".
            if (orderByList.size() > 1)
            {
                orderByList.removeDupColumns();
            }

            resultSet.pushOrderByList(orderByList);
            orderByList = null;
        } else {
            haveOrderBy = false;
        }

        resultSet = resultSet.preprocess(numTables, null, (FromList) null);

        if (leftOperand != null)
        {
            leftOperand = leftOperand.preprocess(numTables,
                    outerFromList, outerSubqueryList, outerPredicateList);
        }

		// Eliminate any unnecessary DISTINCTs
		if (resultSet instanceof SelectNode)
		{
			if (((SelectNode) resultSet).hasDistinct())
			{
				((SelectNode) resultSet).clearDistinct();
				/* We need to remember to check for single unique value
				 * at execution time for expression subqueries.
				 */
				if  (subqueryType == EXPRESSION_SUBQUERY)
				{
					distinctExpression = true;
				}
			}
		}

		/* Lame transformation - For IN/ANY subqueries, if
		 * result set is guaranteed to return at most 1 row
		 * and it is not correlated
		 * then convert the subquery into the matching expression
		 * subquery type.  For example:
		 *	c1 in (select min(c1) from t2)
		 * becomes:
		 *	c1 = (select min(c1) from t2)
		 * (This actually showed up in an app that a potential customer
		 * was porting from SQL Server.)
		 * The transformed query can then be flattened if appropriate.
		 */
		if ((isIN() || isANY()) &&
			resultSet.returnsAtMostOneRow())
		{
			if (! hasCorrelatedCRs())
			{
				changeToCorrespondingExpressionType();
			}
		}

		/* NOTE: Flattening occurs before the pushing of
		 * the predicate, since the pushing will add a node 
		 * above the SubqueryNode.
		 */

		/* Values subquery is flattenable if:
		 *  o It is not under an OR.
         *  o It is not a subquery in a having clause (DERBY-3257)
		 *  o It is an expression subquery on the right side
		 *	  of a BinaryComparisonOperatorNode.
		 *  o Either a) it does not appear within a WHERE clause, or 
		 *           b) it appears within a WHERE clause but does not itself 
		 *              contain a WHERE clause with other subqueries in it. 
		 *          (DERBY-3301)
		 */
		flattenable = (resultSet instanceof RowResultSetNode) &&
					  underTopAndNode && !havingSubquery &&
                      !haveOrderBy &&
                      offset == null &&
                      fetchFirst == null &&
					  !isWhereExistsAnyInWithWhereSubquery() &&
                      parentComparisonOperator != null;

		if (flattenable)
		{
			/* If we got this far and we are an expression subquery
			 * then we want to set leftOperand to be the left side
			 * of the comparison in case we pull the comparison into
			 * the flattened subquery.
			 */
			leftOperand = parentComparisonOperator.getLeftOperand();
			// Flatten the subquery
			RowResultSetNode rrsn = (RowResultSetNode) resultSet;
            FromList fl = new FromList(getContextManager());

			// Remove ourselves from the outer subquery list
			outerSubqueryList.removeElement(this);

			/* We only need to add the table from the subquery into 
			 * the outer from list if the subquery itself contains
			 * another subquery.  Otherwise, it just becomes a constant.
			 */
			if (rrsn.subquerys.size() != 0)
			{
				fl.addElement(rrsn);
				outerFromList.destructiveAppend(fl);
			}

			/* Append the subquery's subquery list to the 
			 * outer subquery list.
			 */
			outerSubqueryList.destructiveAppend(rrsn.subquerys);

			/* return the new join condition 
			 * If we are flattening an EXISTS then there is no new join
			 * condition since there is no leftOperand.  Simply return
			 * TRUE.
			 *
			 * NOTE: The outer where clause, etc. has already been normalized,
			 * so we simply return the BinaryComparisonOperatorNode above
			 * the new join condition.
			 */
			return getNewJoinCondition(leftOperand, getRightOperand());
		}

		/* Select subquery is flattenable if:
		 *  o It is not under an OR.
		 *  o The subquery type is IN, ANY or EXISTS or
		 *    an expression subquery on the right side
		 *	  of a BinaryComparisonOperatorNode.
		 *  o There are no aggregates in the select list
		 *  o There is no group by clause or having clause.
		 *  o There is a uniqueness condition that ensures
		 *	  that the flattening of the subquery will not
		 *	  introduce duplicates into the result set.
         *  o The subquery is not part of a having clause (DERBY-3257)
		 *  o There are no windows defined on it
		 *
		 *	OR,
		 *  o The subquery is NOT EXISTS, NOT IN, ALL (beetle 5173).
		 *  o Either a) it does not appear within a WHERE clause, or 
		 *           b) it appears within a WHERE clause but does not itself 
		 *              contain a WHERE clause with other subqueries in it. 
		 *          (DERBY-3301)
		 */
		boolean flattenableNotExists = (isNOT_EXISTS() || canAllBeFlattened());

		flattenable = (resultSet instanceof SelectNode) &&
 			          !((SelectNode)resultSet).hasWindows() &&
                      !haveOrderBy &&
                      offset == null &&
                      fetchFirst == null &&
					  underTopAndNode && !havingSubquery &&
					  !isWhereExistsAnyInWithWhereSubquery() &&
					  (isIN() || isANY() || isEXISTS() || flattenableNotExists ||
                       parentComparisonOperator != null);

		if (flattenable)
		{
			SelectNode	select = (SelectNode) resultSet;
			if ((!select.hasAggregatesInSelectList()) &&
			    (select.havingClause == null))
			{
				ValueNode origLeftOperand = leftOperand;

				/* Check for uniqueness condition. */
				/* Is the column being returned by the subquery
				 * a candidate for an = condition?
				 */
				boolean additionalEQ =
							(subqueryType == IN_SUBQUERY) ||
							(subqueryType == EQ_ANY_SUBQUERY);


				additionalEQ = additionalEQ &&
								((leftOperand instanceof ConstantNode) ||
								 (leftOperand instanceof ColumnReference) ||
								 (leftOperand.requiresTypeFromContext()));
				/* If we got this far and we are an expression subquery
				 * then we want to set leftOperand to be the left side
				 * of the comparison in case we pull the comparison into
				 * the flattened subquery.
				 */
                if (parentComparisonOperator != null)
				{
					leftOperand = parentComparisonOperator.getLeftOperand();
				}
				/* Never flatten to normal join for NOT EXISTS.
				 */

				if ((! flattenableNotExists) && select.uniqueSubquery(additionalEQ))
				{
					// Flatten the subquery
					return flattenToNormalJoin(numTables,
										   outerFromList, outerSubqueryList,
										   outerPredicateList);
				}
				/* We can flatten into an EXISTS join if all of the above
				 * conditions except for a uniqueness condition are true
				 * and:
				 *	o Subquery only has a single entry in its from list
				 *	  and that entry is a FromBaseTable
				 *	o All predicates in the subquery's where clause are
				 *	  pushable.
				 *  o The leftOperand, if non-null, is pushable.
				 * If the subquery meets these conditions then we will flatten
				 * the FBT into an EXISTS FBT, pushd the subquery's
				 * predicates down to the PRN above the EBT and
				 * mark the predicates to say that they cannot be pulled 
				 * above the PRN. (The only way that we can guarantee correctness
				 * is if the predicates do not get pulled up.  If they get pulled
				 * up then the single next logic for an EXISTS join does not work
				 * because that row may get disqualified at a higher level.)
                 * DERBY-4001: Extra conditions to allow flattening to a NOT
                 * EXISTS join (in a NOT EXISTS join it does matter on which
                 * side of the join predicates/restrictions are applied):
                 *  o All the predicates must reference the FBT, otherwise
                 *    predicates meant for the right side of the join may be
                 *    applied to the left side of the join.
                 *  o The right operand (in ALL and NOT IN) must reference the
                 *    FBT, otherwise the generated join condition may be used
                 *    to restrict the left side of the join.
				 */
				else if ( (isIN() || isANY() || isEXISTS() || flattenableNotExists) &&
						  ((leftOperand == null) ? true :
							 leftOperand.categorize(new JBitSet(numTables), false)) &&
						  select.getWherePredicates().allPushable())
				{
                    FromBaseTable fbt =
                            singleFromBaseTable(select.getFromList());

                    if (fbt != null && (!flattenableNotExists ||
                         (select.getWherePredicates().allReference(fbt) &&
                          rightOperandFlattenableToNotExists(numTables, fbt))))
                    {
                        return flattenToExistsJoin(numTables,
                                outerFromList, outerSubqueryList,
                                outerPredicateList, flattenableNotExists);
                    }
				}

				// restore leftOperand to its original value
				leftOperand = origLeftOperand;
			}
		}

        resultSet.pushQueryExpressionSuffix();

        resultSet.pushOffsetFetchFirst( offset, fetchFirst, hasJDBClimitClause );

		/* We transform the leftOperand and the select list for quantified 
		 * predicates that have a leftOperand into a new predicate and push it
		 * down to the subquery after we preprocess the subquery's resultSet.
		 * We must do this after preprocessing the underlying subquery so that
		 * we know where to attach the new predicate.
		 * NOTE - If we pushed the predicate before preprocessing the underlying
		 * subquery, then the point of attachment would depend on the form of
		 * that subquery.  (Where clause?  Having clause?)
		 */
		if (leftOperand != null)
		{
			topNode = pushNewPredicate(numTables);
			pushedNewPredicate = true;
		}
        /* EXISTS and NOT EXISTS subqueries that haven't been flattened, need
         * an IS [NOT] NULL node on top so that they return a BOOLEAN. Other
         * cases are taken care of in pushNewPredicate.
		 */
        else if (isEXISTS() || isNOT_EXISTS())
		{
            topNode = genIsNullTree(isEXISTS());
			subqueryType = EXISTS_SUBQUERY;
		}

		/*
		** Do inVariant and correlated checks now.  We
		** aren't going to use the results here, but they
		** have been stashed away by isInvariant() and hasCorrelatedCRs()
		*/
		isInvariant();
		hasCorrelatedCRs();

		/* If parentComparisonOperator is non-null then we are an
		 * expression subquery that was considered to be a candidate 
		 * for flattening, but we didn't get flattened.  In that case
		 * we are the rightOperand of the parent.  We need to update
		 * the parent's rightOperand with the new topNode and return
		 * the parent because the parent is letting us decide whether
		 * or not to replace the entire comparison, which we can do
		 * if we flatten.  Otherwise we simply return the new top node.
		 */
		if (parentComparisonOperator != null)
		{
			parentComparisonOperator.setRightOperand(topNode);
			return parentComparisonOperator;
		}

		return topNode;
	}"
1661,9121712.txt,none,"	public TextArea( ITextContent textContent, int offset, int baseLevel, int runLevel,
			FontInfo fontInfo )
	{
		super(textContent);
		this.textContent = textContent;
		this.fi = fontInfo;
		height = (int)( fi.getWordHeight( ) * PDFConstants.LAYOUT_TO_PDF_RATIO );
		baseLine = this.fi.getBaseline( );
		this.offset = offset;
		this.runLevel = runLevel;
		this.lineBreak = false;
		removePadding( );
		removeBorder( );
		removeMargin( );
	}"
1662,4445017.txt,none,"    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSqlQuery()) {
        hash = (37 * hash) + SQL_QUERY_FIELD_NUMBER;
        hash = (53 * hash) + getSqlQuery().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }"
1663,4479936.txt,none,"  public static LogicalExpression getIntervalDay(long intervalInMillis) {
      return new IntervalDayExpression(intervalInMillis);
  }"
1664,4291944.txt,none,"    DependentBeanEntry(T instance, Bean<?> bean, CreationalContext<T> creationalContext)
    {
        this.instance = instance;
        this.bean = bean;
        this.creationalContext = creationalContext;
    }"
1665,7777067.txt,none,"  @VisibleForTesting
  @Nonnull
  static Supplier<Object> supplierFromDimensionSelector(final DimensionSelector selector)
  {
    Preconditions.checkNotNull(selector, ""selector"");
    return () -> {
      final IndexedInts row = selector.getRow();

      if (row.size() == 1) {
        return selector.lookupName(row.get(0));
      } else {
        // Can't handle non-singly-valued rows in expressions.
        // Treat them as nulls until we think of something better to do.
        return null;
      }
    };
  }"
1666,4332339.txt,none,"    public LdapClassLoader( DirectoryService directoryService ) throws LdapException
    {
        super( LdapClassLoader.class.getClassLoader() );
        this.directoryService = directoryService;
        defaultSearchDn = directoryService.getDnFactory().create( DEFAULT_SEARCH_CONTEXTS_CONFIG );

        objectClassAT = directoryService.getSchemaManager().getAttributeType( SchemaConstants.OBJECT_CLASS_AT );
    }"
1667,6972046.txt,none,"  final TestSuite createSubsetSuite(
      final FeatureSpecificTestSuiteBuilder<
              ?, ? extends OneSizeTestContainerGenerator<Collection<E>, E>>
          parentBuilder,
      final Bound from,
      final Bound to) {
    final TestSortedSetGenerator<E> delegate =
        (TestSortedSetGenerator<E>) parentBuilder.getSubjectGenerator().getInnerGenerator();

    List<Feature<?>> features = new ArrayList<>();
    features.addAll(parentBuilder.getFeatures());
    features.remove(CollectionFeature.ALLOWS_NULL_VALUES);
    features.add(CollectionFeature.SUBSET_VIEW);

    return newBuilderUsing(delegate, to, from)
        .named(parentBuilder.getName() + "" subSet "" + from + ""-"" + to)
        .withFeatures(features)
        .suppressing(parentBuilder.getSuppressedTests())
        .createTestSuite();
  }"
1668,8754073.txt,none,"  private Dest resolveAction(WebApp.HTTP method, Dest dest, String path) {
    if (dest.prefix.length() == 1) {
      return null;
    }
    checkState(!isGoodMatch(dest, path), dest.prefix);
    checkState(SLASH.countIn(path) > 1, path);
    List<String> parts = WebApp.parseRoute(path);
    String controller = parts.get(WebApp.R_CONTROLLER);
    String action = parts.get(WebApp.R_ACTION);
    return add(method, pjoin("""", controller, action), dest.controllerClass,
               action, null);
  }"
1669,9426716.txt,minor,"    public void set(Object obj, Object value)
        throws IllegalArgumentException, IllegalAccessException
    {
        ensureObj(obj);
        if (isFinal) {
            throwFinalFieldIllegalAccessException(value);
        }
        if (value == null) {
            throwSetIllegalArgumentException(value);
        }
        if (value instanceof Byte) {
            unsafe.putInt(obj, fieldOffset, ((Byte) value).byteValue());
            return;
        }
        if (value instanceof Short) {
            unsafe.putInt(obj, fieldOffset, ((Short) value).shortValue());
            return;
        }
        if (value instanceof Character) {
            unsafe.putInt(obj, fieldOffset, ((Character) value).charValue());
            return;
        }
        if (value instanceof Integer) {
            unsafe.putInt(obj, fieldOffset, ((Integer) value).intValue());
            return;
        }
        throwSetIllegalArgumentException(value);
    }"
1670,4534287.txt,none,"    @GET
    @Path(""downloadtemplate"")
    @Produces(""application/vnd.ms-excel"")
    public Response getSavingsTemplate(@QueryParam(""officeId"")final Long officeId,
            @QueryParam(""staffId"")final Long staffId,@QueryParam(""dateFormat"") final String dateFormat) {
        return bulkImportWorkbookPopulatorService.getTemplate(GlobalEntityType.SAVINGS_ACCOUNT.toString(),officeId, staffId,dateFormat);
    }"
1671,4214385.txt,none,"    public void initialize(BSFManager mgr, String lang,Vector declaredBeans)
    throws BSFException
    {
        super.initialize(mgr, lang, declaredBeans);
        mgrfuncs = new BSFFunctions (mgr, this);
    }"
1672,5045944.txt,none,"    public RDFParserBuilder fromString(String string) {
        clearSource();
        this.content = string;
        return this;
    }"
1673,6610938.txt,none,"    public final void mThis_1() throws RecognitionException {
        try {
            int _type = This_1;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:131:8: ( 'this' )
            // InternalTypesLexer.g:131:10: 'this'
            {
            match(""this""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
1674,9344142.txt,none,"        public void stateChanged(ChangeEvent e) {
            if (!isDragging) {
                calculateThumbLocation();
                slider.repaint();
            }
            lastValue = slider.getValue();
        }"
1675,6854314.txt,none,"  public static String getZynamicsDirectory(final String companyName) {
    // Use lowercase for the company name, since that is customary on Linux. For ""zynamics"", this
    // is a no-op, but it will do the right thing for ""Google"".
    return SystemHelpers.getApplicationDataDirectory() + File.separator
        + (SystemHelpers.isRunningWindows() ? companyName : (""."" + companyName.toLowerCase()))
        + File.separator;
  }"
1676,7483452.txt,none,"	public Customer123Service(Customer123Repository repo) {
	}"
1677,6251730.txt,none,"    public static void assertAssignmentQuota(final Long parentId, final long requested, final long limit,
            @NotNull final Class<?> type, @NotNull final Class<?> parentType, final Function<Long, Long> countFct) {
        assertAssignmentQuota(parentId, requested, limit, type.getSimpleName(), parentType.getSimpleName(), countFct);
    }"
1678,4004665.txt,none,"    public void addPoint(Point2D p) {
        addPoint((float)p.getX(), (float)p.getY());
    }"
1679,7108794.txt,none,"    private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
        int ws = pred.waitStatus;
        if (ws == Node.SIGNAL)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park.
             */
            return true;
        if (ws > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
        } else {
            /*
             * waitStatus must be 0 or PROPAGATE.  Indicate that we
             * need a signal, but don't park yet.  Caller will need to
             * retry to make sure it cannot acquire before parking.
             */
            pred.compareAndSetWaitStatus(ws, Node.SIGNAL);
        }
        return false;
    }"
1680,9160221.txt,none,"	private static String stripNamespace( String name, String namespace )
	{
		if ( name == null || namespace == null )
			return name;

		String tmpNamespace = StringUtil.extractNamespace( name );
		if ( tmpNamespace == null )
			return name;

		if ( !namespace.equalsIgnoreCase( tmpNamespace ) )
			return name;

		return StringUtil.extractName( name );
	}"
1681,9007287.txt,none,"  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a null numerator"", constructingFactory.getFunctionName(getClass())));
    }
    
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a null denominator"", constructingFactory.getFunctionName(getClass())));
    }

    BigDecimal numerator = (BigDecimal)first;
    BigDecimal denominator = (BigDecimal)second;
        
    if(0 == denominator.compareTo(BigDecimal.ZERO)){
      throw new IOException(String.format(Locale.ROOT,""Unable to %s(...) with a 0 denominator"", constructingFactory.getFunctionName(getClass())));
    }
    
    return numerator.divide(denominator, MathContext.DECIMAL64);
  }"
1682,5660411.txt,none,"    @Override
    public CartesianCS createCartesianCS(final Map<String,?> properties,
            final CoordinateSystemAxis axis0,
            final CoordinateSystemAxis axis1,
            final CoordinateSystemAxis axis2) throws FactoryException
    {
        final DefaultCartesianCS cs;
        try {
            cs = new DefaultCartesianCS(complete(properties), axis0, axis1, axis2);
        } catch (IllegalArgumentException exception) {
            throw new InvalidGeodeticParameterException(exception);
        }
        return unique(""createCartesianCS"", cs);
    }"
1683,4426916.txt,none,"    @Override
    public EagleServiceBaseClient silence(boolean silence) {
        this.silence = silence;
        return this;
    }"
1684,6579581.txt,none,"  @Override
  protected EClass eStaticClass()
  {
    return DomainmodelPackage.Literals.OPERATION;
  }"
1685,3871308.txt,none,"  public void setTimeCreated(Long timeCreated) {
    this.timeCreated = timeCreated;
  }"
1686,7294667.txt,none,"	private boolean isGrailsLaunch(ILaunchConfiguration launchConfiguration) {
		try {
			ILaunchConfigurationType type = launchConfiguration.getType();
			return GrailsCoreActivator.PLUGIN_ID.equals(type.getPluginIdentifier());
		} catch (CoreException ex) {
			return false;
		}
	}"
1687,5394056.txt,none,"    @Test
    public void testJoinWithLocalIndex() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        Connection conn = DriverManager.getConnection(getUrl(), props);
        try {            
            String query = ""select phone, i.name from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" where s.name = 'S1' and i.name < 'T6'"";
            System.out.println(""1)\n"" + query);
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[24], QueryUtil.getExplainPlan(rs));
            
            query = ""select phone, max(i.name) from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" where s.name = 'S1' and i.name < 'T6' group by phone"";
            statement = conn.prepareStatement(query);
            rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-1111"");
            assertEquals(rs.getString(2), ""T2"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[25], QueryUtil.getExplainPlan(rs));
            
            query = ""select max(phone), max(i.name) from "" + getTableName(conn, JOIN_SUPPLIER_TABLE_FULL_NAME) + "" s left join "" + getTableName(conn, JOIN_ITEM_TABLE_FULL_NAME) + "" i on s.\""supplier_id\"" = i.\""supplier_id\"" and i.name < 'T6' where s.name <= 'S3'"";
            statement = conn.prepareStatement(query);
            rs = statement.executeQuery();
            assertTrue (rs.next());
            assertEquals(rs.getString(1), ""888-888-3333"");
            assertEquals(rs.getString(2), ""T4"");
            assertFalse(rs.next());
            rs = conn.createStatement().executeQuery(""EXPLAIN "" + query);
            assertPlansEqual(plans[26], QueryUtil.getExplainPlan(rs));
        } finally {
            conn.close();
        }
    }"
1688,4435287.txt,none,"    @POST
    @Path(""resume/{type}/{entity}"")
    @Produces(MediaType.APPLICATION_JSON)
    @Monitored(event = ""resume-instance"")
    @Override
    public InstancesResult resumeInstance(
            @Context HttpServletRequest request,
            @Dimension(""type"") @PathParam(""type"") String type,
            @Dimension(""entity"") @PathParam(""entity"") String entity,
            @Dimension(""start-time"") @QueryParam(""start"") String startStr,
            @Dimension(""end-time"") @QueryParam(""end"") String endStr,
            @Dimension(""colo"") @QueryParam(""colo"") String colo,
            @Dimension(""lifecycle"") @QueryParam(""lifecycle"") List<LifeCycle> lifeCycles) {
        try {
            return super.resumeInstance(request, type, entity, startStr, endStr, colo, lifeCycles);
        } catch (Throwable throwable) {
            throw FalconWebException.newAPIException(throwable);
        }
    }"
1689,4625303.txt,none,"    public static char[] add(char[] array, StringBuilder stringBuilder) {
        return add(array, getCharsFromStringBuilder(stringBuilder));
    }"
1690,4249533.txt,minor,"    public static String getNamespaceURI(Node node) {
        if (node instanceof Document) {
            node = ((Document) node).getDocumentElement();
        }

        Element element = (Element) node;

        String uri = element.getNamespaceURI();
        if (uri == null) {
            String prefix = getPrefix(node);
            String qname = prefix == null ? ""xmlns"" : ""xmlns:"" + prefix;

            Node aNode = node;
            while (aNode != null) {
                if (aNode.getNodeType() == Node.ELEMENT_NODE) {
                    Attr attr = ((Element) aNode).getAttributeNode(qname);
                    if (attr != null) {
                        uri = attr.getValue();
                        break;
                    }
                }
                aNode = aNode.getParentNode();
            }
        }
        return """".equals(uri) ? null : uri;
    }"
1691,7747392.txt,none,"    @Override
    public RabbitBroker getParent() {
        return (RabbitBroker) super.getParent();
    }"
1692,9007330.txt,none,"  public void track(final File file, final Object marker) {
    track(file, marker, null);
  }"
1693,4159069.txt,none,"    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.calcite.avatica.proto.Requests.internal_static_CatalogsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.calcite.avatica.proto.Requests.CatalogsRequest.class, org.apache.calcite.avatica.proto.Requests.CatalogsRequest.Builder.class);
    }"
1694,5262454.txt,none,"	public HeaderPanel(String id, String appName) {
		super(id);
		setOutputMarkupPlaceholderTag(true);
		add(new Label(""appName"", Strings.isEmpty(appName) ? ""&nbsp;"" : appName).setEscapeModelStrings(false));
	}"
1695,8461674.txt,none,"    @Override
    public String toString() {
        return ""JCachePolicy{""
                + ""keyExpression="" + keyExpression
                + "", enabled="" + enabled
                + '}';
    }"
1696,4282272.txt,none,"    public BinarySearchNode(K[] splitPoints, RawComparator<K> comparator) {
      this.splitPoints = splitPoints;
      this.comparator = comparator;
    }"
1697,8712093.txt,major,"public Cursor(Device device, int style) {
	super(device);
	NSAutoreleasePool pool = null;
	if (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();
	boolean shouldCreateCursor = false;
	try {
		switch (style) {
			case SWT.CURSOR_HAND:			handle = NSCursor.pointingHandCursor(); break;
			case SWT.CURSOR_ARROW:			handle = NSCursor.arrowCursor(); break;
			case SWT.CURSOR_WAIT:			{
												handle = busyButClickableCursor();
												if (handle == null) shouldCreateCursor = true; // create when handle was not retrieved
												break;
											}
			case SWT.CURSOR_CROSS:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_APPSTARTING:		handle = NSCursor.arrowCursor(); break;
			case SWT.CURSOR_HELP:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZEALL:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZENESW:		handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZENS:			handle = NSCursor.resizeUpDownCursor(); break;
			case SWT.CURSOR_SIZENWSE:		handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZEWE:			handle = NSCursor.resizeLeftRightCursor(); break;
			case SWT.CURSOR_SIZEN:			handle = NSCursor.resizeUpCursor(); break;
			case SWT.CURSOR_SIZES:			handle = NSCursor.resizeDownCursor(); break;
			case SWT.CURSOR_SIZEE:			handle = NSCursor.resizeRightCursor(); break;
			case SWT.CURSOR_SIZEW:			handle = NSCursor.resizeLeftCursor(); break;
			case SWT.CURSOR_SIZENE:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZESE:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZESW:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_SIZENW:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_UPARROW:			handle = NSCursor.crosshairCursor(); break;
			case SWT.CURSOR_IBEAM:			shouldCreateCursor = true; break;
			case SWT.CURSOR_NO:				handle = NSCursor.operationNotAllowedCursor(); break;
			default:
				SWT.error(SWT.ERROR_INVALID_ARGUMENT);
		}
		if (handle == null && shouldCreateCursor) {
			NSImage nsImage = (NSImage)new NSImage().alloc();
			NSBitmapImageRep nsImageRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();
			handle = (NSCursor)new NSCursor().alloc();
			int width = 16, height = 16;
			NSSize size = new NSSize();
			size.width = width;
			size.height =  height;
			nsImage = nsImage.initWithSize(size);
			nsImageRep = nsImageRep.initWithBitmapDataPlanes(0, width, height, 8, 4, true, false, OS.NSDeviceRGBColorSpace,
					OS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, width*4, 32);
			NSPoint point = new NSPoint();
			if (style == SWT.CURSOR_WAIT) {
				C.memmove(nsImageRep.bitmapData(), WAIT_SOURCE, WAIT_SOURCE.length);
			} else { //style == SWT.CURSOR_IBEAM
				C.memmove(nsImageRep.bitmapData(), SHADOWED_IBEAM_SOURCE, SHADOWED_IBEAM_SOURCE.length);
				point.x = 4; point.y = 8;			// values from NSCursor.IBeamCursor().hotSpot();
			}
			nsImage.addRepresentation(nsImageRep);
			handle = handle.initWithImage(nsImage, point);
			nsImageRep.release();
			nsImage.release();
		} else {
			handle.retain();
		}
		handle.setOnMouseEntered(true);
		init();
	} finally {
		if (pool != null) pool.release();
	}
}"
1698,7727545.txt,none,"    private static int[] getIntArray(String string) {
        if (string.equals(""[]"")) {
            return new int[]{};
        }
        string = string.substring(1, string.length() - 1);
        String[] splits = string.split("","");
        int[] array = new int[splits.length];
        for (int i = 0; i < splits.length; i++) {
            array[i] = Integer.parseInt(splits[i]);
        }
        return array;
    }"
1699,6515617.txt,minor,"    private Object getApplicationToRun(String[] args) throws CoreException {
        String configuredApplication = getConfiguredApplication(args);
        if (configuredApplication == null) {
            configuredApplication = DEFAULT_APP_3_0;
        } else {
            System.out.println(""Launching application "" + configuredApplication + ""..."");
        }

        // Assume we are in 3.0 mode.
        // Find the name of the application as specified by the PDE JUnit launcher.
        // If no application is specified, the 3.0 default workbench application
        // is returned.
        IExtension extension = Platform.getExtensionRegistry().getExtension(Platform.PI_RUNTIME,
                Platform.PT_APPLICATIONS, configuredApplication);

        // If no 3.0 extension can be found, search the registry
        // for the pre-3.0 default workbench application, i.e. org.eclipse ui.workbench
        // Set the deprecated flag to true
        if (extension == null) {
            return null;
        }

        // If the extension does not have the correct grammar, return null.
        // Otherwise, return the application object.
        IConfigurationElement[] elements = extension.getConfigurationElements();
        if (elements.length > 0) {
            IConfigurationElement[] runs = elements[0].getChildren(""run""); //$NON-NLS-1$
            if (runs.length > 0) {
                return runs[0].createExecutableExtension(""class""); //$NON-NLS-1$
            }
        }
        return null;
    }"
1700,4532155.txt,major,"    private synchronized Map getResourceBundleEntries(final Bundle bundle)
    {
        String file = (String) bundle.getHeaders().get(Constants.BUNDLE_LOCALIZATION);
        if (file == null)
        {
            file = Constants.BUNDLE_LOCALIZATION_DEFAULT_BASENAME;
        }

        // remove leading slash
        if (file.startsWith(""/"")) //$NON-NLS-1$
        {
            file = file.substring(1);
        }

        // split path and base name
        int slash = file.lastIndexOf('/');
        String fileName = file.substring(slash + 1);
        String path = (slash <= 0) ? ""/"" : file.substring(0, slash); //$NON-NLS-1$

        HashMap resourceBundleEntries = new HashMap();

        Enumeration locales = bundle.findEntries(path, fileName + ""*.properties"", false); //$NON-NLS-1$
        if (locales != null)
        {
            while (locales.hasMoreElements())
            {
                URL entry = (URL) locales.nextElement();

                // calculate the key
                String entryPath = entry.getPath();
                final int start = entryPath.lastIndexOf('/') + 1 + fileName.length(); // path,
                                                                                      // slash
                                                                                      // and
                                                                                      // base
                                                                                      // name
                final int end = entryPath.length() - 11; // .properties suffix
                entryPath = entryPath.substring(start, end);

                // the default language is ""name.properties"" thus the entry
                // path is empty and must default to ""_""+DEFAULT_LOCALE
                if (entryPath.length() == 0)
                {
                    entryPath = ""_"" + DEFAULT_LOCALE; //$NON-NLS-1$
                }

                // only add this entry, if the ""language"" is not provided
                // by the main bundle or an earlier bound fragment
                if (!resourceBundleEntries.containsKey(entryPath))
                {
                    resourceBundleEntries.put(entryPath, entry);
                }
            }
        }

        return resourceBundleEntries;
    }"
1701,4932611.txt,none,"    public WikiPage setRealPage( WikiPage page )
    {
        WikiPage old = m_realPage;
        m_realPage = page;
        updateCommand( m_command.getRequestContext() );
        return old;
    }"
1702,4953209.txt,none,"   @Override
   public boolean equals(Object obj) {
      if (this == obj) return true;
      if (obj == null || getClass() != obj.getClass()) return false;
      EmailAlias that = EmailAlias.class.cast(obj);
      return Objects.equal(this.alias, that.alias);
   }"
1703,5839980.txt,none,"    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (!super.equals(obj)) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        ContextResourceLink other = (ContextResourceLink) obj;
        if (factory == null) {
            if (other.factory != null) {
                return false;
            }
        } else if (!factory.equals(other.factory)) {
            return false;
        }
        if (global == null) {
            if (other.global != null) {
                return false;
            }
        } else if (!global.equals(other.global)) {
            return false;
        }
        return true;
    }"
1704,7748712.txt,none,"    public void setReuseSessions(boolean reuseSessions) {
        this.reuseSessions = reuseSessions;
    }"
1705,7204508.txt,none,"    public static UpdateWaasPolicyRequest interceptRequest(UpdateWaasPolicyRequest request) {

        return request;
    }"
1706,4350115.txt,none,"	public static	ExecIndexRow getIndexRowFromHeapRow(IndexRowGenerator irg,
														RowLocation rl,
														ExecRow heapRow)
		throws StandardException
	{
		ExecIndexRow		indexRow;

		indexRow = irg.getIndexRowTemplate();
		// Get an index row based on the base row
		irg.getIndexRow(heapRow, rl, indexRow, (FormatableBitSet) null);

		return indexRow;
	}"
1707,5414004.txt,none,"    private PDatum getParam(int index) throws SQLException {
        if (index <= 0 || index > params.length) {
            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND)
                .setMessage(""The index is "" + index + "". Must be between 1 and "" + params.length)
                .build().buildException();
        }
        PDatum param = params[index-1];
        
        if (param == EMPTY_DATUM) {
            //value at params[index-1] was never set.
            throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND)
                .setMessage(""Parameter at index "" + index + "" is unbound"").build().buildException();
        }
        return param;
    }"
1708,8417770.txt,none,"    public void setServiceSelector(String serviceSelector) {
        this.serviceSelector = serviceSelector;
    }"
1709,8917167.txt,none,"  public int getParamCount(HplsqlParser.Expr_func_paramsContext ctx) {
    if (ctx == null) {
      return 0;
    }
    return ctx.func_param().size();
  }"
1710,9037905.txt,none,"	@Override
	public boolean visit(TryStatement node) {
		this.result.append(""try ""); //$NON-NLS-1$
		int level = node.getAST().apiLevel();
		if (level >= JLS4_INTERNAL) {
			StructuralPropertyDescriptor desc = level < JLS9_INTERNAL ? INTERNAL_TRY_STATEMENT_RESOURCES_PROPERTY : TryStatement.RESOURCES2_PROPERTY;
			visitList(node, desc, String.valueOf(';'), String.valueOf('('), String.valueOf(')'));
		}
		getChildNode(node, TryStatement.BODY_PROPERTY).accept(this);
		this.result.append(' ');
		visitList(node, TryStatement.CATCH_CLAUSES_PROPERTY, null);
		ASTNode finallyClause= getChildNode(node, TryStatement.FINALLY_PROPERTY);
		if (finallyClause != null) {
			this.result.append("" finally ""); //$NON-NLS-1$
			finallyClause.accept(this);
		}
		return false;
	}"
1711,4232438.txt,none,"    @Override
    public void nextBytes(byte[] bytes) {
        
        synchronized (OpenSslJnaCryptoRandom.class) {
            //this method is synchronized for now
            //to support multithreading https://wiki.openssl.org/index.php/Manual:Threads(3) needs to be done
            
            if(rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())) {
                close();
                throw new RuntimeException(""rdrand should be used but default is detected"");
            }

            ByteBuffer buf = ByteBuffer.allocateDirect(bytes.length);
            int retVal = OpenSslNativeJna.RAND_bytes(buf, bytes.length);
            throwOnError(retVal);
            buf.rewind();
            buf.get(bytes,0, bytes.length);
        }
    }"
1712,5904841.txt,none,"    public BranchInstruction GE(boolean tozero) {
	return tozero ? (BranchInstruction) new IFGE(null) : 
	    (BranchInstruction) new IF_ICMPGE(null);
    }"
1713,4852058.txt,none,"    private ProgressNotificationEditor(Editor editor, String path, Function<String, Void> onProgress) {
        this.editor = editor;
        this.path = path;
        this.onProgress = onProgress;
    }"
1714,6857899.txt,none,"  public static String generateSub(final ITranslationEnvironment environment, final long offset,
      final OperandSize size, final String operand1, final String operand2,
      final List<ReilInstruction> instructions) throws IllegalArgumentException {
    Preconditions.checkNotNull(environment, ""Error: Argument environment can't be null"");
    Preconditions.checkNotNull(size, ""Error: Argument size can't be null"");
    Preconditions.checkNotNull(operand1, ""Error: Argument operand1 can't be null"");
    Preconditions.checkNotNull(operand2, ""Error: Argument operand2 can't be null"");

    final OperandSize resultSize = TranslationHelpers.getNextSize(size);

    final String msbMask = String.valueOf(TranslationHelpers.getMsbMask(size));
    final String shiftMsbLsb = String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));
    final String carryMask = String.valueOf(getCarryMask(size));
    final String shiftCarryLsb = String.valueOf(-size.getBitSize());
    final String truncateMask = String.valueOf(TranslationHelpers.getAllBitsMask(size));

    final String maskedOp1 = environment.getNextVariableString();
    final String maskedOp2 = environment.getNextVariableString();
    final String subResult = environment.getNextVariableString();
    final String msbResult = environment.getNextVariableString();
    final String msbSameBefore = environment.getNextVariableString();
    final String msbHasChanged = environment.getNextVariableString();
    final String tempOf = environment.getNextVariableString();
    final String tempCf = environment.getNextVariableString();
    final String truncatedResult = environment.getNextVariableString();

    // Isolate the MSBs of the two operands
    instructions.add(ReilHelpers.createAnd(offset, size, operand1, size, msbMask, size, maskedOp1));
    instructions.add(ReilHelpers.createAnd(offset + 1, size, operand2, size, msbMask, size,
        maskedOp2));

    // Perform the subtraction
    instructions.add(ReilHelpers.createSub(offset + 2, size, operand1, size, operand2, resultSize,
        subResult));

    // Isolate the MSB of the result and put it into the Sign Flag
    instructions.add(ReilHelpers.createAnd(offset + 3, resultSize, subResult, resultSize, msbMask,
        size, msbResult));
    instructions.add(ReilHelpers.createBsh(offset + 4, size, msbResult, size, shiftMsbLsb,
        OperandSize.BYTE, SIGN_FLAG));

    // Find out if the MSB of the two operands were different and whether the MSB of the first
    // operand changed
    instructions.add(ReilHelpers.createXor(offset + 5, size, maskedOp1, size, maskedOp2, size,
        msbSameBefore));
    instructions.add(ReilHelpers.createXor(offset + 6, size, maskedOp1, size, msbResult, size,
        msbHasChanged));
    instructions.add(ReilHelpers.createAnd(offset + 7, size, msbSameBefore, size, msbHasChanged,
        size, tempOf));

    // Write the result into the Overflow Flag
    instructions.add(ReilHelpers.createBsh(offset + 8, size, tempOf, size, shiftMsbLsb,
        OperandSize.BYTE, OVERFLOW_FLAG));

    // Update the Carry Flag
    instructions.add(ReilHelpers.createAnd(offset + 9, resultSize, subResult, resultSize,
        carryMask, resultSize, tempCf));
    instructions.add(ReilHelpers.createBsh(offset + 10, resultSize, tempCf, resultSize,
        shiftCarryLsb, OperandSize.BYTE, CARRY_FLAG));

    // Truncate the result to fit into the target
    instructions.add(ReilHelpers.createAnd(offset + 11, resultSize, subResult, resultSize,
        truncateMask, size, truncatedResult));

    // Update the Zero Flag
    instructions.add(ReilHelpers.createBisz(offset + 12, size, truncatedResult, OperandSize.BYTE,
        ZERO_FLAG));

    return truncatedResult;
  }"
1715,6278076.txt,none,"	public RevertCommand include(String name, AnyObjectId commit) {
		return include(new ObjectIdRef.Unpeeled(Storage.LOOSE, name,
				commit.copy()));
	}"
1716,8085059.txt,none,"    public final void rule__FeatureOfThis__Group__1__Impl() throws RecognitionException {
        int rule__FeatureOfThis__Group__1__Impl_StartIndex = input.index();

        		int stackSize = keepStackSize();
        	
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 769) ) { return ; }
            // InternalSimpleBeeLangTestLanguage.g:10732:1: ( ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) ) )
            // InternalSimpleBeeLangTestLanguage.g:10733:1: ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) )
            {
            // InternalSimpleBeeLangTestLanguage.g:10733:1: ( ( rule__FeatureOfThis__FeatureNameAssignment_1 ) )
            // InternalSimpleBeeLangTestLanguage.g:10734:2: ( rule__FeatureOfThis__FeatureNameAssignment_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1()); 
            }
            // InternalSimpleBeeLangTestLanguage.g:10735:2: ( rule__FeatureOfThis__FeatureNameAssignment_1 )
            // InternalSimpleBeeLangTestLanguage.g:10735:3: rule__FeatureOfThis__FeatureNameAssignment_1
            {
            pushFollow(FollowSets000.FOLLOW_2);
            rule__FeatureOfThis__FeatureNameAssignment_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 769, rule__FeatureOfThis__Group__1__Impl_StartIndex); }

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1717,8048739.txt,none,"	public Condition getLeft() {
		return left;
	}"
1718,3753086.txt,none,"    @Override
    public boolean visit(MySqlShowDatabasePartitionStatusStatement x) {
        return true;
    }"
1719,6462019.txt,none,"    private void buildNode462()
        throws Exception {
        UaVariableNode node = new PropertyNode(this.context, NodeId.parse(""ns=0;i=13969""), new QualifiedName(0, ""InputArguments""), new LocalizedText(""en"", ""InputArguments""), LocalizedText.NULL_VALUE, UInteger.valueOf(0L), UInteger.valueOf(0L), new DataValue(Variant.NULL_VALUE), NodeId.parse(""ns=0;i=296""), 1, new UInteger[]{}, UByte.valueOf(1), UByte.valueOf(1), 0.0D, false);
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=13968""), NodeClass.Method, false));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=40""), ExpandedNodeId.parse(""svr=0;i=68""), NodeClass.VariableType, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=37""), ExpandedNodeId.parse(""svr=0;i=78""), NodeClass.Object, true));
        node.addReference(new Reference(NodeId.parse(""ns=0;i=13969""), NodeId.parse(""ns=0;i=46""), ExpandedNodeId.parse(""svr=0;i=13968""), NodeClass.Method, false));
        String valueXml;
        OpcUaXmlStreamDecoder decoder = new OpcUaXmlStreamDecoder(new StringReader(new String(""<?xml version=\""1.0\"" encoding=\""UTF-8\"" standalone=\""yes\""?><ns2:ListOfExtensionObject xmlns=\""http://opcfoundation.org/BinarySchema/\"" xmlns:ns2=\""http://opcfoundation.org/UA/2008/02/Types.xsd\"" xmlns:ns3=\""http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\""><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\""true\"" xmlns:xsi=\""http://www.w3.org/2001/XMLSchema-instance\""/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>"")));
        Object valueObject = decoder.readVariantValue();
        DataValue value = new DataValue(new Variant(valueObject));
        node.setValue(value);
        this.nodeManager.addNode(node);
    }"
1720,5785684.txt,none,"  @Override
  public void toSummaryProtoStream(OutputStream outputStream) throws IOException {
    ProtoUtils.toSummaryEventProto(dagID, commitStartTime,
        getEventType(), null).writeDelimitedTo(outputStream);
  }"
1721,8925039.txt,minor,"  @Override
  public void configureInputJobProperties(TableDesc tableDesc,
                      Map<String, String> jobProperties) {

    try {
      Map<String, String> tableProperties = tableDesc.getJobProperties();

      String jobInfoProperty = tableProperties.get(HCatConstants.HCAT_KEY_JOB_INFO);
      if (jobInfoProperty != null) {

        LinkedList<InputJobInfo> inputJobInfos = (LinkedList<InputJobInfo>) HCatUtil.deserialize(
                jobInfoProperty);
        if (inputJobInfos == null || inputJobInfos.isEmpty()) {
          throw new IOException(""No InputJobInfo was set in job config"");
        }
        InputJobInfo inputJobInfo = inputJobInfos.getLast();

        HCatTableInfo tableInfo = inputJobInfo.getTableInfo();
        HCatSchema dataColumns = tableInfo.getDataColumns();
        List<HCatFieldSchema> dataFields = dataColumns.getFields();
        StringBuilder columnNamesSb = new StringBuilder();
        StringBuilder typeNamesSb = new StringBuilder();
        for (HCatFieldSchema dataField : dataFields) {
        if (columnNamesSb.length() > 0) {
            columnNamesSb.append("","");
            typeNamesSb.append("":"");
          }
          columnNamesSb.append(dataField.getName());
          typeNamesSb.append(dataField.getTypeString());
        }
        jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS, columnNamesSb.toString());
        jobProperties.put(IOConstants.SCHEMA_EVOLUTION_COLUMNS_TYPES, typeNamesSb.toString());

        boolean isTransactionalTable = AcidUtils.isTablePropertyTransactional(tableProperties);
        AcidUtils.AcidOperationalProperties acidOperationalProperties =
                AcidUtils.getAcidOperationalProperties(tableProperties);
        AcidUtils.setAcidOperationalProperties(
            jobProperties, isTransactionalTable, acidOperationalProperties);
      }
    } catch (IOException e) {
      throw new IllegalStateException(""Failed to set output path"", e);
    }

  }"
1722,8413074.txt,none,"    public static String[] filteredFieldNamesOf(final AbstractDescribedSObjectBase object,
        final Predicate<SObjectField> filter) {
        if (object == null) {
            return NONE;
        }

        if (filter == null) {
            return fieldNamesOf(object);
        }

        final SObjectDescription description = object.description();
        final List<SObjectField> fields = description.getFields();

        return fields.stream().filter(filter).map(SObjectField::getName).toArray(String[]::new);
    }"
1723,9409891.txt,none,"    protected Context getContinuationContext(Name n) throws NamingException {
        Object obj = lookup(n.get(0));
        CannotProceedException cpe = new CannotProceedException();
        cpe.setResolvedObj(obj);
        cpe.setEnvironment(myEnv);
        return NamingManager.getContinuationContext(cpe);
    }"
1724,8576209.txt,none,"    public getNamespaceDescriptor_args() {
    }"
1725,7454233.txt,none,"    private static OptionClass getOptionClass(OptionDescriptor descriptor) {
        if (descriptor.getOptionKey() instanceof RuntimeOptionKey) {
            return OptionClass.VM;
        }
        return OptionClass.Compiler;
    }"
1726,6921833.txt,none,"  public void setCommentCount(Integer commentCount) {
    if (commentCount != null) {
      setExtension(new GphotoCommentCount(commentCount));
    } else {
      removeExtension(GphotoCommentCount.class);
    }
  }"
1727,3870545.txt,none,"  public static RSAPublicKey getPublicKeyFromFile(String filePath) throws IOException, CertificateException {
    String pemString = FileUtils.readFileToString(new File(filePath));
    return getPublicKeyFromString(pemString);
  }"
1728,7325700.txt,none,"	public Q build() {
		@SuppressWarnings(""unchecked"")
		Q result = (Q) flow();
		return result;
	}"
1729,6464959.txt,none,"	@Override
	public void reportClass(CheckError error, J9ClassPointer clazz, String prefix)
	{
		String prefixString = prefix == null ? """" : prefix;
		
		if(!shouldReport(error)) {
			return;
		}		
		
		out.println(String.format(""  <gc check (%d): %sClass %x>"", error._errorNumber, prefixString, clazz.getAddress()));
	}"
1730,4432151.txt,none,"    @Override
    public SiteEntity create(SiteEntity entity) {
        Preconditions.checkNotNull(entity.getSiteId(), ""SiteId is null: "" + entity.getSiteId());
        if (siteId2EntityMap.containsKey(entity.getSiteId())) {
            throw new IllegalArgumentException(""Duplicated siteId: "" + entity.getSiteId());
        }
        entity.ensureDefault();
        siteId2EntityMap.put(entity.getSiteId(), entity);
        return entity;
    }"
1731,5075026.txt,none,"    @Override
    public long size()
    {
        return currentSize ;
//        long x = 0 ;
//        for ( K key : keys )
//            if ( key != null )
//                x++ ;
//        return x ;
    }"
1732,5978414.txt,none,"    private void refreshSecurityGroups() {
        new RefreshSecurityGroupsThread().start();
    }"
1733,8932995.txt,minor,"  protected VectorizedRowBatch setupOverflowBatch() throws HiveException {

    int initialColumnCount = vContext.firstOutputColumnIndex();
    VectorizedRowBatch overflowBatch;

    int totalNumColumns = initialColumnCount + vOutContext.getScratchColumnTypeNames().length;
    overflowBatch = new VectorizedRowBatch(totalNumColumns);

    // First, just allocate just the output columns we will be using.
    for (int i = 0; i < outputProjectionColumnMap.length; i++) {
      int outputColumn = outputProjectionColumnMap[i];
      String typeName = outputTypeInfos[i].getTypeName();
      allocateOverflowBatchColumnVector(overflowBatch, outputColumn, typeName);
    }

    // Now, add any scratch columns needed for children operators.
    int outputColumn = initialColumnCount;
    for (String typeName : vOutContext.getScratchColumnTypeNames()) {
      allocateOverflowBatchColumnVector(overflowBatch, outputColumn++, typeName);
    }

    overflowBatch.projectedColumns = outputProjectionColumnMap;
    overflowBatch.projectionSize = outputProjectionColumnMap.length;

    overflowBatch.reset();

    return overflowBatch;
  }"
1734,3770892.txt,none,"    private static void printCodePointAsFourHexDigits(Appendable out, int c)
        throws IOException
    {
        String s = Integer.toHexString(c);
        out.append(""\\u"");
        out.append(ZERO_PADDING[4-s.length()]);
        out.append(s);
    }"
1735,7785366.txt,none,"		protected final void doSelect(final int index)
		{
			String value = getChoiceValueForIndex(index);
			assignValueToFormComponent(formComponent, value);
		}"
1736,7294889.txt,none,"	public static void schedule(Job job) {
		job.setRule(ResourcesPlugin.getWorkspace().getRuleFactory().buildRule());
		job.setPriority(Job.BUILD);
		job.schedule();
	}"
1737,7214745.txt,none,"    private void init(Class<?> interfaceClass, Object interfaceInstance) {
        /**
         * The interface this server implements.
         */
        this.interfaceInstance = interfaceInstance;
        this.serviceDescription = new ServiceDescription(interfaceClass);
    }"
1738,4352708.txt,none,"    NormalizeResultSetNode(ResultSetNode chldRes,
                           ResultColumnList targetResultColumnList,
                           Properties tableProperties,
                           boolean forUpdate,
                           ContextManager cm) throws StandardException
	{
        super(chldRes, tableProperties, cm);
        this.forUpdate = forUpdate;

        ResultColumnList rcl = chldRes.getResultColumns();
        ResultColumnList targetRCL = targetResultColumnList;
        
		/* We get a shallow copy of the ResultColumnList and its 
		 * ResultColumns.  (Copy maintains ResultColumn.expression for now.)
		 * 
		 * Setting this.resultColumns to the modified child result column list,
		 * and making a new copy for the child result set node
		 * ensures that the ProjectRestrictNode restrictions still points to 
		 * the same list.  See d3494_npe_writeup-4.html in DERBY-3494 for a
		 * detailed explanation of how this works.
		 */
		ResultColumnList prRCList = rcl;
        chldRes.setResultColumns(rcl.copyListAndObjects());
		// Remove any columns that were generated.
		prRCList.removeGeneratedGroupingColumns();
        // And also columns that were added for ORDER BY (DERBY-6006).
        prRCList.removeOrderByColumns();

		/* Replace ResultColumn.expression with new VirtualColumnNodes
		 * in the NormalizeResultSetNode's ResultColumnList.  (VirtualColumnNodes include
		 * pointers to source ResultSetNode, rsn, and source ResultColumn.)
		 */
        prRCList.genVirtualColumnNodes(chldRes, chldRes.getResultColumns());
        
		setResultColumns( prRCList );
		// Propagate the referenced table map if it's already been created
        if (chldRes.getReferencedTableMap() != null)
		    {
			setReferencedTableMap((JBitSet) getReferencedTableMap().clone());
		    }
        
        
		if (targetResultColumnList != null) {
		    int size = Math.min(targetRCL.size(), getResultColumns().size());

            for (int index = 0; index < size; index++) {
                ResultColumn sourceRC = getResultColumns().elementAt(index);
                ResultColumn resultColumn = targetRCL.elementAt(index);
                sourceRC.setType(resultColumn.getTypeServices());
		    }
		}
	}"
1739,7625090.txt,none,"	public boolean isTeamPrivateMember() {
		return false;
	}"
1740,4721410.txt,minor,"    private void positionWriterAtCheckpoint() {
        writerChkptDK = new CheckpointDataKey(jobExecutionImpl.getJobInstance().getInstanceId(), step.getId(), CheckpointType.WRITER);

        CheckpointData writerData = persistenceManagerService.getCheckpointData(writerChkptDK);
        try {
            // check for data in backing store
            if (writerData != null) {
                byte[] writertoken = writerData.getRestartToken();
                TCCLObjectInputStream writerOIS;
                try {
                    writerProxy.open((Serializable) dataRepresentationService.toJavaRepresentation(writertoken));
                } catch (Exception ex) {
                    // is this what I should be throwing here?
                    throw new BatchContainerServiceException(""Cannot read the checkpoint data for ["" + step.getId() + ""]"", ex);
                }
            } else {
                // no chkpt data exists in the backing store
                writerData = null;
                try {
                    writerProxy.open(null);
                } catch (Exception ex) {
                    throw new BatchContainerServiceException(""Cannot open the step ["" + step.getId() + ""]"", ex);
                }
            }
        } catch (ClassCastException e) {
            throw new IllegalStateException(""Expected CheckpointData but found"" + writerData);
        }
    }"
1741,8132913.txt,none,"	public SerializerOptions(boolean format, boolean validateConcreteSyntax) {
		super();
		this.formatting = format;
		this.validateConcreteSyntax = validateConcreteSyntax;
	}"
1742,5473580.txt,none,"    private Collection<LinkDefinition<Source, Target>> performUpdate(final LinkStoreUpdater updater,
                                                                     Collection<LinkDefinition<Source, Target>> linkDefinitions,
                                                                     final ModelVersion storedVersion,
                                                                     final ModelVersion currentVersion)
            throws SQLException
    {
        linkDefinitions = updater.update(storedVersion.toString(), linkDefinitions);
        Connection connection = getConnection();
        try
        {
            connection.setAutoCommit(false);

            try (Statement statement = connection.createStatement())
            {
                statement.execute(""DELETE FROM "" + getLinksTableName());
            }

            for (LinkDefinition<? extends BaseSource, ? extends BaseTarget> linkDefinition : linkDefinitions)
            {
                insert(connection, generateLinkKey(linkDefinition), linkDefinition);
            }
            updateVersion(connection, currentVersion);
            connection.commit();
        }
        catch (SQLException e)
        {
            try
            {
                connection.rollback();
            }
            catch (SQLException re)
            {
                LOGGER.debug(""Cannot rollback transaction"", re);
            }
            throw e;
        }
        finally
        {
            JdbcUtils.closeConnection(connection, LOGGER);
        }
        return linkDefinitions;
    }"
1743,7090476.txt,none,"        public boolean equals(Object o) {
            Object k, v; Map.Entry<?,?> e;
            return ((o instanceof Map.Entry) &&
                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&
                    (v = e.getValue()) != null &&
                    (k == key || k.equals(key)) &&
                    (v == val || v.equals(val)));
        }"
1744,8963199.txt,none,"  private byte[] byteVars() {
    if (byteVars.length == size) {
      byte[] newVars = new byte[size << 1];
      System.arraycopy(byteVars, 0, newVars, 0, size);
      return byteVars = newVars;
    }
    return byteVars;
  }"
1745,4794965.txt,minor,"    @Override
    public Object getValue(final String columnLabel, final Class<?> type) throws SQLException {
        Object result;
        if (Object.class == type) {
            result = decrypt(columnLabel, resultSet.getObject(columnLabel));
        } else if (boolean.class == type) {
            result = decrypt(columnLabel, resultSet.getBoolean(columnLabel));
        } else if (byte.class == type) {
            result = decrypt(columnLabel, resultSet.getByte(columnLabel));
        } else if (short.class == type) {
            result = decrypt(columnLabel, resultSet.getShort(columnLabel));
        } else if (int.class == type) {
            result = decrypt(columnLabel, resultSet.getInt(columnLabel));
        } else if (long.class == type) {
            result = decrypt(columnLabel, resultSet.getLong(columnLabel));
        } else if (float.class == type) {
            result = decrypt(columnLabel, resultSet.getFloat(columnLabel));
        } else if (double.class == type) {
            result = decrypt(columnLabel, resultSet.getDouble(columnLabel));
        } else if (String.class == type) {
            result = decrypt(columnLabel, resultSet.getString(columnLabel));
        } else if (BigDecimal.class == type) {
            result = decrypt(columnLabel, resultSet.getBigDecimal(columnLabel));
        } else if (byte[].class == type) {
            result = resultSet.getBytes(columnLabel);
        } else if (Date.class == type) {
            result = resultSet.getDate(columnLabel);
        } else if (Time.class == type) {
            result = resultSet.getTime(columnLabel);
        } else if (Timestamp.class == type) {
            result = resultSet.getTimestamp(columnLabel);
        } else if (URL.class == type) {
            result = resultSet.getURL(columnLabel);
        } else if (Blob.class == type) {
            result = resultSet.getBlob(columnLabel);
        } else if (Clob.class == type) {
            result = resultSet.getClob(columnLabel);
        } else if (SQLXML.class == type) {
            result = resultSet.getSQLXML(columnLabel);
        } else if (Reader.class == type) {
            result = resultSet.getCharacterStream(columnLabel);
        } else {
            result = decrypt(columnLabel, resultSet.getObject(columnLabel));
        }
        return result;
    }"
1746,7168092.txt,none,"    public void setProfileAttributes(
        final VssJsonCollectionWrapper<List<ProfileAttributeBase<Object>>> attributesCollection, 
        final String id) { 

        final UUID locationId = UUID.fromString(""1392b6ac-d511-492e-af5b-2263e5545a5d""); //$NON-NLS-1$
        final ApiResourceVersion apiVersion = new ApiResourceVersion(""3.1-preview.2""); //$NON-NLS-1$

        final Map<String, Object> routeValues = new HashMap<String, Object>();
        routeValues.put(""id"", id); //$NON-NLS-1$

        final VssRestRequest httpRequest = super.createRequest(HttpMethod.PATCH,
                                                               locationId,
                                                               routeValues,
                                                               apiVersion,
                                                               attributesCollection,
                                                               VssMediaTypes.APPLICATION_JSON_TYPE,
                                                               VssMediaTypes.APPLICATION_JSON_TYPE);

        super.sendRequest(httpRequest);
    }"
1747,9005432.txt,none,"  public Geo3dRectangleShape(final GeoBBox shape,
                             final SpatialContext spatialcontext,
                             double minX,
                             double maxX,
                             double minY,
                             double maxY) {
    super(shape, spatialcontext);
    this.minX = minX;
    this.maxX = maxX;
    this.minY = minY;
    this.maxY = maxY;
  }"
1748,8566692.txt,none,"  @Override
  public boolean hasReferences() {
    // Grab the read lock here, because we need to ensure that: only when the atomic
    // replaceStoreFiles(..) finished, we can get all the complete store file list.
    this.lock.readLock().lock();
    try {
      // Merge the current store files with compacted files here due to HBASE-20940.
      Collection<HStoreFile> allStoreFiles = new ArrayList<>(getStorefiles());
      allStoreFiles.addAll(getCompactedFiles());
      return StoreUtils.hasReferences(allStoreFiles);
    } finally {
      this.lock.readLock().unlock();
    }
  }"
1749,5573449.txt,major,"    @Override
    public int setPath(Path2D path) {
        Rectangle2D bounds = path.getBounds2D();
        PathIterator it = path.getPathIterator(null);

        List<byte[]> segInfo = new ArrayList<>();
        List<Point2D.Double> pntInfo = new ArrayList<>();
        boolean isClosed = false;
        int numPoints = 0;
        while (!it.isDone()) {
            double[] vals = new double[6];
            int type = it.currentSegment(vals);
            switch (type) {
                case PathIterator.SEG_MOVETO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    segInfo.add(SEGMENTINFO_MOVETO);
                    numPoints++;
                    break;
                case PathIterator.SEG_LINETO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_ESCAPE);
                    numPoints++;
                    break;
                case PathIterator.SEG_CUBICTO:
                    pntInfo.add(new Point2D.Double(vals[0], vals[1]));
                    pntInfo.add(new Point2D.Double(vals[2], vals[3]));
                    pntInfo.add(new Point2D.Double(vals[4], vals[5]));
                    segInfo.add(SEGMENTINFO_CUBICTO);
                    segInfo.add(SEGMENTINFO_ESCAPE2);
                    numPoints++;
                    break;
                case PathIterator.SEG_QUADTO:
                    //TODO: figure out how to convert SEG_QUADTO into SEG_CUBICTO
                    LOG.log(POILogger.WARN, ""SEG_QUADTO is not supported"");
                    break;
                case PathIterator.SEG_CLOSE:
                    pntInfo.add(pntInfo.get(0));
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_ESCAPE);
                    segInfo.add(SEGMENTINFO_LINETO);
                    segInfo.add(SEGMENTINFO_CLOSE);
                    isClosed = true;
                    numPoints++;
                    break;
                default:
                    LOG.log(POILogger.WARN, ""Ignoring invalid segment type ""+type);
                    break;
            }

            it.next();
        }
        if(!isClosed) {
            segInfo.add(SEGMENTINFO_LINETO);
        }
        segInfo.add(SEGMENTINFO_END);

        AbstractEscherOptRecord opt = getEscherOptRecord();
        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__SHAPEPATH, 0x4));

        EscherArrayProperty verticesProp = new EscherArrayProperty((short)(EscherProperties.GEOMETRY__VERTICES + 0x4000), false, null);
        verticesProp.setNumberOfElementsInArray(pntInfo.size());
        verticesProp.setNumberOfElementsInMemory(pntInfo.size());
        verticesProp.setSizeOfElements(8);
        for (int i = 0; i < pntInfo.size(); i++) {
            Point2D.Double pnt = pntInfo.get(i);
            byte[] data = new byte[8];
            LittleEndian.putInt(data, 0, Units.pointsToMaster(pnt.getX() - bounds.getX()));
            LittleEndian.putInt(data, 4, Units.pointsToMaster(pnt.getY() - bounds.getY()));
            verticesProp.setElement(i, data);
        }
        opt.addEscherProperty(verticesProp);

        EscherArrayProperty segmentsProp = new EscherArrayProperty((short)(EscherProperties.GEOMETRY__SEGMENTINFO + 0x4000), false, null);
        segmentsProp.setNumberOfElementsInArray(segInfo.size());
        segmentsProp.setNumberOfElementsInMemory(segInfo.size());
        segmentsProp.setSizeOfElements(0x2);
        for (int i = 0; i < segInfo.size(); i++) {
            byte[] seg = segInfo.get(i);
            segmentsProp.setElement(i, seg);
        }
        opt.addEscherProperty(segmentsProp);

        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__RIGHT, Units.pointsToMaster(bounds.getWidth())));
        opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__BOTTOM, Units.pointsToMaster(bounds.getHeight())));

        opt.sortProperties();

        setAnchor(bounds);

        return numPoints;
    }"
1750,3922349.txt,minor,"    public List<PropertyType> fromProps(Map<String, Object> m) {
        List<PropertyType> props = new ArrayList<PropertyType>();
        for (Map.Entry<String, Object> entry : m.entrySet()) {
            String key = entry.getKey();
            Object val = entry.getValue();

            PropertyType propEl = new PropertyType();
            propEl.setName(key);
            ObjectFactory factory = new ObjectFactory();
            if (val.getClass().isArray()) {
                ArrayType arrayEl = new ArrayType();
                propEl.getContent().add(factory.createArray(arrayEl));
                for (Object o : normalizeArray(val)) {
                    setValueType(propEl, o);
                    ValueType valueType =  new ValueType();
                    valueType.getContent().add(o.toString());
                    arrayEl.getValue().add(valueType);
                }
            } else if (val instanceof List) {
                ArrayType listEl = new ArrayType();
                propEl.getContent().add(factory.createList(listEl));
                handleCollectionValue((Collection<?>) val, propEl, listEl);
            } else if (val instanceof Set) {
                ArrayType setEl = new ArrayType();
                propEl.getContent().add(factory.createSet(setEl));
                handleCollectionValue((Collection<?>) val, propEl, setEl);
            } else if (val instanceof String
                    || val instanceof Character
                    || val instanceof Boolean
                    || val instanceof Byte) {
                setValueType(propEl, val);
                propEl.setValue(val.toString());
            } else if (val instanceof Long
                    || val instanceof Double
                    || val instanceof Float
                    || val instanceof Integer
                    || val instanceof Short) {
                // various numbers..   maybe ""val instanceof Number""?
                setValueType(propEl, val);
                propEl.setValue(val.toString());
            } else {
                // Don't add this property as the value type is not supported
                continue;
            }
            props.add(propEl);
        }
        return props;
    }"
1751,6051478.txt,none,"	@Override
	public IDataset getComposition() {
		return getDataset(NX_COMPOSITION);
	}"
1752,6939776.txt,none,"  private void verifyAllParameters() {
    for (String parameter : parameterValueMap.keySet()) {
      verifyParameter(parameter);
    }
  }"
1753,7495736.txt,none,"    public static <T extends PointerBase> T pinArrayAndGetAddress(Object array) {
        PinnedObject pin = PinnedObject.create(array);
        pinnedObjectsListHead.set(new PinnedObjectListNode(pin, pinnedObjectsListHead.get()));
        return pin.addressOfArrayElement(0);
    }"
1754,8330187.txt,none,"	public static boolean is14VMOrGreater() {
		return 1.4 <= vmVersion;
	}"
1755,5759451.txt,none,"  @VisibleForTesting
  public static Optional<Tablespace> removeTablespaceForTest(String name) {
    Tablespace existing = null;
    synchronized (SPACES_URIS_MAP) {
      URI uri = SPACES_URIS_MAP.remove(name);
      if (uri != null) {
        existing = TABLE_SPACES.remove(uri);
      }
    }
    return Optional.ofNullable(existing);
  }"
1756,4144417.txt,none,"  @Deprecated // to be removed before 2.0
  public static RelNode swap(Join join) {
    return swap(join, false,
        RelFactories.LOGICAL_BUILDER.create(join.getCluster(), null));
  }"
1757,7645267.txt,none,"	public MultiValueMap<String, String> toMap() {
		MultiValueMap<String, String> map = new LinkedMultiValueMap<String, String>();
		if (limit != null) { map.set(""limit"", String.valueOf(limit)); }
		if (offset != null) { map.set(""offset"", String.valueOf(offset)); }
		if (since != null) { map.set(""since"", String.valueOf(since)); }
		if (until != null) { map.set(""until"", String.valueOf(until)); }
		if (after != null) { map.set(""after"", after); }
		if (before != null) { map.set(""before"", before); }
		if (pagingToken != null) { map.set(""__paging_token"", pagingToken); }
		return map;
	}"
1758,8199173.txt,none,"	public IGrammarAwareElementType getModelElementType() {
		return Model_ELEMENT_TYPE;
	}"
1759,4462987.txt,none,"  public Ack resumeFragment(final FragmentHandle handle) {
    // resume a pending fragment
    final FragmentManager manager = bee.getContext().getWorkBus().getFragmentManager(handle);
    if (manager != null) {
      manager.unpause();
      return Acks.OK;
    }

    // resume a paused fragment
    final FragmentExecutor runner = bee.getFragmentRunner(handle);
    if (runner != null) {
      runner.unpause();
      return Acks.OK;
    }

    // fragment completed or does not exist
    logger.warn(""Dropping request to resume fragment. {} does not exist."", QueryIdHelper.getQueryIdentifier(handle));
    return Acks.OK;
  }"
1760,8979235.txt,none,"    public Builder(float k1, float b) {
      this.similarity = new BM25Similarity(k1, b);
    }"
1761,5658486.txt,none,"    @Override
    @SuppressWarnings(""CloneDoesntCallSuperClone"")
    public final Matrix clone() {
        return Matrices.copy(this);
    }"
1762,5414837.txt,none,"    public DescriptiveStatistics(int window) {
        setWindowSize(window);
    }"
1763,7492767.txt,critical,"    @SuppressWarnings(""try"")
    private void doRun(Map<Method, CEntryPointData> entryPoints, Method mainEntryPoint,
                    JavaMainSupport javaMainSupport, String imageName, AbstractBootImage.NativeImageKind k,
                    SubstitutionProcessor harnessSubstitutions,
                    ForkJoinPool compilationExecutor, ForkJoinPool analysisExecutor) {
        List<HostedMethod> hostedEntryPoints = new ArrayList<>();

        OptionValues options = HostedOptionValues.singleton();
        SnippetReflectionProvider originalSnippetReflection = GraalAccess.getOriginalSnippetReflection();
        try (DebugContext debug = DebugContext.create(options, new GraalDebugHandlersFactory(originalSnippetReflection))) {
            setupNativeImage(imageName, options, entryPoints, javaMainSupport, harnessSubstitutions, analysisExecutor, originalSnippetReflection, debug);

            boolean returnAfterAnalysis = runPointsToAnalysis(imageName, options, debug);
            if (returnAfterAnalysis) {
                return;
            }

            NativeImageHeap heap;
            HostedMethod mainEntryPointHostedStub;
            HostedMetaAccess hMetaAccess;
            SharedRuntimeConfigurationBuilder runtime;
            try (StopTimer t = new Timer(imageName, ""universe"").start()) {
                hUniverse = new HostedUniverse(bigbang);
                hMetaAccess = new HostedMetaAccess(hUniverse, bigbang.getMetaAccess());

                new UniverseBuilder(aUniverse, bigbang.getMetaAccess(), hUniverse, hMetaAccess, HostedConfiguration.instance().createStaticAnalysisResultsBuilder(bigbang, hUniverse),
                                bigbang.getUnsupportedFeatures()).build(debug);

                runtime = new HostedRuntimeConfigurationBuilder(options, bigbang.getHostVM(), hUniverse, hMetaAccess, bigbang.getProviders()).build();
                registerGraphBuilderPlugins(featureHandler, runtime.getRuntimeConfig(), (HostedProviders) runtime.getRuntimeConfig().getProviders(), bigbang.getMetaAccess(), aUniverse,
                                hMetaAccess, hUniverse,
                                nativeLibraries, loader, false, true, bigbang.getAnnotationSubstitutionProcessor(), new SubstrateClassInitializationPlugin((SVMHost) aUniverse.hostVM()),
                                bigbang.getHostVM().getClassInitializationSupport());

                if (NativeImageOptions.PrintUniverse.getValue()) {
                    printTypes();
                }

                /* Find the entry point methods in the hosted world. */
                for (AnalysisMethod m : aUniverse.getMethods()) {
                    if (m.isEntryPoint()) {
                        HostedMethod found = hUniverse.lookup(m);
                        assert found != null;
                        hostedEntryPoints.add(found);
                    }
                }
                /* Find main entry point */
                if (mainEntryPoint != null) {
                    AnalysisMethod analysisStub = CEntryPointCallStubSupport.singleton().getStubForMethod(mainEntryPoint);
                    mainEntryPointHostedStub = (HostedMethod) hMetaAccess.getUniverse().lookup(analysisStub);
                    assert hostedEntryPoints.contains(mainEntryPointHostedStub);
                } else {
                    mainEntryPointHostedStub = null;
                }
                if (hostedEntryPoints.size() == 0) {
                    throw UserError.abort(""Warning: no entry points found, i.e., no method annotated with @"" + CEntryPoint.class.getSimpleName());
                }

                heap = new NativeImageHeap(aUniverse, hUniverse, hMetaAccess);

                BeforeCompilationAccessImpl config = new BeforeCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);
                featureHandler.forEachFeature(feature -> feature.beforeCompilation(config));

                bigbang.getUnsupportedFeatures().report(bigbang);
            } catch (UnsupportedFeatureException ufe) {
                throw UserError.abort(ufe.getMessage());
            }

            recordMethodsWithStackValues();
            recordRestrictHeapAccessCallees(aUniverse.getMethods());

            /*
             * After this point, all TypeFlow (and therefore also TypeState) objects are unreachable
             * and can be garbage collected. This is important to keep the overall memory footprint
             * low. However, this also means we no longer have complete call chain information. Only
             * the summarized information stored in the StaticAnalysisResult objects is available
             * after this point.
             */
            bigbang.cleanupAfterAnalysis();

            NativeImageCodeCache codeCache;
            CompileQueue compileQueue;
            try (StopTimer t = new Timer(imageName, ""compile"").start()) {
                compileQueue = HostedConfiguration.instance().createCompileQueue(debug, featureHandler, hUniverse, runtime, DeoptTester.enabled(), bigbang.getProviders().getSnippetReflection(),
                                compilationExecutor);
                compileQueue.finish(debug);

                /* release memory taken by graphs for the image writing */
                hUniverse.getMethods().forEach(HostedMethod::clear);

                codeCache = NativeImageCodeCacheFactory.get().newCodeCache(compileQueue, heap);
                codeCache.layoutConstants();
                codeCache.layoutMethods(debug, imageName);

                AfterCompilationAccessImpl config = new AfterCompilationAccessImpl(featureHandler, loader, aUniverse, hUniverse, hMetaAccess, heap, debug);
                featureHandler.forEachFeature(feature -> feature.afterCompilation(config));
            }

            try (Indent indent = debug.logAndIndent(""create native image"")) {
                try (DebugContext.Scope buildScope = debug.scope(""CreateBootImage"")) {
                    try (StopTimer t = new Timer(imageName, ""image"").start()) {

                        // Start building the model of the native image heap.
                        heap.addInitialObjects();
                        // Then build the model of the code cache, which can
                        // add objects to the native image heap.
                        codeCache.addConstantsToHeap();
                        // Finish building the model of the native image heap.
                        heap.addTrailingObjects();

                        AfterHeapLayoutAccessImpl config = new AfterHeapLayoutAccessImpl(featureHandler, loader, hMetaAccess, debug);
                        featureHandler.forEachFeature(feature -> feature.afterHeapLayout(config));

                        this.image = AbstractBootImage.create(k, hUniverse, hMetaAccess, nativeLibraries, heap, codeCache, hostedEntryPoints, mainEntryPointHostedStub, loader.getClassLoader());
                        image.build(debug);
                        if (NativeImageOptions.PrintUniverse.getValue()) {
                            /*
                             * This debug output must be printed _after_ and not _during_ image
                             * building, because it adds some PrintStream objects to static fields,
                             * which disrupts the heap.
                             */
                            codeCache.printCompilationResults();
                        }
                    }
                }
            }

            BeforeImageWriteAccessImpl beforeConfig = new BeforeImageWriteAccessImpl(featureHandler, loader, imageName, image,
                            runtime.getRuntimeConfig(), aUniverse, hUniverse, optionProvider, hMetaAccess, debug);
            featureHandler.forEachFeature(feature -> feature.beforeImageWrite(beforeConfig));

            try (StopTimer t = new Timer(imageName, ""write"").start()) {
                /*
                 * This will write the debug info too -- i.e. we may be writing more than one file,
                 * if the debug info is in a separate file. We need to push writing the file to the
                 * image implementation, because whether the debug info and image share a file or
                 * not is an implementation detail of the image.
                 */
                Path tmpDir = tempDirectory();
                Path imagePath = image.write(debug, generatedFiles(HostedOptionValues.singleton()), tmpDir, imageName, beforeConfig).getOutputFile();

                AfterImageWriteAccessImpl afterConfig = new AfterImageWriteAccessImpl(featureHandler, loader, hUniverse, imagePath, tmpDir, image.getBootImageKind(), debug);
                featureHandler.forEachFeature(feature -> feature.afterImageWrite(afterConfig));
            }
        }
    }"
1764,5919914.txt,none,"    private static final int twoDigit(CharSequence str, int index)
    {
        char ch1 = str.charAt(index);
        char ch2 = str.charAt(index + 1);
        if (!isDigit(ch1) || !isDigit(ch2))
            return 100; // not two digits
        return digitVal(ch1) * 10 + digitVal(ch2);
    }"
1765,5449838.txt,none,"    @GET
    @ApiOperation(
            value = ""Downloads Pulsar Function file data"",
            hidden = true
    )
    @Path(""/download"")
    public StreamingOutput downloadFunction(final @QueryParam(""path"") String path) {
        return functions.downloadFunction(path);
    }"
1766,4132362.txt,none,"  public int compareTypePrecedence(RelDataType type1, RelDataType type2) {
    assert containsType(type1) : type1;
    assert containsType(type2) : type2;

    int p1 =
        getListPosition(
            type1.getSqlTypeName(),
            typeNames);
    int p2 =
        getListPosition(
            type2.getSqlTypeName(),
            typeNames);
    return p2 - p1;
  }"
1767,3851209.txt,none,"  private ResourceInstance createConfigResource() {
    Map<Resource.Type, String> mapIds = new HashMap<>();
    mapIds.put(Resource.Type.RootService, RootService.AMBARI.name());
    mapIds.put(Resource.Type.RootServiceComponent, RootComponent.AMBARI_SERVER.name());

    return createResource(Resource.Type.RootServiceComponentConfiguration, mapIds);
  }"
1768,7424164.txt,none,"    @Override
    public Value emitFloatConvert(FloatConvert op, Value inputVal) {
        PlatformKind resultPlatformKind = getFloatConvertResultKind(op);
        LIRKind resultLirKind = LIRKind.combine(inputVal).changeType(resultPlatformKind);
        Variable result = getLIRGen().newVariable(resultLirKind);
        getLIRGen().append(new AArch64FloatConvertOp(op, result, asAllocatable(inputVal)));
        return result;
    }"
1769,7982015.txt,none,"	protected Bug288734TestLanguageRuntimeModule createRuntimeModule() {
		// make it work also with Maven/Tycho and OSGI
		// see https://bugs.eclipse.org/bugs/show_bug.cgi?id=493672
		return new Bug288734TestLanguageRuntimeModule() {
			@Override
			public ClassLoader bindClassLoaderToInstance() {
				return Bug288734TestLanguageInjectorProvider.class
						.getClassLoader();
			}
		};
	}"
1770,8828539.txt,none,"    public getAllGateways_args(
      org.apache.airavata.model.security.AuthzToken authzToken)
    {
      this();
      this.authzToken = authzToken;
    }"
1771,8963823.txt,none,"    @Override
    public AggregateCall other(RelDataTypeFactory typeFactory, AggregateCall e) {
      return AggregateCall.create(
          new HiveSqlCountAggFunction(isDistinct, returnTypeInference, operandTypeInference, operandTypeChecker),
          false, ImmutableIntList.of(), -1,
          typeFactory.createTypeWithNullability(typeFactory.createSqlType(SqlTypeName.BIGINT), true), ""count"");
    }"
1772,6048776.txt,none,"	@Override
	public DataNode setBend_angle_x(IDataset bend_angle_x) {
		return setDataset(NX_BEND_ANGLE_X, bend_angle_x);
	}"
1773,5855589.txt,none,"    @Override
    public void endAccess() {
        super.endAccess() ;
        if(manager instanceof ClusterManagerBase) {
            ((ClusterManagerBase)manager).registerSessionAtReplicationValve(this);
        }
    }"
1774,5297372.txt,none,"  private static int getPageRowCountLimit(Configuration conf) {
    return conf.getInt(PAGE_ROW_COUNT_LIMIT, ParquetProperties.DEFAULT_PAGE_ROW_COUNT_LIMIT);
  }"
1775,9187819.txt,none,"		public void inputChanged( Viewer viewer, Object oldInput,
				Object newInput )
		{
			if ( viewer == subCategoryTable )
			{
				functionTable.setInput( null );
			}
		}"
1776,7663402.txt,none,"	@Override
	public String toString() {
		return ""DefaultStateContext [stage="" + stage + "", message="" + message + "", messageHeaders="" + messageHeaders + "", extendedState=""
				+ extendedState + "", transition="" + transition + "", stateMachine="" + stateMachine + "", source="" + source + "", target=""
				+ target + "", sources="" + sources + "", targets="" + targets + "", exception="" + exception + ""]"";
	}"
1777,7483476.txt,none,	protected Customer1942() {}
1778,7671750.txt,none,"	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);

		// // 
		// OpUIManager.getDefaultOutputParamList();
	}"
1779,8939140.txt,none,"    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }"
1780,8432933.txt,none,"    public CamelCloudServiceDiscovery(Long timeout, List<ServiceDiscovery> serviceDiscoveryList) {
        // Created a chained service discovery that collects services from multiple
        // ServiceDiscovery
        this.delegate = new CombinedServiceDiscovery(serviceDiscoveryList);

        // If a timeout is provided, wrap the serviceDiscovery with a caching
        // strategy so the discovery implementations are not queried for each
        // discovery request
        if (timeout != null && timeout > 0) {
            this.delegate = CachingServiceDiscovery.wrap(this.delegate, timeout, TimeUnit.MILLISECONDS);
        }
    }"
1781,5141485.txt,none,"    private Set<Taglet> collectTaglets()
        throws MavenReportException
    {
        Set<Taglet> result = new LinkedHashSet<>();

        if ( includeDependencySources )
        {
            try
            {
                resolveDependencyBundles();
            }
            catch ( IOException e )
            {
                throw new MavenReportException(
                    ""Failed to resolve javadoc bundles from dependencies: "" + e.getMessage(), e );
            }

            if ( isNotEmpty( dependencyJavadocBundles ) )
            {
                for ( JavadocBundle bundle : dependencyJavadocBundles )
                {
                    JavadocOptions options = bundle.getOptions();
                    if ( options != null && isNotEmpty( options.getTaglets() ) )
                    {
                        result.addAll( options.getTaglets() );
                    }
                }
            }
        }

        if ( taglets != null && taglets.length > 0 )
        {
            result.addAll( Arrays.asList( taglets ) );
        }

        return result;
    }"
1782,6491821.txt,none,"	public BufferedGroupingRDFHandler(RDFHandler... handlers) {
		this(DEFAULT_BUFFER_SIZE, handlers);
	}"
1783,7748135.txt,none,"        private boolean containsDownEntity(Set<Entity> seeds) {
            for (Entity seed : seeds) {
                if (!isViableSeed(seed)) {
                    return true;
                }
            }
            return false;
        }"
1784,4767234.txt,none,"    public RpcRequestMessageWrapper(
        RpcRequestHeaderProto requestHeader, Message theRequest) {
      super(requestHeader, theRequest);
    }"
1785,8696357.txt,none,"        public ModelMenu getModelMenu(Map<String, Object> context) {
            String name = this.getName(context);
            String location = this.getLocation(context);
            ModelMenu modelMenu = null;
            try {
                modelMenu = MenuFactory.getMenuFromLocation(location, name);
            } catch (Exception e) {
                String errMsg = ""Error rendering included menu named ["" + name + ""] at location ["" + location + ""]: "";
                Debug.logError(e, errMsg, module);
                throw new RuntimeException(errMsg + e);
            }
            return modelMenu;
        }"
1786,3952980.txt,none,"  public void setWindowDataManager(WindowDataManager windowDataManager)
  {
    this.windowDataManager = windowDataManager;
  }"
1787,9251958.txt,none,"    public StringList getErrorCodes() {
        if (fErrors == null || fErrors.length == 0) {
            return StringListImpl.EMPTY_LIST;
        }
        return new PSVIErrorList(fErrors, true);
    }"
1788,6563346.txt,none,"    Collection readRegistry(IExtensionRegistry in) {
        values.clear();
        ids.clear();
        // RAP [bm]: 
//        readRegistry(in, PlatformUI.PLUGIN_ID,
//                IWorkbenchRegistryConstants.PL_DECORATORS);
      readRegistry(in, PlatformUI.PLUGIN_EXTENSION_NAME_SPACE,
				IWorkbenchRegistryConstants.PL_DECORATORS);
        // RAPEND: [bm] 
        return values;
    }"
1789,5876865.txt,none,"  public InstrumentationFacility getInstrumentationFacility() {
    return getRootContext().getInstrumentationFacility();
  }"
1790,5184123.txt,none,"  protected Put buildPut(Document update) throws IOException {
    Key k = new Key(update.getGuid(), update.getSensorType());
    Put put = new Put(Key.toBytes(k));
    long ts = update.getTimestamp() == null || update.getTimestamp() == 0 ? System.currentTimeMillis() : update.getTimestamp();
    byte[] columnQualifier = Bytes.toBytes(ts);
    byte[] doc = JSONUtils.INSTANCE.toJSONPretty(update.getDocument());
    put.addColumn(cf, columnQualifier, doc);
    return put;
  }"
1791,7164951.txt,none,"    public int getId() {
        return id;
    }"
1792,7520782.txt,none,"	@Override
	public SecurityConfigurer<I> namenodePrincipal(String principal) {
		if (StringUtils.hasText(principal)) {
			hadoopSecurity.setNamenodePrincipal(principal);
		}
		return this;
	}"
1793,9519320.txt,none,"    @Override
    public UL<T> $onmousedown(String value) {
      addAttr(""onmousedown"", value);
      return this;
    }"
1794,4574673.txt,none,"    public void addChildLMs(List newLMs) {
        if (newLMs == null || newLMs.size() == 0) {
            return;
        }
        for (LayoutManager newLM : (Iterable<LayoutManager>) newLMs) {
            addChildLM(newLM);
        }
    }"
1795,3924454.txt,none,"    public void unsetTinfo() {
      this.tinfo = null;
    }"
1796,4536178.txt,none,"    public AnnotationRecorder() {
        super(Opcodes.ASM5);
    }"
1797,8281849.txt,none,"    private SimpleDateFormat createFormat(DateResolution dateResolution) {
        switch (dateResolution) {
        case Year:
            return new SimpleDateFormat(""yyyy"");
        case Month:
            return new SimpleDateFormat(""yyyyMM"");
        case Day:
            return new SimpleDateFormat(""yyyyMMdd"");
        case Hour:
            return new SimpleDateFormat(""yyyyMMddhh"");
        case Minute:
            return new SimpleDateFormat(""yyyyMMddhhmm"");
        case Second:
            return new SimpleDateFormat(""yyyyMMddhhmmss"");
        default:
            return new SimpleDateFormat(""yyyyMMddhhmmssSSS"");
        }
    }"
1798,8039112.txt,none,"  @Override
  protected EClass eStaticClass()
  {
    return Bug287941TestLanguagePackage.Literals.REFERENCE_ALIAS_WHERE_ENTRY;
  }"
1799,9263532.txt,none,"    @Test
    public void run2() throws Throwable {
        runTest(""test"", 2);
    }"
1800,8423835.txt,none,"    public Certificate getCertificate() throws Exception {
        return getConfiguration().getCertificate();
    }"
1801,3829184.txt,none,"   public void resetHistory() {
      int max = dayCounterMax;

      setHistoryLimit(0);
      setHistoryLimit(max);
   }"
1802,3804285.txt,none,"    private Integer findRankOf(Rankable r) {
        Object tag = r.getObject();
        for (int rank = 0; rank < rankedItems.size(); rank++) {
            Object cur = rankedItems.get(rank).getObject();
            if (cur.equals(tag)) {
                return rank;
            }
        }
        return null;
    }"
1803,7356604.txt,none,"    public void addConstantSet(
        final int rootConstantID,
        final boolean oneLevel,
        final boolean twoPlusLevels,
        final boolean leaf,
        final boolean interior,
        final IConstantSet constantSet) {
        metadata.addConstantSet(rootConstantID, oneLevel, twoPlusLevels, leaf, interior, constantSet);
    }"
1804,4830091.txt,none,"    @Override
    protected void configure(final Marshaller marshaller) {
        marshaller.setAdapter(PersistentEntityAdapter.class,
                serviceRegistry.injectServicesInto(new PersistentEntityAdapter()));
        marshaller.setAdapter(PersistentEntitiesAdapter.class,
                serviceRegistry.injectServicesInto(new PersistentEntitiesAdapter()));
    }"
1805,5950858.txt,none,"        public void addRekognizedOutput(final RekognizedOutput rekognizedOutput) {
            this.rekognizedOutputs.add(rekognizedOutput);
        }"
1806,6398249.txt,none,"    public static boolean isTrue(boolean expression) {
        // succeed as quickly as possible
        if (expression) {
            return true;
        }
        return isTrue(expression, """");//$NON-NLS-1$
    }"
1807,6666702.txt,none,"	protected static void _log(int level, String message, Throwable exception) {
		if (level == OK_DEBUG || level == INFO_DEBUG || level == WARNING_DEBUG || level == ERROR_DEBUG) {
			if (!isDebugging())
				return;
		}

		int severity = IStatus.OK;
		switch (level) {
			case INFO_DEBUG :
			case INFO :
				severity = IStatus.INFO;
				break;
			case WARNING_DEBUG :
			case WARNING :
				severity = IStatus.WARNING;
				break;
			case ERROR_DEBUG :
			case ERROR :
				severity = IStatus.ERROR;
		}
		message = (message != null) ? message : ""null""; //$NON-NLS-1$
		Status statusObj = new Status(severity, PLUGIN_ID, severity, message, exception);
		Bundle bundle = Platform.getBundle(PLUGIN_ID);
		if (bundle != null) 
			Platform.getLog(bundle).log(statusObj);
	}"
1808,7969235.txt,none,"	public void setProp2(String prop2) {
		this.prop2 = prop2;
	}"
1809,6532406.txt,none,"    public Double[] getPrecipitation() {
        return precipitation;
    }"
1810,8548892.txt,major,"    private boolean configureHA(final Long resourceId, final HAResource.ResourceType resourceType, final Boolean enable, final String haProvider) {
        return Transaction.execute(new TransactionCallback<Boolean>() {
            @Override
            public Boolean doInTransaction(TransactionStatus status) {
                HAConfigVO haConfig = (HAConfigVO) haConfigDao.findHAResource(resourceId, resourceType);
                if (haConfig == null) {
                    haConfig = new HAConfigVO();
                    if (haProvider != null) {
                        haConfig.setHaProvider(haProvider);
                    }
                    if (enable != null) {
                        haConfig.setEnabled(enable);
                        haConfig.setManagementServerId(ManagementServerNode.getManagementServerId());
                    }
                    haConfig.setResourceId(resourceId);
                    haConfig.setResourceType(resourceType);
                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {
                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, ""HAProvider is not provided for the resource, failing configuration."");
                    }
                    if (haConfigDao.persist(haConfig) != null) {
                        return true;
                    }
                } else {
                    if (enable != null) {
                        haConfig.setEnabled(enable);
                    }
                    if (haProvider != null) {
                        haConfig.setHaProvider(haProvider);
                    }
                    if (Strings.isNullOrEmpty(haConfig.getHaProvider())) {
                        throw new ServerApiException(ApiErrorCode.PARAM_ERROR, ""HAProvider is not provided for the resource, failing configuration."");
                    }
                    return haConfigDao.update(haConfig.getId(), haConfig);
                }
                return false;
            }
        });
    }"
1811,5220844.txt,none,"        public void declareVariable(String name) {
            declarations.append(""declare variable "")
                .append(""$"")
                .append(name)
                .append("" external "")
                .append("";\n"");
        }"
1812,5585565.txt,none,"    public void testGetColumnWidthString() throws IOException {
        Workbook wb = new HSSFWorkbook();
        Sheet sheet = wb.createSheet(""sheet"");
        Row row = sheet.createRow(0);
        sheet.createRow(1);
        sheet.createRow(2);
        Cell cell = row.createCell(0);
        
        cell.setCellValue(""sometext"");
        
        assertTrue(""Having some width for rows with actual cells"", 
                SheetUtil.getColumnWidth(sheet, 0, true) > 0);
        assertEquals(""Not having any widht for rows with all empty cells"", 
                -1.0, SheetUtil.getColumnWidth(sheet, 0, true, 1, 2));
        
        wb.close();
    }"
1813,5464749.txt,none,"        public void onDischargeSuccess() {
            cleanup();

            // If the declare already returned a result we can proceed otherwise
            // we need to wait for it finish in order to get the correct outcome.
            if (declare == null) {
                request.onSuccess();
            } else if (declare.isComplete()) {
                if (declare.getFailureCause() == null) {
                    request.onSuccess();
                } else {
                    request.onFailure(declare.getFailureCause());
                }
            }
        }"
1814,6419975.txt,none,"    @Override
	public String queryOverwrite(String pathString) {
        if (alwaysOverwrite) {
			return ALL;
		}

        final String returnCode[] = { CANCEL };
        final String msg = NLS.bind(ResourceNavigatorMessages.DropAdapter_overwriteQuery, pathString);
        final String[] options = { IDialogConstants.YES_LABEL,
                IDialogConstants.YES_TO_ALL_LABEL, IDialogConstants.NO_LABEL,
                IDialogConstants.CANCEL_LABEL };
        getDisplay().syncExec(() -> {
		    MessageDialog dialog = new MessageDialog(
		            getShell(),
					ResourceNavigatorMessages.DropAdapter_question, null, msg, MessageDialog.QUESTION, 0, options);
		    dialog.open();
		    int returnVal = dialog.getReturnCode();
		    String[] returnCodes = { YES, ALL, NO, CANCEL };
		    returnCode[0] = returnVal < 0 ? CANCEL : returnCodes[returnVal];
		});
        if (returnCode[0] == ALL) {
			alwaysOverwrite = true;
		}
        return returnCode[0];
    }"
1815,6164700.txt,none,"  @Inject
  public UsagesNode(
      @Assisted UsagesResponse response,
      NodeFactory nodeFactory,
      PromiseProvider promiseProvider,
      TreeStyles styles,
      JavaResources resources) {
    this.response = response;
    this.nodeFactory = nodeFactory;
    this.promiseProvider = promiseProvider;
    this.resources = resources;
    this.styles = styles;
  }"
1816,6970865.txt,none,"  @CanIgnoreReturnValue
  @Override
  public E remove(int index) {
    return delegate().remove(index);
  }"
1817,5840527.txt,minor,"  final public void DynamicExpression() throws ParseException {
                                               /*@bgen(jjtree) DynamicExpression */
  AstDynamicExpression jjtn000 = new AstDynamicExpression(JJTDYNAMICEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_DYNAMIC_EXPRESSION);
      Expression();
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }"
1818,3698665.txt,none,"    public Self addExceptionHandler(GenericExceptionHandler<Input, Output> handler) {
        exceptionHandlers.add(handler);
        return getThis();
    }"
1819,4578967.txt,none,"    @Override
    public FOPGVTFontFamily resolve(String familyName) {
        FOPGVTFontFamily fopGVTFontFamily = super.resolve(familyName);
        // TODO why don't DB fonts work with GOCA?!?
        if (fopGVTFontFamily != null && fopGVTFontFamily.deriveFont(1, new HashMap())
                .getFont().getFontMetrics() instanceof DoubleByteFont) {
            notifyDBFontRejection(fopGVTFontFamily.getFamilyName());
            fopGVTFontFamily = null;
        }
        return fopGVTFontFamily;
    }"
1820,7385102.txt,none,"	private void reportAvailableDependencies(InitializrServiceMetadata metadata,
			StringBuilder report) {
		report.append(""Available dependencies:"").append(NEW_LINE);
		report.append(""-----------------------"").append(NEW_LINE);
		List<Dependency> dependencies = getSortedDependencies(metadata);
		for (Dependency dependency : dependencies) {
			report.append(dependency.getId()).append("" - "").append(dependency.getName());
			if (dependency.getDescription() != null) {
				report.append("": "").append(dependency.getDescription());
			}
			report.append(NEW_LINE);
		}
	}"
1821,7187010.txt,none,"        public UpdateSubscriptionRequest build() {
            UpdateSubscriptionRequest request = buildWithoutInvocationCallback();
            request.setInvocationCallback(invocationCallback);
            return request;
        }"
1822,5437592.txt,none,"    public static org.apache.phoenix.coprocessor.generated.MetaDataProtos.CreateFunctionRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }"
1823,8119264.txt,none,"    public final void rule__WithContextExpression__Group_3__0() throws RecognitionException {
        int rule__WithContextExpression__Group_3__0_StartIndex = input.index();

        		int stackSize = keepStackSize();
        	
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 692) ) { return ; }
            // InternalSimpleBeeLangTestLanguage.g:9695:1: ( rule__WithContextExpression__Group_3__0__Impl rule__WithContextExpression__Group_3__1 )
            // InternalSimpleBeeLangTestLanguage.g:9696:2: rule__WithContextExpression__Group_3__0__Impl rule__WithContextExpression__Group_3__1
            {
            pushFollow(FollowSets000.FOLLOW_9);
            rule__WithContextExpression__Group_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FollowSets000.FOLLOW_2);
            rule__WithContextExpression__Group_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 692, rule__WithContextExpression__Group_3__0_StartIndex); }

            	restoreStackSize(stackSize);

        }
        return ;
    }"
1824,8999846.txt,none,"    @Override
    public void streamObjects(Consumer<Object> cons) {
      Object val = getObject();
      if (exists()) {
        cons.accept(val);
      }
    }"
1825,8212082.txt,none,"    @RequestMapping(""/ping"")
    @ResponseBody
    public String ping() {
        return ""pong"";
    }"
1826,6165484.txt,none,"  public boolean hasMatchingKey(Node model1, Node model2) {
    return keyProvider.getKey(model1).equals(keyProvider.getKey(model2));
  }"
1827,4847006.txt,none,"    public RepositoryServiceImpl(String jcrServerURI, String defaultWorkspaceName,
                                 BatchReadConfig batchReadConfig, int itemInfoCacheSize,
                                 int maximumHttpConnections) throws RepositoryException {

        super(jcrServerURI, IdFactoryImpl.getInstance(), NameFactoryImpl.getInstance(),
                PathFactoryImpl.getInstance(), new QValueFactoryImpl(), itemInfoCacheSize, maximumHttpConnections);

        try {
            URI repositoryUri = computeRepositoryUri(jcrServerURI);
            this.jcrServerURI = repositoryUri.toString();
        } catch (URISyntaxException e) {
            throw new RepositoryException(e);
        }

        this.defaultWorkspaceName = defaultWorkspaceName;
        if (batchReadConfig == null) {
            this.batchReadConfig = new BatchReadConfig() {
                public int getDepth(Path path, PathResolver resolver) {
                    return 0;
                }
            };
        } else {
            this.batchReadConfig = batchReadConfig;
        }
    }"
1828,5542756.txt,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, list_roles_privileges_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }"
1829,3921684.txt,none,"    public void unsetTinfo() {
      this.tinfo = null;
    }"
1830,7726305.txt,none,"    public ResourceOperationSpecService() {
        super(ResourceOperationSpec.class);
        super.toggleOption(ServiceOption.PERSISTENCE, true);
        super.toggleOption(ServiceOption.REPLICATION, true);
        super.toggleOption(ServiceOption.OWNER_SELECTION, true);
        super.toggleOption(ServiceOption.IDEMPOTENT_POST, true);
    }"
1831,4665134.txt,none,"	@Override
	public <T> T invokeAny(
		@Nonnull Collection<? extends Callable<T>> tasks,
		long timeout,
		@Nonnull TimeUnit unit) throws ExecutionException, TimeoutException {

		long end = System.currentTimeMillis() + unit.toMillis(timeout);
		Exception exception = null;

		Iterator<? extends Callable<T>> iterator = tasks.iterator();

		while (end > System.currentTimeMillis() && iterator.hasNext()) {
			Callable<T> callable = iterator.next();

			try {
				return callable.call();
			} catch (Exception e) {
				// ignore exception and try next
				exception = e;
			}
		}

		if (iterator.hasNext()) {
			throw new TimeoutException(""Could not finish execution of tasks within time."");
		} else {
			throw new ExecutionException(""No tasks finished successfully."", exception);
		}
	}"
1832,8705246.txt,none,"public void setInsertMark(int index, boolean after) {
	checkWidget();
	if (index < -1 || index >= getItemCount()) {
		SWT.error(SWT.ERROR_INVALID_ARGUMENT);
	}
}"
1833,4315829.txt,minor,"    @Override
    public int hashCode()
    {
        int hash = 37;

        if ( baseDn != null )
        {
            hash = hash * 17 + baseDn.hashCode();
        }

        hash = hash * 17 + aliasDerefMode.hashCode();
        hash = hash * 17 + scope.hashCode();
        hash = hash * 17 + Long.valueOf( sizeLimit ).hashCode();
        hash = hash * 17 + timeLimit;
        hash = hash * 17 + ( typesOnly ? 0 : 1 );

        if ( attributes != null )
        {
            hash = hash * 17 + attributes.size();

            // Order doesn't matter, thus just add hashCode
            for ( String attr : attributes )
            {
                if ( attr != null )
                {
                    hash = hash + attr.hashCode();
                }
            }
        }

        BranchNormalizedVisitor visitor = new BranchNormalizedVisitor();
        filterNode.accept( visitor );
        hash = hash * 17 + filterNode.toString().hashCode();
        hash = hash * 17 + super.hashCode();

        return hash;
    }"
1834,6513603.txt,none,"    ProductVersionExpansionRun(P2TargetPlatform targetPlatform, File productFile) {
        this.targetPlatform = targetPlatform;
        this.productFile = productFile;
    }"
1835,8051170.txt,none,"	private String getRawReturnType(JvmOperation singleOperation) {
		JvmTypeReference returnType = singleOperation.getReturnType();
		if (returnType == null)
			return null;
		JvmType rawType = returnType.getType();
		if (rawType == null) {
			return null;
		}
		return rawType.getQualifiedName();
	}"
1836,3926659.txt,none,"    public getSiteConfiguration_args(
      java.nio.ByteBuffer login)
    {
      this();
      this.login = org.apache.thrift.TBaseHelper.copyBinary(login);
    }"
1837,4057866.txt,none,"    protected void readPayload(ByteBuf in, boolean copyData) throws IOException {
        int length = in.readInt();
        if (length < 0) {
            throw new EOFException(""Log Record is corrupt: Negative length "" + length);
        }
        if (copyData) {
            setPayloadBuf(in.slice(in.readerIndex(), length), true);
        } else {
            setPayloadBuf(in.retainedSlice(in.readerIndex(), length), false);
        }
        in.skipBytes(length);
    }"
1838,7792449.txt,none,"	@Override
	protected void onConfigure() 
	{
		super.onConfigure();
		dequeue();
	}"
1839,5934742.txt,none,"    public long getLastProcessedZxid(){
        return provider.getLastProcessedZxid();
    }"
1840,8422970.txt,none,"    public int getConcurrentConsumers() {
        return concurrentConsumers;
    }"
1841,7032580.txt,none,"    public boolean needsConnectionLeftOpen() {
        return false;
    }"
1842,5485720.txt,none,"    @Override
    public String getTrustedCaDb()
    {
        return _trustedCaDb;
    }"
1843,4456439.txt,none,"    public Builder defaultSchemaPathColumns() {
      this.columns = GroupScan.ALL_COLUMNS;
      return this;
    }"
1844,4734250.txt,none,"  public Long getTotalLogRecordsCompacted() {
    Long totalLogRecords = 0L;
    for (Map.Entry<String, List<HoodieWriteStat>> entry : partitionToWriteStats.entrySet()) {
      for (HoodieWriteStat writeStat : entry.getValue()) {
        totalLogRecords += writeStat.getTotalLogRecords();
      }
    }
    return totalLogRecords;
  }"
1845,6414926.txt,none,"	@Override
	public void releaseContributions(ContributionManager mgr) {
		if (mgr instanceof MenuManager) {
			MenuManager menu = (MenuManager) mgr;
			releaseContributionManager(menu);
		} else if (mgr instanceof ToolBarManager) {
			ToolBarManager toolbar = (ToolBarManager) mgr;
			releaseContributionManager(toolbar);
		} else {
			WorkbenchPlugin.log(""releaseContributions: Unhandled manager: "" + mgr); //$NON-NLS-1$
		}
	}"
1846,7009433.txt,none,"  @Provides
  @Parameter(""fields"")
  static Optional<String> provideFields(HttpServletRequest req) {
    return extractOptionalParameter(req, ListObjectsAction.FIELDS_PARAM);
  }"
1847,6108863.txt,none,"    @Override
    public MutableList<V> toSortedList()
    {
        return this.getMutableMap().toSortedList();
    }"
1848,8934300.txt,major,"    @Override
    public RelOptCost getCost(HiveJoin join) {
      final RelMetadataQuery mq = join.getCluster().getMetadataQuery();
      // 1. Sum of input cardinalities
      final Double leftRCount = mq.getRowCount(join.getLeft());
      final Double rightRCount = mq.getRowCount(join.getRight());
      if (leftRCount == null || rightRCount == null) {
        return null;
      }
      final double rCount = leftRCount + rightRCount;
      // 2. CPU cost = HashTable  construction  cost  +
      //               join cost
      ImmutableList<Double> cardinalities = new ImmutableList.Builder<Double>().
              add(leftRCount).
              add(rightRCount).
              build();
      ImmutableBitSet.Builder streamingBuilder = ImmutableBitSet.builder();
      switch (join.getStreamingSide()) {
        case LEFT_RELATION:
          streamingBuilder.set(0);
          break;
        case RIGHT_RELATION:
          streamingBuilder.set(1);
          break;
        default:
          return null;
      }
      ImmutableBitSet streaming = streamingBuilder.build();
      final double cpuCost = algoUtils.computeBucketMapJoinCPUCost(cardinalities, streaming);
      // 3. IO cost = cost of transferring small tables to join node *
      //              degree of parallelism
      final Double leftRAverageSize = mq.getAverageRowSize(join.getLeft());
      final Double rightRAverageSize = mq.getAverageRowSize(join.getRight());
      if (leftRAverageSize == null || rightRAverageSize == null) {
        return null;
      }
      ImmutableList<Pair<Double,Double>> relationInfos = new ImmutableList.Builder<Pair<Double,Double>>().
              add(new Pair<Double,Double>(leftRCount,leftRAverageSize)).
              add(new Pair<Double,Double>(rightRCount,rightRAverageSize)).
              build();
      //TODO: No Of buckets is not same as no of splits
      JoinAlgorithm oldAlgo = join.getJoinAlgorithm();
      join.setJoinAlgorithm(TezBucketJoinAlgorithm.INSTANCE);
      final int parallelism = mq.splitCount(join) == null
              ? 1 : mq.splitCount(join);
      join.setJoinAlgorithm(oldAlgo);

      final double ioCost = algoUtils.computeBucketMapJoinIOCost(relationInfos, streaming, parallelism);
      // 4. Result
      return HiveCost.FACTORY.makeCost(rCount, cpuCost, ioCost);
    }"
1849,4901851.txt,none,"        @Override
        public Validator childNodeChanged(String name, NodeState before, NodeState after) throws CommitFailedException {
            Tree beforeTree = (parentBefore == null) ? null : parentBefore.getChild(name);
            Tree afterTree = parentAfter.getChild(name);

            if (isTokenTree(beforeTree) || isTokenTree(afterTree)) {
                validateTokenTree(afterTree);
            } else if (isTokensParent(beforeTree) || isTokensParent(afterTree)) {
                validateTokensParent(afterTree);
            }

            return new VisibleValidator(new TokenValidator(beforeTree, afterTree, commitInfo), true, true);
        }"
1850,8971449.txt,none,"  void migrateGlobal(int counts[], long segCounts[], int subIndex, OrdinalMap map) {
    
    final LongValues ordMap = map.getGlobalOrds(subIndex);
    // missing count
    counts[0] += (int) (segCounts[0]>>32);
    
    // migrate actual ordinals
    for (int ord = 1; ord <= segmentSSDV.getValueCount(); ord++) {
      int count = (int) (segCounts[ord]>>32);
      if (count != 0) {
        counts[1+(int) ordMap.get(ord-1)] += count;
      }
    }
  }"
1851,6036658.txt,none,"		void cleanup() {
			for (final BundleWire requiredWire : requiredWires.getAllValues()) {
				final ConciergeBundleWiring bw = ((ConciergeBundleWire) requiredWire).providerWiring;
				if (bw != null) {
					bw.inUseSet.remove(revision);
				}
			}
			for (final BundleWire hostWire : providedWires
					.lookup(HostNamespace.HOST_NAMESPACE)) {
				final ConciergeBundleWiring bw = ((ConciergeBundleWire) hostWire).requirerWiring;
				if (bw != null) {
					bw.inUseSet.remove(revision);
				}
			}
		}"
1852,7320020.txt,none,"        public CLCHTTPProxyConfiguration(
            final String host,
            final int port,
            final String username,
            final String password) {
            Check.notNull(host, ""host""); //$NON-NLS-1$

            this.host = host;
            this.port = port;
            this.username = username;
            this.password = password;
        }"
1853,9172549.txt,none,"	public String getBirtFilterExprDisplayName( )
	{
		return birtFilterDisplayName;
	}"
1854,9206273.txt,none,"	public IAggrFunction getAggregation( String name )
	{
		return name != null ? (IAggrFunction) aggrMap.get( name.toUpperCase( ) )
				: null;
	}"
1855,4609125.txt,none,"	@Override
	public int hashCode() {
		Preconditions.checkNotNull(type, ""TypeInformation type class is required"");

		return type.hashCode();
	}"
1856,6999266.txt,none,"  public static File gunzip(File src, File dest) {

    byte[] buffer = new byte[1024];

    try{

      GZIPInputStream gzis = new GZIPInputStream(new FileInputStream(src));

      FileOutputStream out = new FileOutputStream(dest);

      int len;
      while ((len = gzis.read(buffer)) > 0) {
        out.write(buffer, 0, len);
      }

      gzis.close();
      out.close();

    } catch(IOException ex){
       ex.printStackTrace();
    }
    return dest;
   }"
1857,8050493.txt,none,"	@org.junit.Test
	public void namingConvention_ttcn() throws Exception {
		Designer_plugin_tests.checkSyntaxMarkersOnFile(namingConvention_ttcn_initializer(), ""src/Basic_tests/namingConvention.ttcn"");
	}"
1858,7829822.txt,none,"  @Override
  public String getId() {
    return ""AddFreeItemToOrders"";
  }"
1859,6937904.txt,none,"      public java.lang.String getLanguage() {
        java.lang.Object ref = language_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            language_ = s;
          }
          return s;
        }
      }"
1860,6864294.txt,none,"    @Override
    public int getSourcePos(int i) {
      return wrapped.getSourcePos(i) + offset;
    }"
1861,5761917.txt,none,"	@Override 
	public boolean equals(Object that) {
		if( !(that instanceof PlanningCoCodingGroup) )
			return false;
		
		PlanningCoCodingGroup thatgrp = (PlanningCoCodingGroup) that;
		return Arrays.equals(_colIndexes, thatgrp._colIndexes);
	}"
1862,4140046.txt,none,"    protected RexNode makeMultiply(
        RexNode a,
        RexNode b) {
      return builder.makeCall(
          SqlStdOperatorTable.MULTIPLY,
          a,
          b);
    }"
1863,8951087.txt,none,"  @Override
  public boolean isNull(int keyIndex) {
    if (keyIndex == 0) {
      return isNull0;
    } else if (keyIndex == 1) {
      return isNull1;
    } else {
      throw new ArrayIndexOutOfBoundsException();
    }
  }"
1864,4944991.txt,none,"    public Password(String value) {
        this.value = value;
    }"
1865,4790338.txt,none,"    private void appendSchemaPlaceholder(final SQLBuilder sqlBuilder, final SchemaToken schemaToken, final int count) {
        String schemaName = originalSQL.substring(schemaToken.getStartIndex(), schemaToken.getStopIndex() + 1);
        sqlBuilder.appendPlaceholder(new SchemaPlaceholder(schemaName.toLowerCase(), schemaToken.getTableName().toLowerCase()));
        appendRest(sqlBuilder, count, schemaToken.getStopIndex() + 1);
    }"
1866,7385364.txt,none,"		private int readOrder(AnnotationMetadata annotationMetadata) {
			Map<String, Object> attributes = annotationMetadata
					.getAnnotationAttributes(Order.class.getName());
			Integer order = (attributes != null) ? (Integer) attributes.get(""value"")
					: null;
			return (order != null) ? order : Ordered.LOWEST_PRECEDENCE;
		}"
1867,7835135.txt,minor,"  @Override
  public Serializable getRoutingObject(EntryOperation opDetails) {
    Date date = (Date) opDetails.getKey();
    Calendar cal = Calendar.getInstance();
    cal.setTime(date);
    int month = cal.get(Calendar.MONTH);
    // if(true){
    // return month;
    // }
    switch (month) {
      case 0:
        return ""January"";
      case 1:
        return ""February"";
      case 2:
        return ""March"";
      case 3:
        return ""April"";
      case 4:
        return ""May"";
      case 5:
        return ""June"";
      case 6:
        return ""July"";
      case 7:
        return ""August"";
      case 8:
        return ""September"";
      case 9:
        return ""October"";
      case 10:
        return ""November"";
      case 11:
        return ""December"";
      default:
        return null;
    }

  }"
1868,4470846.txt,minor,"  private void parseArray(NameSegment nameSeg) {
    String name = nameSeg.getPath();
    ArraySegment arraySeg = ((ArraySegment) nameSeg.getChild());
    int index = arraySeg.getIndex();
    RequestedColumnImpl member = getImpl(name);
    if (member == null) {
      member = new RequestedColumnImpl(this, name);
      projection.add(name, member);
    } else if (member.isSimple()) {

      // Saw both a and a[x]. Occurs in project list.
      // Project all elements.

      member.projectAllElements();
      return;
    } else if (member.hasIndex(index)) {
      throw UserException
        .validationError()
        .message(""Duplicate array index in project list: %s[%d]"",
            member.fullName(), index)
        .build(logger);
    }
    member.addIndex(index);

    // Drills SQL parser does not support map arrays: a[0].c
    // But, the SchemaPath does support them, so no harm in
    // parsing them here.

    if (! arraySeg.isLastPath()) {
      parseInternal(nameSeg);
    }
  }"
1869,6016685.txt,none,"    @JsonCreator
    public static TlsConfiguration from(String s) {
        switch (s.toLowerCase()) {
            case ""none"":
                return NONE;
            case ""simple"":
                return SIMPLE;
            case ""external"":
                return EXTERNAL;
            default:
                throw new IllegalArgumentException(String.format(""Unknown TLS Configuration type: %s"", s));
        }
    }"
1870,8352018.txt,none,"	void m63(C36 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
1871,7205422.txt,none,"        public Builder definedTags(
                java.util.Map<String, java.util.Map<String, Object>> definedTags) {
            this.definedTags = definedTags;
            this.__explicitlySet__.add(""definedTags"");
            return this;
        }"
1872,5585822.txt,none,"    @Test
    public void testBug56655a() throws IOException {
        try (Workbook wb = _testDataProvider.createWorkbook()) {
            Sheet sheet = wb.createSheet();

            setCellFormula(sheet, 0, 0, ""B1*C1"");
            sheet.getRow(0).createCell(1).setCellValue(""A"");
            setCellFormula(sheet, 1, 0, ""B1*C1"");
            sheet.getRow(1).createCell(1).setCellValue(""A"");
            setCellFormula(sheet, 0, 3, ""SUMIFS(A:A,A:A,A2)"");

            wb.getCreationHelper().createFormulaEvaluator().evaluateAll();

            assertEquals(CellType.ERROR, getCell(sheet, 0, 0).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 0, 0).getErrorCellValue());
            assertEquals(CellType.ERROR, getCell(sheet, 1, 0).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 1, 0).getErrorCellValue());
            assertEquals(CellType.ERROR, getCell(sheet, 0, 3).getCachedFormulaResultType());
            assertEquals(FormulaError.VALUE.getCode(), getCell(sheet, 0, 3).getErrorCellValue());
        }
    }"
1873,5647618.txt,none,"    final void startFollowing(final List<Relation> following) throws InternalDataStoreException {
        for (int i = following.size(); --i >= 0;) {
            if (following.get(i) == this) {
                throw new InternalDataStoreException(Errors.format(Errors.Keys.CircularReference));
            }
        }
        following.add(this);
    }"
1874,7233373.txt,none,"  @Implementation
  protected int getChildCount() {
    if (children == null) {
      return 0;
    }

    return children.size();
  }"
1875,5480114.txt,none,"    private void validateNodeAutoCreationPolicy(final NodeAutoCreationPolicy policy)
    {
        String pattern = policy.getPattern();
        if(pattern == null)
        {
            throw new IllegalArgumentException(""The 'pattern' attribute of a NodeAutoCreationPolicy MUST be supplied: "" + policy);
        }

        try
        {
            Pattern.compile(pattern);
        }
        catch (PatternSyntaxException e)
        {
            throw new IllegalArgumentException(""The 'pattern' attribute of a NodeAutoCreationPolicy MUST be a valid ""
                                               + ""Java Regular Expression Pattern, the value '"" + pattern + ""' is not: "" + policy);

        }

        String nodeType = policy.getNodeType();
        Class<? extends ConfiguredObject> sourceClass = null;
        for (Class<? extends ConfiguredObject> childClass : getModel().getChildTypes(getCategoryClass()))
        {
            if (childClass.getSimpleName().equalsIgnoreCase(nodeType.trim()))
            {
                sourceClass = childClass;
                break;
            }
        }
        if(sourceClass == null)
        {
            throw new IllegalArgumentException(""The node type of a NodeAutoCreationPolicy must be a valid child type ""
                                               + ""of a VirtualHost, '"" + nodeType + ""' is not."");
        }
        if(policy.isCreatedOnConsume() && !MessageSource.class.isAssignableFrom(sourceClass))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy which creates nodes on consume must have a ""
                                               + ""nodeType which implements MessageSource, '"" + nodeType + ""' does not."");
        }

        if(policy.isCreatedOnPublish() && !MessageDestination.class.isAssignableFrom(sourceClass))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy which creates nodes on publish must have a ""
                                               + ""nodeType which implements MessageDestination, '"" + nodeType + ""' does not."");
        }
        if(!(policy.isCreatedOnConsume() || policy.isCreatedOnPublish()))
        {
            throw new IllegalArgumentException(""A NodeAutoCreationPolicy must create on consume, create on publish or both."");
        }

    }"
1876,6729098.txt,none,"  public Image getImage()
  {
    XSDWildcard xsdWildcard = (XSDWildcard) target;
    
    if (xsdWildcard.eContainer() instanceof XSDParticle)
    {
      if (isReadOnly())
      {
        return XSDEditorPlugin.getPlugin().getIcon(""obj16/XSDAnydis.gif""); //$NON-NLS-1$
      }
      return XSDEditorPlugin.getXSDImage(""icons/XSDAny.gif""); //$NON-NLS-1$
    }
    else
    {
      if (isReadOnly())
      {
        return XSDEditorPlugin.getPlugin().getIcon(""obj16/XSDAnyAttributedis.gif""); //$NON-NLS-1$
      }
      return XSDEditorPlugin.getXSDImage(""icons/XSDAnyAttribute.gif""); //$NON-NLS-1$
    }
  }"
1877,8920121.txt,major,"  public void tryStoreVectorizedKey(HiveKey key, boolean partColsIsNull, int batchIndex)
      throws HiveException, IOException {
    // Assumption - batchIndex is increasing; startVectorizedBatch was called
    int size = indexes.size();
    int index = size < topN ? size : evicted;
    keys[index] = Arrays.copyOf(key.getBytes(), key.getLength());
    distKeyLengths[index] = key.getDistKeyLength();
    hashes[index] = key.hashCode();
    Integer collisionIndex = indexes.store(index);
    if (null != collisionIndex) {
      /*
       * since there is a collision index will be used for the next value 
       * so have the map point back to original index.
       */
      if ( indexes instanceof HashForGroup ) {
        indexes.store(collisionIndex);
      }
      // forward conditional on the survival of the corresponding key currently in indexes.
      ++batchNumForwards;
      batchIndexToResult[batchIndex] = MAY_FORWARD - collisionIndex;
      return;
    }
    indexToBatchIndex[index] = batchIndex;
    batchIndexToResult[batchIndex] = index;
    if (size != topN) return;
    evicted = indexes.removeBiggest();  // remove the biggest key
    if (index == evicted) {
      excluded++;
      batchIndexToResult[batchIndex] = EXCLUDE;
      indexToBatchIndex[index] = -1;
      return; // input key is bigger than any of keys in hash
    }
    removed(evicted);
    int evictedBatchIndex = indexToBatchIndex[evicted];
    if (evictedBatchIndex >= 0) {
      // reset the result for the evicted index
      batchIndexToResult[evictedBatchIndex] = EXCLUDE;
      indexToBatchIndex[evicted] = -1;
    }
    // Evict all results grouped with this index; it cannot be any key further in the batch.
    // If we evict a key from this batch, the keys grouped with it cannot be earlier that that key.
    // If we evict a key that is not from this batch, initial i = (-1) + 1 = 0, as intended.
    int evictedForward = (MAY_FORWARD - evicted);
    for (int i = evictedBatchIndex + 1; i < batchIndex && (batchNumForwards > 0); ++i) {
      if (batchIndexToResult[i] == evictedForward) {
        batchIndexToResult[i] = EXCLUDE;
        --batchNumForwards;
      }
    }
  }"
1878,5654509.txt,none,"    public void setAllowedColumns(final Set<Column> inclusion) {
        ArgumentChecks.ensureNonNull(""inclusion"", inclusion);
        columns.clear();
        columns.addAll(inclusion);
    }"
1879,7533998.txt,none,"	public Object aggregate(Collection<Object> results) {
		for (Object o : results) {
			if (o instanceof MessagingException) {
				return new ConsolidatedResultsException(results);
			}
		}
		return results;
	}"
1880,7225000.txt,none,"		@Override
		@Nullable
		public Object scanUnsafe(Attr key) {
			if (key == Attr.PARENT) return s;

			return InnerOperator.super.scanUnsafe(key);
		}"
1881,9049276.txt,none,"public void testBug330313_wksp1_15_njl() {
	this.formatterPrefs.join_wrapped_lines = false;
	setPageWidth80();
	String source =
		""package wksp1;\n"" + 
		""\n"" + 
		""public class X15 {\n"" + 
		""	public void foo() {\n"" + 
		""		if (true) {\n"" + 
		""			if (fieldBinding.declaringClass != this.actualReceiverType\n"" + 
		""				&& !this.actualReceiverType.isArrayType()	\n"" + 
		""				&& fieldBinding.declaringClass != null\n"" + 
		""				&& fieldBinding.constant == NotAConstant\n"" + 
		""				&& ((currentScope.environment().options.targetJDK >= ClassFileConstants.JDK1_2 \n"" + 
		""						&& !fieldBinding.isStatic()\n"" + 
		""						&& fieldBinding.declaringClass.id != T_Object) // no change for Object fields (if there was any)\n"" + 
		""					|| !fieldBinding.declaringClass.canBeSeenBy(currentScope))){\n"" + 
		""				this.codegenBinding = currentScope.enclosingSourceType().getUpdatedFieldBinding(fieldBinding, (ReferenceBinding)this.actualReceiverType);\n"" + 
		""			}\n"" + 
		""		}\n"" + 
		""	}\n"" + 
		""}\n"";
	formatSource(source,
		""package wksp1;\n"" + 
		""\n"" + 
		""public class X15 {\n"" + 
		""	public void foo() {\n"" + 
		""		if (true) {\n"" + 
		""			if (fieldBinding.declaringClass != this.actualReceiverType\n"" + 
		""					&& !this.actualReceiverType.isArrayType()\n"" + 
		""					&& fieldBinding.declaringClass != null\n"" + 
		""					&& fieldBinding.constant == NotAConstant\n"" + 
		""					&& ((currentScope\n"" + 
		""							.environment().options.targetJDK >= ClassFileConstants.JDK1_2\n"" + 
		""							&& !fieldBinding.isStatic()\n"" + 
		""							&& fieldBinding.declaringClass.id != T_Object) // no\n"" + 
		""																			// change\n"" + 
		""																			// for\n"" + 
		""																			// Object\n"" + 
		""																			// fields\n"" + 
		""																			// (if\n"" + 
		""																			// there\n"" + 
		""																			// was\n"" + 
		""																			// any)\n"" + 
		""							|| !fieldBinding.declaringClass\n"" + 
		""									.canBeSeenBy(currentScope))) {\n"" + 
		""				this.codegenBinding = currentScope.enclosingSourceType()\n"" + 
		""						.getUpdatedFieldBinding(fieldBinding,\n"" + 
		""								(ReferenceBinding) this.actualReceiverType);\n"" + 
		""			}\n"" + 
		""		}\n"" + 
		""	}\n"" + 
		""}\n""
	);
}"
1882,6877863.txt,none,"  private void informBaseTypesNotification(final TypesNotificationContainer container,
      final SQLProvider provider) throws CouldntLoadDataException {

    final TypeManager typeManager = provider.findModule(container.getModuleId()).getTypeManager();
    if (container.getDatabaseOperation().equals(""INSERT"")) {
      typeManager.loadAndInitializeBaseType(container.getBaseTypeId().get());
    } else if (container.getDatabaseOperation().equals(""UPDATE"")) {
      typeManager.loadAndUpdateBaseType(container.getBaseTypeId().get());
    } else if (container.getDatabaseOperation().equals(""DELETE"")) {
      typeManager.removeBaseTypeInstance(container.getBaseTypeId().get());
    }
  }"
1883,5478880.txt,none,"    @Override
    public void open()
    {
        Collection<LinkDefinition<Source, Target>> links = _linkStore.openAndLoad(new LinkStoreUpdaterImpl());
        for(LinkDefinition<Source, Target> link: links)
        {
            ConcurrentMap<LinkKey, Link_1_0<S,T>> linkRegistry = getLinkRegistry(link.getRole());
            LinkDefinition<S, T> definition = (LinkDefinition<S, T>) link;
            linkRegistry.put(new LinkKey(link), new LinkImpl<>(definition, this));
        }
    }"
1884,9049868.txt,minor,"public void testFormatDefaultBigFile() {
	tagAsSummary(""Format big file with default options"", false); // do NOT put in fingerprint yet...

	// Warm up
	String source = FORMAT_TYPE_SOURCE;
	int warmup = WARMUP_COUNT;
	for (int i=0; i<warmup; i++) {
		long start = System.currentTimeMillis();
		new DefaultCodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, source, 0, source.length(), 0, null);
		if (i==0) {
			System.out.println(""	Time to format big file (""+source.length()+"" chars) = ""+(System.currentTimeMillis()-start)+""ms"");
		}
	}

	// Measures
	resetCounters();
	int measures = MEASURES_COUNT;
	for (int i=0; i<measures; i++) {
		runGc();
		startMeasuring();
		new DefaultCodeFormatter().format(CodeFormatter.K_COMPILATION_UNIT, source, 0, source.length(), 0, null);
		stopMeasuring();
	}

	// Commit
	commitMeasurements();
	assertPerformance();
}"
1885,9131375.txt,none,"	public static final double computeWidth( IDisplayServer xs, Label la )
	{
		final ITextMetrics itm = xs.getTextMetrics( la );
		try
		{
			return computeWidth( itm, la );
		}
		finally
		{
			itm.dispose( );
		}
	}"
1886,8592348.txt,none,"      protected boolean isOneway() {
        return false;
      }"
1887,6179505.txt,none,"  @Override
  public String hoverBackgroundColor() {
    return ""rgba(215, 215, 215, 0.12)"";
  }"
1888,5005330.txt,none,"  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
    if (otherArgs.length != 2) {
      System.err.println( ""Usage: wordcount <in> <out>"" );
      System.exit(2);
    }
    Job job = Job.getInstance(conf, ""Word Count"");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }"
1889,8661979.txt,none,"    @Override public void clear() {
        if (delegate == null)
            delegate = new ArrayList<>();
        else
            delegate.clear();
    }"
1890,7883024.txt,none,"    public SimException(String message, Throwable cause) {
        super(message, cause);
    }"
1891,7528643.txt,none,"	public SqsMessageHandler(AmazonSQSAsync amazonSqs, ResourceIdResolver resourceIdResolver) {
		this(amazonSqs, new DynamicQueueUrlDestinationResolver(amazonSqs, resourceIdResolver));
	}"
1892,7863512.txt,none,"  @Override
  public void removeAsyncEventQueueId(String asyncEventQueueId) {
    super.removeAsyncEventQueueId(asyncEventQueueId);
    new UpdateAttributesProcessor(this).distribute();
  }"
1893,3856345.txt,none,"    private static void printAllExcludes(ModuleDescriptor md, PrintWriter out) {
        ExcludeRule[] excludes = md.getAllExcludeRules();
        if (excludes.length > 0) {
            for (ExcludeRule exclude : excludes) {
                out.print(String.format(""\t\t<exclude org=\""%s\"" module=\""%s\"" artifact=\""%s\"" type=\""%s\"" ext=\""%s\"""",
                        XMLHelper.escape(exclude.getId().getModuleId().getOrganisation()),
                        XMLHelper.escape(exclude.getId().getModuleId().getName()),
                        XMLHelper.escape(exclude.getId().getName()),
                        XMLHelper.escape(exclude.getId().getType()),
                        XMLHelper.escape(exclude.getId().getExt())));
                String[] ruleConfs = exclude.getConfigurations();
                if (!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))) {
                    out.print(listToPrefixedString(ruleConfs, "" conf=\""""));
                }
                out.print("" matcher=\"""" + XMLHelper.escape(exclude.getMatcher().getName()) + ""\"""");
                out.println(""/>"");
            }
        }
    }"
1894,3809437.txt,none,"   @Override
   public int readInt() throws JMSException {
      if (ActiveMQRALogger.LOGGER.isTraceEnabled()) {
         ActiveMQRALogger.LOGGER.trace(""readInt()"");
      }

      return ((BytesMessage) message).readInt();
   }"
1895,5525645.txt,none,"	protected T createEntityObject() {
		try {
			return tEntityClass.newInstance();
		} catch (Throwable e) {
			logger.error(""Error instantiating entity class. tEntityClass=""
					+ tEntityClass.toString(), e);
		}
		return null;
	}"
1896,4449293.txt,minor,"  private void handleRemainder() {
    final int remainingRecordCount = incoming.getRecordCount() - remainderIndex;
    assert this.memoryManager.incomingBatch == incoming;
    final int recordsToProcess = Math.min(remainingRecordCount, memoryManager.getOutputRowCount());

    if (!doAlloc(recordsToProcess)) {
      outOfMemory = true;
      return;
    }

    logger.trace(""handleRemainder: remaining RC {}, toProcess {}, remainder index {}, incoming {}, Project {}"",
                 remainingRecordCount, recordsToProcess, remainderIndex, incoming, this);

    long projectStartTime = System.currentTimeMillis();
    final int projRecords = projector.projectRecords(this.incoming, remainderIndex, recordsToProcess, 0);
    long projectEndTime = System.currentTimeMillis();

    logger.trace(""handleRemainder: projection: records {}, time {} ms"", projRecords,(projectEndTime - projectStartTime));

    if (projRecords < remainingRecordCount) {
      setValueCount(projRecords);
      this.recordCount = projRecords;
      remainderIndex += projRecords;
    } else {
      setValueCount(remainingRecordCount);
      hasRemainder = false;
      remainderIndex = 0;
      for (final VectorWrapper<?> v : incoming) {
        v.clear();
      }
      this.recordCount = remainingRecordCount;
    }
    // In case of complex writer expression, vectors would be added to batch run-time.
    // We have to re-build the schema.
    if (complexWriters != null) {
      container.buildSchema(SelectionVectorMode.NONE);
    }

    memoryManager.updateOutgoingStats(projRecords);
    RecordBatchStats.logRecordBatchStats(RecordBatchIOType.OUTPUT, this, getRecordBatchStatsContext());
  }"
1897,8775243.txt,none,"    FSDataBoundedInputStream(FileSystem fs, Path file, InputStream in) {
      super(in);
      this.fs = fs;
      this.file = file;
    }"
1898,5124033.txt,none,"  protected static void handleIOException(IOException e, String context)
    throws ManifoldCFException, ServiceInterruption
  {
    if (e instanceof java.net.SocketException)
      throw new ManifoldCFException(""Socket timeout error ""+context+"": ""+e.getMessage(),e);
    else if (e instanceof ConnectTimeoutException)
      throw new ManifoldCFException(""Socket connect timeout error ""+context+"": ""+e.getMessage(),e);
    else if (e instanceof InterruptedIOException)
      throw new ManifoldCFException(""Interrupted: ""+e.getMessage(),e,ManifoldCFException.INTERRUPTED);
    else
      throw new ManifoldCFException(""IO error ""+context+"": ""+e.getMessage(),e);
  }"
1899,8213437.txt,none,"	@RequestMapping(""/home"")
	public String home(Model model) {
		model.addAttribute(""name"", ""spring"");
		return ""home"";
	}"
1900,6145911.txt,none,"	public static IInclusionExclusionQuery getDefaultInclusionExclusionQuery(final Shell shell) {
		return new IInclusionExclusionQuery() {

			protected IPath[] fInclusionPattern;
			protected IPath[] fExclusionPattern;

			@Override
			public boolean doQuery(final BPListElement element, final boolean focusOnExcluded) {
				final boolean[] result= { false };
				Display.getDefault().syncExec(() -> {
					Shell sh = shell != null ? shell
							: DLTKUIPlugin.getActiveWorkbenchShell();
					ExclusionInclusionDialog dialog = new ExclusionInclusionDialog(
							sh, element, focusOnExcluded);
					result[0] = dialog.open() == Window.OK;
					fInclusionPattern = dialog.getInclusionPattern();
					fExclusionPattern = dialog.getExclusionPattern();
				});
				return result[0];
			}

			@Override
			public IPath[] getInclusionPattern() {
				return fInclusionPattern;
			}

			@Override
			public IPath[] getExclusionPattern() {
				return fExclusionPattern;
			}
		};
	}"
1901,8314886.txt,none,"		private boolean isChildOfOrEqualToAnyFolder(IResource resource) {
			for (int i= 0; i < fFolders.length; i++) {
				IFolder folder= fFolders[i];
				if (folder.equals(resource) || ParentChecker.isDescendantOf(resource, folder)) {
					return true;
				}
			}
			return false;
		}"
1902,5242909.txt,none,"	public void streamStarted(LogEvent event) {
	  for (Object listener1 : listeners) {
		LogListener listener = (LogListener) listener1;
		listener.streamStarted(event);
	  }
	}"
1903,4206958.txt,none,"        private long rollEpoch(long delta, long epoch, long nanos)
        {
            if (delta > 2 * INTERVAL)
            {
                // this sample is more than twice our interval ahead, so just clear our counters completely
                epoch = epoch(nanos);
                sum = 0;
                Arrays.fill(samples, 0);
            }
            else
            {
                // ix(epoch - 1) => last index; this is our partial result bucket, so we add this to the sum
                sum += samples[ix(epoch - 1)];
                // then we roll forwards, clearing buckets, until our interval covers the new sample time
                while (epoch + INTERVAL < nanos)
                {
                    int index = ix(epoch);
                    sum -= samples[index];
                    samples[index] = 0;
                    epoch += BUCKET_INTERVAL;
                }
            }
            // store the new epoch
            this.epoch = epoch;
            return epoch;
        }"
1904,5470089.txt,critical,"    @Override
    public ListenableFuture<Void> recover(QueueManagingVirtualHost<?> virtualHost)
    {
        EventLogger eventLogger = virtualHost.getEventLogger();
        MessageStore store = virtualHost.getMessageStore();
        MessageStore.MessageStoreReader storeReader = store.newMessageStoreReader();
        MessageStoreLogSubject logSubject = new MessageStoreLogSubject(virtualHost.getName(), store.getClass().getSimpleName());

        Map<Queue<?>, Integer> queueRecoveries = new TreeMap<>();
        Map<Long, ServerMessage<?>> recoveredMessages = new HashMap<>();
        Map<Long, StoredMessage<?>> unusedMessages = new TreeMap<>();
        Map<UUID, Integer> unknownQueuesWithMessages = new HashMap<>();
        Map<Queue<?>, Integer> queuesWithUnknownMessages = new HashMap<>();

        eventLogger.message(logSubject, MessageStoreMessages.RECOVERY_START());

        storeReader.visitMessages(new MessageVisitor(recoveredMessages, unusedMessages));

        eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_START(null, false));
        try
        {
            storeReader.visitMessageInstances(new MessageInstanceVisitor(virtualHost,
                                                                         store,
                                                                         queueRecoveries,
                                                                         recoveredMessages,
                                                                         unusedMessages,
                                                                         unknownQueuesWithMessages,
                                                                         queuesWithUnknownMessages));
        }
        finally
        {
            if (!unknownQueuesWithMessages.isEmpty())
            {
                unknownQueuesWithMessages.forEach((queueId, count) -> {
                    LOGGER.info(""Discarded {} entry(s) associated with queue id '{}' as a queue with this ""
                                 + ""id does not appear in the configuration."",
                                 count, queueId);
                });
            }
            if (!queuesWithUnknownMessages.isEmpty())
            {
                queuesWithUnknownMessages.forEach((queue, count) -> {
                    LOGGER.info(""Discarded {} entry(s) associated with queue '{}' as the referenced message ""
                                 + ""does not exist."",
                                 count, queue.getName());
                });
            }
        }

        for(Map.Entry<Queue<?>, Integer> entry : queueRecoveries.entrySet())
        {
            Queue<?> queue = entry.getKey();
            Integer deliveredCount = entry.getValue();
            eventLogger.message(logSubject, TransactionLogMessages.RECOVERED(deliveredCount, queue.getName()));
            eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_COMPLETE(queue.getName(), true));
            queue.completeRecovery();
        }

        for (Queue<?> q : virtualHost.getChildren(Queue.class))
        {
            if (!queueRecoveries.containsKey(q))
            {
                q.completeRecovery();
            }
        }

        storeReader.visitDistributedTransactions(new DistributedTransactionVisitor(virtualHost,
                                                                                   eventLogger,
                                                                                   logSubject, recoveredMessages, unusedMessages));

        for(StoredMessage<?> m : unusedMessages.values())
        {
            LOGGER.debug(""Message id '{}' is orphaned, removing"", m.getMessageNumber());
            m.remove();
        }

        if (unusedMessages.size() > 0)
        {
            LOGGER.info(""Discarded {} orphaned message(s)."", unusedMessages.size());
        }

        eventLogger.message(logSubject, TransactionLogMessages.RECOVERY_COMPLETE(null, false));

        eventLogger.message(logSubject,
                             MessageStoreMessages.RECOVERED(recoveredMessages.size() - unusedMessages.size()));
        eventLogger.message(logSubject, MessageStoreMessages.RECOVERY_COMPLETE());

        return Futures.immediateFuture(null);
    }"
1905,5173084.txt,none,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((name == null) ? 0 : name.hashCode());
        result = prime * result + ((table == null) ? 0 : table.hashCode());
        return result;
    }"
1906,4897642.txt,none,"  @Override
  public void getDictionaryIds(int[] inDocIds, int inStartPos, int inDocIdsSize, int[] outDictionaryIds,
      int outStartPos) {
    _reader.readValues(inDocIds, inStartPos, inDocIdsSize, outDictionaryIds, outStartPos);
  }"
1907,4062999.txt,none,"    @Override
    @SuppressWarnings(""unchecked"")
    public void processElement(Object untypedElem) throws Exception {
      WindowedValue<T> elem = (WindowedValue<T>) untypedElem;

      Collection<W> windows =
          windowFn.assignWindows(
              windowFn.new AssignContext() {
                @Override
                public T element() {
                  return elem.getValue();
                }

                @Override
                public Instant timestamp() {
                  return elem.getTimestamp();
                }

                @Override
                public BoundedWindow window() {
                  return Iterables.getOnlyElement(elem.getWindows());
                }
              });

      WindowedValue<T> res =
          WindowedValue.of(elem.getValue(), elem.getTimestamp(), windows, elem.getPane());
      receiver.process(res);
    }"
1908,6957883.txt,none,"  @Override
  public boolean contains(@Nullable Object edge) {
    E connectingEdge = getConnectingEdge();
    return (connectingEdge != null && connectingEdge.equals(edge));
  }"
1909,4594104.txt,none,"  public void forEachIntByte(IntByteConsumer f) {
    for (int i = 0; i < size(); ++i) {
      f.apply(keys[i], values[i]);
    }
  }"
1910,5305545.txt,none,"    protected ResultSet executeQuery(Connection conn, PreparedStatement stmnt,
        SQLBuffer sql) throws SQLException {
        return stmnt.executeQuery();
    }"
1911,6185975.txt,none,"	@Override
	public void execute(IProgressMonitor monitor) throws CoreException {
		String branchName = repository.getConfig().getFeatureBranchName(featureName);

		boolean dontCloseProjects = false;
		Repository gitRepo = repository.getRepository();
		BranchOperation branchOperation = new BranchOperation(
				gitRepo, branchName, dontCloseProjects);
		branchOperation.execute(monitor);
		result = branchOperation.getResult(gitRepo);
	}"
1912,6899793.txt,none,"    @Override @DefinedBy(Api.COMPILER)
    public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {
        CharBuffer cb = fileManager.getCachedContent(this);
        if (cb == null) {
            try (InputStream in = openInputStream()) {
                ByteBuffer bb = fileManager.makeByteBuffer(in);
                JavaFileObject prev = fileManager.log.useSource(this);
                try {
                    cb = fileManager.decode(bb, ignoreEncodingErrors);
                } finally {
                    fileManager.log.useSource(prev);
                }
                fileManager.recycleByteBuffer(bb);
                if (!ignoreEncodingErrors) {
                    fileManager.cache(this, cb);
                }
            }
        }
        return cb;
    }"
1913,4265826.txt,none,"    public TextStringBuilder appendln(final boolean value) {
        return append(value).appendNewLine();
    }"
1914,8254484.txt,minor,"    public final void entryRuleXBasicForLoopExpression() throws RecognitionException {
        try {
            // InternalEntities.g:1159:1: ( ruleXBasicForLoopExpression EOF )
            // InternalEntities.g:1160:1: ruleXBasicForLoopExpression EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleXBasicForLoopExpression();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getXBasicForLoopExpressionRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }"
1915,5939530.txt,none,"    static String replaceSubstitution(String base, Pattern from, String to, 
                                      boolean repeat) {
      Matcher match = from.matcher(base);
      if (repeat) {
        return match.replaceAll(to);
      } else {
        return match.replaceFirst(to);
      }
    }"
1916,7842685.txt,none,"  public static ResumptionAction fromName(String name) {
    if (name == null || name.length() == 0) {
      throw new IllegalArgumentException(
          String.format(""Invalid ResumptionAction name: %s"",
              name));
    }
    for (int i = 0; i < PRIVATE_VALUES.length; i++) {
      if (name.equals(PRIVATE_VALUES[i].name)) {
        return PRIVATE_VALUES[i];
      }
    }
    throw new IllegalArgumentException(
        String.format(""Invalid ResumptionAction name: %s"", name));
  }"
1917,5418030.txt,none,"    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }"
1918,9110608.txt,none,"	public void onRow( boolean populateValue, FactTableRow factTableRow )
			throws DataException
	{
		for ( int aggrIndex = 0; aggrIndex < this.functions.length; aggrIndex++ )
		{
			Accumulator acc = this.accumulators.get( aggrIndex );
			
			// Calculate arguments to the aggregate aggregationtion

			acc.onRow( new Object[]{factTableRow.getMeasures( )[aggrIndex]} );
			

			if ( populateValue )
			{
				acc.finish( );
				currentRoundAggrValue[aggrIndex] = acc.getValue( );
				acc.start( );
			}
		}
	}"
1919,4901677.txt,none,"    private Path getNameElement(
            NodeId nodeId, NodeId parentId, HierarchyManager hmgr)
            throws ItemStateException {
        try {
            Name name = hmgr.getName(nodeId, parentId);
            return PathFactoryImpl.getInstance().create(name);
        } catch (RepositoryException e) {
            String msg = ""Unable to get name for node with id: "" + nodeId;
            throw new ItemStateException(msg, e);
        }
    }"
1920,6350174.txt,none,"    public STExpandAllTreeAction(AbstractSTTreeViewer stViewer) {
        super(STDataViewersMessages.expandAllAction_title,
                AbstractUIPlugin.imageDescriptorFromPlugin(STDataViewersActivator.PLUGIN_ID,
                        ""icons/expand_all.gif"")); //$NON-NLS-1$
        this.stViewer = stViewer;
    }"
1921,4498016.txt,none,"      @Override
      boolean isValid(LifecycleAware object, Status status) {
        return true;
      }"
1922,5768802.txt,none,"    @Override
    public void delete(final String key) {
        ReportExec execution = find(key);
        if (execution == null) {
            return;
        }

        delete(execution);
    }"
1923,6888470.txt,none,"    public TypeElementCatalog(Iterable<TypeElement> typeElements, Configuration config) {
        this(config);
        for (TypeElement typeElement : typeElements) {
            addTypeElement(typeElement);
        }
    }"
1924,5314620.txt,none,"    @Override
    public void process(Operator operator, List<COSBase> arguments) throws MissingOperandException
    {
        if (arguments.size() < 6)
        {
            throw new MissingOperandException(operator, arguments);
        }
        if (!checkArrayTypesClass(arguments, COSNumber.class))
        {
            return;
        }

        COSNumber a = (COSNumber)arguments.get( 0 );
        COSNumber b = (COSNumber)arguments.get( 1 );
        COSNumber c = (COSNumber)arguments.get( 2 );
        COSNumber d = (COSNumber)arguments.get( 3 );
        COSNumber e = (COSNumber)arguments.get( 4 );
        COSNumber f = (COSNumber)arguments.get( 5 );

        Matrix matrix = new Matrix(a.floatValue(), b.floatValue(), c.floatValue(),
                                   d.floatValue(), e.floatValue(), f.floatValue());

        context.setTextMatrix(matrix);
        context.setTextLineMatrix(matrix.clone());
    }"
1925,5559770.txt,none,"  private boolean isPrivilegeForResource(TSentryPrivilege tSentryPrivilege, Resource resource) {
    final java.util.Iterator<TAuthorizable> authorizablesIterator = tSentryPrivilege.getAuthorizablesIterator();
    while (authorizablesIterator.hasNext()) {
      TAuthorizable tAuthorizable = authorizablesIterator.next();
      if (tAuthorizable.getType().equals(resource.resourceType().name())) {
        return true;
      }
    }
    return false;
  }"
