,sample_id,severity,snippet
0,5930471.txt,none,"    public void threadSingletonServiceAdded(@Observes ComponentAdded<ThreadSingletonService> componentAdded) {
        if (componentAdded.getComponent() != this) {
            return;
        }

        contextThreadListener = new OWBContextThreadListener();
        ThreadContext.addThreadContextListener(contextThreadListener);
    }"
1,4157934.txt,none,"      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }"
2,8659626.txt,none,"    public RecurrenceRule(GenericValue rule) throws RecurrenceRuleException {
        this.rule = rule;
        if (!""RecurrenceRule"".equals(rule.getEntityName())) {
            throw new RecurrenceRuleException(""Invalid RecurrenceRule Value object."");
        }
        init();
    }"
3,8615362.txt,none,"    public HadoopTaskOutput output(HadoopTaskContext taskCtx) throws IgniteCheckedException {
        switch (taskCtx.taskInfo().type()) {
            case MAP:
                assert !job.info().hasCombiner() : ""The output creation is allowed if combiner has not been defined."";

            case COMBINE:
                return new PartitionedOutput(taskCtx);

            default:
                throw new IllegalStateException(""Illegal type: "" + taskCtx.taskInfo().type());
        }
    }"
4,3762849.txt,none,"    public IdList(final List<String> member) {
        this.member = member;
    }"
5,4303100.txt,none,"    public static void validate(EncryptionKey encKey, ApRep apRep, ApReq apReqSent) throws KrbException {
        EncAPRepPart encPart = EncryptionUtil.unseal(apRep.getEncryptedEncPart(),
                encKey, KeyUsage.AP_REP_ENCPART, EncAPRepPart.class);
        apRep.setEncRepPart(encPart);
        if (apReqSent != null) {
            Authenticator auth = apReqSent.getAuthenticator();
            if (!encPart.getCtime().equals(auth.getCtime())
                    || encPart.getCusec() != auth.getCusec()) {
                throw new KrbException(KrbErrorCode.KRB_AP_ERR_MUT_FAIL);
            }
        }
    }"
6,6629031.txt,none,"	public OGCLineString exteriorRing() {
		if (polygon.isEmpty())
			return new OGCLinearRing((Polygon) polygon.createInstance(), 0,
					esriSR, true);
		return new OGCLinearRing(polygon, 0, esriSR, true);
	}"
7,6971634.txt,none,"    @Override
    public WeakValueReference<K, V, StrongKeyWeakValueEntry<K, V>> newWeakValueReferenceForTesting(
        InternalEntry<K, V, ?> e, V value) {
      return new WeakValueReferenceImpl<>(queueForValues, value, castForTesting(e));
    }"
8,6057624.txt,none,"        @Override
        protected UnresolvedPlaceholderException doBuild(final DittoHeaders dittoHeaders,
                @Nullable final String message,
                @Nullable final String description,
                @Nullable final Throwable cause,
                @Nullable final URI href) {
            return new UnresolvedPlaceholderException(dittoHeaders, message, description, cause, href);
        }"
9,7644249.txt,minor,"	public void decide(Authentication authentication, Object object,
			Collection<ConfigAttribute> configAttributes) throws AccessDeniedException {
		int deny = 0;

		for (AccessDecisionVoter voter : getDecisionVoters()) {
			int result = voter.vote(authentication, object, configAttributes);

			if (logger.isDebugEnabled()) {
				logger.debug(""Voter: "" + voter + "", returned: "" + result);
			}

			switch (result) {
			case AccessDecisionVoter.ACCESS_GRANTED:
				return;

			case AccessDecisionVoter.ACCESS_DENIED:
				deny++;

				break;

			default:
				break;
			}
		}

		if (deny > 0) {
			throw new AccessDeniedException(messages.getMessage(
					""AbstractAccessDecisionManager.accessDenied"", ""Access is denied""));
		}

		// To get this far, every AccessDecisionVoter abstained
		checkAllowIfAllAbstainDecisions();
	}"
10,8601288.txt,none,"    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TABLE:
        return isSetTable();
      case TPUT:
        return isSetTput();
      }
      throw new java.lang.IllegalStateException();
    }"
11,6826288.txt,none,"    private static void assertFinishedOnce(boolean[] finishedOut, SSLEngineResult result) {
        if (result.getHandshakeStatus() == HandshakeStatus.FINISHED) {
            assertFalse(""should only return FINISHED once"", finishedOut[0]);
            finishedOut[0] = true;
        }
    }"
12,6920597.txt,none,"  public void addSegment(Segment segment) {
    getSegments().add(segment);
  }"
13,6909063.txt,none,"    public boolean hasSameBounds(ForAll t, ForAll s) {
        List<Type> l1 = t.tvars;
        List<Type> l2 = s.tvars;
        while (l1.nonEmpty() && l2.nonEmpty() &&
               isSameType(l1.head.getUpperBound(),
                          subst(l2.head.getUpperBound(),
                                s.tvars,
                                t.tvars))) {
            l1 = l1.tail;
            l2 = l2.tail;
        }
        return l1.isEmpty() && l2.isEmpty();
    }"
14,6457764.txt,none,"	public static Bundle[] getFragments(Bundle bundle) {
		if (packageAdmin == null)
			throw new IllegalStateException(""Not started""); //$NON-NLS-1$

		return packageAdmin.getFragments(bundle);
	}"
15,4490338.txt,major,"  public List<Feature> extract(JCas jCas, CollectionTextRelation cluster,
      IdentifiedAnnotation mention) throws AnalysisEngineProcessException {
    if(cache == null){
      throw new RuntimeException(""This extractor requires a cached Markable->ConllDependencyNode map to be set with setCache()"");
    }
    List<Feature> feats = new ArrayList<>();
    CounterMap<String> featCounts = new CounterMap<>();
    
    if(StringMatchingFeatureExtractor.isPronoun(mention)) return feats;
    
    String m = mention.getCoveredText();
    Set<String> mentionWords = contentWords(mention);
    Set<String> nonHeadMentionWords = new HashSet<>(mentionWords);
    ConllDependencyNode mentionHead = cache.get(mention);
    
    String mentionHeadString = null;
    if(mentionHead != null){
      mentionHeadString = mentionHead.getCoveredText().toLowerCase();
      nonHeadMentionWords.remove(mentionHeadString);

      int maxNonoverlap = 0;

      for(IdentifiedAnnotation member : new ListIterable<IdentifiedAnnotation>(cluster.getMembers())){
        if(member == null){
          System.err.println(""Something that shouldn't happen has happened"");
          continue;
        }else if(mention.getBegin() < member.getEnd()){
          // during training this might happen -- see a member of a cluster that
          // is actually subsequent to the candidate mention
          continue;
        }else if(StringMatchingFeatureExtractor.isPronoun(member)){
          continue;
        }

        String s = member.getCoveredText();
        Set<String> memberWords = contentWords(member);
        Set<String> nonHeadMemberWords = new HashSet<>(memberWords);
        ConllDependencyNode memberHead = cache.get(member);
        String memberHeadString = null;
        if(memberHead != null){
          memberHeadString = memberHead.getCoveredText().toLowerCase();
          nonHeadMemberWords.remove(memberHeadString);

          if(mentionHeadString.equals(memberHeadString)){

            if(m.equalsIgnoreCase(s)) featCounts.add(""MC_STRING_EXACT"");
            if(startMatch(m,s)) featCounts.add(""MC_STRING_START"");
            if(endMatch(m,s)) featCounts.add(""MC_STRING_END"");
            if(soonMatch(m,s)) featCounts.add(""MC_STRING_SOON"");
            if(wordOverlap(mentionWords, memberWords)) featCounts.add(""MC_OVERLAP"");
            if(wordSubstring(mentionWords, memberWords)) featCounts.add(""MC_SUB"");

            int nonHeadOverlap = wordNonOverlapCount(nonHeadMemberWords, nonHeadMentionWords);
            if(nonHeadOverlap > maxNonoverlap){
              maxNonoverlap = nonHeadOverlap;
            }
          }
        }
      }
      feats.add(new Feature(""MC_MAX_NONOVERLAP"", maxNonoverlap));
    }
    
    
    for(String featKey : featCounts.keySet()){
      // normalized
//      feats.add(new Feature(featKey, (double) featCounts.get(featKey) / clusterSize));
      // boolean
      feats.add(new Feature(featKey, true));
    }
    return feats;
  }"
16,5871338.txt,none,"	public void initializeDefaultPreferences() {
		IPreferenceStore store = CasEditorIdePlugin.getDefault().getPreferenceStore();
		store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_LANG,
		        CAS.DEFAULT_LANGUAGE_NAME);
		
		store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_ENCODINGS,
		        Charset.defaultCharset().displayName());
		
    store.setDefault(CasEditorIdePreferenceConstants.CAS_EDITOR_REMEMBER_TYPESYSTEM, true);
		
	}"
17,5232497.txt,minor,"   public void crawl(File dirRoot) {
      LOG.info(String.format(""Start crawling dir: %s"", dirRoot));

      // Reset ingest status.a

      ingestStatus.clear();

      // Load actions.
      loadAndValidateActions();

      // Create Ingester.
      setupIngester();

      // Verify valid crawl directory.
      if (dirRoot == null || !dirRoot.exists()) {
         throw new IllegalArgumentException(""dir root is null or non existant!"");
      }

      // Start crawling.
      Stack<File> stack = new Stack<File>();
      stack.push(dirRoot.isDirectory() ? dirRoot : dirRoot.getParentFile());
      while (!stack.isEmpty()) {
         File dir = (File) stack.pop();
         LOG.log(Level.INFO, ""Crawling "" + dir);

         File[] productFiles;
         productFiles = isCrawlForDirs() ? dir.listFiles(DIR_FILTER) : dir.listFiles(FILE_FILTER);

         if(productFiles!=null) {
            for (File productFile : productFiles) {
               ingestStatus.add(handleFile(productFile));
            }
         }

         if (!isNoRecur()) {
            File[] subdirs = dir.listFiles(DIR_FILTER);
            if (subdirs != null) {
               for (File subdir : subdirs) {
                  stack.push(subdir);
               }
            }
         }
      }

      LOG.info(String.format(""Finished crawling dir: %s"", dirRoot));
   }"
18,4137834.txt,none,"    @Override public RelOptCost computeSelfCost(RelOptPlanner planner,
        RelMetadataQuery mq) {
      return super.computeSelfCost(planner, mq)
          .multiplyBy(JdbcConvention.COST_MULTIPLIER);
    }"
19,4298660.txt,none,"    public void timeout( Integer timeout ) throws ValidationException
    {
        if ( ( timeout < 0 ) || ( timeout >= Integer.MAX_VALUE ) )
        {
            String error = ""timeout - invalid timeout value ["" + timeout + ""]"";
            throw new ValidationException( GlobalErrIds.CONST_TIMEOUT_INVLD, error );
        }
    }"
20,7928407.txt,none,"	public void addPage(int pageIndex, IEditorPart editor, IEditorInput input)
			throws PartInitException {
		super.addPage(pageIndex,editor,input);
		if (editor instanceof DesignEditor) {
			bpmnDiagrams.add(pageIndex,((DesignEditor)editor).getBpmnDiagram());
			currentSelections.add(new PictogramElement[]{});
		}
	}"
21,6161020.txt,none,"  public Path removeLastSegments(int count) {
    if (count == 0) return this;
    if (count >= segments.length) {
      // result will have no trailing separator
      return new Path(device, NO_SEGMENTS, separators & (HAS_LEADING | IS_UNC));
    }
    checkArgument(count > 0);
    int newSize = segments.length - count;
    String[] newSegments = new String[newSize];
    System.arraycopy(this.segments, 0, newSegments, 0, newSize);
    return new Path(device, newSegments, separators & (HAS_LEADING | IS_UNC));
  }"
22,7743791.txt,none,"    private static boolean isMulticastAddress(String ip) {
        int i = ip.indexOf('.');
        if (i > 0) {
            String prefix = ip.substring(0, i);
            if (StringUtils.isInteger(prefix)) {
                int p = Integer.parseInt(prefix);
                return p >= 224 && p <= 239;
            }
        }
        return false;
    }"
23,6632851.txt,none,"  @Override
  public String getType() {
    return getString(""@type"");
  }"
24,5693176.txt,none,"    public Decorator getDecorator(HttpServletRequest req, Page page) {
        if (""none"".equals(req.getAttribute(""decorator""))) {
            return null;
        }

        return super.getDecorator(req, page);
    }"
25,5476379.txt,none,"    @Override
    public UUID[] remove(final ConfiguredObjectRecord... objects)
    {
        assertState(State.OPEN);
        List<UUID> removed = new ArrayList<UUID>();
        for (ConfiguredObjectRecord record : objects)
        {
            if (_configuredObjectRecords.remove(record.getId()) != null)
            {
                removed.add(record.getId());
            }
        }
        return removed.toArray(new UUID[removed.size()]);
    }"
26,7972876.txt,none,"    public final void rule__Model__NameAssignment_1_9_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalBug309949TestLanguage.g:3272:1: ( ( RULE_ID ) )
            // InternalBug309949TestLanguage.g:3273:2: ( RULE_ID )
            {
            // InternalBug309949TestLanguage.g:3273:2: ( RULE_ID )
            // InternalBug309949TestLanguage.g:3274:3: RULE_ID
            {
             before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0()); 
            match(input,RULE_ID,FollowSets000.FOLLOW_2); 
             after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0()); 

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
27,3741534.txt,none,"    public void execute(@Param(""dataMediaSourceId"") Long dataMediaSourceId, Context context) throws Exception {
        DataMediaSource dataMediaSource = dataMediaSourceService.findById(dataMediaSourceId);

        // dataSource
        List<DataMedia> dataMedias = dataMediaService.listByDataMediaSourceId(dataMediaSource.getId());
        context.put(""source"", dataMediaSource);
        context.put(""dataMedias"", dataMedias);
    }"
28,4784081.txt,none,"      public void write(org.apache.thrift.protocol.TProtocol oprot, handle_hms_notification_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }"
29,6732424.txt,none,"  public Object jjtAccept(JSPELParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }"
30,7574549.txt,none,"	@Override
	public boolean matches(Class<?> clazz) {
		return (this.checkInherited ? AnnotatedElementUtils.hasAnnotation(clazz, this.annotationType) :
				clazz.isAnnotationPresent(this.annotationType));
	}"
31,9128649.txt,none,"	private void fireEvent( Event event )
	{
		for ( int i = 0; i < vListeners.size( ); i++ )
		{
			vListeners.get( i ).handleEvent( event );
		}
	}"
32,3849158.txt,none,"  public void setViewEntity(ViewEntity view) {
    this.view = view;
  }"
33,5456180.txt,none,"    private void checkPostedFormData() 
    {
        if (getMethod().equals(""POST""))
        {
            String contentType = getContentType();
            if (contentType == null || contentType.equals(""application/x-www-form-urlencoded""))
            {
                throw new IllegalStateException(""User request HTTP POST data is of type ""
                                                + ""application/x-www-form-urlencoded. ""
                                                + ""This data has been already processed ""
                                                + ""by the portlet-container and is available ""
                                                + ""as request parameters."");
            }
        }
    }"
34,4504481.txt,none,"  @Override
  public void childEvent(CuratorFramework curatorFramework, PathChildrenCacheEvent event)
      throws Exception {

    try {
      if (isConnected() && (event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)
          || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)
          || event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))) {
        synchronized (this) {
          Participant participant = leaderLatch.getLeader();
          if (isLeader(participant) && !leaderLatch.hasLeadership()) {
            // in case current instance becomes leader, we want to know who came before it.
            currentLeader = participant;
          }
        }
      }
    } catch (InterruptedException e) {
      log.warn(""Oracle leadership watcher has been interrupted unexpectedly"");
    }
  }"
35,7070559.txt,none,"
  @Override
  public Future<RecordMetadata> send(ProducerRecord<K, V> producerRecord) {
    return send(producerRecord, null);"
36,8969767.txt,none,"  public void testIndependantIterators() throws IOException {
    Directory dir = newDirectory();
    IndexWriterConfig conf = newIndexWriterConfig().setMergePolicy(newLogMergePolicy());
    CannedNormSimilarity sim = new CannedNormSimilarity(new long[] {42, 10, 20});
    conf.setSimilarity(sim);
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);
    Document doc = new Document();
    Field indexedField = new TextField(""indexed"", ""a"", Field.Store.NO);
    doc.add(indexedField);
    for (int i = 0; i < 3; ++i) {
      writer.addDocument(doc);
    }
    writer.forceMerge(1);
    LeafReader r = getOnlyLeafReader(maybeWrapWithMergingReader(writer.getReader()));
    NumericDocValues n1 = r.getNormValues(""indexed"");
    NumericDocValues n2 = r.getNormValues(""indexed"");
    assertEquals(0, n1.nextDoc());
    assertEquals(42, n1.longValue());
    assertEquals(1, n1.nextDoc());
    assertEquals(10, n1.longValue());
    assertEquals(0, n2.nextDoc());
    assertEquals(42, n2.longValue());
    assertEquals(1, n2.nextDoc());
    assertEquals(10, n2.longValue());
    assertEquals(2, n2.nextDoc());
    assertEquals(20, n2.longValue());
    assertEquals(2, n1.nextDoc());
    assertEquals(20, n1.longValue());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, n1.nextDoc());
    assertEquals(DocIdSetIterator.NO_MORE_DOCS, n2.nextDoc());
    IOUtils.close(r, writer, dir);
  }"
37,6153007.txt,none,"	@Override
	public String getMainScriptPath(ILaunchConfiguration configuration,
			IEnvironment scriptEnvironment) throws CoreException {
		return null;
	}"
38,9345946.txt,none,"            public void selectAllAccessibleSelection() {
               TreeModel model = JTree.this.getModel();
               if (model != null) {
                   int childCount = getAccessibleChildrenCount();
                   TreePath path;
                   for (int i = 0; i < childCount; i++) {
                       path = getChildTreePath(i);
                       JTree.this.addSelectionPath(path);
                   }
                }
            }"
39,8567234.txt,none,"    public void setStartRowIsSet(boolean value) {
      if (!value) {
        this.startRow = null;
      }
    }"
40,4782948.txt,minor,"  private void grantOrRevokeRoleOnGroup(List<HivePrincipal> hivePrincipals, List<String> roles,
      HivePrincipal grantorPrinc, boolean isGrant) throws HiveAuthzPluginException,
      HiveAccessControlException {
    try {
      sentryClient = getSentryClient();
      // get principals
      Set<String> groups = Sets.newHashSet();
      for (HivePrincipal principal : hivePrincipals) {
        if (principal.getType() != HivePrincipalType.GROUP) {
          String msg =
              SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL + principal.getType();
          throw new HiveAuthzPluginException(msg);
        }
        groups.add(principal.getName());
      }

      // grant/revoke role to/from principals
      for (String roleName : roles) {
        if (isGrant) {
          sentryClient.grantRoleToGroups(grantorPrinc.getName(), roleName, groups);
        } else {
          sentryClient.revokeRoleFromGroups(grantorPrinc.getName(), roleName, groups);
        }
      }

    } catch (SentryAccessDeniedException e) {
      HiveOperation hiveOp = isGrant ? HiveOperation.GRANT_ROLE : HiveOperation.REVOKE_ROLE;
      executeOnFailureHooks(hiveOp, e);
    } catch (SentryUserException e) {
      String msg = ""Error when sentryClient grant/revoke role:"" + e.getMessage();
      executeOnErrorHooks(msg, e);
    } finally {
      if (sentryClient != null) {
        sentryClient.close();
      }
    }
  }"
41,7095948.txt,none,"    @Deprecated
    protected void handleComputeFields(int julianDay) {
        int year, month, dayOfMonth, dayOfYear;

        long daysSinceEpoch = julianDay - PERSIAN_EPOCH;
        year = 1 + (int) floorDivide(33 * daysSinceEpoch + 3, 12053);

        long farvardin1 = 365L * (year - 1L) + floorDivide(8L * year + 21, 33L);
        dayOfYear = (int)(daysSinceEpoch - farvardin1); // 0-based
        if (dayOfYear < 216) { // Compute 0-based month
            month = dayOfYear / 31;
        } else {
            month = (dayOfYear - 6) / 30;
        }
        dayOfMonth = dayOfYear - MONTH_COUNT[month][2] + 1;
        ++dayOfYear; // Make it 1-based now
        
        internalSet(ERA, 0);
        internalSet(YEAR, year);
        internalSet(EXTENDED_YEAR, year);
        internalSet(MONTH, month);
        internalSet(DAY_OF_MONTH, dayOfMonth);
        internalSet(DAY_OF_YEAR, dayOfYear);       
    }    "
42,3909025.txt,none,"    protected boolean supportsNonFileResources() {
        return getClass().equals(Tar.class);
    }"
43,3701614.txt,none,"      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof Entry) {
          return mergeFrom((Entry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }"
44,8574365.txt,none,"      public mutateRows_call(java.nio.ByteBuffer tableName, java.util.List<BatchMutation> rowBatches, java.util.Map<java.nio.ByteBuffer,java.nio.ByteBuffer> attributes, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tableName = tableName;
        this.rowBatches = rowBatches;
        this.attributes = attributes;
      }"
45,4413486.txt,none,"    private void setupHeaders(BindingOperationInfo op,
                              BindingMessageInfo bMsg,
                              BindingMessageInfo unwrappedBMsg,
                              MessageInfo msg,
                              SoapBindingConfiguration config) {
        List<MessagePartInfo> parts = new ArrayList<>();
        for (MessagePartInfo part : msg.getMessageParts()) {
            if (config.isHeader(op, part)) {
                SoapHeaderInfo headerInfo = new SoapHeaderInfo();
                headerInfo.setPart(part);
                headerInfo.setUse(config.getUse());

                bMsg.addExtensor(headerInfo);
            } else {
                parts.add(part);
            }
        }
        unwrappedBMsg.setMessageParts(parts);
    }"
46,5939437.txt,none,"    public Object setProperty(final String key, final String value, final boolean isExternalProperty) {
        if (isExternalProperty) {
            System.setProperty(key, value);
        }
        return internalProperties.setProperty(key, value);
    }"
47,6340833.txt,none,"  @Override
  @Pure
  public int hashCode() {
    return 31 * 1 + ((this.threads== null) ? 0 : Arrays.deepHashCode(this.threads));
  }"
48,4593309.txt,none,"    public void deleteJobsRelateToMeasure(Long measureId) throws
        SchedulerException {
        List<AbstractJob> jobs = jobRepo.findByMeasureIdAndDeleted(measureId,
            false);
        if (CollectionUtils.isEmpty(jobs)) {
            LOGGER.info(""Measure id {} has no related jobs."", measureId);
            return;
        }
        for (AbstractJob job : jobs) {
            JobOperator op = getJobOperator(job);
            op.delete(job);
        }
    }"
49,9314457.txt,minor,"    public String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append(Constants.INDENT);
        sb.append(""kdf: 0x"");
        sb.append(Functions.toFullHexString(kdf));
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pSharedDataLen: "");
        sb.append(pSharedData.length);
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pSharedData: "");
        sb.append(Functions.toHexString(pSharedData));
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pPublicDataLen: "");
        sb.append(pPublicData.length);
        sb.append(Constants.NEWLINE);

        sb.append(Constants.INDENT);
        sb.append(""pPublicData: "");
        sb.append(Functions.toHexString(pPublicData));
        //buffer.append(Constants.NEWLINE);

        return sb.toString();
    }"
50,7880496.txt,none,"    public void write(org.apache.thrift.protocol.TProtocol oprot, AppendBuildSlaveEventsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }"
51,7211250.txt,none,"  private V1SelfSubjectAccessReview prepareSelfSubjectAccessReview(
      Operation operation,
      Resource resource,
      String resourceName,
      Scope scope,
      String namespaceName) {
    LOGGER.entering();
    V1SelfSubjectAccessReviewSpec subjectAccessReviewSpec = new V1SelfSubjectAccessReviewSpec();

    subjectAccessReviewSpec.setResourceAttributes(
        prepareResourceAttributes(operation, resource, resourceName, scope, namespaceName));

    V1SelfSubjectAccessReview subjectAccessReview = new V1SelfSubjectAccessReview();
    subjectAccessReview.setApiVersion(""authorization.k8s.io/v1"");
    subjectAccessReview.setKind(""SelfSubjectAccessReview"");
    subjectAccessReview.setMetadata(new V1ObjectMeta());
    subjectAccessReview.setSpec(subjectAccessReviewSpec);
    LOGGER.exiting(subjectAccessReview);
    return subjectAccessReview;
  }"
52,6241200.txt,none,"    public ThreeCornerLoopLabelPositionGenerator(final SelfLoopNode slNode) {
        super(slNode);
    }"
53,6228656.txt,none,"	@Test
	public void test_contains_Point_BottomConcavePentagonTangentPoints() {
		assertFalse(""This point is outside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(-1, 4)));
		assertTrue(""This point is inside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(1, 4)));
		assertTrue(""This point is inside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(5, 4)));
		assertFalse(""This point is outside the pentagon"",
				CONCAVE_PENTAGON.contains(new Point(9, 4)));
	}"
54,6694346.txt,none,"    public APIRequestGetCallToActions requestAndroidDeeplinkField () {
      return this.requestAndroidDeeplinkField(true);
    }"
55,8935070.txt,none,"  public DynamicSerDeFieldRequiredness(int id) {
    super(id);
  }"
56,7349010.txt,none,"    @Override
    public String getErrorMessage(final NTLMState state) {
        Check.notNull(state, ""state""); //$NON-NLS-1$
        Check.isTrue(state instanceof NativeNTLMState, ""state instanceof NativeNTLMState""); //$NON-NLS-1$

        try {
            return NativeAuth.authGetErrorMessage(((NativeNTLMState) state).id);
        } catch (final Exception e) {
            return MessageFormat.format(
                Messages.getString(""NativeNTLM.CouldNotCallNativeNTLMFormat""), //$NON-NLS-1$
                e.getLocalizedMessage());
        }
    }"
57,4287634.txt,none,"  @Before
  public void setUp() throws Exception {
    Configuration conf = HBaseConfiguration.create(tmpDir.getDefaultConfiguration());
    conf.set(HConstants.TEMPORARY_FS_DIRECTORY_KEY, tmpDir.getFile(""hbase-staging"").getAbsolutePath());
    hbaseTestUtil = new HBaseTestingUtility(conf);
    hbaseTestUtil.startMiniCluster();
  }"
58,6393344.txt,minor,"	@Test
	public void createsTextWithAllProperties() {
		final TypedEvent[] raisedEvents = new TypedEvent[3];
		Text text = TextFactory.newText(SWT.NONE).text(""Test Text"").message(""message"").limitTo(10)
				.onSelect(e -> raisedEvents[0] = e)
				.onModify(e -> raisedEvents[1] = e)
				.onVerify(e -> raisedEvents[2] = e)

				.create(shell);

		text.notifyListeners(SWT.Selection, new Event());
		text.notifyListeners(SWT.Modify, new Event());
		text.notifyListeners(SWT.Verify, new Event());

		assertEquals(""Test Text"", text.getText());
		assertEquals(""message"", text.getMessage());
		assertEquals(10, text.getTextLimit());

		assertEquals(1, text.getListeners(SWT.Selection).length);
		assertNotNull(raisedEvents[0]);

		assertEquals(1, text.getListeners(SWT.Modify).length);
		assertNotNull(raisedEvents[1]);

		assertEquals(1, text.getListeners(SWT.Verify).length);
		assertNotNull(raisedEvents[2]);
	}"
59,6286234.txt,none,"    public BaseHome() throws IOException
    {
        this(new String[0]);
    }"
60,5130121.txt,none,"    private Collection<MavenProject> getAggregatedProjects()
    {
        Map<Path, MavenProject> reactorProjectsMap = new HashMap<>();
        for ( MavenProject reactorProject : this.reactorProjects )
        {
            reactorProjectsMap.put( reactorProject.getBasedir().toPath(), reactorProject );
        }

        return modulesForAggregatedProject( project, reactorProjectsMap );
    }"
61,9037596.txt,major,"public void testBug346002() throws Exception {
	ClasspathContainerInitializer initializer = JavaCore.getClasspathContainerInitializer(JavaCore.USER_LIBRARY_CONTAINER_ID);
	String libraryName = ""TEST"";
	IPath containerPath = new Path(JavaCore.USER_LIBRARY_CONTAINER_ID);
	UserLibraryClasspathContainer containerSuggestion = new UserLibraryClasspathContainer(libraryName);
	initializer.requestClasspathContainerUpdate(containerPath.append(libraryName), null, containerSuggestion);

	String libPath = ""C:/test/test.jar"";

	IEclipsePreferences preferences = InstanceScope.INSTANCE.getNode(JavaCore.PLUGIN_ID);
	String propertyName = JavaModelManager.CP_USERLIBRARY_PREFERENCES_PREFIX+ ""TEST"";

	StringBuffer propertyValue = new StringBuffer(
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\r\n<userlibrary systemlibrary=\""false\"" version=\""2\"">\r\n<archive"");
	propertyValue.append("" path=\"""" + libPath + ""\""/>\r\n"");
	propertyValue.append(""</userlibrary>\r\n"");
	preferences.put(propertyName, propertyValue.toString());

	propertyName = JavaModelManager.CP_USERLIBRARY_PREFERENCES_PREFIX + ""INVALID"";
	propertyValue = new StringBuffer(
			""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\r\n<userlibrary systemlibrary=\""false\"" version=\""2\"">\r\n<archive"");
	propertyValue.append("" path=\""\""/>"");
	propertyValue.append(""</userlibrary>\r\n"");
	preferences.put(propertyName, propertyValue.toString());
	preferences.flush();

	try {
		simulateExitRestart();

		UserLibrary userLibrary = JavaModelManager.getUserLibraryManager().getUserLibrary(libraryName);
		assertNotNull(userLibrary);
		IPath entryPath = userLibrary.getEntries()[0].getPath();
		assertEquals(""Path should be absolute"", true, entryPath.isAbsolute());

		userLibrary = JavaModelManager.getUserLibraryManager().getUserLibrary(""INVALID"");
		assertNull(userLibrary);
	}
	catch (ClasspathEntry.AssertionFailedException e) {
		fail(""Should not throw AssertionFailedException"");
	}
}"
62,4247131.txt,none,"    @Override
    public void dispose()
    {
        this.managers.clear();
    }"
63,8972982.txt,none,"    @Override
    public int docFreq() throws IOException {
      return te.docFreq();
    }"
64,4906479.txt,none,"        @Override
        public int nextDoc() throws IOException {
            if (docNo == NO_MORE_DOCS) {
                return docNo;
            }

            if (firstTime) {
                firstTime = false;
                // get first doc of context scorer
                int docId = contextScorer.nextDoc();
                if (docId != NO_MORE_DOCS) {
                    contextNo = docId;
                }
            }
            // move to next candidate
            do {
                docNo++;
            } while (reader.isDeleted(docNo) && docNo < reader.maxDoc());

            // check with contextScorer
            while (contextNo != -1 && contextNo == docNo) {
                docNo++;
                int docId = contextScorer.nextDoc();
                contextNo = docId == NO_MORE_DOCS ? -1 : docId;
            }
            if (docNo >= reader.maxDoc()) {
                docNo = NO_MORE_DOCS;
            }
            return docNo;
        }"
65,7928347.txt,minor,"	@Override
	public boolean select(Viewer viewer, Object parentElement, Object element) {
		IResource resource = null;
		if (element instanceof IFile) {
			resource = (IFile) element;
		}
		else
			return true;
		if (resource != null) {
			String name = resource.getName();
			for (int i = 0; i < patterns.length; i++) {
				if (name.endsWith(patterns[i]))
					return true;
			}
			return false;
		}
		return true;
	}"
66,6212329.txt,none,"  @Override
  public Type<GutterClickHandler> getAssociatedType() {
    return TYPE;
  }"
67,4162330.txt,none,"    protected String getCsrfHeader() {
        Object csrfHeaderObject = getSession().get(SessionParameter.CSRF_HEADER);
        if (csrfHeaderObject instanceof String) {
            return (String) csrfHeaderObject;
        }

        return null;
    }"
68,6430791.txt,minor,"    private void addDataAccessNodes(UaFolderNode rootNode) {
        // DataAccess folder
        UaFolderNode dataAccessFolder = new UaFolderNode(
            getNodeContext(),
            newNodeId(""HelloWorld/DataAccess""),
            newQualifiedName(""DataAccess""),
            LocalizedText.english(""DataAccess"")
        );

        getNodeManager().addNode(dataAccessFolder);
        rootNode.addOrganizes(dataAccessFolder);

        // AnalogItemType node
        try {
            AnalogItemNode node = (AnalogItemNode) getNodeFactory().createNode(
                newNodeId(""HelloWorld/DataAccess/AnalogValue""),
                Identifiers.AnalogItemType,
                true
            );

            node.setBrowseName(newQualifiedName(""AnalogValue""));
            node.setDisplayName(LocalizedText.english(""AnalogValue""));
            node.setDataType(Identifiers.Double);
            node.setValue(new DataValue(new Variant(3.14d)));

            node.setEURange(new Range(0.0, 100.0));

            getNodeManager().addNode(node);
            dataAccessFolder.addOrganizes(node);
        } catch (UaException e) {
            logger.error(""Error creating AnalogItemType instance: {}"", e.getMessage(), e);
        }
    }"
69,9119349.txt,none,"	public Point computeSize( int wHint, int hHint, boolean changed )
	{
		checkWidget( );
		Point e = getTotalSize( image, text );
		if ( wHint == SWT.DEFAULT )
		{
			e.x += leftMargin + rightMargin;
		}
		else
		{
			e.x = wHint;
		}
		if ( hHint == SWT.DEFAULT )
		{
			e.y += topMargin + bottomMargin;
		}
		else
		{
			e.y = hHint;
		}
		return e;
	}"
70,7294182.txt,none,"    private String gspFolderName() {
        String name = unit.getElementName();
        int dotIndex = name.indexOf(""."");
        if (dotIndex > 0) {
            name = Character.toLowerCase(name.charAt(0)) + name.substring(1, dotIndex);
            return name;
        } else {
            return name;
        }
    }"
71,7186496.txt,none,"        public Builder invocationCallback(
                com.oracle.bmc.util.internal.Consumer<javax.ws.rs.client.Invocation.Builder>
                        invocationCallback) {
            this.invocationCallback = invocationCallback;
            return this;
        }"
72,3803712.txt,none,"    private void updateWindowState(List<Tuple> expired, List<Tuple> newEvents) {
        LOG.debug(""Update window state, {} expired, {} new events"", expired.size(), newEvents.size());
        Map<TaskStream, WindowState> state = new HashMap<>();
        updateState(state, expired, false);
        updateState(state, newEvents, true);
        updateStreamState(state);
    }"
73,7391660.txt,none,"			public String toCommandLine() {
				return preparer.map(it -> it.apply(value)).orElseGet(() -> value.toString());
			}"
74,7373962.txt,none,"		Listener(CountDownLatch latch) {
			this.latch = latch;
		}"
75,4217192.txt,none,"    @Override
    protected Catalog<String, Object, ServletWebContext<String, Object>>
            getCatalog(ServletWebContext<String, Object> context) {
        /* If the object returned from the passed context is not a valid catalog
         * then we use the super class's catalog extraction logic to pull it
         * or to error gracefully.
         */
        Object testCatalog = context.get(getCatalogName());

        /* Assume that the underlying implementation is following convention and
         * returning a catalog with the current context.
         */
        @SuppressWarnings(""unchecked"")
        Catalog<String, Object, ServletWebContext<String, Object>> catalog =
                testCatalog != null && testCatalog instanceof Catalog ?
                    (Catalog<String, Object, ServletWebContext<String, Object>>) testCatalog :
                    super.getCatalog(context);

        return catalog;
    }"
76,6310221.txt,minor,"    private void setModalFieldsTooltips() {
        // set Tooltips
        this.tooltipInput.setTitle(MSGS.firewallPortForwardFormInboundInterfaceToolTip());
        this.tooltipOutput.setTitle(MSGS.firewallPortForwardFormOutboundInterfaceToolTip());
        this.tooltipLan.setTitle(MSGS.firewallPortForwardFormLanAddressToolTip());
        this.tooltipProtocol.setTitle(MSGS.firewallPortForwardFormProtocolToolTip());
        this.tooltipInternal.setTitle(MSGS.firewallPortForwardFormInternalPortToolTip());
        this.tooltipExternal.setTitle(MSGS.firewallPortForwardFormExternalPortToolTip());
        this.tooltipEnable.setTitle(MSGS.firewallPortForwardFormMasqueradingToolTip());
        this.tooltipPermittedNw.setTitle(MSGS.firewallPortForwardFormPermittedNetworkToolTip());
        this.tooltipPermittedMac.setTitle(MSGS.firewallPortForwardFormPermittedMacAddressToolTip());
        this.tooltipSource.setTitle(MSGS.firewallPortForwardFormSourcePortRangeToolTip());
        this.tooltipInput.reconfigure();
        this.tooltipOutput.reconfigure();
        this.tooltipLan.reconfigure();
        this.tooltipProtocol.reconfigure();
        this.tooltipExternal.reconfigure();
        this.tooltipInternal.reconfigure();
        this.tooltipEnable.reconfigure();
        this.tooltipPermittedNw.reconfigure();
        this.tooltipPermittedMac.reconfigure();
        this.tooltipSource.reconfigure();
    }"
77,7732540.txt,none,"    @Override
    @Deprecated
    public <T> SubscriptionHandle subscribeToChildren(Entity parent, Sensor<T> sensor, SensorEventListener<? super T> listener) {
        return subscriptions().subscribeToChildren(parent, sensor, listener);
    }"
78,4188059.txt,none,"    public DbRelationship(String name) {
        super(name);
    }"
79,6435518.txt,none,"    @Override
    public NodeId getTypeId() { return TypeId; }"
80,5384416.txt,none,"        @Override
        public Relationship mapToRelationship(final ProcessContext context, final FlowFile flowFile) {
            final List<Relationship> relationshipList = DistributeLoad.this.weightedRelationshipListRef.get();
            final int numRelationships = relationshipList.size();

            // create a HashSet that contains all of the available relationships, as calling #contains on HashSet
            // is much faster than calling it on a List
            boolean foundFreeRelationship = false;
            Relationship relationship = null;

            int attempts = 0;
            while (!foundFreeRelationship) {
                final long counterValue = counter.getAndIncrement();
                final int idx = (int) (counterValue % numRelationships);
                relationship = relationshipList.get(idx);
                foundFreeRelationship = context.getAvailableRelationships().contains(relationship);
                if (++attempts % numRelationships == 0 && !foundFreeRelationship) {
                    return null;
                }
            }

            return relationship;
        }"
81,7928095.txt,none,"	protected void initialize() {
		GridLayout layout = new GridLayout(3, false);
		layout.marginWidth = 0;
		setLayout(layout);
		if (getParent().getLayout() instanceof GridLayout) {
			layout = (GridLayout) getParent().getLayout();
			setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false, layout.numColumns, 1));
		}
		toolkit.adapt(this);
		toolkit.paintBordersFor(this);
	}"
82,7410586.txt,none,"    @SVMToHotSpot(OnFailure)
    @Override
    public void onFailure(CompilableTruffleAST compilable, String reason, boolean bailout, boolean permanentBailout) {
        JObject hsCompilable = ((HSCompilableTruffleAST) compilable).getHandle();
        JNIEnv env = HotSpotToSVMScope.env();
        JString hsReason = createHSString(env, reason);
        callOnFailure(env, getHandle(), hsCompilable, hsReason, bailout, permanentBailout);
    }"
83,4541855.txt,none,"    @Autowired
    public CloseShareAccountCommandHandler(final ShareAccountWritePlatformService shareAccountWritePlatformService) {
        this.shareAccountWritePlatformService = shareAccountWritePlatformService ;
    }"
84,6610964.txt,none,"    public final void mFullStop() throws RecognitionException {
        try {
            int _type = FullStop;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalTypesLexer.g:183:10: ( '.' )
            // InternalTypesLexer.g:183:12: '.'
            {
            match('.'); 

            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
85,6921162.txt,none,"  public boolean hasIndex() {
    return getIndex() != null;
  }"
86,5460082.txt,none,"    @POST
    @Path(""/{tenant}/{namespace}/subscribeRate"")
    @ApiOperation(value = ""Set subscribe-rate throttling for all topics of the namespace"")
    @ApiResponses(value = { @ApiResponse(code = 403, message = ""Don't have admin permission"") })
    public void setSubscribeRate(@PathParam(""tenant"") String tenant, @PathParam(""namespace"") String namespace,
                                SubscribeRate subscribeRate) {
        validateNamespaceName(tenant, namespace);
        internalSetSubscribeRate(subscribeRate);
    }"
87,9491268.txt,none,"  @Override
  public void handleFailedContainer(TaskAttemptId attemptID) {
    toBePreempted.remove(attemptID);
    checkpoints.remove(attemptID.getTaskId());
  }"
88,3722557.txt,none,"      public Builder setPrim(com.android.aapt.Resources.Primitive value) {
        copyOnWrite();
        instance.setPrim(value);
        return this;
        }"
89,7585761.txt,none,"  private File getPath(final LogicalPath logicalPath) {
    final Pom pom = pomManagementService.getPomFromModuleName(logicalPath.getModule());
    final File moduleRoot = getModuleRoot(logicalPath.getModule(), pom);
    final String pathRelativeToPom = logicalPath.getPathRelativeToPom(pom);
    return new File(moduleRoot, pathRelativeToPom);
  }"
90,6972042.txt,none,"  public static <E> SortedSetTestSuiteBuilder<E> using(TestSortedSetGenerator<E> generator) {
    SortedSetTestSuiteBuilder<E> builder = new SortedSetTestSuiteBuilder<E>();
    builder.usingGenerator(generator);
    return builder;
  }"
91,8703973.txt,none,"@Test
public void test_consistency_MouseSelection () {
    add();
    consistencyEvent(27, 10, 1, 0, ConsistencyUtility.MOUSE_CLICK);
}"
92,8572333.txt,none,"  public synchronized boolean addServerToDrainList(final ServerName sn) {
    // Warn if the server (sn) is not online.  ServerName is of the form:
    // <hostname> , <port> , <startcode>

    if (!this.isServerOnline(sn)) {
      LOG.warn(""Server "" + sn + "" is not currently online. "" +
               ""Ignoring request to add it to draining list."");
      return false;
    }
    // Add the server to the draining servers lists, if it's not already in
    // it.
    if (this.drainingServers.contains(sn)) {
      LOG.warn(""Server "" + sn + "" is already in the draining server list."" +
               ""Ignoring request to add it again."");
      return true;
    }
    LOG.info(""Server "" + sn + "" added to draining server list."");
    return this.drainingServers.add(sn);
  }"
93,8856936.txt,none,"    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((org.apache.airavata.model.error.InvalidRequestException)value);
        }
        break;

      case ACE:
        if (value == null) {
          unsetAce();
        } else {
          setAce((org.apache.airavata.model.error.AiravataClientException)value);
        }
        break;

      case ASE:
        if (value == null) {
          unsetAse();
        } else {
          setAse((org.apache.airavata.model.error.AiravataSystemException)value);
        }
        break;

      case AE:
        if (value == null) {
          unsetAe();
        } else {
          setAe((org.apache.airavata.model.error.AuthorizationException)value);
        }
        break;

      }
    }"
94,7584763.txt,none,"	@Override
	public Transaction createTransaction(@Nullable String name, int timeout) throws NotSupportedException, SystemException {
		if (timeout >= 0) {
			this.transactionManager.setTransactionTimeout(timeout);
		}
		this.transactionManager.begin();
		return new ManagedTransactionAdapter(this.transactionManager);
	}"
95,4144475.txt,none,"  protected List<RexFieldCollation> visitFieldCollations(
      List<RexFieldCollation> collations, boolean[] update) {
    ImmutableList.Builder<RexFieldCollation> clonedOperands =
        ImmutableList.builder();
    for (RexFieldCollation collation : collations) {
      RexNode clonedOperand = collation.left.accept(this);
      if ((clonedOperand != collation.left) && (update != null)) {
        update[0] = true;
        collation =
            new RexFieldCollation(clonedOperand, collation.right);
      }
      clonedOperands.add(collation);
    }
    return clonedOperands.build();
  }"
96,6424791.txt,none,"	private static void openOther(ExecutionEvent event, IWorkbenchWindow workbenchWindow, MApplication app,
			EPartService partService) {
		Shell shell = HandlerUtil.getActiveShell(event);
		IEclipseContext ctx = workbenchWindow.getService(IEclipseContext.class);
		EModelService modelService = workbenchWindow.getService(EModelService.class);
		MWindow window = workbenchWindow.getService(MWindow.class);

		final ShowViewDialog dialog = new ShowViewDialog(shell, app, window, modelService, partService, ctx);
		dialog.open();

		if (dialog.getReturnCode() == Window.CANCEL) {
			return;
		}

		final MPartDescriptor[] descriptors = dialog.getSelection();
		for (MPartDescriptor descriptor : descriptors) {
			openView(workbenchWindow, descriptor, partService);
		}
	}"
97,8547408.txt,none,"    public void setDomainId(Long domainId) {
        this.domainId = domainId;
    }"
98,8200621.txt,none,"	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}"
99,4138124.txt,none,"    @Override public SqlNode visit(SqlIdentifier id) {
      // First check for builtin functions which don't have
      // parentheses, like ""LOCALTIME"".
      SqlCall call =
          SqlUtil.makeCall(
              validator.getOperatorTable(),
              id);
      if (call != null) {
        return call.accept(this);
      }
      final SqlIdentifier fqId = getScope().fullyQualify(id).identifier;
      SqlNode expandedExpr = expandDynamicStar(id, fqId);
      validator.setOriginal(expandedExpr, id);
      return expandedExpr;
    }"
100,8304375.txt,none,"		protected void doSet(E object) {
			if (lastCursor == -1) {
				throw new IllegalStateException();
			}
			checkModCount();

			try {
				AbstractEList.this.set(lastCursor, object);
			} catch (IndexOutOfBoundsException exception) {
				throw new ConcurrentModificationException();
			}
		}"
101,6839966.txt,none,"  @Override
  public int hashCode() {
    return uri.hashCode();
  }"
102,6713364.txt,none,"  @Override
  public @Nullable EventHandler<InterceptTouchEvent> getInterceptTouchHandler() {
    return mInterceptTouchHandler;
  }"
103,8025955.txt,none,"  public PublicResolvedTypes(final DefaultReentrantTypeResolver resolver) {
    super(resolver, CancelIndicator.NullImpl);
  }"
104,5127922.txt,none,"    private void deleteIndexFiles( boolean full )
        throws IOException
    {
        if ( indexDirectory != null )
        {
            String[] names = indexDirectory.listAll();

            if ( names != null )
            {

                for ( String name : names )
                {
                    if ( !( name.equals( INDEX_PACKER_PROPERTIES_FILE )
                        || name.equals( INDEX_UPDATER_PROPERTIES_FILE ) ) )
                    {
                        indexDirectory.deleteFile( name );
                    }
                }
            }

            if ( full )
            {
                try
                {
                    indexDirectory.deleteFile( INDEX_PACKER_PROPERTIES_FILE );
                }
                catch ( IOException ioe )
                {
                    //Does not exist
                }

                try
                {
                    indexDirectory.deleteFile( INDEX_UPDATER_PROPERTIES_FILE );
                }
                catch ( IOException ioe )
                {
                    //Does not exist
                }
            }

            IndexUtils.deleteTimestamp( indexDirectory );
        }
    }"
105,9023034.txt,major,"  private ShardHandler getAndPrepShardHandler(SolrQueryRequest req, ResponseBuilder rb) {
    ShardHandler shardHandler = null;

    CoreContainer cc = req.getCore().getCoreContainer();
    boolean isZkAware = cc.isZooKeeperAware();
    rb.isDistrib = req.getParams().getBool(DISTRIB, isZkAware);
    if (!rb.isDistrib) {
      // for back compat, a shards param with URLs like localhost:8983/solr will mean that this
      // search is distributed.
      final String shards = req.getParams().get(ShardParams.SHARDS);
      rb.isDistrib = ((shards != null) && (shards.indexOf('/') > 0));
    }
    
    if (rb.isDistrib) {
      shardHandler = shardHandlerFactory.getShardHandler();
      shardHandler.prepDistributed(rb);
      if (!rb.isDistrib) {
        shardHandler = null; // request is not distributed after all and so the shard handler is not needed
      }
    }

    if (isZkAware) {
      String shardsTolerant = req.getParams().get(ShardParams.SHARDS_TOLERANT);
      boolean requireZkConnected = shardsTolerant != null && shardsTolerant.equals(ShardParams.REQUIRE_ZK_CONNECTED);
      ZkController zkController = cc.getZkController();
      boolean zkConnected = zkController != null && ! zkController.getZkClient().getConnectionManager().isLikelyExpired();
      if (requireZkConnected && false == zkConnected) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, ""ZooKeeper is not connected"");
      } else {
        NamedList<Object> headers = rb.rsp.getResponseHeader();
        if (headers != null) {
          headers.add(""zkConnected"", zkConnected);
        }
      }
    }

    return shardHandler;
  }"
106,7767021.txt,none,"  @Override
  public ClientResponse<FullResponseHolder> handleChunk(
      ClientResponse<FullResponseHolder> response,
      HttpChunk chunk,
      long chunkNum
  )
  {
    BytesFullResponseHolder holder = (BytesFullResponseHolder) response.getObj();

    if (holder == null) {
      return ClientResponse.finished(null);
    }

    holder.addChunk(getContentBytes(chunk.getContent()));
    return response;
  }"
107,5863832.txt,none,"    public boolean isTypeSystemIndexDefIncluded() {
      return typeSystemIndexDefIncluded;
    }"
108,6933669.txt,none,"  @Override
  protected void validate() {
  }"
109,9008466.txt,minor,"    @Override
    public Option[] getOptions() {
      return new Option[] {
          OptionBuilder
              .withArgName(""HOST"")
              .hasArg()
              .isRequired(false)
              .withDescription(""Address of the Zookeeper ensemble; defaults to: ""+ZK_HOST)
              .create(""zkHost""),
          OptionBuilder
              .withArgName(""CONFIG"")
              .hasArg()
              .isRequired(false)
              .withDescription(""Autoscaling config file, defaults to the one deployed in the cluster."")
              .withLongOpt(""config"")
              .create(""a""),
          OptionBuilder
              .withDescription(""Show calculated suggestions"")
              .withLongOpt(""suggestions"")
              .create(""s""),
          OptionBuilder
              .withDescription(""Show ClusterState (collections layout)"")
              .withLongOpt(""clusterState"")
              .create(""c""),
          OptionBuilder
              .withDescription(""Show calculated diagnostics"")
              .withLongOpt(""diagnostics"")
              .create(""d""),
          OptionBuilder
              .withDescription(""Show sorted nodes with diagnostics"")
              .withLongOpt(""sortedNodes"")
              .create(""n""),
          OptionBuilder
              .withDescription(""Redact node and collection names (original names will be consistently randomized)"")
              .withLongOpt(""redact"")
              .create(""r""),
          OptionBuilder
              .withDescription(""Show summarized collection & node statistics."")
              .create(""stats""),
          OptionBuilder
              .withDescription(""Turn on all options to get all available information."")
              .create(""all"")

      };
    }"
110,8264635.txt,none,"	public IGrammarAwareElementType getExtendsNsURIEObject_EObjectKeyword_2_0_0ElementType() {
		return ExtendsNsURIEObject_EObjectKeyword_2_0_0_ELEMENT_TYPE;
	}"
111,6122371.txt,none,"	@Override
	public StyleRange[] getStyleRanges(int offset, int length) {
		List<StyleRange> result = new ArrayList<>();
		// get the sublist with length = 0 so that it will return all with that
		// offset.
		StyleRange sr = new StyleRange(offset, 0, null, null, SWT.NO);
		for (Iterator<StyleRange> iterator = ranges.tailSet(sr).iterator(); iterator.hasNext();) {
			StyleRange r = iterator.next();
			if (r.start >= offset && r.start + r.length <= offset + length)
				result.add((StyleRange) r.clone());
			else
				break;
		}

		if (result.size() > 0)
			return result.toArray(new StyleRange[result.size()]);

		sr.length = length;
		return new StyleRange[] { sr };
	}"
112,5712776.txt,major,"  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder(""SupervisorInfo("");
    boolean first = true;

    sb.append(""time_secs:"");
    sb.append(this.time_secs);
    first = false;
    if (!first) sb.append("", "");
    sb.append(""hostname:"");
    if (this.hostname == null) {
      sb.append(""null"");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (is_set_assignment_id()) {
      if (!first) sb.append("", "");
      sb.append(""assignment_id:"");
      if (this.assignment_id == null) {
        sb.append(""null"");
      } else {
        sb.append(this.assignment_id);
      }
      first = false;
    }
    if (is_set_used_ports()) {
      if (!first) sb.append("", "");
      sb.append(""used_ports:"");
      if (this.used_ports == null) {
        sb.append(""null"");
      } else {
        sb.append(this.used_ports);
      }
      first = false;
    }
    if (is_set_meta()) {
      if (!first) sb.append("", "");
      sb.append(""meta:"");
      if (this.meta == null) {
        sb.append(""null"");
      } else {
        sb.append(this.meta);
      }
      first = false;
    }
    if (is_set_scheduler_meta()) {
      if (!first) sb.append("", "");
      sb.append(""scheduler_meta:"");
      if (this.scheduler_meta == null) {
        sb.append(""null"");
      } else {
        sb.append(this.scheduler_meta);
      }
      first = false;
    }
    if (is_set_uptime_secs()) {
      if (!first) sb.append("", "");
      sb.append(""uptime_secs:"");
      sb.append(this.uptime_secs);
      first = false;
    }
    if (is_set_version()) {
      if (!first) sb.append("", "");
      sb.append(""version:"");
      if (this.version == null) {
        sb.append(""null"");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (is_set_resources_map()) {
      if (!first) sb.append("", "");
      sb.append(""resources_map:"");
      if (this.resources_map == null) {
        sb.append(""null"");
      } else {
        sb.append(this.resources_map);
      }
      first = false;
    }
    if (is_set_server_port()) {
      if (!first) sb.append("", "");
      sb.append(""server_port:"");
      sb.append(this.server_port);
      first = false;
    }
    sb.append("")"");
    return sb.toString();
  }"
113,7893144.txt,none,"  public CxxToolFlags getNonIncludePathFlags(
      SourcePathResolver resolver, Optional<PrecompiledHeaderData> pch, Preprocessor preprocessor) {
    ExplicitCxxToolFlags.Builder builder = CxxToolFlags.explicitBuilder();
    ExplicitCxxToolFlags.addCxxToolFlags(builder, getOtherFlags());
    if (pch.isPresent()) {
      builder.addAllRuleFlags(
          StringArg.from(
              preprocessor.prefixOrPCHArgs(
                  pch.get().isPrecompiled(), resolver.getAbsolutePath(pch.get().getHeader()))));
    }
    return builder.build();
  }"
114,8722845.txt,none,"	public void removeAccessibleEditableTextListener(AccessibleEditableTextListener listener) {
	    checkWidget();
	    if (listener == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
	    if (accessibleEditableTextListeners != null) {
	    	accessibleEditableTextListeners.remove(listener);
	    	if (accessibleEditableTextListeners.isEmpty()) accessibleEditableTextListeners = null;
	    }
	}"
115,4755469.txt,none,"  private void printWithBanner(String s, char c) {
    this.outputBufferPrintStream.print(s);
    this.outputBufferPrintStream.print(' ');
    for (int i = 0; i < (CONSOLE_WIDTH - s.length() - 1); i++) {
      this.outputBufferPrintStream.print(c);
    }
    this.outputBufferPrintStream.println();
  }"
116,9490334.txt,none,"  private static WebAppContext createWebAppContext(Builder b,
      AccessControlList adminsAcl, final String appDir) {
    WebAppContext ctx = new WebAppContext();
    ctx.setDefaultsDescriptor(null);
    ServletHolder holder = new ServletHolder(new DefaultServlet());
    Map<String, String> params = ImmutableMap. <String, String> builder()
            .put(""acceptRanges"", ""true"")
            .put(""dirAllowed"", ""false"")
            .put(""gzip"", ""true"")
            .put(""useFileMappedBuffer"", ""true"")
            .build();
    holder.setInitParameters(params);
    ctx.setWelcomeFiles(new String[] {""index.html""});
    ctx.addServlet(holder, ""/"");
    ctx.setDisplayName(b.name);
    ctx.setContextPath(""/"");
    ctx.setWar(appDir + ""/"" + b.name);
    String tempDirectory = b.conf.get(HTTP_TEMP_DIR_KEY);
    if (tempDirectory != null && !tempDirectory.isEmpty()) {
      ctx.setTempDirectory(new File(tempDirectory));
      ctx.setAttribute(""javax.servlet.context.tempdir"", tempDirectory);
    }
    ctx.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE, b.conf);
    ctx.getServletContext().setAttribute(ADMINS_ACL, adminsAcl);
    addNoCacheFilter(ctx);
    return ctx;
  }"
117,6180154.txt,none,"	private SWTBotStyledText getNonAncestorEditor(int index) {
		List<StyledText> texts = editor.bot().getFinder()
				.findControls(widgetOfType(StyledText.class));
		if (texts.size() == 2)
			return new SWTBotStyledText(texts.get(index));
		else if (texts.size() == 3)
			return new SWTBotStyledText(texts.get(index + 1));
		else
			throw new IllegalStateException(
					""Expected compare editor to contain 2 or 3 styled text widgets, but was ""
							+ texts.size());
	}"
118,6898198.txt,none,"    @Override
    public R visitLink(LinkTree node, P p) {
        return defaultAction(node, p);
    }"
119,7355862.txt,none,"    @Override
    public Object clone() throws CloneNotSupportedException {
        final HttpHost copy = (HttpHost) super.clone();
        copy.init(this);
        return copy;
    }"
120,7185831.txt,none,"        public Builder copy(ListVolumeGroupBackupsResponse o) {
            opcNextPage(o.getOpcNextPage());
            opcRequestId(o.getOpcRequestId());
            items(o.getItems());

            return this;
        }"
121,4502504.txt,none,"    private final boolean sameDevice(String udn, String urn)
    {
        String _udn = this.udn;
        String _urn = this.urn;
        if (_udn == null || _urn == null)
            return false; // not subscribed
        return _udn.equals(udn) && _urn.equals(urn);
    }"
122,8260696.txt,none,"		public static IGrammarAwareElementType createWithExpression_Alternatives_2ElementType() {
			return new IGrammarAwareElementType(""WithExpression_Alternatives_2_ELEMENT_TYPE"", SimpleBeeLangTestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getWithExpressionAccess().getAlternatives_2());
		}"
123,6496450.txt,none,"	public String[] getPath(final TreeItem swtTreeItem) {
		return Display.syncExec(new ResultRunnable<String[]>() {
			@Override
			public String[] run() {
				org.eclipse.swt.widgets.TreeItem swttiDummy = swtTreeItem;
				LinkedList<String> items = new LinkedList<String>();
				while (swttiDummy != null) {
					items.addFirst(swttiDummy.getText());
					swttiDummy = swttiDummy.getParentItem();
				}
				return items.toArray(new String[0]);
			}
		});
	}"
124,7277838.txt,none,"  @Override
  public CsdlProperty setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }"
125,6177738.txt,none,"  @Override
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof StatusMessage)) {
      return false;
    }
    StatusMessage that = (StatusMessage) obj;

    return Objects.equals(message, that.message)
        && Objects.equals(type, that.type)
        && isAccessible == that.isAccessible;
  }"
126,4849361.txt,none,"    public Address buildAddress(ASTaddress node, DecodeMonitor monitor) throws ParseException {
        ChildNodeIterator it = new ChildNodeIterator(node);
        Node n = it.next();
        if (n instanceof ASTaddr_spec) {
            return buildAddrSpec((ASTaddr_spec) n);
        } else if (n instanceof ASTangle_addr) {
            return buildAngleAddr((ASTangle_addr) n);
        } else if (n instanceof ASTphrase) {
            String name = buildString((ASTphrase) n, false);
            Node n2 = it.next();
            if (n2 instanceof ASTgroup_body) {
                return new Group(name, buildGroupBody((ASTgroup_body) n2, monitor));
            } else if (n2 instanceof ASTangle_addr) {
                try {
                    name = DecoderUtil.decodeEncodedWords(name, monitor);
                } catch (IllegalArgumentException e) {
                    throw new ParseException(e);
                }
                Mailbox mb = buildAngleAddr((ASTangle_addr) n2);
                return new Mailbox(name, mb.getRoute(), mb.getLocalPart(),
                        mb.getDomain());
            } else {
                throw new ParseException(""Address \""group_body\"" or \""angle_addr\"" is expected but got \"""" + n + ""\"""");
            }
        } else {
            throw new ParseException(""Address \""phrase\"" is expected but got \"""" + n + ""\"""");
        }
    }"
127,3817294.txt,none,"   private byte getByte(final long index) {
      checkForPacket(index);

      if (fileCache != null && index < packetPosition) {
         return fileCache.getByteFromCache(index);
      } else {
         return currentPacket.getChunk()[(int) (index - packetPosition)];
      }
   }"
128,8717601.txt,none,"	public static void main(String[] args) {
		Display display = new Display();
		Shell shell = new Shell(display);
		shell.setSize(400, 400);
		shell.setText(""Bug 531667 GC transform is wrong"");
		shell.setLayout(new FillLayout());
		Composite main = new Composite(shell, SWT.NONE);
		main.setLayout(new FillLayout());

		Composite[] squares = showCaseTransform(main);
		for (Composite square : squares) {
			square.layout();
		}

		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
		display.dispose();
	}"
129,5767507.txt,none,"    @Override
    public PrivilegeTO getPrivilegeTO(final Privilege privilege) {
        PrivilegeTO privilegeTO = new PrivilegeTO();
        privilegeTO.setKey(privilege.getKey());
        privilegeTO.setDescription(privilege.getDescription());
        privilegeTO.setApplication(privilege.getApplication().getKey());
        privilegeTO.setSpec(privilege.getSpec());
        return privilegeTO;
    }"
130,3828619.txt,none,"   @Override
   public boolean addAddressInfo(AddressInfo addressInfo) throws Exception {
      boolean added = reloadAddressInfo(addressInfo);
      if (added && storageManager != null) {
         long txID = storageManager.generateID();
         try {
            storageManager.addAddressBinding(txID, addressInfo);
            storageManager.commitBindings(txID);
         } catch (Exception e) {
            try {
               storageManager.rollbackBindings(txID);
            } catch (Exception ignored) {
            }
            throw e;
         }
      }
      return added;
   }"
131,7588699.txt,none,"		@Override
		@NonNull
		public MethodMetadata getFactoryMethodMetadata() {
			return this.factoryMethodMetadata;
		}"
132,5333354.txt,none,"    public boolean isSiteToSiteSecure() {
        return isSiteToSiteSecure;
    }"
133,6246396.txt,none,"    public MqttQoS getQos() {
        return qos;
    }"
134,7155736.txt,none,"        public int read(byte[] b) throws IOException {
            return readInternal(b, 0, b.length);
        }"
135,5747163.txt,none,"    @org.apache.storm.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // EXPIRATION_TIME_MILLIS
          return EXPIRATION_TIME_MILLIS;
        default:
          return null;
      }
    }"
136,7001897.txt,none,"  private static Map<String, Object> readJson(HttpServletRequest request) {
    try {
      String json = CharStreams.toString(request.getReader());
      return jsonToMap(json);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }"
137,6873573.txt,minor,"	public void registerProjectsToFileBasedWorkspace(Iterable<URI> projectURIs, FileBasedWorkspace workspace)
			throws N4JSCompileException {

		// TODO GH-783 refactor FileBasedWorkspace, https://github.com/eclipse/n4js/issues/783
		// this is reverse mapping of the one that is kept in the workspace
		Map<String, URI> registeredProjects = new HashMap<>();
		workspace.getAllProjectLocationsIterator().forEachRemaining(uri -> {
			String projectName = workspace.getProjectDescription(uri).getProjectName();
			registeredProjects.put(projectName, URIUtils.normalize(uri));
		});

		// register all projects with the file based workspace.
		for (URI uri : projectURIs) {
			URI projectURI = URIUtils.normalize(uri);

			final ProjectDescription projectDescription = projectDescriptionLoader
					.loadProjectDescriptionAtLocation(projectURI);

			if (projectDescription == null) {
				throw new N4JSCompileException(
						""Cannot load project description for project at "" + projectURI.toFileString()
								+ "". Make sure the project contains a valid package.json file."");
			}

			final String projectName = projectDescription.getProjectName();

			if (skipRegistering(projectName, projectURI, registeredProjects)) {
				if (logger != null && logger.isCreateDebugOutput()) {
					logger.debug(""Skipping already registered project '"" + projectURI + ""'"");
				}
				/*
				 * We could call FileBasedWorkspace.registerProject which would fail silently. Still to avoid potential
				 * side effects and to keep {@code registeredProjects} management simpler,we will skip it explicitly.
				 */
				continue;
			}

			try {
				if (logger != null && logger.isCreateDebugOutput()) {
					logger.debug(""Registering project '"" + projectURI + ""'"");
				}
				workspace.registerProject(projectURI);
				registeredProjects.put(projectName, projectURI);
			} catch (N4JSBrokenProjectException e) {
				throw new N4JSCompileException(""Unable to register project '"" + projectURI + ""'"", e);
			}
		}
	}"
138,8088678.txt,none,"	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case AsubpackagePackage.AMODEL__ELEMENTS:
				return elements != null && !elements.isEmpty();
		}
		return super.eIsSet(featureID);
	}"
139,9217401.txt,none,"        public DTMAxisIterator reset()
        {
            _source.reset();
            return resetPosition();
        }"
140,7399310.txt,none,"    @Fallback
    TruffleObject doOther(@SuppressWarnings(""unused"") Object pointer) {
        if (allowNonForeign) {
            return null;
        } else {
            throw new LLVMPolyglotException(this, ""Pointer does not point to a polyglot value."");
        }
    }"
141,5025893.txt,none,"  private
  void writeObject(ObjectOutputStream oos) throws java.io.IOException {
    // Aside from returning the current thread name the wgetThreadName
    // method sets the threadName variable.
    this.getThreadName();

    // This sets the renders the message in case it wasn't up to now.
    this.getRenderedMessage();

    // This call has a side effect of setting this.ndc and
    // setting ndcLookupRequired to false if not already false.
    this.getNDC();

    // This call has a side effect of setting this.mdcCopy and
    // setting mdcLookupRequired to false if not already false.
    this.getMDCCopy();

    // This sets the throwable sting representation of the event throwable.
    this.getThrowableStrRep();

    oos.defaultWriteObject();

    // serialize this event's level
    writeLevel(oos);
  }"
142,8255035.txt,minor,"    public final void rule__XIfExpression__Group__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalEntities.g:9109:1: ( rule__XIfExpression__Group__6__Impl )
            // InternalEntities.g:9110:2: rule__XIfExpression__Group__6__Impl
            {
            pushFollow(FOLLOW_2);
            rule__XIfExpression__Group__6__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
143,8293792.txt,none,"    private ByteBuffer toByteBuffer(Serializable serializable) {
        try {
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            new ObjectOutputStream(outputStream).writeObject(serializable);
            return ByteBuffer.wrap(outputStream.toByteArray());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }"
144,7409026.txt,none,"	@Nullable
	protected PdxSerializer resolveCustomPdxSerializer(@NonNull PersistentProperty<?> property) {

		Map<?, PdxSerializer> customPdxSerializers = getCustomPdxSerializers();

		return this.pdxSerializerResolvers.stream()
			.map(it -> it.resolve(customPdxSerializers, property))
			.filter(Objects::nonNull)
			.findFirst()
			.orElse(null);
	}"
145,5790828.txt,none,"    private void handleHeaderFooter(Range[] ranges, String type, HWPFDocument document,
                                    PicturesSource pictures, PicturesTable pictureTable, XHTMLContentHandler xhtml)
            throws SAXException, IOException, TikaException {
        if (countParagraphs(ranges) > 0) {
            xhtml.startElement(""div"", ""class"", type);
            ListManager listManager = new ListManager(document);
            for (Range r : ranges) {
                if (r != null) {
                    for (int i = 0; i < r.numParagraphs(); i++) {
                        Paragraph p = r.getParagraph(i);

                        i += handleParagraph(p, 0, r, document,
                                FieldsDocumentPart.HEADER, pictures, pictureTable, listManager, xhtml);
                    }
                }
            }
            xhtml.endElement(""div"");
        }
    }"
146,5604954.txt,none,"    @Override
    public XSSFRichTextString createRichTextString(String text) {
        XSSFRichTextString rt = new XSSFRichTextString(text);
        rt.setStylesTableReference(workbook.getStylesSource());
        return rt;
    }"
147,4236060.txt,none,"    public void setDefaultTestOnCreate(final boolean testOnCreate) {
        assertInitializationAllowed();
        this.defaultTestOnCreate = testOnCreate;
    }"
148,7577346.txt,none,"	@Override
	public void handleRequest(HttpServletRequest servletRequest, HttpServletResponse servletResponse)
			throws ServletException, IOException {

		ServerHttpRequest request = new ServletServerHttpRequest(servletRequest);
		ServerHttpResponse response = new ServletServerHttpResponse(servletResponse);

		try {
			this.sockJsService.handleRequest(request, response, getSockJsPath(servletRequest), this.webSocketHandler);
		}
		catch (Throwable ex) {
			throw new SockJsException(""Uncaught failure in SockJS request, uri="" + request.getURI(), ex);
		}
	}"
149,7718229.txt,none,"        public final boolean isPrivateImage() {
            return !StringUtil.isNullOrEmpty(this.endpointLink);
        }"
150,6122163.txt,none,"		@Override
		public boolean visit(IModelElement element) {
			if (type == null) {
				if (element.getElementType() == IModelElement.TYPE
						&& simpleTypeName.equals(element.getElementName())) {
					type = (IType) element;
					return false;
				}
				return true;
			} else {
				return false;
			}
		}"
151,8902996.txt,none,"  private SparkSkewJoinProcFactory() {
    // prevent instantiation
  }"
152,6519318.txt,none,"  private Generator getGenerator(String serviceKey) {
    List<Generator> generators = this.registeredGeneratorsRepository.findByGeneratorKey(serviceKey);
    if (!generators.isEmpty()) {
      return generators.get(0);
    } else {
      return null;
    }
  }"
153,5241829.txt,none,"  @XmlElementWrapper(name = ""references"")
  @XmlElement(name = ""reference"")
  public List<ReferenceResource> getReferenceResources()
  {
    return referenceResources;
  }"
154,5731614.txt,none,"    void set(final String name, final String desc, final Handle bsm,
            final Object[] bsmArgs) {
        this.type = 'y';
        this.strVal1 = name;
        this.strVal2 = desc;
        this.objVal3 = bsm;
        this.objVals = bsmArgs;

        int hashCode = 'y' + name.hashCode() * desc.hashCode() * bsm.hashCode();
        for (Object bsmArg : bsmArgs) {
            hashCode *= bsmArg.hashCode();
        }
        this.hashCode = 0x7FFFFFFF & hashCode;
    }"
155,5311043.txt,none,"    private void appendXmlComparison1(SQLBuffer buf, String op,
            FilterValue lhs, FilterValue rhs) {
        boolean castrhs = false;
        Class<?> rc = Filters.wrap(rhs.getType());
        int type = 0;
        if (rhs.isConstant()) {
            type = getJDBCType(JavaTypes.getTypeCode(rc), false);
            castrhs = true;
        }

        appendXmlExists(buf, lhs);

        buf.append("" "").append(op).append("" "");

        buf.append(""$"");
        if (castrhs)
            buf.append(""Parm"");
        else
            rhs.appendTo(buf);

        buf.append(""]' PASSING "");
        appendXmlVar(buf, lhs);
        buf.append("", "");

        if (castrhs)
            appendCast(buf, rhs, type);
        else
            rhs.appendTo(buf);

        buf.append("" AS \"""");
        if (castrhs)
            buf.append(""Parm"");
        else
            rhs.appendTo(buf);
        buf.append(""\"")"");
    }"
156,7044394.txt,none,"  public CaptureDeviceInput activateInput(CaptureDeviceInput activateMe) throws EncodingException
  {
    // NOTE: This was removed so we always set the input before we start capture. There was a bug where the audio was
    // getting cut out of some recordings due to the audio standard not being set correctly. This will hopefully
    // resolve that.
    // if (activeSource == activateMe) return activeSource;
    super.activateInput(activateMe);
    if (activeSource != null && isLoaded())
    {
      boolean savePrefsAfter = (activeSource.getBrightness() < 0) || (activeSource.getContrast() < 0) ||
          (activeSource.getHue() < 0) || (activeSource.getSaturation() < 0) || (activeSource.getSharpness() < 0);

      synchronized (devlock)
      {
        setChannel0(pHandle, Integer.toString(activeSource.getIndex()));
      }
      int[] defaultColors = updateColors();
      activeSource.setDefaultColors(defaultColors[0], defaultColors[1], defaultColors[2], defaultColors[3],
          defaultColors[4]);

      if (savePrefsAfter)
        writePrefs();
    }
    return activeSource;
  }"
157,5818834.txt,none,"    @Override
    GraphSONMapper.Builder configureBuilder(final GraphSONMapper.Builder builder) {
        // already set to 1.0 in AbstractGraphSONMessageSerializerV1d0
        return builder.addCustomModule(new GremlinServerModule())
                .typeInfo(TypeInfo.NO_TYPES);
    }"
158,6190083.txt,none,"  public void hide() {
    view.close();
  }"
159,4452266.txt,none,"  public AbstractFileGroupScan(String userName) {
    super(userName);
  }"
160,4302392.txt,none,"    @Override
    public String toString() {
        String typeStr = tag().typeStr() + "" [""
            + ""tag="" + tag()
            + "", len="" + getHeaderLength() + ""+"" + getBodyLength()
            + ""] "";
        return typeStr + ""eoc"";
    }"
161,7215246.txt,none,"    @Override public String toString() {
        return ""AMQChannel("" + _connection + "","" + _channelNumber + "")"";
    }"
162,4038193.txt,none,"  public static <T> void structuralValueDecodeEncodeEqualInContext(
      Coder<T> coder, Coder.Context context, T value) throws Exception {
    assertEquals(
        coder.structuralValue(value), coder.structuralValue(decodeEncode(coder, context, value)));
  }"
163,7727470.txt,none,"    public MetricFactory(MetricSearch metricSearch, MetricValidator metricValidator,
                         boolean redirectHostMetrics, String hostMetricDir, String hostPostfixes) {
        this.metricSearch = metricSearch;
        this.metricValidator = metricValidator;
        this.redirectHostMetrics = redirectHostMetrics;
        this.hostMetricDir = hostMetricDir;
        this.hostPostfixes = Splitter.on(',').omitEmptyStrings().splitToList(hostPostfixes);
        if (redirectHostMetrics) {
            log.info(""Host host metrics redirection enabled for postfixes {} to dir {}"", hostPostfixes, hostMetricDir);
        } else {
            log.info(""Host metric redirection disabled"");
        }
    }"
164,4553122.txt,none,"    @Transactional
    @Override
    public CommandProcessingResult processCommand(JsonCommand jsonCommand) {
        return this.shareProductWritePlatformService.deleteShareProductDividend(jsonCommand.entityId());
    }"
165,4651628.txt,none,"	@Nonnull
	private E deserializeElement(@Nonnull byte[] bytes) {
		try {
			final int numPrefixBytes = groupPrefixBytes.length;
			inputView.setBuffer(bytes, numPrefixBytes, bytes.length - numPrefixBytes);
			return byteOrderProducingSerializer.deserialize(inputView);
		} catch (IOException e) {
			throw new FlinkRuntimeException(""Error while deserializing the element."", e);
		}
	}"
166,4433801.txt,none,"    public static void assertFailed(APIResult response) {
        Assert.assertNotEquals(response.getMessage(), ""null"",
            ""response message should not be null"");
        Assert.assertEquals(response.getStatus(), APIResult.Status.FAILED,
                ""Status should be FAILED. Message: "" + response.getMessage());
    }"
167,5250124.txt,minor,"    public void reloadExpectedTimeAndConfig(SLACalcStatus slaCalc) throws JPAExecutorException {
        SLARegistrationBean regBean = SLARegistrationQueryExecutor.getInstance().get(
                SLARegQuery.GET_SLA_EXPECTED_VALUE_CONFIG, slaCalc.getId());

        if (regBean.getExpectedDuration() > 0) {
            slaCalc.getSLARegistrationBean().setExpectedDuration(regBean.getExpectedDuration());
        }
        if (regBean.getExpectedEnd() != null) {
            slaCalc.getSLARegistrationBean().setExpectedEnd(regBean.getExpectedEnd());
        }
        if (regBean.getExpectedStart() != null) {
            slaCalc.getSLARegistrationBean().setExpectedStart(regBean.getExpectedStart());
        }
        if (regBean.getSLAConfigMap().containsKey(OozieClient.SLA_DISABLE_ALERT)) {
            slaCalc.getSLARegistrationBean().addToSLAConfigMap(OozieClient.SLA_DISABLE_ALERT,
                    regBean.getSLAConfigMap().get(OozieClient.SLA_DISABLE_ALERT));
        }
        if (regBean.getNominalTime() != null) {
            slaCalc.getSLARegistrationBean().setNominalTime(regBean.getNominalTime());
        }
    }"
168,4104993.txt,none,"    @Override
    public FunctionIdentifier getIdentifier() {
        return FID;
    }"
169,4041399.txt,none,"  @Override
  public PCollection<OutputT> expand(PCollection<InputT> input) {
    PCollection<KV<Long, InputT>> in;
    in = input.apply(getName(""wrap""), ParDo.of(new Wrap<>()));
    if (input.getTypeDescriptor() != null) {
      in =
          in.setTypeDescriptor(
              TypeDescriptors.kvs(TypeDescriptors.longs(), input.getTypeDescriptor()));
    }
    return timestampedTransform.apply(in);
  }"
170,5665524.txt,none,"    @Override
    protected boolean containsAllNamedAxes(final String[] axisNames) {
        if (axisNames != null) {
next:       for (final String name : axisNames) {
                for (final CoordinateAxis axis : netcdfCS.getCoordinateAxes()) {
                    if (name.equalsIgnoreCase(axis.getShortName())) {
                        continue next;
                    }
                }
                return false;
            }
        }
        return true;
    }"
171,5106994.txt,none,"    private int computeBatchSize(int position, int length) {
        int batchSize = QUERY_BATCH_SIZE;
        while (length - position < batchSize) {
            batchSize = batchSize >> 1;
        }
        return batchSize;
    }"
172,7926604.txt,major,"	private void updateWidgets() {
		MultiInstanceLoopCharacteristics lc = getBO();
		
		showCompletionConditionWidgets(lc.isIsSequential());
		
		if (lc!=null && !updatingWidgets) {
			updatingWidgets = true;
			switch (getInstanceType()) {
			case None:
				if (loopCardinalityButton!=null)
					loopCardinalityButton.setSelection(false);
				if (loopDataInputButton!=null)
					loopDataInputButton.setSelection(false);
				loopDataInputWidgetsShowing = true;
				loopCardinalityWidgetsShowing = true;
				showLoopDataInputWidgets(false);
				showLoopCardinalityWidgets(false);
				break;
			case LoopCardinality:
				if (loopCardinalityButton!=null)
					loopCardinalityButton.setSelection(true);
				if (loopDataInputButton!=null)
					loopDataInputButton.setSelection(false);
				showLoopDataInputWidgets(false);
				showLoopCardinalityWidgets(true);
				break;
			case DataInput:
				if (loopCardinalityButton!=null)
					loopCardinalityButton.setSelection(false);
				if (loopDataInputButton!=null)
					loopDataInputButton.setSelection(true);
				showLoopCardinalityWidgets(false);
				showLoopDataInputWidgets(true);
				break;
			}
			
			if (producesOutputButton!=null) {
				boolean producesOutput = (lc.getLoopDataOutputRef()!=null || lc.getOutputDataItem()!=null);
				producesOutputButton.setSelection(producesOutput);
				showLoopDataOutputWidgets(producesOutput);
			}
		}
		updatingWidgets = false;
	}"
173,5136002.txt,none,"    @Override
    public int hashCode()
    {
        int hash = getClass().hashCode();
        hash = hash * 31 + ( traverse ? 1 : 0 );
        return hash;
    }"
174,7958322.txt,minor,"	private void createColumns(final Composite parent) {

		final String[] titles = { ""Passing type"", ""Typename"", ""Name"" };
		final int[] bounds = { 100, 200, 280 };

		// pass type
		TableViewerColumn col = createTableViewerColumn(titles[0], bounds[0]);
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getPassType();
			}
		});

		// type name
		col = createTableViewerColumn(titles[1], bounds[1]);
		col.setLabelProvider(new ColumnLabelProvider() {

			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getType();
			}
		});

		// name
		col = createTableViewerColumn(titles[2], bounds[2]);
		col.setEditingSupport(new NameEditingSupport(col.getViewer()));
		col.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				final ParamTableItem p = (ParamTableItem) element;
				return p.getName();
			}
		});
	}"
175,4404036.txt,none,"    public JsonWebKeys(JsonWebKey key) {
        setInitKey(key);
    }"
176,7229219.txt,none,"		@Override
		public final Builder sslContext(SslContext sslContext){
			this.sslContext = Objects.requireNonNull(sslContext, ""sslContext"");
			return this;
		}"
177,7375322.txt,none,"		@Bean
		@ConditionalOnSingleCandidate(RabbitTemplate.class)
		public RabbitMessagingTemplate rabbitMessagingTemplate(
				RabbitTemplate rabbitTemplate) {
			return new RabbitMessagingTemplate(rabbitTemplate);
		}"
178,8996125.txt,none,"  @Override
  public void setup(Http2SolrClient http2Client) {
    HttpAuthenticationStore authenticationStore = new HttpAuthenticationStore();
    authenticationStore.addAuthentication(createSPNEGOAuthentication());
    http2Client.getHttpClient().setAuthenticationStore(authenticationStore);
    http2Client.getProtocolHandlers().put(new WWWAuthenticationProtocolHandler(http2Client.getHttpClient()));
  }"
179,4634029.txt,none,"  public int hashCode() {
    int result = cookie.hashCode();

    for (String file : files) {
      result = PRIME * result + file.hashCode();
    }

    return result;
  }"
180,8662937.txt,none,"        public static void setResultSortOrder(ResultSortOrder resultSortOrder, HttpSession session) {
            ContentSearchOptions contentSearchOptions = getContentSearchOptions(session);
            contentSearchOptions.resultSortOrder = resultSortOrder;
            contentSearchOptions.changed = true;
        }"
181,6119399.txt,none,"    @Override
    public boolean allSatisfy(Predicate<? super T> predicate)
    {
        return this.delegate.allSatisfy(new SelectAllSatisfyPredicate<>(this.predicate, predicate));
    }"
182,7313745.txt,none,"    public CandidatesTable getTable() {
        return table;
    }"
183,9290971.txt,none,"  @Override
  public final Element getDocumentElement()
  {
                int dochandle=dtm.getDocument();
                int elementhandle=DTM.NULL;
                for(int kidhandle=dtm.getFirstChild(dochandle);
                                kidhandle!=DTM.NULL;
                                kidhandle=dtm.getNextSibling(kidhandle))
                {
                        switch(dtm.getNodeType(kidhandle))
                        {
                        case Node.ELEMENT_NODE:
                                if(elementhandle!=DTM.NULL)
                                {
                                        elementhandle=DTM.NULL; // More than one; ill-formed.
                                        kidhandle=dtm.getLastChild(dochandle); // End loop
                                }
                                else
                                        elementhandle=kidhandle;
                                break;

                        // These are harmless; document is still wellformed
                        case Node.COMMENT_NODE:
                        case Node.PROCESSING_INSTRUCTION_NODE:
                        case Node.DOCUMENT_TYPE_NODE:
                                break;

                        default:
                                elementhandle=DTM.NULL; // ill-formed
                                kidhandle=dtm.getLastChild(dochandle); // End loop
                                break;
                        }
                }
                if(elementhandle==DTM.NULL)
                        throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
                else
                        return (Element)(dtm.getNode(elementhandle));
  }"
184,7246708.txt,none,"    public static synchronized HeapDumpOnOOMEAction instance() {
        if (instance == null) 
            instance = new HeapDumpOnOOMEAction();
        return instance;
    }"
185,6266221.txt,minor,"	@Test
	public void checkAlternativeConstructor() {

		// Local Declarations
		MasterDetailsPair mDetailsP;
		DataComponent dComponent;
		String MasterType1 = ""TypeOne!"";
		// Setup DataComponent
		dComponent = new DataComponent();
		dComponent.setName(MasterType1);
		IEntry entry = new StringEntry();
		// Add entry to dComponent
		dComponent.addEntry(entry);

		// Call Alternative Constructor
		mDetailsP = new MasterDetailsPair(MasterType1, dComponent);

		// Check values. Should be typeone and equal to the declared
		// dataComponent
		assertEquals(MasterType1, mDetailsP.getMaster());
		assertTrue(dComponent.equals(mDetailsP.getDetails()));

		// Try to pass null to the constructor - sets values appropriately
		mDetailsP = new MasterDetailsPair(null, dComponent); // null master
		assertNull(mDetailsP.getMaster());
		assertTrue(dComponent.equals(mDetailsP.getDetails()));

		// DataComponent null
		mDetailsP = new MasterDetailsPair(MasterType1, null);
		assertEquals(MasterType1, mDetailsP.getMaster());
		assertNull(mDetailsP.getDetails());

		// Both null
		mDetailsP = new MasterDetailsPair(null, null);
		assertNull(mDetailsP.getMaster());
		assertNull(mDetailsP.getDetails());

	}"
186,8452328.txt,none,"    public TelegramServiceRestBotAPIAdapter(RestBotAPI api) {
        this.api = api;
    }"
187,6284070.txt,none,"    @Override
    public boolean contains(String documentName) {
        requireNonNull(documentName, ""documentName is required"");
        return documents.containsKey(documentName);
    }"
188,4242573.txt,none,"    public static void throwCauseIfTaggedWith(final Throwable throwable, final Object tag)
            throws IOException {
        if (isTaggedWith(throwable, tag)) {
            throw ((TaggedIOException) throwable).getCause();
        }
    }"
189,9111672.txt,minor,"	protected void createButtonGroup( Group grpTop )
	{
		btnAdd = new Button( grpTop, SWT.NONE );
		{
			btnAdd.setText( Messages.getString( ""LineSeriesMarkerSheet.Label.Add"" ) ); //$NON-NLS-1$
			btnAdd.addSelectionListener( this );
		}

		newMarkerEditor = new MarkerEditorComposite( grpTop,
				createMarker( ),
				getContext( ),
				getDefaultMarker( ) );
		if ( markerTypeSet != null )
		{
			newMarkerEditor.setSupportedMarkerTypes( markerTypeSet );
		}
		if ( outlineText != null )
		{
			newMarkerEditor.setOutlineText( outlineText );
		}
		
		btnRemove = new Button( grpTop, SWT.NONE );
		{
			btnRemove.setText( Messages.getString( ""LineSeriesMarkerSheet.Label.Remove"" ) ); //$NON-NLS-1$
			btnRemove.addSelectionListener( this );
		}

		btnUp = new Button( grpTop, SWT.ARROW | SWT.UP );
		{
			btnUp.setToolTipText( Messages.getString( ""PaletteEditorComposite.Lbl.Up"" ) ); //$NON-NLS-1$
			btnUp.addSelectionListener( this );
		}

		btnDown = new Button( grpTop, SWT.ARROW | SWT.DOWN );
		{
			btnDown.setToolTipText( Messages.getString( ""PaletteEditorComposite.Lbl.Down"" ) ); //$NON-NLS-1$
			btnDown.addSelectionListener( this );
		}
	}"
190,7733996.txt,none,"    @Override
    public boolean isDone() {
        return super.isDone();
    }"
191,4909332.txt,none,"    private boolean tryCommit() {
        try {
            NodeState newRoot = nodeStore.merge(rootBuilder, EmptyHook.INSTANCE, CommitInfo.EMPTY);
            totalMigratedNodes += migratedNodes;
            log.info(""{} nodes merged succesfully. Nodes migrated in this session: {}"", migratedNodes, totalMigratedNodes);
            lastCommit = System.currentTimeMillis();
            migratedNodes = 0;

            rootBuilder = newRoot.builder();
            nodeIterator = nodeIterator.switchRoot(newRoot);

            return true;
        } catch (CommitFailedException e) {
            log.error(""Can't commit. Resetting the migrator"", e);
            refreshAndReset(nodeStore.getRoot());
            return false;
        }
    }"
192,7268641.txt,none,"	public String getSalesOrderId() {
		return this.salesOrderId;
	}"
193,7711083.txt,none,"        public final @NotNull Builder setHeader(@NotNull String header) {
            this.setArg2(Unpooled.wrappedBuffer(header.getBytes(StandardCharsets.UTF_8)));
            this.header = header;
            return this;
        }"
194,6406918.txt,none,"		private boolean styleSelected(Item selection) {
			CSSStyleDeclaration selectedStyle = engine.getViewCSS()
					.getComputedStyle(engine.getElement(selection), ""selected"");
			if (selectedStyle == null) {
				return false;
			}

			applyStyles(selectedStyle, ""selected"", selection);
			return true;
		}"
195,4044091.txt,none,"    @Override
    public void serialize(AGeometry instance, DataOutput out) throws HyracksDataException {
        try {
            OGCGeometry geometry = instance.getGeometry();
            byte[] buffer = geometry.asBinary().array();
            // For efficiency, we store the size of the geometry in bytes in the first 32 bits
            // This allows AsterixDB to skip over this attribute if needed.
            out.writeInt(buffer.length);
            out.write(buffer);
        } catch (IOException e) {
            throw HyracksDataException.create(e);
        }
    }"
196,6182357.txt,minor,"  @Override
  public String toString() {
    return ""ExecInfo{""
        + ""id='""
        + id
        + '\''
        + "", container=""
        + container
        + "", processConfig=""
        + processConfig
        + "", openStdout='""
        + openStdout
        + '\''
        + "", openStderr='""
        + openStderr
        + '\''
        + "", openStdin='""
        + openStdin
        + '\''
        + "", running='""
        + running
        + '\''
        + "", exitCode='""
        + exitCode
        + '\''
        + '}';
  }"
197,3782985.txt,none,"    private static boolean parseMsAcmCodecPrivate(ParsableByteArray buffer) throws ParserException {
      try {
        int formatTag = buffer.readLittleEndianUnsignedShort();
        if (formatTag == WAVE_FORMAT_PCM) {
          return true;
        } else if (formatTag == WAVE_FORMAT_EXTENSIBLE) {
          buffer.setPosition(WAVE_FORMAT_SIZE + 6); // unionSamples(2), channelMask(4)
          return buffer.readLong() == WAVE_SUBFORMAT_PCM.getMostSignificantBits()
              && buffer.readLong() == WAVE_SUBFORMAT_PCM.getLeastSignificantBits();
        } else {
          return false;
        }
      } catch (ArrayIndexOutOfBoundsException e) {
        throw new ParserException(""Error parsing MS/ACM codec private"");
      }
    }"
198,4132083.txt,none,"  public SqlSetOperator(
      String name,
      SqlKind kind,
      int prec,
      boolean all) {
    super(
        name,
        kind,
        prec,
        true,
        ReturnTypes.LEAST_RESTRICTIVE,
        null,
        OperandTypes.SET_OP);
    this.all = all;
  }"
199,9122985.txt,none,"	private void checkValid( )
	{
		if ( !valid )
			return;

		if ( cursor == maxLength - 1 )
			valid = false;
	}"
200,4311186.txt,major,"    @Override
    public boolean isValidSyntax( Object value )
    {
        String strValue;

        if ( value == null )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, ""null"" ) );
            }
            
            return false;
        }

        if ( value instanceof String )
        {
            strValue = ( String ) value;
        }
        else if ( value instanceof byte[] )
        {
            strValue = Strings.utf8ToString( ( byte[] ) value );
        }
        else
        {
            strValue = value.toString();
        }

        // We must have at least '(cp)', '(xr)' or '(ca)'
        if ( strValue.length() < 4 )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            
            return false;
        }

        // Check the opening and closing parenthesis
        if ( ( strValue.charAt( 0 ) != '(' )
            || ( strValue.charAt( strValue.length() - 1 ) != ')' ) )
        {
            if ( LOG.isDebugEnabled() )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            
            return false;
        }

        Set<String> keywords = new HashSet<>();
        int len = strValue.length() - 1;
        boolean needKeyword = true;

        // 
        for ( int i = 1; i < len; /* */)
        {
            // Skip spaces
            while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )
            {
                i++;
            }

            int pos = i;

            // Search for a keyword
            while ( ( i < len ) && Chars.isAlphaASCII( strValue, pos ) )
            {
                pos++;
            }

            if ( pos == i )
            {
                // No keyword : error
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            String keyword = strValue.substring( i, pos );
            i = pos;

            if ( !DSE_BITS.contains( keyword ) )
            {
                // Unknown keyword
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            // Check that the keyword has not been met
            if ( keywords.contains( keyword ) )
            {
                if ( LOG.isDebugEnabled() )
                {
                    LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
                }
                
                return false;
            }

            keywords.add( keyword );
            needKeyword = false;

            // Skip spaces
            while ( ( i < len ) && ( strValue.charAt( i ) == ' ' ) )
            {
                i++;
            }

            // Do we have another keyword ?
            if ( ( i < len ) && ( strValue.charAt( i ) == '$' ) )
            {
                // yes
                i++;
                needKeyword = true;
            }
        }

        // We are done
        if ( LOG.isDebugEnabled() )
        {
            if ( needKeyword )
            {
                LOG.debug( I18n.err( I18n.ERR_13210_SYNTAX_INVALID, value ) );
            }
            else
            {
                LOG.debug( I18n.msg( I18n.MSG_13701_SYNTAX_VALID, value ) );
            }
        }

        return !needKeyword;
    }"
201,4364314.txt,none,"    public void finer(String msg) {
        if (isLoggable(Level.FINER)) {
            LogRecord lr = new LogRecord(Level.FINER, msg);
            doLog(lr);
        }
    }"
202,5328561.txt,none,"        @Override
        public void process(OutputStream out) throws IOException {
            IOUtils.write(""<docs>"", out, StandardCharsets.UTF_8);
            for (SolrDocument doc : response.getResults()) {
                final String xml = ClientUtils.toXML(toSolrInputDocument(doc));
                IOUtils.write(xml, out, StandardCharsets.UTF_8);
            }
            IOUtils.write(""</docs>"", out, StandardCharsets.UTF_8);
        }"
203,9012946.txt,none,"  @Override
  public String getInflectionForm(int wordId) {
    return inflFormDict[getLeftId(wordId)];
  }"
204,6300889.txt,none,"    protected void copyHeaders(WebSocketFrame copy)
    {
        finRsvOp = copy.finRsvOp;
        masked = copy.masked;
        mask = null;
        if (copy.mask != null)
            mask = Arrays.copyOf(copy.mask, copy.mask.length);
    }"
205,5586619.txt,none,"  @Override
  public InputStream getInputStream() throws IOException {
    return new FileInputStream(file);
  }"
206,4960036.txt,none,"	@Override /* ContextBuilder */
	public JsonSchemaSerializerBuilder set(Map<String,Object> properties) {
		super.set(properties);
		return this;
	}"
207,4995171.txt,major,"    public Object doExecute() throws Exception {

        Group group = groupManager.findGroupByName(groupName);
        if (group == null) {
            System.err.println(""Cluster group "" + groupName + "" doesn't exist"");
            return null;
        }

        CellarSupport support = new CellarSupport();
        support.setClusterManager(clusterManager);
        support.setGroupManager(groupManager);
        support.setConfigurationAdmin(configurationAdmin);

        if (!in && !out) {
            in = true;
            out = true;
        }
        if (!whitelist && !blacklist) {
            whitelist = true;
            blacklist = true;
        }

        if (pid == null || pid.isEmpty()) {
            // display mode
            if (in) {
                System.out.println(""INBOUND:"");
                if (whitelist) {
                    System.out.print(""\twhitelist: "");
                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND);
                    System.out.println(list.toString());
                }
                if (blacklist) {
                    System.out.print(""\tblacklist: "");
                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND);
                    System.out.println(list.toString());
                }
            }
            if (out) {
                System.out.println(""OUTBOUND:"");
                if (whitelist) {
                    System.out.print(""\twhitelist: "");
                    Set<String> list = support.getListEntries(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);
                    System.out.println(list.toString());
                }
                if (blacklist) {
                    System.out.print(""\tblacklist: "");
                    Set<String> list = support.getListEntries(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND);
                    System.out.println(list.toString());
                }
            }
        } else {
            // edit mode
            System.out.println(""Updating blocking policy for "" + pid);
            if (in) {
                if (whitelist) {
                    System.out.println(""\tinbound whitelist ..."");
                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);
                }
                if (blacklist) {
                    System.out.println(""\tinbound blacklist ..."");
                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.INBOUND, pid);
                }
            }
            if (out) {
                if (whitelist) {
                    System.out.println(""\toutbound whitelist ..."");
                    support.switchListEntry(Configurations.WHITELIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);
                }
                if (blacklist) {
                    System.out.println(""\toutbound blacklist ..."");
                    support.switchListEntry(Configurations.BLACKLIST, groupName, Constants.CATEGORY, EventType.OUTBOUND, pid);
                }
            }
        }

        return null;
    }"
208,8067122.txt,none,"		public TitanBoolean constGet_at( final int index_value ) {
			must_bound( ""Accessing an element in an unbound value of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED."" );
			if (index_value < 0) {
				throw new TtcnError( ""Accessing an element of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED using a negative index: ""+index_value+""."");
			}
			final int nofElements = n_elem().get_int();
			if ( index_value >= nofElements ) {
				throw new TtcnError( ""Index overflow in a value of type @PreGenRecordOf.PREGEN_SET_OF_BOOLEAN_OPTIMIZED: The index is ""+index_value+"", but the value has only ""+nofElements+"" elements."" );
			}

			final TitanBoolean elem = valueElements.get( index_value );
			return ( elem == null ) ? get_unbound_elem(): elem ;
		}"
209,8201369.txt,none,"	public IGrammarAwareElementType getInfixExpression_NameIDTerminalRuleCall_1_0_2_0ElementType() {
		return InfixExpression_NameIDTerminalRuleCall_1_0_2_0_ELEMENT_TYPE;
	}"
210,8937277.txt,none,"  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Byte)value);
      }
      break;

    }
  }"
211,6725232.txt,none,"    public APIRequestDelete requestAllFields (boolean value) {
      for (String field : FIELDS) {
        this.requestField(field, value);
      }
      return this;
    }"
212,7119679.txt,none,"	public void setMsg(String msg) {
		this.msg = msg;
	}"
213,7504433.txt,none,"	@Override
	public Cursor<T> open() {
		this.delegate = delegate.open();
		return this;
	}"
214,7379790.txt,none,"	@Override
	public boolean supportsParameter(MethodParameter parameter) {

		if (!super.supportsParameter(parameter)) {
			return false;
		}

		Class<?> type = parameter.getParameterType();

		if (!type.isInterface()) {
			return false;
		}

		// Annotated parameter
		if (parameter.getParameterAnnotation(ProjectedPayload.class) != null) {
			return true;
		}

		// Annotated type
		if (AnnotatedElementUtils.findMergedAnnotation(type, ProjectedPayload.class) != null) {
			return true;
		}

		// Fallback for only user defined interfaces
		String packageName = ClassUtils.getPackageName(type);

		return !IGNORED_PACKAGES.stream().anyMatch(it -> packageName.startsWith(it));
	}"
215,6962878.txt,none,"  @Override
  public <T> T callWithTimeout(Callable<T> callable, long timeoutDuration, TimeUnit timeoutUnit)
      throws ExecutionException {
    checkNotNull(callable);
    checkNotNull(timeoutUnit);
    try {
      return callable.call();
    } catch (RuntimeException e) {
      throw new UncheckedExecutionException(e);
    } catch (Exception e) {
      throw new ExecutionException(e);
    } catch (Error e) {
      throw new ExecutionError(e);
    } catch (Throwable e) {
      // It's a non-Error, non-Exception Throwable. Such classes are usually intended to extend
      // Exception, so we'll treat it like an Exception.
      throw new ExecutionException(e);
    }
  }"
216,5965453.txt,none,"    private boolean hasCmpPersistenceUnit(final Persistence persistence) {
        for (final PersistenceUnit unit : persistence.getPersistenceUnit()) {
            if (unit.getName().startsWith(""cmp"")) {
                return true;
            }
        }
        return false;
    }"
217,7337150.txt,none,"    public _Job[] listJobs()
        throws TransportException, SOAPFault
    {
        final _ReportingService2005Soap_ListJobs requestData = new _ReportingService2005Soap_ListJobs();

        final SOAPRequest request = createSOAPRequest(
                ""ListJobs"",
                new SOAPMethodRequestWriter()
                {
                    public void writeSOAPRequest(
                        final XMLStreamWriter writer,
                        final OutputStream out)
                        throws XMLStreamException, IOException
                    {
                        requestData.writeAsElement(
                            writer,
                            ""ListJobs"");
                    }
                });

        final _ReportingService2005Soap_ListJobsResponse responseData = new _ReportingService2005Soap_ListJobsResponse();

        executeSOAPRequest(
            request,
            ""ListJobsResponse"",
            new SOAPMethodResponseReader()
            {
                public void readSOAPResponse(
                    final XMLStreamReader reader,
                    final InputStream in)
                    throws XMLStreamException, IOException
                {
                    responseData.readFromElement(reader);
                }
            });

        return responseData.getJobs();
    }"
218,8181080.txt,none,"    public long getConsumerFailoverRedeliveryWaitPeriod() {
        return consumerFailoverRedeliveryWaitPeriod;
    }"
219,6487817.txt,none,"	public UDATA add(UDATA parameter) {
		return new UDATA(this).add(parameter);
	}"
220,8348686.txt,none,"	private static final void getPathComponents(String path, ArrayList<String> list) {
		if (path != null) {
			StringTokenizer tok = new StringTokenizer(path, File.pathSeparator);

			while (tok.hasMoreTokens()) {
				String name = tok.nextToken();
				File file = new File(name);

				if (file.exists())
					list.add(name);
			}
		}
	}"
221,3839255.txt,none,"    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OUCH1:
        return getOuch1();

      case OUCH2:
        return getOuch2();

      }
      throw new java.lang.IllegalStateException();
    }"
222,8857568.txt,none,"  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_value = true && (isSetValue());
    list.add(present_value);
    if (present_value)
      list.add(value);

    boolean present_envPathOrder = true && (isSetEnvPathOrder());
    list.add(present_envPathOrder);
    if (present_envPathOrder)
      list.add(envPathOrder);

    return list.hashCode();
  }"
223,4975742.txt,none,"    private void to(final TopicNameExtractor<K, V> topicExtractor, final ProducedInternal<K, V> produced) {
        final String name = builder.newProcessorName(SINK_NAME);

        final StreamSinkNode<K, V> sinkNode = new StreamSinkNode<>(
            name,
            topicExtractor,
            produced
        );

        builder.addGraphNode(this.streamsGraphNode, sinkNode);
    }"
224,5782140.txt,none,"    @Override
    public void onVertexManagerEventReceived(VertexManagerEvent vmEvent)
        throws Exception {
      if (LOG.isDebugEnabled()) {
        LOG.debug(""onVertexManagerEventReceived is invoked in NoOpVertexManager, vertex="" + getContext().getVertexName());
      }
    }"
225,9050114.txt,none,"	public void test087() {
		DefaultCodeFormatterOptions preferences = new DefaultCodeFormatterOptions(DefaultCodeFormatterConstants.getEclipse21Settings());
		preferences.tab_char = DefaultCodeFormatterOptions.TAB;
		preferences.keep_simple_if_on_one_line = true;
		DefaultCodeFormatter codeFormatter = new DefaultCodeFormatter(preferences);
		runTest(codeFormatter, ""test087"", ""A.java"", CodeFormatter.K_STATEMENTS);//$NON-NLS-1$ //$NON-NLS-2$
	}"
226,8095851.txt,minor,"	@Override
	/** {@inheritDoc} */
	public IType getFieldType(final CompilationTimeStamp timestamp, final Reference reference, final int actualSubReference,
			final Expected_Value_type expectedIndex, final IReferenceChain refChain, final boolean interruptIfOptional) {
		final List<ISubReference> subreferences = reference.getSubreferences();
		if (subreferences.size() <= actualSubReference) {
			return this;
		}

		final ISubReference subreference = subreferences.get(actualSubReference);
		switch (subreference.getReferenceType()) {
		case arraySubReference:
			subreference.getLocation().reportSemanticError(MessageFormat.format(ArraySubReference.INVALIDSUBREFERENCE, getTypename()));
			return null;
		case fieldSubReference:
			subreference.getLocation().reportSemanticError(
					MessageFormat.format(FieldSubReference.INVALIDSUBREFERENCE, ((FieldSubReference) subreference).getId().getDisplayName(),
							getTypename()));
			return null;
		case parameterisedSubReference:
			subreference.getLocation().reportSemanticError(
					MessageFormat.format(FieldSubReference.INVALIDSUBREFERENCE, ((ParameterisedSubReference) subreference).getId().getDisplayName(),
							getTypename()));
			return null;
		default:
			subreference.getLocation().reportSemanticError(ISubReference.INVALIDSUBREFERENCE);
			return null;
		}
	}"
227,6680697.txt,none,"    public APIRequestGet requestSourceField (boolean value) {
      this.requestField(""source"", value);
      return this;
    }"
228,5328591.txt,none,"    @Override
    public Map<String, FlowFileEvent> getReportEntries() {
        return Collections.unmodifiableMap(entries);
    }"
229,7558115.txt,none,"	public OperationResponse create(HttpStatus status, HttpHeaders headers,
			byte[] content) {
		return new StandardOperationResponse(status, augmentHeaders(headers, content),
				content);
	}"
230,8655527.txt,none,"    private IgniteFuture<UUID> startRemoteListenAsync(BinaryRawReaderEx reader, IgniteMessaging messaging) {
        Object nativeFilter = reader.readObjectDetached();

        long ptr = reader.readLong();  // interop pointer

        Object topic = reader.readObjectDetached();

        PlatformMessageFilter filter = platformCtx.createRemoteMessageFilter(nativeFilter, ptr);

        return messaging.remoteListenAsync(topic, filter);
    }"
231,8510687.txt,none,"    @DB()
    protected void setField(final Object entity, final ResultSet rs, ResultSetMetaData meta, final int index) throws SQLException {
        Attribute attr = _allColumns.get(new Pair<String, String>(meta.getTableName(index), meta.getColumnName(index)));
        if (attr == null) {
            // work around for mysql bug to return original table name instead of view name in db view case
            Table tbl = entity.getClass().getSuperclass().getAnnotation(Table.class);
            if (tbl != null) {
                attr = _allColumns.get(new Pair<String, String>(tbl.name(), meta.getColumnLabel(index)));
            }
        }
        assert (attr != null) : ""How come I can't find "" + meta.getCatalogName(index) + ""."" + meta.getColumnName(index);
        setField(entity, attr.field, rs, index);
    }"
232,4447157.txt,none,"    public void mergeFrom(Input input, RunQuery message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.resultsMode = QueryResultsMode.valueOf(input.readEnum());
                    break;
                case 2:
                    message.type = QueryType.valueOf(input.readEnum());
                    break;
                case 3:
                    message.plan = input.readString();
                    break;
                case 4:
                    if(message.fragments == null)
                        message.fragments = new ArrayList<PlanFragment>();
                    message.fragments.add(input.mergeObject(null, PlanFragment.getSchema()));
                    break;

                case 5:
                    message.preparedStatementHandle = input.mergeObject(message.preparedStatementHandle, PreparedStatementHandle.getSchema());
                    break;

                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }"
233,4595799.txt,none,"  public void clear() {
    size = 0;
  }"
234,8599703.txt,none,"  @Override
  protected boolean startTransition(final MasterProcedureEnv env, final RegionStateNode regionNode)
      throws IOException {
    return true;
  }"
235,8224570.txt,none,"    public final Boolean ruleValueLiteral() throws RecognitionException {
        Boolean current = false;
        int ruleValueLiteral_StartIndex = input.index();
        Token lv_value_0_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return current; }
            // PsiInternalBeeLangTestLanguage.g:5259:1: ( ( (lv_value_0_0= RULE_STRING ) ) )
            // PsiInternalBeeLangTestLanguage.g:5260:2: ( (lv_value_0_0= RULE_STRING ) )
            {
            // PsiInternalBeeLangTestLanguage.g:5260:2: ( (lv_value_0_0= RULE_STRING ) )
            // PsiInternalBeeLangTestLanguage.g:5261:3: (lv_value_0_0= RULE_STRING )
            {
            // PsiInternalBeeLangTestLanguage.g:5261:3: (lv_value_0_0= RULE_STRING )
            // PsiInternalBeeLangTestLanguage.g:5262:4: lv_value_0_0= RULE_STRING
            {
            if ( state.backtracking==0 ) {

              				markLeaf(elementTypeProvider.getValueLiteral_ValueSTRINGTerminalRuleCall_0ElementType());
              			
            }
            lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return current;
            if ( state.backtracking==0 ) {

              				if(!current) {
              					associateWithSemanticElement();
              					current = true;
              				}
              			
            }
            if ( state.backtracking==0 ) {

              				doneLeaf(lv_value_0_0);
              			
            }

            }


            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, ruleValueLiteral_StartIndex); }
        }
        return current;
    }"
236,6458150.txt,none,"    public Optional<UserEntity> getUser ( final String userId )
    {
        return Optional.ofNullable ( this.userMap.get ( userId ) );
    }"
237,5801932.txt,none,"    public static Asset2 toAsset2(final Asset asset)
    {
        if (asset instanceof Asset2)
            return (Asset2) asset;

        return new Asset2()
        {
            /** Returns false. */
            public boolean isInvariant()
            {
                return false;
            }

            public Resource getResource()
            {
                return asset.getResource();
            }

            public String toClientURL()
            {
                return asset.toClientURL();
            }

            @Override
            public String toString()
            {
                return asset.toString();
            }
        };
    }"
238,6145494.txt,none,"	protected ScriptDebugConsole createConsole(ILaunch launch) {
		final String encoding = selectEncoding(launch);
		final IProcess[] processes = launch.getProcesses();
		final IProcess process = processes.length != 0 ? processes[0] : null;
		final IConsoleColorProvider colorProvider = getColorProvider(
				process != null
						? process.getAttribute(IProcess.ATTR_PROCESS_TYPE)
						: null);
		final ScriptDebugConsole console = new ScriptDebugConsole(launch,
				computeName(launch), null, encoding, colorProvider);
		if (process != null) {
			console.setAttribute(IDebugUIConstants.ATTR_CONSOLE_PROCESS,
					process);
			if (process instanceof IScriptProcess) {
				console.connect((IScriptProcess) process);
			}
		}
		final IConsoleManager manager = getConsoleManager();
		manager.addConsoles(new IConsole[] { console });
		manager.showConsoleView(console);
		return console;
	}"
239,6850124.txt,none,"  public CGraphPanelSynchronizer(final CGraphModel model, final CGraphWindowMenuBar menuBar) {
    m_model = Preconditions.checkNotNull(model, ""IE01618: Model argument can not be null"");
    m_menuBar = Preconditions.checkNotNull(menuBar, ""IE01620: Menu bar argument can not be null"");

    m_clickHandler = new CNodeClickHandler(model);

    m_model.getGraph().addListener(m_graphListener);
    m_model.getGraph().getRawView().addListener(m_viewListener);
  }"
240,7121075.txt,none,"    protected void runFunctions(final CommandHandler handler) throws Exception {        
        handler.runCommandWithReturnCodeCheck(
                getStartFunctionHostCommand(),
                true, /* showStdout */
                getDeploymentStagingDirectoryPath(),
                CommandUtils.getValidReturnCodes(),
                RUN_FUNCTIONS_FAILURE
        );
    }"
241,4613952.txt,none,"    public static boolean disjoint(Iterable left, Iterable right) {
        Collection leftCol = asCollection(left);
        Collection rightCol = asCollection(right);

        if (leftCol.isEmpty() || rightCol.isEmpty())
            return true;

        Collection pickFrom = new TreeSet(new NumberAwareComparator());
        pickFrom.addAll(rightCol);

        for (final Object o : leftCol) {
            if (pickFrom.contains(o))
                return false;
        }
        return true;
    }"
242,4687004.txt,none,"  @Override
  public void close() throws IOException {
    IOUtils.cleanup(null, src);
    factory.close();
  }"
243,6389069.txt,none,"    private FocusListener getButtonFocusListener() {
    	if (buttonFocusListener == null) {
    		buttonFocusListener = new FocusListener() {

				@Override
				public void focusGained(FocusEvent e) {
					// Do nothing
				}

				@Override
				public void focusLost(FocusEvent e) {
					DialogCellEditor.this.focusLost();
				}
    		};
    	}

    	return buttonFocusListener;
	}"
244,8332252.txt,none,"	void m64(C0 arg) {
		i0++;
		i1++;
		i2++;
		i3++;
		i4++;
		i5++;
		i6++;
		i7++;
		i8++;
		i9++;
	}"
245,6328915.txt,none,"    public String getUserName() {
        return userName;
    }"
246,7094329.txt,minor,"    private static void writeFinalRule(Writer writer, boolean isDst, AnnualTimeZoneRule rule,
            int fromRawOffset, int fromDSTSavings, long startTime) throws IOException{
        DateTimeRule dtrule = toWallTimeRule(rule.getRule(), fromRawOffset, fromDSTSavings);

        // If the rule's mills in a day is out of range, adjust start time.
        // Olson tzdata supports 24:00 of a day, but VTIMEZONE does not.
        // See ticket#7008/#7518

        int timeInDay = dtrule.getRuleMillisInDay();
        if (timeInDay < 0) {
            startTime = startTime + (0 - timeInDay);
        } else if (timeInDay >= Grego.MILLIS_PER_DAY) {
            startTime = startTime - (timeInDay - (Grego.MILLIS_PER_DAY - 1));
        }

        int toOffset = rule.getRawOffset() + rule.getDSTSavings();
        switch (dtrule.getDateRuleType()) {
        case DateTimeRule.DOM:
            writeZonePropsByDOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW:
            writeZonePropsByDOW(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleWeekInMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW_GEQ_DOM:
            writeZonePropsByDOW_GEQ_DOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        case DateTimeRule.DOW_LEQ_DOM:
            writeZonePropsByDOW_LEQ_DOM(writer, isDst, rule.getName(), fromRawOffset + fromDSTSavings, toOffset,
                    dtrule.getRuleMonth(), dtrule.getRuleDayOfMonth(), dtrule.getRuleDayOfWeek(), startTime, MAX_TIME);
            break;
        }
    }"
247,9376700.txt,minor,"    public void Blit(SurfaceData src, SurfaceData dst,
                     Composite comp, Region clip,
                     int srcx, int srcy, int dstx, int dsty, int w, int h)
    {
        Raster srcRast = src.getRaster(srcx, srcy, w, h);
        IntegerComponentRaster icr = (IntegerComponentRaster) srcRast;
        int[] srcPix = icr.getDataStorage();

        WritableRaster dstRast =
            (WritableRaster) dst.getRaster(dstx, dsty, w, h);
        ColorModel dstCM = dst.getColorModel();

        Region roi = CustomComponent.getRegionOfInterest(src, dst, clip,
                                                         srcx, srcy,
                                                         dstx, dsty, w, h);
        SpanIterator si = roi.getSpanIterator();

        Object dstPix = null;

        int srcScan = icr.getScanlineStride();
        // assert(icr.getPixelStride() == 1);
        srcx -= dstx;
        srcy -= dsty;
        int[] span = new int[4];
        while (si.nextSpan(span)) {
            int rowoff = (icr.getDataOffset(0) +
                          (srcy + span[1]) * srcScan +
                          (srcx + span[0]));
            for (int y = span[1]; y < span[3]; y++) {
                int off = rowoff;
                for (int x = span[0]; x < span[2]; x++) {
                    dstPix = dstCM.getDataElements(srcPix[off++], dstPix);
                    dstRast.setDataElements(x, y, dstPix);
                }
                rowoff += srcScan;
            }
        }
        // REMIND: We need to do something to make sure that dstRast
        // is put back to the destination (as in the native Release
        // function)
        // src.releaseRaster(srcRast);  // NOP?
        // dst.releaseRaster(dstRast);
    }"
248,6488574.txt,none,"	public ImageProcess(String pid, String commandLine, Properties environment, ImageThread currentThread, Iterator threads, ImageModule executable, Iterator libraries, int pointerSize)
	{
		_id = pid;
		_commandLine = commandLine;
		_environment = environment;
		setCurrentThread(currentThread);
		setThreads(threads);
		_executable = executable;
		while (libraries.hasNext()) {
			_libraries.add(libraries.next());
		}
		_pointerSize = pointerSize;
	}"
249,9045352.txt,none,"	public void foo1() {
		fField1 = fField2;
		if (fField1 == 0) {
			fField2++;
		}
		EInner inner = new EInner();
	}"
250,7889326.txt,none,"    @Override
    public <T> Optional<T> createOptional(ValueTypeInfo<T> innerType) throws IOException {
      if (stream.readBoolean()) {
        return Optional.of(innerType.createNotNull(this));
      }
      return Optional.empty();
    }"
251,5487652.txt,none,"    public Interaction open() throws Exception
    {
        return _interaction.sendPerformative(new ConnectionOpenBody(AMQShortString.valueOf(_openVirtualHost),
                                                                    null,
                                                                    false));
    }"
252,7797001.txt,none,"  @Override
  public String composeName(String name, String prefix) throws NamingException {
    checkIsDestroyed();
    return composeName(nameParser.parse(name), nameParser.parse(prefix)).toString();
  }"
253,9173375.txt,none,"	protected void openHyperlink( HyperlinkInfo info )
	{
		if ( info == null )
		{
			return;
		}
		writer.openTag( ""w:hlink"" );
		if ( HyperlinkInfo.BOOKMARK == info.getType( ) )
		{
			writer.attribute( ""w:bookmark"", info.getUrl( ) );
		}
		else if ( HyperlinkInfo.HYPERLINK == info.getType( ) )
		{
			writer.attribute( ""w:dest"", info.getUrl( ) );
			if ( info.getBookmark( ) != null )
			{
				writer.attribute( ""w:bookmark"", info.getBookmark( ) );
			}
		}
		if ( info.getTooltip( ) != null )
		{
			writer.attribute( ""w:screenTip"", info.getTooltip( ) );
		}
	}"
254,8141607.txt,none,"	@Override
	public void setVisible(boolean visible) {
		if (visible) {
			if(isInitialName) 
				setPageComplete(false);
			else 
				setPageComplete(validatePage(true));
			updatePreview();
			textField.setFocus();
		}
		super.setVisible(visible);
	}"
255,6518475.txt,none,"    public Collection<String> getAdded() {
      return added;
    }"
256,5004854.txt,none,"  public UrlRewriteContextImpl(
      UrlRewriteEnvironment environment,
      Resolver resolver,
      Map<String,UrlRewriteFunctionProcessor> functions,
      UrlRewriter.Direction direction,
      Template url ) {
    this.environment = environment;
    this.resolver = resolver;
    this.functions = functions;
    this.params = new ContextParameters();
    this.evaluator = new ContextEvaluator();
    this.direction = direction;
    this.originalUrl = url;
    this.currentUrl = url;
  }"
257,3709545.txt,none,"    public static com.android.aapt.Resources.Source parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }"
258,9078577.txt,minor,"	Iterable<? extends File> getDefaultClasspath() {
		// default classpath
		ArrayList<File> files = new ArrayList<>();
		String classProp = System.getProperty(""java.class.path""); //$NON-NLS-1$
		if ((classProp == null) || (classProp.length() == 0)) {
			return null;
		} else {
			StringTokenizer tokenizer = new StringTokenizer(classProp, File.pathSeparator);
			String token;
			while (tokenizer.hasMoreTokens()) {
				token = tokenizer.nextToken();
				File file = new File(token);
				if (file.exists()) {
					files.add(file);
				}
			}
		}
		return files;
	}"
259,6311678.txt,none,"    @Then(""^I find (\\d+) devices?$"")
    public void checkDeviceListLength(int cnt) {
        Assert.assertNotNull(stepData.get(""DeviceList""));
        Assert.assertEquals(cnt, ((DeviceListResultImpl) stepData.get(""DeviceList"")).getSize());
    }"
260,7115420.txt,none,"  public Iterable<VariableElement> getImplicitPostfixParams(TypeElement type) {
    if (ElementUtil.isEnum(type)) {
      return implicitEnumParams;
    }
    return Collections.emptyList();
  }"
261,5622695.txt,none,"    public void emitBindableImplementsConstructorCode(boolean popIndent) {
        writeNewline(""// Compiler generated Binding support implementation:"");
        String dispatcherClass = getEmitter().formatQualifiedName(DISPATCHER_CLASS_QNAME);
        write(ASEmitterTokens.THIS);
        write(ASEmitterTokens.MEMBER_ACCESS);
        write(BINDABLE_DISPATCHER_NAME);
        write(ASEmitterTokens.SPACE);
        write(ASEmitterTokens.EQUAL);
        write(ASEmitterTokens.SPACE);
        write(ASEmitterTokens.NEW);
        write(ASEmitterTokens.SPACE);
        write(dispatcherClass);
        write(ASEmitterTokens.PAREN_OPEN);
        write(ASEmitterTokens.THIS);
        write(ASEmitterTokens.PAREN_CLOSE);
        writeNewline(ASEmitterTokens.SEMICOLON);
        if (popIndent) writeNewline("""",false);
        else writeNewline();

    }"
262,3834247.txt,none,"      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNamespaceIteratorSetting_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new IteratorSetting();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch1 = new AccumuloException();
          struct.ouch1.read(iprot);
          struct.setOuch1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.ouch2 = new AccumuloSecurityException();
          struct.ouch2.read(iprot);
          struct.setOuch2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.ouch3 = new NamespaceNotFoundException();
          struct.ouch3.read(iprot);
          struct.setOuch3IsSet(true);
        }
      }"
263,5698044.txt,none,"    private Object getValue(Map context, Object value) {
         Class lastClass = (Class) context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);
         String lastProperty = (String) context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);
         if (lastClass == null || lastProperty == null) {
             return value;
         }
         Class elementClass = objectTypeDeterminer.getElementClass(lastClass, lastProperty, null);
         if (elementClass == null) {
             return value; // nothing is specified, we assume it will be the value passed in.
         }
         return xworkConverter.convertValue(context, value, elementClass);
    }"
264,7485370.txt,none,"	public Customer1085Service(Customer1085Repository repo) {
	}"
265,4288257.txt,none,"    private boolean checkSecurityToken(FedizResponse response) {
        if (response == null) {
            return false;
        }
        long currentTime = System.currentTimeMillis();
        return response.getTokenExpires().getTime() > currentTime;
    }"
266,7197581.txt,major,"    @Override
    public java.util.concurrent.Future<UpdateStackResponse> updateStack(
            final UpdateStackRequest request,
            final com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>
                    handler) {
        LOG.trace(""Called async updateStack"");
        final UpdateStackRequest interceptedRequest =
                UpdateStackConverter.interceptRequest(request);
        final com.oracle.bmc.http.internal.WrappedInvocationBuilder ib =
                UpdateStackConverter.fromRequest(client, interceptedRequest);
        final com.google.common.base.Function<javax.ws.rs.core.Response, UpdateStackResponse>
                transformer = UpdateStackConverter.fromResponse();

        com.oracle.bmc.responses.AsyncHandler<UpdateStackRequest, UpdateStackResponse>
                handlerToUse = handler;
        if (handler != null
                && this.authenticationDetailsProvider
                        instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            handlerToUse =
                    new com.oracle.bmc.util.internal.RefreshAuthTokenWrappingAsyncHandler<
                            UpdateStackRequest, UpdateStackResponse>(
                            (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                                    this.authenticationDetailsProvider,
                            handler) {
                        @Override
                        public void retryCall() {
                            final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response>
                                    onSuccess =
                                            new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                                    this, transformer, interceptedRequest);
                            final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                                    new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                            this, interceptedRequest);
                            client.put(
                                    ib,
                                    interceptedRequest.getUpdateStackDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    };
        }

        final com.oracle.bmc.util.internal.Consumer<javax.ws.rs.core.Response> onSuccess =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.SuccessConsumer<>(
                                handlerToUse, transformer, interceptedRequest);
        final com.oracle.bmc.util.internal.Consumer<Throwable> onError =
                (handler == null)
                        ? null
                        : new com.oracle.bmc.http.internal.ErrorConsumer<>(
                                handlerToUse, interceptedRequest);

        java.util.concurrent.Future<javax.ws.rs.core.Response> responseFuture =
                client.put(
                        ib,
                        interceptedRequest.getUpdateStackDetails(),
                        interceptedRequest,
                        onSuccess,
                        onError);

        if (this.authenticationDetailsProvider
                instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider) {
            return new com.oracle.bmc.util.internal.RefreshAuthTokenTransformingFuture<
                    javax.ws.rs.core.Response, UpdateStackResponse>(
                    responseFuture,
                    transformer,
                    (com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)
                            this.authenticationDetailsProvider,
                    new com.google.common.base.Supplier<
                            java.util.concurrent.Future<javax.ws.rs.core.Response>>() {
                        @Override
                        public java.util.concurrent.Future<javax.ws.rs.core.Response> get() {
                            return client.put(
                                    ib,
                                    interceptedRequest.getUpdateStackDetails(),
                                    interceptedRequest,
                                    onSuccess,
                                    onError);
                        }
                    });
        } else {
            return new com.oracle.bmc.util.internal.TransformingFuture<>(
                    responseFuture, transformer);
        }
    }"
267,7092657.txt,major,"    public int next()
    {
      final int startNode = _startNode;
      if (_startNode == NULL) {
        return NULL;
      }

      int node = _currentNode;

      int expType;
      final int nodeType = _nodeType;

      if (nodeType != DTM.ELEMENT_NODE)
      {
        do
        {
          node++;
	  expType = _exptype2(node);

          if (NULL == expType || _parent2(node) < startNode && startNode != node) {
            _currentNode = NULL;
            return END;
          }
        }
        while (expType != nodeType);
      }
      // %OPT% If the start node is root (e.g. in the case of //node),
      // we can save the isDescendant() check, because all nodes are
      // descendants of root.
      else if (startNode == DTMDefaultBase.ROOTNODE)
      {
	do
	{
	  node++;
	  expType = _exptype2(node);

	  if (NULL == expType) {
	    _currentNode = NULL;
	    return END;
	  }
	} while (expType < DTM.NTYPES
	        || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);
      }
      else
      {
        do
        {
          node++;
	  expType = _exptype2(node);

          if (NULL == expType || _parent2(node) < startNode && startNode != node) {
            _currentNode = NULL;
            return END;
          }
        }
        while (expType < DTM.NTYPES
	       || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);
      }

      _currentNode = node;
      return returnNode(makeNodeHandle(node));
    }"
268,7323707.txt,none,"    public boolean isVisible(final IStructuredSelection selection) {
        final ChangeItem[] changes = (ChangeItem[]) SelectionUtils.selectionToArray(getSelection(), ChangeItem.class);

        // Enable for any delete
        for (final ChangeItem change : changes) {
            if (change.getChangeType().contains(ChangeType.DELETE)) {
                return true;
            }
        }

        return false;
    }"
269,9377204.txt,major,"    public void paintComponent(Graphics g)  {
        XPStyle xp = XPStyle.getXP();

        paintTitleBackground(g);

        String title = frame.getTitle();
        if (title != null) {
            boolean isSelected = frame.isSelected();
            Font oldFont = g.getFont();
            Font newFont = (titleFont != null) ? titleFont : getFont();
            g.setFont(newFont);

            // Center text vertically.
            FontMetrics fm = SwingUtilities2.getFontMetrics(frame, g, newFont);
            int baseline = (getHeight() + fm.getAscent() - fm.getLeading() -
                    fm.getDescent()) / 2;

            Rectangle lastIconBounds = new Rectangle(0, 0, 0, 0);
            if (frame.isIconifiable()) {
                lastIconBounds = iconButton.getBounds();
            } else if (frame.isMaximizable()) {
                lastIconBounds = maxButton.getBounds();
            } else if (frame.isClosable()) {
                lastIconBounds = closeButton.getBounds();
            }

            int titleX;
            int titleW;
            int gap = 2;
            if (WindowsGraphicsUtils.isLeftToRight(frame)) {
                if (lastIconBounds.x == 0) { // There are no icons
                    lastIconBounds.x = frame.getWidth() - frame.getInsets().right;
                }
                titleX = systemLabel.getX() + systemLabel.getWidth() + gap;
                if (xp != null) {
                    titleX += 2;
                }
                titleW = lastIconBounds.x - titleX - gap;
            } else {
                if (lastIconBounds.x == 0) { // There are no icons
                    lastIconBounds.x = frame.getInsets().left;
                }
                titleW = SwingUtilities2.stringWidth(frame, fm, title);
                int minTitleX = lastIconBounds.x + lastIconBounds.width + gap;
                if (xp != null) {
                    minTitleX += 2;
                }
                int availableWidth = systemLabel.getX() - gap - minTitleX;
                if (availableWidth > titleW) {
                    titleX = systemLabel.getX() - gap - titleW;
                } else {
                    titleX = minTitleX;
                    titleW = availableWidth;
                }
            }
            title = getTitle(frame.getTitle(), fm, titleW);

            if (xp != null) {
                String shadowType = null;
                if (isSelected) {
                    shadowType = xp.getString(this, Part.WP_CAPTION,
                                              State.ACTIVE, Prop.TEXTSHADOWTYPE);
                }
                if (""single"".equalsIgnoreCase(shadowType)) {
                    Point shadowOffset = xp.getPoint(this, Part.WP_WINDOW, State.ACTIVE,
                                                     Prop.TEXTSHADOWOFFSET);
                    Color shadowColor  = xp.getColor(this, Part.WP_WINDOW, State.ACTIVE,
                                                     Prop.TEXTSHADOWCOLOR, null);
                    if (shadowOffset != null && shadowColor != null) {
                        g.setColor(shadowColor);
                        SwingUtilities2.drawString(frame, g, title,
                                     titleX + shadowOffset.x,
                                     baseline + shadowOffset.y);
                    }
                }
            }
            g.setColor(isSelected ? selectedTextColor : notSelectedTextColor);
            SwingUtilities2.drawString(frame, g, title, titleX, baseline);
            g.setFont(oldFont);
        }
    }"
270,6765637.txt,none,"    @Override
    public APINodeList<Flight> execute(Map<String, Object> extraParams) throws APIException {
      ResponseWrapper rw = executeInternal(extraParams);
      lastResponse = parseResponse(rw.getBody(),rw.getHeader());
      return lastResponse;
    }"
271,8574983.txt,none,"  public static KeyValue createKeyValueFromKey(final ByteBuffer bb) {
    return createKeyValueFromKey(bb.array(), bb.arrayOffset(), bb.limit());
  }"
272,9129936.txt,none,"	CssRecord( Module module, DesignElement element, CssStyleSheet css,
			boolean add, int pos )
	{
		this.module = module;
		this.element = element;
		this.css = css;
		this.add = add;
		this.position = pos;
	}"
273,6346740.txt,none,"		public Builder entrypoint(final List<String> entrypoint) {
			this.entrypoint = entrypoint;
			return this;
		}"
274,7291517.txt,major,"    private NameRegion[] findLinkComponentsInClosure(ClosureExpression firstArg,
            int offset) {
        if (! (firstArg.getCode() instanceof BlockStatement)) {
            return null;
        }
        
        BlockStatement code = (BlockStatement) firstArg.getCode();
        if (code.getStatements() == null) {
            return null;
        }
        NameRegion controllerName = null;
        NameRegion actionName = null;
        NameRegion viewName = null;

        for (Statement state : code.getStatements()) {
            if (state instanceof ExpressionStatement) {
                if (((ExpressionStatement) state).getExpression() instanceof BinaryExpression) {
                    BinaryExpression bexpr = (BinaryExpression) ((ExpressionStatement) state).getExpression();
                    Expression left = bexpr.getLeftExpression();
                    if (bexpr.getOperation().getText().equals(""="") && left instanceof VariableExpression) {
                        Expression right = bexpr.getRightExpression();
                        Region region;
                        if (right.getStart() <= offset && right.getEnd() >= offset) {
                            region = new Region(right.getStart(), right.getLength());
                        } else {
                            region = null;
                        }

                        String name = left.getText();
                        if (name.equals(""controller"")) {
                            controllerName = new NameRegion(right.getText(), region);
                        } else if (name.equals(""action"")) {
                            actionName = new NameRegion(right.getText(), region);
                        } else if (name.equals(""view"")) {
                            viewName = new NameRegion(right.getText(), region);
                        }
                    }
                }
            }
        }
        return new NameRegion[] { controllerName, actionName, viewName };
    }"
275,4591956.txt,none,"  private Scanner createScanner(Query<K,T> query) throws TableNotFoundException {
    // TODO make isolated scanner optional?
    Scanner scanner = new IsolatedScanner(conn.createScanner(mapping.tableName, Authorizations.EMPTY));
    setFetchColumns(scanner, query.getFields());

    scanner.setRange(createRange(query));

    if (query.getStartTime() != -1 || query.getEndTime() != -1) {
      IteratorSetting is = new IteratorSetting(30, TimestampFilter.class);
      if (query.getStartTime() != -1)
        TimestampFilter.setStart(is, query.getStartTime(), true);
      if (query.getEndTime() != -1)
        TimestampFilter.setEnd(is, query.getEndTime(), true);

      scanner.addScanIterator(is);
    }

    return scanner;
  }"
276,6578382.txt,none,"    public final void mT__66() throws RecognitionException {
        try {
            int _type = T__66;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // InternalEntities.g:64:7: ( 'if' )
            // InternalEntities.g:64:9: 'if'
            {
            match(""if""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
277,3922485.txt,none,"    public void connected(SocketChannel channel) throws IOException, Exception {
        this.channel = channel;

        if( codec !=null ) {
            initializeCodec();
        }

        this.channel.configureBlocking(false);
        this.remoteAddress = channel.socket().getRemoteSocketAddress().toString();
        channel.socket().setSoLinger(true, 0);
        channel.socket().setTcpNoDelay(true);

        this.socketState = new CONNECTED();
    }"
278,5580203.txt,none,"  private void routeToBackend(RoutingContext context, Hcr hcr, String userId) {
    Map<String, String> pathParams = context.pathParams();
    String microserviceName = pathParams.get(""param0"");
    String pathVersion = pathParams.get(""param1"");
    String path = context.request().path().substring(prefix.length() + 1);

    EncryptEdgeInvocation edgeInvocation = new EncryptEdgeInvocation(new EncryptContext(hcr, userId));
    edgeInvocation.setVersionRule(versionMapper.getOrCreate(pathVersion).getVersionRule());

    edgeInvocation.init(microserviceName, context, path, httpServerFilters);
    edgeInvocation.edgeInvoke();
  }"
279,6695177.txt,none,"    public APIRequestGetAssignedAdAccounts requestAgeField (boolean value) {
      this.requestField(""age"", value);
      return this;
    }"
280,7546490.txt,none,"	@Scheduled(fixedRate=2000)
	public void processQueues() {
		for (DeferredResult<String> result : this.responseBodyQueue) {
			result.setResult(""Deferred result"");
			this.responseBodyQueue.remove(result);
		}
		for (DeferredResult<String> result : this.exceptionQueue) {
			result.setErrorResult(new IllegalStateException(""DeferredResult error""));
			this.exceptionQueue.remove(result);
		}
		for (DeferredResult<ModelAndView> result : this.mavQueue) {
			result.setResult(new ModelAndView(""views/html"", ""javaBean"", new JavaBean(""bar"", ""apple"")));
			this.mavQueue.remove(result);
		}
	}"
281,7045316.txt,none,"  public static MetaImage getMetaImage(Vector<Object> src)
  {
    if (src == null) return globalImageCache.get(null);
    if (globalImageCache.containsKey(src))
    {
      MetaImage rv = globalImageCache.get(src);
      return rv;
    }
    {
      // use tmpSrc to avoid needing warning suppression of
      // unchecked conversion at function scope
      @SuppressWarnings(""unchecked"")
      Vector<Object>  tmpSrc = (Vector<Object>) src.clone();
      src = tmpSrc;
    }
    if (DEBUG_MI) System.out.println(""first getMetaImage src="" + src);
    MetaImage rv = new MetaImage(src);
    MetaImage srcImage = (MetaImage) src.get(0);
    rv.initDataStructures(1);
    rv.width[0] = srcImage.getWidth(0);
    rv.height[0] = srcImage.getHeight(0);
    synchronized (globalImageCache)
    {
      if (globalImageCache.containsKey(src)) return globalImageCache.get(src);
      globalImageCache.put(src, rv);
    }
    if (DEBUG_MI) System.out.println(""DONE first getMetaImage src="" + src);
    return rv;
  }"
282,4320364.txt,none,"	public ResultSet getUpdateVTIResultSet(NoPutResultSet source)
			throws StandardException
	{
		Activation activation = source.getActivation();
		getAuthorizer(activation).authorize(activation, Authorizer.SQL_WRITE_OP);
		return new UpdateVTIResultSet(source, activation);
	}"
283,7757865.txt,none,"  private boolean isMoreToReadBeforeReadingRecord(
      final SequenceOffsetType recordSequenceNumber,
      final SequenceOffsetType endSequenceNumber
  )
  {
    final int compareToEnd = createSequenceNumber(recordSequenceNumber)
        .compareTo(createSequenceNumber(endSequenceNumber));

    return isEndOffsetExclusive() ? compareToEnd < 0 : compareToEnd <= 0;
  }"
284,4031529.txt,none,"    static <T> Sketch<T> create(CountMinSketch sketch) {
      int width = (int) Math.ceil(2 / sketch.getRelativeError());
      int depth = (int) Math.ceil(-Math.log(1 - sketch.getConfidence()) / Math.log(2));
      return new AutoValue_SketchFrequencies_Sketch<>(depth, width, sketch);
    }"
285,6888310.txt,none,"    @Override
    public Void visitInvokeDynamic(ConstantPool.CONSTANT_InvokeDynamic_info info, CPEntries p) {
        return null;
    }"
286,3869246.txt,none,"    private void fillLocalToolBar(IToolBarManager toolBarManager) {
        toolBarManager.add(refreshAction);
        toolBarManager.add(focusDialogActionToolbar);
        toolBarManager.add(new Separator());
        toolBarManager.add(historyAction);
        toolBarManager.add(forwardAction);
    }"
287,4457261.txt,none,"  DirectScanPrel(RelOptCluster cluster, RelTraitSet traits,
                 GroupScan groupScan, RelDataType rowType) {
    super(cluster, traits);
    this.groupScan = groupScan;
    this.rowType = rowType;
  }"
288,4383462.txt,none,"    private void createServerIdEditGroup( Composite parent )
    {
        // ServerID Group
        Group serverIdGroup = BaseWidgetUtils.createGroup( parent, ""ServerID input"", 1 );
        GridLayout serverIdGroupGridLayout = new GridLayout( 2, false );
        serverIdGroup.setLayout( serverIdGroupGridLayout );
        serverIdGroup.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );

        // ServerID Text
        BaseWidgetUtils.createLabel( serverIdGroup, ""ID:"", 1 );
        idText = BaseWidgetUtils.createText( serverIdGroup, """", 1 );
        idText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );

        // URL Text
        BaseWidgetUtils.createLabel( serverIdGroup, ""URL:"", 1 );
        urlText = BaseWidgetUtils.createText( serverIdGroup, """", 1 );
        urlText.setLayoutData( new GridData( SWT.FILL, SWT.NONE, true, false ) );
    }"
289,4737348.txt,none,"  public StreamManagerClient(NIOLooper s, String streamManagerHost, int streamManagerPort,
                             String topologyName, String topologyId,
                             PhysicalPlans.Instance instance,
                             Communicator<Message> inStreamQueue,
                             Communicator<Message> outStreamQueue,
                             Communicator<InstanceControlMsg> inControlQueue,
                             HeronSocketOptions options,
                             GatewayMetrics gatewayMetrics) {
    super(s, streamManagerHost, streamManagerPort, options);

    this.topologyName = topologyName;
    this.topologyId = topologyId;

    this.instance = instance;
    this.inStreamQueue = inStreamQueue;
    this.outStreamQueue = outStreamQueue;
    this.inControlQueue = inControlQueue;

    this.systemConfig =
        (SystemConfig) SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);

    this.gatewayMetrics = gatewayMetrics;

    addStreamManagerClientTasksOnWakeUp();
  }"
290,9331036.txt,none,"    public MethodInfo getFailedCompile() {
        return new MethodInfo(lastFailedMethod.stringValue(),
                              (int) lastFailedType.longValue(),
                              -1);
    }"
291,9158643.txt,minor,"	public void run( IAction action )
	{
		if ( !preGenerate( ) )
		{
			return;
		}

		IFile file = getSelectedFile( );
		if ( file != null )
		{
			String url = file.getLocation( ).toOSString( );

			Map options = new HashMap( );
			options.put( WebViewer.RESOURCE_FOLDER_KEY,
					ReportPlugin.getDefault( )
							.getResourceFolder( file.getProject( ) ) );
			options.put( WebViewer.SERVLET_NAME_KEY, WebViewer.VIEWER_DOCUMENT );

			Object adapter = ElementAdapterManager.getAdapter( action,
					IPreviewAction.class );

			if ( adapter instanceof IPreviewAction )
			{
				IPreviewAction delegate = (IPreviewAction) adapter;

				delegate.setProperty( IPreviewConstants.REPORT_PREVIEW_OPTIONS,
						options );
				delegate.setProperty( IPreviewConstants.REPORT_FILE_PATH, url );

				delegate.run( );

				return;
			}

			try
			{
				WebViewer.display( url, options );
			}
			catch ( Exception e )
			{
				ExceptionUtil.handle( e );
				return;
			}
		}
		else
		{
			action.setEnabled( false );
		}
	}"
292,6088559.txt,major,"        Type asTuple() {
            final Type result;
            if (types.size() == 0) {
                result = unit.getEmptyType();
            } else {
                final Type sequentialType;
                if (variadic) {
                    Part part = new Part(""Sequence"", Collections.singletonList(getLast()));
                    sequentialType = loadType(""ceylon.language"", 
                            atLeastOne ? ""ceylon.language.Sequence"" : ""ceylon.language.Sequential"", 
                                    part, null);
                } else {
                    sequentialType = unit.getEmptyType();
                }
                
                if (variadic && types.size() == 1) {
                    result = sequentialType;
                } else {
                    Part part = new Part();
                    // if we're variadic we put the element type there because we skip it below
                    // if we're not variadic we are not going to skip it so let's not union it with itself
                    Type union = variadic ? getLast() : null;
                    Type tupleType = sequentialType;
                    // A,B= 
                    // union = null
                    // tupleType = []
                    // t = B
                    // union = B
                    // tupleType = [B]
                    // tupleType = [B]|[]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B]|[]]

                    // A=,B= 
                    // union = null
                    // tupleType = []
                    // t = B
                    // union = B
                    // tupleType = [B]
                    // tupleType = [B]|[]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B]|[]]
                    // tupleType = [A,[B]|[]]|[]

                    // A=,B* 
                    // union = B
                    // tupleType = [B*]
                    // t = A
                    // union = A|B
                    // tupleType = [A,[B*]]
                    // tupleType = [A,[B*]]|[]

                    int makeDefaulted = defaulted;
                    for (int ii  = types.size()-(variadic? 2 : 1); ii >= 0; ii--) {
                        Type t = types.get(ii);
                        // FIXME: subtyping in the type parser may cause issues
                        if(union != null) // any second element (variadic or not)
                            union = ModelUtil.unionType(union, t, unit);
                        else
                            union = t; // any first element
                        part.parameters = Arrays.asList(union, t, tupleType);
                        part.name = ""Tuple"";
                        tupleType = loadType(""ceylon.language"", ""ceylon.language.Tuple"", part, null);
                        if(makeDefaulted > 0){
                            makeDefaulted--;
                            tupleType = union(Arrays.asList(unit.getEmptyType(), tupleType), unit);
                        }
                    }
                    result = tupleType;
                }
            }
            return result;
        }"
293,4151853.txt,none,"  public AvaticaStatement newStatement(AvaticaConnection connection,
      Meta.StatementHandle h, int resultSetType, int resultSetConcurrency,
      int resultSetHoldability) {
    return new AvaticaJdbc41Statement(connection, h, resultSetType,
        resultSetConcurrency, resultSetHoldability);
  }"
294,3933339.txt,none,"  private final void writePreInvoke() {
    //The place to go if the listener is null
    Label nullListener = newLabel();
    beginListenerInvocation(nullListener);

    // The listener is on the stack, we need (target, method, args)
    
    loadLocal(dispatchTarget);
    getStatic(typeBeingWoven, methodStaticFieldName, METHOD_TYPE);
    loadArgArray();
    
    //invoke it and store the token returned
    invokeInterface(LISTENER_TYPE, PRE_INVOKE_METHOD);
    storeLocal(preInvokeReturnedToken);
    
    mark(nullListener);
  }"
295,4809381.txt,major,"    @SuppressWarnings(""unchecked"")
    private void extractDataAndSave(IBatchDAO batchDAO) {
        if (logger.isDebugEnabled()) {
            logger.debug(""Extract data and save"");
        }

        long startTime = System.currentTimeMillis();
        try {
            HistogramMetric.Timer timer = prepareLatency.createTimer();

            List batchAllCollection = new LinkedList();
            try {
                List<PersistenceWorker> persistenceWorkers = new ArrayList<>();
                persistenceWorkers.addAll(IndicatorProcess.INSTANCE.getPersistentWorkers());
                persistenceWorkers.addAll(RecordProcess.INSTANCE.getPersistentWorkers());
                persistenceWorkers.addAll(TopNProcess.INSTANCE.getPersistentWorkers());

                persistenceWorkers.forEach(worker -> {
                    if (logger.isDebugEnabled()) {
                        logger.debug(""extract {} worker data and save"", worker.getClass().getName());
                    }

                    if (worker.flushAndSwitch()) {
                        List<?> batchCollection = worker.buildBatchCollection();

                        if (logger.isDebugEnabled()) {
                            logger.debug(""extract {} worker data size: {}"", worker.getClass().getName(), batchCollection.size());
                        }
                        batchAllCollection.addAll(batchCollection);
                    }
                });

                if (debug) {
                    logger.info(""build batch persistence duration: {} ms"", System.currentTimeMillis() - startTime);
                }
            } finally {
                timer.finish();
            }

            HistogramMetric.Timer executeLatencyTimer = executeLatency.createTimer();
            try {
                batchDAO.batchPersistence(batchAllCollection);
            } finally {
                executeLatencyTimer.finish();
            }
        } catch (Throwable e) {
            errorCounter.inc();
            logger.error(e.getMessage(), e);
        } finally {
            if (logger.isDebugEnabled()) {
                logger.debug(""persistence data save finish"");
            }
        }

        if (debug) {
            logger.info(""batch persistence duration: {} ms"", System.currentTimeMillis() - startTime);
        }
    }"
296,5025413.txt,none,"  synchronized
  public
  void removeAllAppenders() {
    if(aai != null) {
      Vector appenders = new Vector();
      for (Enumeration iter = aai.getAllAppenders(); iter != null && iter.hasMoreElements();) {
          appenders.add(iter.nextElement());
      }
      aai.removeAllAppenders();
      for(Enumeration iter = appenders.elements(); iter.hasMoreElements();) {
          fireRemoveAppenderEvent((Appender) iter.nextElement());
      }
      aai = null;
    }
  }"
297,4612119.txt,none,"	private void tryConnectToResourceManager() {
		if (resourceManagerAddress != null) {
			connectToResourceManager();
		}
	}"
298,6920454.txt,none,"  String computeAndDisplayPin(String user, int position, boolean computeHotp) {
    OtpType type = AccountDb.getType(user);
    String secret = getSecret(user);
    PinInfo currentPin;
    if (mUsers[position] != null) {
      currentPin = mUsers[position]; // existing PinInfo, so we'll update it
    } else {
      currentPin = new PinInfo();
      currentPin.mPin = sResources.getString(EMPTY_PIN);
    }
    
    currentPin.mUser = user;
    if (type == OtpType.TOTP) {
      currentPin.mPin = computePin(secret, null);
    } else if (type == OtpType.HOTP) {
      currentPin.mIsHotp = true;
      if (computeHotp) {
        AccountDb.incrementCounter(user);
        Integer counter = AccountDb.getCounter(user);
        currentPin.mPin = computePin(secret, new Long(counter.longValue()));
      }
    }
    mUsers[position] = currentPin;
    return currentPin.mPin;
  }"
299,6183429.txt,none,"  public static int getSiblingIndexWithClassName(Element element, String className) {
    int index = 0;
    while (element != null) {
      element = (Element) element.getPreviousSibling();
      if (element != null && Elements.hasClassName(className, element)) {
        ++index;
      }
    }
    return index;
  }"
300,6129787.txt,none,"        @Override
        public boolean hasNext()
        {
            return this.next;
        }"
301,7344807.txt,none,"    public _ClientService3Soap_SyncExternalStructures(final String projectURI)
    {
        // TODO : Call super() instead of setting all fields directly?
        setProjectURI(projectURI);
    }"
302,6233999.txt,none,"	@Override
	public boolean equals(Object other) {
		if (other instanceof Vector3D) {
			Vector3D o = (Vector3D) other;
			Point tmp = this.toPoint();
			if (tmp == null) {
				return o.toPoint() == null;
			}
			return tmp.equals(o.toPoint());
		}
		return false;
	}"
303,7762033.txt,minor,"  private static DimFilter negate(final DimFilter filter)
  {
    if (Filtration.matchEverything().equals(filter)) {
      return Filtration.matchNothing();
    } else if (Filtration.matchNothing().equals(filter)) {
      return Filtration.matchEverything();
    } else if (filter instanceof NotDimFilter) {
      return ((NotDimFilter) filter).getField();
    } else if (filter instanceof BoundDimFilter) {
      final BoundDimFilter negated = Bounds.not((BoundDimFilter) filter);
      return negated != null ? negated : new NotDimFilter(filter);
    } else {
      return new NotDimFilter(filter);
    }
  }"
304,9466197.txt,none,"  @Override
  public int compareInputOrderTo(SchedulableEntity other) {
    if (other instanceof SchedulerApplicationAttempt) {
      return getApplicationId().compareTo(
        ((SchedulerApplicationAttempt)other).getApplicationId());
    }
    return 1;//let other types go before this, if any
  }"
305,4135214.txt,none,"      public boolean hasNext() {
        if (firstCall) {
          initializeMapping();
          firstCall = false;
        } else {
          computeNextMapping(iterationIdx.length - 1);
        }
        return nextMapping != null;
      }"
306,9201031.txt,none,"	private Key[] getKeys( )
	{
		Key[] keys = new Key[]{
			PREF_RESOURCE
		};
		return keys;
	}"
307,6339455.txt,none,"    @Override
    public void start(BundleContext context) throws Exception {
        super.start(context);
        plugin = this;
    }"
308,3879070.txt,none,"    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }"
309,7198785.txt,none,"        public Builder tcpOptions(TcpOptions tcpOptions) {
            this.tcpOptions = tcpOptions;
            this.__explicitlySet__.add(""tcpOptions"");
            return this;
        }"
310,7842162.txt,none,"  protected void createClientServerScenarion_SingleConnection(ArrayList commonAttributes,
      int localMaxMemoryServer1, int localMaxMemoryServer2, int localMaxMemoryServer3) {
    createCacheInClientServer();
    Integer port1 = (Integer) server1.invoke(() -> PRClientServerTestBase
        .createCacheServer(commonAttributes, new Integer(localMaxMemoryServer1)));
    server2.invoke(() -> PRClientServerTestBase.createCacheServer(commonAttributes,
        new Integer(localMaxMemoryServer2)));
    serverPort1 = port1;
    client.invoke(() -> PRClientServerTestBase.createCacheClient_SingleConnection(
        NetworkUtils.getServerHostName(server1.getHost()), port1));
  }"
311,4051372.txt,none,"  public boolean hasFailed() throws ExecutionException, InterruptedException {
    if (processBundleResponse != null && processBundleResponse.toCompletableFuture().isDone()) {
      return !processBundleResponse.toCompletableFuture().get().getError().isEmpty();
    } else {
      // At the very least, we don't know that this has failed yet.
      return false;
    }
  }"
312,6186565.txt,major,"	@Override
	protected Control createContents(Composite parent) {

		Composite composite = SWTUtils.createHVFillComposite(parent,
				SWTUtils.MARGINS_NONE);

		SWTUtils.createLabel(composite, UIText.DecoratorPreferencesPage_description);

		Composite folderComposite = SWTUtils.createHFillComposite(composite,
				SWTUtils.MARGINS_NONE);

		TabFolder tabFolder = new TabFolder(folderComposite, SWT.NONE);
		tabFolder.setLayoutData(SWTUtils.createHVFillGridData());

		tabFolder.addSelectionListener(new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				if (navigatorPreview != null && changeSetPreview != null) {
					if (UIText.DecoratorPreferencesPage_otherDecorations.equals(e.item.getData())) {
						navigatorPreview.hide();
						changeSetPreview.show();
					} else {
						changeSetPreview.hide();
						navigatorPreview.show();
					}
				}
			}

		});

		changeSetPreview = new ChangeSetPreview(composite);
		navigatorPreview = new NavigatorPreview(composite);

		generalTab = new GeneralTab(tabFolder);
		textDecorationTab = new TextDecorationTab(tabFolder);
		iconDecorationTab = new IconDecorationTab(tabFolder);
		otherDecorationTab = new OtherDecorationTab(tabFolder);

		initializeValues();

		changeSetPreview.hide();

		changeSetPreview.refresh();
		navigatorPreview.refresh();

		generalTab.addObserver(navigatorPreview);
		textDecorationTab.addObserver(navigatorPreview);
		iconDecorationTab.addObserver(navigatorPreview);

		otherDecorationTab.addObserver(changeSetPreview);

		// TODO: Add help text for this preference page

		themeListener = new IPropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent event) {
				navigatorPreview.refresh();
				changeSetPreview.refresh();
			}
		};
		PlatformUI.getWorkbench().getThemeManager().addPropertyChangeListener(
				themeListener);

		uiPrefsListener = new IPropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent event) {
				String property = event.getProperty();
				if (UIPreferences.DATE_FORMAT.equals(property)
						|| UIPreferences.DATE_FORMAT_CHOICE.equals(property)) {
					changeSetPreview.refresh();
				}
			}
		};
		getPreferenceStore().addPropertyChangeListener(uiPrefsListener);

		Dialog.applyDialogFont(parent);

		return tabFolder;
	}"
313,5237277.txt,none,"  static void copy(final InputStream input, final OutputStream output) {
    if (output == null || input == null) {
      return;
    }

    try {
      ByteBuffer inBuffer = ByteBuffer.allocate(8192);
      ReadableByteChannel ic = Channels.newChannel(input);
      WritableByteChannel oc = Channels.newChannel(output);
      while (ic.read(inBuffer) > 0) {
        inBuffer.flip();
        oc.write(inBuffer);
        inBuffer.rewind();
      }
    } catch (IOException e) {
      throw new ODataRuntimeException(""Error on reading request content"");
    } finally {
      closeStream(input);
      closeStream(output);
    }
  }"
314,4197031.txt,none,"    public File getLocationForDisk(DataDirectory dataDirectory)
    {
        if (dataDirectory != null)
            for (File dir : dataPaths)
                if (dir.getAbsolutePath().startsWith(dataDirectory.location.getAbsolutePath()))
                    return dir;
        return null;
    }"
315,4282143.txt,none,"    @Override
    public String toString()
    {
        return ""CuratorEventImpl{"" +
            ""type="" + type +
            "", resultCode="" + resultCode +
            "", path='"" + path + '\'' +
            "", name='"" + name + '\'' +
            "", children="" + children +
            "", context="" + context +
            "", stat="" + stat +
            "", data="" + Arrays.toString(data) +
            "", watchedEvent="" + watchedEvent +
            "", aclList="" + aclList +
            "", opResults="" + opResults +
            '}';
    }"
316,8049607.txt,none,"	public Referenced_Template(final CompilationTimeStamp timestamp, final SpecificValue_Template original) {
		copyGeneralProperties(original);
		final IValue value = original.getSpecificValue();
		switch (value.getValuetype()) {
		case REFERENCED_VALUE:
			reference = ((Referenced_Value) value).getReference();
			break;
		case UNDEFINED_LOWERIDENTIFIER_VALUE:
			final Identifier identifier = ((Undefined_LowerIdentifier_Value) value).getIdentifier();
			final FieldSubReference subReference = new FieldSubReference(identifier);
			subReference.setLocation(value.getLocation());
			reference = new Reference(null);
			reference.addSubReference(subReference);
			reference.setLocation(value.getLocation());
			reference.setFullNameParent(this);
			reference.setMyScope(value.getMyScope());
			break;
		default:
			reference = null;
			break;
		}
	}"
317,4960946.txt,none,"    boolean updateNewAndRestoringTasks() {
        active.initializeNewTasks();
        standby.initializeNewTasks();

        final Collection<TopicPartition> restored = changelogReader.restore(active);

        active.updateRestored(restored);

        if (active.allTasksRunning()) {
            final Set<TopicPartition> assignment = consumer.assignment();
            log.trace(""Resuming partitions {}"", assignment);
            consumer.resume(assignment);
            assignStandbyPartitions();
            return true;
        }
        return false;
    }"
318,3735879.txt,none,"    public void setDdlSchemaName(String ddlSchemaName) {
        this.ddlSchemaName = ddlSchemaName;
    }"
319,8894917.txt,none,"    public static org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.PurgeCacheResponseProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }"
320,4402431.txt,none,"    public static JsonWebKey fromRSAPrivateKey(RSAPrivateKey pk, String algo, String kid) {
        JsonWebKey jwk = prepareRSAJwk(pk.getModulus(), algo, kid);
        String encodedPrivateExponent = Base64UrlUtility.encode(pk.getPrivateExponent().toByteArray());
        jwk.setProperty(JsonWebKey.RSA_PRIVATE_EXP, encodedPrivateExponent);
        if (pk instanceof RSAPrivateCrtKey) {
            RSAPrivateCrtKey pkCrt = (RSAPrivateCrtKey)pk;
            jwk.setProperty(JsonWebKey.RSA_PUBLIC_EXP,
                            Base64UrlUtility.encode(pkCrt.getPublicExponent().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_FACTOR,
                            Base64UrlUtility.encode(pkCrt.getPrimeP().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_FACTOR,
                            Base64UrlUtility.encode(pkCrt.getPrimeQ().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_CRT,
                            Base64UrlUtility.encode(pkCrt.getPrimeExponentP().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_CRT,
                            Base64UrlUtility.encode(pkCrt.getPrimeExponentQ().toByteArray()));
            jwk.setProperty(JsonWebKey.RSA_FIRST_CRT_COEFFICIENT,
                            Base64UrlUtility.encode(pkCrt.getCrtCoefficient().toByteArray()));
        }
        // ""oth"" can be populated too if needed
        return jwk;
    }"
321,3905445.txt,none,"  @Override
  public TStatus getStatus(long tid) {
    verifyReserved(tid);
    return _getStatus(tid);
  }"
322,9230800.txt,none,"    void commandLoop() {
        try {
            while (processCommand()) {
                // condition is loop action
            }
        } catch (IOException ex) {
            // drop out of loop
        }
    }"
323,6579063.txt,none,"    public void testDisableDecorator() {
        getDecoratorManager().clearCaches();
        definition.setEnabled(false);
        getDecoratorManager().updateForEnablementChange();
    }"
324,7372565.txt,none,"		private AnnotationMetadata getAnnotationMetadata() {
			if (this.annotationMetadata == null) {
				try {
					MetadataReader metadataReader = this.metadataReaderFactory
							.getMetadataReader(this.className);
					this.annotationMetadata = metadataReader.getAnnotationMetadata();
				}
				catch (IOException ex) {
					throw new IllegalStateException(
							""Unable to read meta-data for class "" + this.className, ex);
				}
			}
			return this.annotationMetadata;
		}"
325,9521523.txt,none,"  @Override
  public synchronized int read(final byte[] b, final int off, final int len) throws IOException {
    int currentOff = off;
    int currentLen = len;
    int lastReadBytes;
    int totalReadBytes = 0;
    do {
      lastReadBytes = readOneBlock(b, currentOff, currentLen);
      if (lastReadBytes > 0) {
        currentOff += lastReadBytes;
        currentLen -= lastReadBytes;
        totalReadBytes += lastReadBytes;
      }
      if (currentLen <= 0 || currentLen > b.length - currentOff) {
        break;
      }
    } while (lastReadBytes > 0);
    return totalReadBytes > 0 ? totalReadBytes : lastReadBytes;
  }"
326,9336762.txt,none,"    protected void doClick(final MenuSelectionManager msm) {
        final Dimension size = menuItem.getSize();
        AquaUtils.blinkMenu(new AquaUtils.Selectable() {
            public void paintSelected(final boolean selected) {
                menuItem.setArmed(selected);
                menuItem.paintImmediately(0, 0, size.width, size.height);
            }
        });
        super.doClick(msm);
    }"
327,7279538.txt,none,"  @Override
  protected String getBundleName() {
    return BUNDEL_NAME;
  }"
328,9140119.txt,none,"	public void addElementEvent( DesignElementHandle focus, NotificationEvent ev )
	{
		ModelEventInfo event = new ModelEventInfo( focus, ev );
		eventList.add( event );
	}"
329,5986705.txt,none,"    public Region signingRegion() {
        return signingRegion;
    }"
330,5066014.txt,none,"    public StringFormattedMessage(final Locale locale, final String messagePattern, final Object... arguments) {
        this.locale = locale;
        this.messagePattern = messagePattern;
        this.argArray = arguments;
        if (arguments != null && arguments.length > 0 && arguments[arguments.length - 1] instanceof Throwable) {
            this.throwable = (Throwable) arguments[arguments.length - 1];
        }
    }"
331,8240678.txt,none,"    public void initialize(final Attribute[] attributes, final ElementProcessor parent) throws IOException {
        super.initialize(attributes, parent);
        // default value (when <gmr:Cell> has no ValueType attribute)
        int cellType = CellType.CELL_TYPE_FORMULA;
        try {
            cellType = getCellType();
        } catch (NullPointerException ignored) {
        }
        _cell = getSheet().getRow(getRow()).createCell(getColumn(), cellType);
    }"
332,9433104.txt,none,"    private void writeObject(ObjectOutputStream s)
      throws java.io.IOException
    {
      s.defaultWriteObject();

      AWTEventMulticaster.save(s, itemListenerK, itemListener);
      s.writeObject(null);
    }"
333,5904263.txt,none,"  public final Text splitText(int offset) throws DOMException
  {
    throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);
  }"
334,8052959.txt,none,"		@Override
		public IScope getScope(EObject context, EReference reference) {
			if (reference == SequencertestPackage.Literals.NULL_CROSS_REF__REF)
				return new AbstractScope(IScope.NULLSCOPE, false) {

					@Override
					public Iterable<IEObjectDescription> getElements(EObject object) {
						return Collections.singletonList(getSingleElement(object));
					}

					@Override
					public IEObjectDescription getSingleElement(EObject object) {
						return EObjectDescription.create(""null"", null);
					}

					@Override
					protected Iterable<IEObjectDescription> getAllLocalElements() {
						throw new UnsupportedOperationException();
					}
				};
			return super.getScope(context, reference);
		}"
335,6318697.txt,none,"    @Override
    protected void onRender(Element parent, int index) {
        super.onRender(parent, index);
        setLayout(new FitLayout());
        setBorders(false);

        // init components
        initToolBar();
        initGrid();

        ContentPanel devicesBundlesPanel = new ContentPanel();
        devicesBundlesPanel.setBorders(false);
        devicesBundlesPanel.setBodyBorder(true);
        devicesBundlesPanel.setHeaderVisible(false);
        devicesBundlesPanel.setLayout(new FitLayout());
        devicesBundlesPanel.setScrollMode(Scroll.AUTO);
        devicesBundlesPanel.setTopComponent(toolBar);
        devicesBundlesPanel.add(grid);

        add(devicesBundlesPanel);
        initialized = true;
    }"
336,5642265.txt,none,"    @Override
    public List<Cookie> parse(Header header, CookieOrigin origin) throws MalformedCookieException {
        List<Cookie> cookies = super.parse(header, origin);
        for (Cookie cookie : cookies) {
            if (cookie.getName().equals(StickyCookieHolder.COOKIE_NAME)) {
                // store it in the TestStickySessionRule threadlocal var
                StickyCookieHolder.setTestStickySessionCookie(cookie);
            }
        }
        return cookies;
    }"
337,4634991.txt,none,"    private void finishIndyCall(Handle bsmHandle, String methodName, String sig, int numberOfArguments, Object... bsmArgs) {
        CompileStack compileStack = controller.getCompileStack();
        OperandStack operandStack = controller.getOperandStack();

        controller.getMethodVisitor().visitInvokeDynamicInsn(methodName, sig, bsmHandle, bsmArgs);

        operandStack.replace(ClassHelper.OBJECT_TYPE, numberOfArguments);
        compileStack.popLHS();
    }"
338,3868603.txt,none,"    public void setShowProgress(boolean progress) {
        // no nothing
    }"
339,6601584.txt,minor,"    @Transactional(propagation = Propagation.MANDATORY)
    public Map<Long, List<BiologicalDataItem>> loadBookmarkItemsByBookmarkIds(Collection<Long> bookmarkIds) {
        if (bookmarkIds == null || bookmarkIds.isEmpty()) {
            return Collections.emptyMap();
        }

        Long listId = daoHelper.createTempLongList(bookmarkIds);
        Map<Long, List<BiologicalDataItem>> itemsMap = new HashMap<>();

        getJdbcTemplate().query(loadBookmarksItemsQuery, rs -> {
            BiologicalDataItem dataItem = BiologicalDataItemDao.BiologicalDataItemParameters.getRowMapper()
                .mapRow(rs, 0);
            long bookmarkId = rs.getLong(BookmarkItemParameters.BOOKMARK_ID.name());
            if (!itemsMap.containsKey(bookmarkId)) {
                itemsMap.put(bookmarkId, new ArrayList<>());
            }
            itemsMap.get(bookmarkId).add(dataItem);
        }, listId);

        daoHelper.clearTempList(listId);
        return itemsMap;
    }"
340,5233290.txt,none,"	private List getCurrentBindings() throws NamingException {
		List names;
		try {
			Registry registry = getRegistry();
			names = Arrays.asList(registry.list());
		} catch (RemoteException ex) {
			names = Collections.EMPTY_LIST;
		}
		return names;
	}"
341,7619442.txt,none,"		@Override
		public final void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
			try {
				doit(monitor);
			} catch (InterruptedException e) {
				throw e;
			} catch (OperationCanceledException e) {
				throw new InterruptedException(""Canceled by user"");
			} catch (InvocationTargetException e) {
				throw e;
			} catch (Throwable e) {
				throw new InvocationTargetException(e);
			}
		}"
342,8226389.txt,none,"	@Override
	public String getDisplayName() {
		return AssignmentsTestLanguageLanguage.INSTANCE.getDisplayName();
	}"
343,7358328.txt,none,"    public void test20() {
        final SparseTreeAdditionalData additionalData = new SparseTreeAdditionalData();
        final SparseTree<String> st = new SparseTree<String>('/', String.CASE_INSENSITIVE_ORDER);

        st.add(""$"", ""Root""); //$NON-NLS-1$ //$NON-NLS-2$
        st.add(""$/A"", ""A""); //$NON-NLS-1$ //$NON-NLS-2$
        st.add(""$/A/Z"", ""AZ""); //$NON-NLS-1$ //$NON-NLS-2$

        final List<String> results = new ArrayList<String>();
        st.EnumParents(""$/A/B/C/D/E"", new NoChildrenBelowCallback(), EnumParentsOptions.NONE, additionalData, results); //$NON-NLS-1$

        final List<String> expectedResults = new ArrayList<String>();
        expectedResults.add(""$/A/B""); //$NON-NLS-1$
        expectedResults.add(null);

        Assert.assertTrue(areStringListsEqual(expectedResults, results, String.CASE_INSENSITIVE_ORDER));
    }"
344,7085407.txt,major,"    public void updateState(X509Certificate cert)
        throws CertificateException, IOException, CertPathValidatorException {

        if (cert == null) {
            return;
        }

        /* update subject DN */
        subjectDN = cert.getSubjectX500Principal();

        /* check for key needing to inherit alg parameters */
        X509CertImpl icert = X509CertImpl.toImpl(cert);
        PublicKey newKey = cert.getPublicKey();
        if (PKIX.isDSAPublicKeyWithoutParams(newKey)) {
            newKey = BasicChecker.makeInheritedParamsKey(newKey, pubKey);
        }

        /* update subject public key */
        pubKey = newKey;

        /*
         * if this is a trusted cert (init == true), then we
         * don't update any of the remaining fields
         */
        if (init) {
            init = false;
            return;
        }

        /* update subject key identifier */
        subjKeyId = icert.getSubjectKeyIdentifierExtension();

        /* update crlSign */
        crlSign = RevocationChecker.certCanSignCrl(cert);

        /* update current name constraints */
        if (nc != null) {
            nc.merge(icert.getNameConstraintsExtension());
        } else {
            nc = icert.getNameConstraintsExtension();
            if (nc != null) {
                // Make sure we do a clone here, because we're probably
                // going to modify this object later and we don't want to
                // be sharing it with a Certificate object!
                nc = (NameConstraintsExtension) nc.clone();
            }
        }

        /* update policy state variables */
        explicitPolicy =
            PolicyChecker.mergeExplicitPolicy(explicitPolicy, icert, false);
        policyMapping =
            PolicyChecker.mergePolicyMapping(policyMapping, icert);
        inhibitAnyPolicy =
            PolicyChecker.mergeInhibitAnyPolicy(inhibitAnyPolicy, icert);
        certIndex++;

        /*
         * Update remaining CA certs
         */
        remainingCACerts =
            ConstraintsChecker.mergeBasicConstraints(cert, remainingCACerts);

        init = false;
    }"
345,6465751.txt,none,"    private void processImportBundle ( final BundleInformation result, final Attributes ma )
    {
        for ( final AttributedValue av : emptyNull ( Headers.parseList ( ma.getValue ( Constants.REQUIRE_BUNDLE ) ) ) )
        {
            final String name = av.getValue ();
            final String vs = av.getAttributes ().get ( ""bundle-version"" );
            VersionRange vr = null;
            if ( vs != null )
            {
                vr = new VersionRange ( vs );
            }
            final boolean optional = ""optional"".equals ( av.getAttributes ().get ( ""resolution"" ) );
            final boolean reexport = ""reexport"".equals ( av.getAttributes ().get ( ""visibility"" ) );
            result.getBundleRequirements ().add ( new BundleRequirement ( name, vr, optional, reexport ) );
        }
    }"
346,4555364.txt,none,"    public static boolean isInfinite(Number num) {
        if (num instanceof Double) {
            return ((Double) num).isInfinite();
        } else if (num instanceof Float) {
            return ((Float) num).isInfinite();
        } else if (hasTypeThatIsKnownToNotSupportInfiniteAndNaN(num)) {
            return false;
        } else {
            throw new UnsupportedNumberClassException(num.getClass());
        }           
    }"
347,5138043.txt,none,"    public static EarModule newEarModule( Artifact artifact, JavaEEVersion javaEEVersion, String defaultLibBundleDir,
                                          Boolean includeInApplicationXml,
                                          ArtifactTypeMappingService typeMappingService )
        throws UnknownArtifactTypeException
    {
        // Get the standard artifact type based on default config and user-defined mapping(s)
        final String artifactType;
        try
        {
            artifactType = typeMappingService.getStandardType( artifact.getType() );
        }
        catch ( UnknownArtifactTypeException e )
        {
            throw new UnknownArtifactTypeException( e.getMessage() + "" for "" + artifact.getArtifactId() );
        }

        if ( ""jar"".equals( artifactType ) )
        {
            return new JarModule( artifact, defaultLibBundleDir, includeInApplicationXml );
        }
        else if ( ""ejb"".equals( artifactType ) )
        {
            return new EjbModule( artifact );
        }
        else if ( ""par"".equals( artifactType ) )
        {
            return new ParModule( artifact );
        }
        else if ( ""ejb-client"".equals( artifactType ) )
        {
            // Somewhat weird way to tackle the problem described in MEAR-85
            if ( javaEEVersion.le( JavaEEVersion.ONE_DOT_FOUR ) )
            {
                return new EjbClientModule( artifact, null );
            }
            else
            {
                return new EjbClientModule( artifact, defaultLibBundleDir );
            }
        }
        else if ( ""app-client"".equals( artifactType ) )
        {
            return new AppClientModule( artifact );
        }
        else if ( ""rar"".equals( artifactType ) )
        {
            return new RarModule( artifact );
        }
        else if ( ""war"".equals( artifactType ) )
        {
            return new WebModule( artifact );
        }
        else if ( ""sar"".equals( artifactType ) )
        {
            return new SarModule( artifact );
        }
        else if ( ""wsr"".equals( artifactType ) )
        {
            return new WsrModule( artifact );
        }
        else if ( ""har"".equals( artifactType ) )
        {
            return new HarModule( artifact );
        }
        else
        {
            throw new IllegalStateException( ""Could not handle artifact type["" + artifactType + ""]"" );
        }
    }"
348,5422127.txt,major,"        @Override
        public Component getNextComponent(final Container container, final Component component,
            final FocusTraversalDirection direction) {
            Utils.checkNull(container, ""container"");
            Utils.checkNull(direction, ""direction"");

            Component nextComponent = null;

            int n = container.getLength();
            if (n > 0) {
                switch (direction) {
                    case FORWARD:
                        if (component == null) {
                            // Return the first component in the sequence
                            nextComponent = container.get(0);
                        } else {
                            // Return the next component in the sequence
                            int index = container.indexOf(component);
                            if (index == -1) {
                                throw new IllegalArgumentException(""Component is not a child of the container."");
                            }

                            if (index < n - 1) {
                                nextComponent = container.get(index + 1);
                            } else {
                                if (wrap) {
                                    nextComponent = container.get(0);
                                }
                            }
                        }

                        break;

                    case BACKWARD:
                        if (component == null) {
                            // Return the last component in the sequence
                            nextComponent = container.get(n - 1);
                        } else {
                            // Return the previous component in the sequence
                            int index = container.indexOf(component);
                            if (index == -1) {
                                throw new IllegalArgumentException(""Component is not a child of the container."");
                            }

                            if (index > 0) {
                                nextComponent = container.get(index - 1);
                            } else {
                                if (wrap) {
                                    nextComponent = container.get(n - 1);
                                }
                            }
                        }

                        break;

                    default:
                        break;
                }
            }

            return nextComponent;
        }"
349,7141052.txt,none,"    private static IClassFile resolveClassFile(String uriString) {
        if (uriString == null || uriString.isEmpty()) {
            return null;
        }
        try {
            URI uri = new URI(uriString);
            if (uri != null && JDT_SCHEME.equals(uri.getScheme()) && ""contents"".equals(uri.getAuthority())) {
                String handleId = uri.getQuery();
                IJavaElement element = JavaCore.create(handleId);
                IClassFile cf = (IClassFile) element.getAncestor(IJavaElement.CLASS_FILE);
                return cf;
            }
        } catch (URISyntaxException e) {
            // ignore
        }
        return null;
    }"
350,6250253.txt,none,"    public void displayWarning(final String message) {
        notificationMessage.showNotification(SPUIStyleDefinitions.SP_NOTIFICATION_WARNING_MESSAGE_STYLE, null, message,
                true);
    }"
351,3784303.txt,none,"        @Override
        public void execute(Tuple tuple, Object state, TimeWindow window) {
            LOG.info(""executing on window:{}"", window);
            Map<String, Integer> counts = (Map<String, Integer>) state;
            List<Object> partialWordCounts = tuple.getValues();
            for (Object partialWordCount : partialWordCounts) {
                Pair<String, Integer> pair = (Pair<String, Integer>) partialWordCount;
                counts.put(pair.getFirst(), pair.getSecond());
            }
        }"
352,6773572.txt,none,"    public ListenableFuture<APINodeList<InstagramUser>> executeAsync(Map<String, Object> extraParams) throws APIException {
      return Futures.transform(
        executeAsyncInternal(extraParams),
        new Function<ResponseWrapper, APINodeList<InstagramUser>>() {
           public APINodeList<InstagramUser> apply(ResponseWrapper result) {
             try {
               return APIRequestGetInstagramAccounts.this.parseResponse(result.getBody(), result.getHeader());
             } catch (Exception e) {
               throw new RuntimeException(e);
             }
           }
         }
      );
    };"
353,4217515.txt,none,"    @Override
    public Set<Entry<String, Object>> entrySet() {
        return new EntrySetImpl();
    }"
354,6432034.txt,none,"    @Override
    public PropertyNode getMaxNodesPerHistoryUpdateDataNode() {
        Optional<VariableNode> propertyNode = getPropertyNode(OperationLimitsType.MAX_NODES_PER_HISTORY_UPDATE_DATA);
        return (PropertyNode) propertyNode.orElse(null);
    }"
355,7592195.txt,none,"  @CliCommand(value = ""!g"",
      help = ""Passes a command directly through to the Felix shell infrastructure."")
  public void shell(
      @CliOption(
          key = """",
          mandatory = false,
          specifiedDefaultValue = ""help"",
          unspecifiedDefaultValue = ""help"",
          help = ""The command to pass to Felix (WARNING: no validation or security checks are performed).""
              + ""Default: `help`."") final String commandLine) throws Exception {

    perform(commandLine);
  }"
356,9143369.txt,none,"	public IBaseDataSetEventHandler getEventHandler( )
	{
		return this.source.getEventHandler( );
	}"
357,4496686.txt,none,"    @SuppressWarnings(""unchecked"")
    public SinkProcessorConfiguration getConfiguration(String name)
        throws ConfigurationException {
      Class<? extends SinkProcessorConfiguration> clazz;
      SinkProcessorConfiguration instance = null;
      try {
        if (processorClassName != null) {
          clazz =
              (Class<? extends SinkProcessorConfiguration>) Class
                  .forName(processorClassName);
          instance = clazz.getConstructor(String.class).newInstance(name);

        } else {
          return new SinkProcessorConfiguration(name);
        }
      } catch (ClassNotFoundException e) {
        // Could not find the configuration stub, do basic validation
        instance = new SinkProcessorConfiguration(name);
        // Let the caller know that this was created because of this exception.
        instance.setNotFoundConfigClass();
      } catch (Exception e) {
        throw new ConfigurationException(
            ""Could not instantiate configuration!"", e);
      }
      return instance;
    }"
358,5774985.txt,none,"    @Override
    public int countExecutions(final String taskKey) {
        return getService(ReportService.class).
                listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();
    }"
359,8230227.txt,none,"    public void ignorableWhitespace(char ch[], int start, int len)
    throws SAXException {
        this.log (""ignorableWhitespace"", new String(ch,start,len));
        if (super.contentHandler!=null) {
            super.contentHandler.ignorableWhitespace(ch,start,len);
        }
    }"
360,4467093.txt,none,"  @Override
  public void cleanUp() {
    final DrillConnectionImpl connection1 = (DrillConnectionImpl) connection;
    connection1.openStatementsRegistry.removeStatement(this);
  }"
361,6344285.txt,minor,"	@Override
	public void initializeDefaultPreferences() {
		IPreferenceStore store = Activator.getDefault().getPreferenceStore();
		store.setDefault(PreferenceConstants.P_CURRENT_RPMTOOLS, PreferenceConstants.DP_RPMTOOLS_RPM);
		store.setDefault(PreferenceConstants.P_RPM_LIST_FILEPATH, PreferenceConstants.DP_RPM_LIST_FILEPATH);
		store.setDefault(PreferenceConstants.P_RPM_LIST_MAX_PROPOSALS, PreferenceConstants.DP_RPM_LIST_MAX_PROPOSALS);
		store.setDefault(PreferenceConstants.P_RPM_LIST_BACKGROUND_BUILD,
				PreferenceConstants.DP_RPM_LIST_BACKGROUND_BUILD);
		store.setDefault(PreferenceConstants.P_RPM_LIST_BUILD_PERIOD, PreferenceConstants.DP_RPM_LIST_BUILD_PERIOD);
		store.setDefault(PreferenceConstants.P_MACRO_PROPOSALS_FILESPATH,
				PreferenceConstants.DP_MACRO_PROPOSALS_FILESPATH);
		store.setDefault(PreferenceConstants.P_CHANGELOG_LOCAL, PreferenceConstants.DP_CHANGELOG_LOCAL);
		store.setDefault(PreferenceConstants.P_CHANGELOG_ENTRY_FORMAT, PreferenceConstants.DP_CHANGELOG_ENTRY_FORMAT);
		store.setDefault(PreferenceConstants.P_MACRO_HOVER_CONTENT,
				PreferenceConstants.P_MACRO_HOVER_CONTENT_VIEWDESCRIPTION);
		store.setDefault(PreferenceConstants.P_RPMINFO_NAME, PreferenceConstants.DP_RPMINFO_NAME);
		store.setDefault(PreferenceConstants.P_RPMINFO_VERSION, PreferenceConstants.DP_RPMINFO_VERSION);
		store.setDefault(PreferenceConstants.P_RPMINFO_RELEASE, PreferenceConstants.DP_RPMINFO_RELEASE);
		store.setDefault(PreferenceConstants.P_RPMINFO_SUMMARY, PreferenceConstants.DP_RPMINFO_SUMMARY);
		store.setDefault(PreferenceConstants.P_RPMINFO_LICENSE, PreferenceConstants.DP_RPMINFO_LICENSE);
		store.setDefault(PreferenceConstants.P_RPMINFO_GROUP, PreferenceConstants.DP_RPMINFO_GROUP);
		store.setDefault(PreferenceConstants.P_RPMINFO_URL, PreferenceConstants.DP_RPMINFO_URL);
		store.setDefault(PreferenceConstants.P_RPMINFO_DESCRIPTION, PreferenceConstants.DP_RPMINFO_DESCRIPTION);
		store.setDefault(PreferenceConstants.P_RPMINFO_INSTALLTIME, PreferenceConstants.DP_RPMINFO_INSTALLTIME);
		store.setDefault(PreferenceConstants.P_RPMINFO_SIZE, PreferenceConstants.DP_RPMINFO_SIZE);
		store.setDefault(PreferenceConstants.P_RPMINFO_PACKAGER, PreferenceConstants.DP_RPMINFO_PACKAGER);
		store.setDefault(PreferenceConstants.P_RPMINFO_VENDOR, PreferenceConstants.DP_RPMINFO_VENDOR);
		store.setDefault(PreferenceConstants.P_RPMINFO_BUILDTIME, PreferenceConstants.DP_RPMINFO_BUILDTIME);
		store.setDefault(PreferenceConstants.P_RPMINFO_SOURCERPM, PreferenceConstants.DP_RPMINFO_SOURCERPM);
		store.setDefault(PreferenceConstants.P_TASK_TAGS, PreferenceConstants.DP_TASK_TAGS);
		// Convert tab by spaces
		store.setDefault(PreferenceConstants.P_SPACES_FOR_TABS, PreferenceConstants.DP_SPACES_FOR_TABS);
		store.setDefault(PreferenceConstants.P_NBR_OF_SPACES_FOR_TAB, PreferenceConstants.DP_NBR_OF_SPACES_FOR_TAB);

	}"
362,8007538.txt,none,"    public final void synpred7_InternalParametersTestLanguageEx_fragment() throws RecognitionException {   
        // InternalParametersTestLanguageEx.g:828:4: ( ( ruleIdOrKeyword ) )
        // InternalParametersTestLanguageEx.g:828:5: ( ruleIdOrKeyword )
        {
        // InternalParametersTestLanguageEx.g:828:5: ( ruleIdOrKeyword )
        // InternalParametersTestLanguageEx.g:829:5: ruleIdOrKeyword
        {
        pushFollow(FollowSets000.FOLLOW_2);
        ruleIdOrKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }"
363,4318095.txt,none,"	public final Dependable getDependable(DataDictionary dd, UUID dependableObjectID)
		throws StandardException
	{
        Dependable dependable = findDependable(dd, dependableObjectID);
        if (dependable == null)
            throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND,
                    getSQLObjectType(), dependableObjectID);
        return dependable;
    }"
364,5555115.txt,none,"    public list_sentry_privileges_by_user_and_itsgroups_args(
      TListSentryPrivilegesRequest request)
    {
      this();
      this.request = request;
    }"
365,9236949.txt,none,"    protected List<XRGlyphCacheEntry>[] seperateGlyphTypes(List<XRGlyphCacheEntry> glyphList, boolean containsLCDGlyphs) {
        ArrayList<XRGlyphCacheEntry> lcdGlyphs = null;
        ArrayList<XRGlyphCacheEntry> grayGlyphs = null;

        for (XRGlyphCacheEntry cacheEntry : glyphList) {
            if (cacheEntry.isGrayscale(containsLCDGlyphs)) {
                if (grayGlyphs == null) {
                    grayGlyphs = new ArrayList<>(glyphList.size());
                }
                cacheEntry.setGlyphSet(grayGlyphSet);
                grayGlyphs.add(cacheEntry);
            } else {
                if (lcdGlyphs == null) {
                    lcdGlyphs = new ArrayList<>(glyphList.size());
                }
                cacheEntry.setGlyphSet(lcdGlyphSet);
                lcdGlyphs.add(cacheEntry);
            }
        }
        // Arrays and generics don't play well together
        @SuppressWarnings({""unchecked"", ""rawtypes""})
        List<XRGlyphCacheEntry>[] tmp =
            (List<XRGlyphCacheEntry>[]) (new List[] { grayGlyphs, lcdGlyphs });
        return tmp;
    }"
366,6427968.txt,none,"    public void testInvalidType_2() {
        Dialog dialog = getWarningDialog(""Invalid"",  ""Is this invalid?"");
        DialogCheck.assertDialog(dialog);
    }"
367,7043418.txt,none,"    EC2CredentialsUtils(ConnectionUtils connectionUtils) {
        this.connectionUtils = connectionUtils;
    }"
368,4745033.txt,none,"    @Override
    public SourceVersion getSupportedSourceVersion() {
        try {
            return SourceVersion.valueOf(""RELEASE_8""); // NOI18N
        } catch (IllegalArgumentException ex) {
            return SourceVersion.RELEASE_7;
        }
    }"
369,7517076.txt,none,"    @Override
    public Pair<String, String> toCSVFormat(long value) {
        return toCSVFormatHelper(value);
    }"
370,7824232.txt,none,"  public static DataPolicy fromString(String s) {
    String[] allowedValues =
        new String[] {""EMPTY"", ""NORMAL"", ""REPLICATE"", ""PERSISTENT_REPLICATE"", ""PARTITION"",
            ""PRELOADED"", ""PERSISTENT_PARTITION""};
    int valueIndex = -1;
    for (int i = 0; i < allowedValues.length; i++) {
      if (allowedValues[i].equals(s)) {
        valueIndex = i;
        break;
      }
    }

    if (valueIndex != -1)
      return VALUES[valueIndex];

    return null;
  }"
371,8660273.txt,critical,"        @Override
        public void addOptionValues(List<OptionValue> optionValues, Map<String, Object> context, Delegator delegator) {
            // first expand any conditions that need expanding based on the current context
            EntityCondition findCondition = null;
            if (UtilValidate.isNotEmpty(this.constraintList)) {
                List<EntityCondition> expandedConditionList = new LinkedList<>();
                for (EntityFinderUtil.Condition condition : constraintList) {
                    ModelEntity modelEntity = delegator.getModelEntity(this.entityName);
                    if (modelEntity == null) {
                        throw new IllegalArgumentException(""Error in entity-options: could not find entity ["" + this.entityName
                                + ""]"");
                    }
                    EntityCondition createdCondition = condition.createCondition(context, modelEntity,
                            delegator.getModelFieldTypeReader(modelEntity));
                    if (createdCondition != null) {
                        expandedConditionList.add(createdCondition);
                    }
                }
                findCondition = EntityCondition.makeCondition(expandedConditionList);
            }

            try {
                Locale locale = UtilMisc.ensureLocale(context.get(""locale""));
                ModelEntity modelEntity = delegator.getModelEntity(this.entityName);
                Boolean localizedOrderBy = UtilValidate.isNotEmpty(this.orderByList)
                        && ModelUtil.isPotentialLocalizedFields(modelEntity, this.orderByList);

                List<GenericValue> values = null;
                if (!localizedOrderBy) {
                    values = delegator.findList(this.entityName, findCondition, null, this.orderByList, null, this.cache);
                } else {
                    //if entity has localized label
                    values = delegator.findList(this.entityName, findCondition, null, null, null, this.cache);
                    values = EntityUtil.localizedOrderBy(values, this.orderByList, locale);
                }

                // filter-by-date if requested
                if (""true"".equals(this.filterByDate)) {
                    values = EntityUtil.filterByDate(values, true);
                } else if (!""false"".equals(this.filterByDate)) {
                    // not explicitly true or false, check to see if has fromDate and thruDate, if so do the filter
                    if (modelEntity != null && modelEntity.isField(""fromDate"") && modelEntity.isField(""thruDate"")) {
                        values = EntityUtil.filterByDate(values, true);
                    }
                }

                for (GenericValue value : values) {
                    // add key and description with string expansion, ie expanding ${} stuff, passing locale explicitly to expand value string because it won't be found in the Entity
                    MapStack<String> localContext = MapStack.create(context);
                    // Rendering code might try to modify the GenericEntity instance,
                    // so we make a copy of it.
                    Map<String, Object> genericEntityClone = UtilGenerics.cast(value.clone());
                    localContext.push(genericEntityClone);

                    // expand with the new localContext, which is locale aware
                    String optionDesc = this.description.expandString(localContext, locale);

                    Object keyFieldObject = value.get(this.getKeyFieldName());
                    if (keyFieldObject == null) {
                        throw new IllegalArgumentException(
                                ""The entity-options identifier (from key-name attribute, or default to the field name) [""
                                        + this.getKeyFieldName() + ""], may not be a valid key field name for the entity [""
                                        + this.entityName + ""]."");
                    }
                    String keyFieldValue = keyFieldObject.toString();
                    optionValues.add(new OptionValue(keyFieldValue, optionDesc));
                }
            } catch (GenericEntityException e) {
                Debug.logError(e, ""Error getting entity options in form"", module);
            }
        }"
372,4896610.txt,none,"    @Override
    public boolean releaseCheckpoint(String checkpoint) {
        log.info(""Released checkpoint [{}]"", checkpoint);
        return store.release(checkpoint);
    }"
373,7592205.txt,none,"  protected void bindMetadataProvider(final MetadataProvider mp) {
    synchronized (lock) {
      Validate.notNull(mp, ""Metadata provider required"");
      final String mid = mp.getProvidesType();
      Validate.isTrue(MetadataIdentificationUtils.isIdentifyingClass(mid),
          ""Metadata provider '%s' violated interface contract by returning '%s'"", mp, mid);
      Validate.isTrue(!providerMap.containsKey(mid),
          ""Metadata provider '%s' already is providing metadata for '%s'"", providerMap.get(mid),
          mid);
      providers.add(mp);
      providerMap.put(mid, mp);
    }
  }"
374,4900050.txt,none,"  @Override
  public List<String> getPropertyNames() {
    return Collections.EMPTY_LIST;
  }"
375,8966555.txt,none,"    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      case O1:
        if (value == null) {
          unsetO1();
        } else {
          setO1((MetaException)value);
        }
        break;

      }
    }"
376,6021504.txt,none,"        @JsonCreator
        public UsernamePasswordAuthentication(
            @JsonProperty(""username"") String username,
            @JsonProperty(""password"") String password) {
            this.password = password;
            this.username = username;
        }"
377,9410474.txt,none,"    public void comment(char[] chars, int offset, int length)
        throws SAXException
    {
        if (_dom == null) {
           prepareNewDOM();
        }

        maybeEmitStartElement();
        _dom.comment(chars, offset, length);
    }"
378,7882655.txt,major,"    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchRuleKeyLogsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RULE_KEYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                struct.ruleKeys = new java.util.ArrayList<java.lang.String>(_list184.size);
                java.lang.String _elem185;
                for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                {
                  _elem185 = iprot.readString();
                  struct.ruleKeys.add(_elem185);
                }
                iprot.readListEnd();
              }
              struct.setRuleKeysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REPOSITORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.repository = iprot.readString();
              struct.setRepositoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scheduleType = iprot.readString();
              struct.setScheduleTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DISTRIBUTED_BUILD_MODE_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.distributedBuildModeEnabled = iprot.readBool();
              struct.setDistributedBuildModeEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }"
379,4372641.txt,none,"    public void clientCreated(Client client) {
        for (ClientLifeCycleListener listener : listeners) {
            listener.clientCreated(client);
        }
    }"
380,7491946.txt,none,"        private ExternalLibrary(String name, Path path, boolean isNative, boolean isInternal) {
            this.name = name;
            this.path = path;
            this.isNative = isNative;
            this.isInternal = isInternal;
        }"
381,5788583.txt,none,"  public int writeLength() throws IOException {
    int length = 0;
    int mapIdLength = Text.encode(mapId).limit();
    length += mapIdLength;

    length += WritableUtils.getVIntSize(mapIdLength);
    length += WritableUtils.getVIntSize(compressedLength);
    length += WritableUtils.getVIntSize(uncompressedLength);
    length += WritableUtils.getVIntSize(forReduce);

    return length;
  }"
382,5621210.txt,none,"    protected FileNode createFileNode(IFileSpecification specification)
    {
        // Only defer function body if the compilation unit is from an actual AS 
        // file, and the compilation unit is not ""invisible"" (currently not 
        // open in IDE). ""isInvisible"" means the compilation unit is invisible 
        // to semantic analyzer. It, however, is ""visible"" to the user in the 
        // IDE.
        final DeferFunctionBody deferFunctionBody;
        if(!isInvisible() && specification instanceof FileSpecification)
            deferFunctionBody = DeferFunctionBody.ENABLED;
        else
            deferFunctionBody = DeferFunctionBody.DISABLED;

        final IASProject flashProject;
        if(getProject() instanceof IASProject)
            flashProject = (IASProject)getProject();
        else
            flashProject = null;
        
        // Parse the AS file into an AST and build a symbol table for it.
        return ASParser.parseFile(
                specification,
                getFileSpecificationGetter(),
                EnumSet.of(PostProcessStep.CALCULATE_OFFSETS),
                this.getProject().getProjectConfigVariables(),
                true,
                this.getProject().isAssetEmbeddingSupported(),
                includedFiles,
                deferFunctionBody,
                flashProject,
                this);
    }"
383,6085688.txt,none,"    @Override
    @TypeInfo(""ceylon.language.meta.model::CallableConstructor<Type,Arguments>|ceylon.language::Null"")
    public CallableConstructor<Type, Arguments> getDefaultConstructor() {
        if (hasConstructors() || hasEnumerated()) {
            Object ctor = getConstructor($reifiedArguments, """");
            if (ctor instanceof CallableConstructor) {
                return ((CallableConstructor<Type, Arguments>)ctor);
            } else {
                return null;
            }
        } else {
            return new ClassInitializerConstructor<>(this);
        }
    }"
384,4523536.txt,minor,"    private void writeJSON( final Writer pw, final ServiceReference service, final boolean fullDetails, final Locale locale, final String filter )
            throws IOException
    {
        final ServiceReference[] allServices = this.getServices(filter);
        final String statusLine = getStatusLine( allServices );

        final ServiceReference[] services = ( service != null ) ? new ServiceReference[]
                { service } : allServices;

                final JSONWriter jw = new JSONWriter( pw );

                jw.object();

                jw.key( ""status"" );
                jw.value( statusLine );

                jw.key( ""serviceCount"" );
                jw.value( allServices.length );

                jw.key( ""data"" );

                jw.array();

                for ( int i = 0; i < services.length; i++ )
                {
                    serviceInfo( jw, services[i], fullDetails || service != null, locale );
                }

                jw.endArray();

                jw.endObject();

    }"
385,7628549.txt,none,"    public static void setLocalImageDescriptors(IAction action, String iconName) {
        setImageDescriptors(action, ""lcl16"", iconName);
    }"
386,6310643.txt,none,"    @Override
    public String toString() {
        return getSchema() + ""://"" + getDns() + "":"" + getPort();
    }"
387,7698738.txt,none,"	boolean testnext(int c) {
		if (t.token == c) {
			next();
			return true;
		} else
			return false;
	}"
388,6431408.txt,none,    public UInteger getNodeClassMask() { return nodeClassMask; }
389,9301710.txt,minor,"    List<JCVariableDecl> freevarDefs(int pos, List<VarSymbol> freevars, Symbol owner,
            long additionalFlags) {
        long flags = FINAL | SYNTHETIC | additionalFlags;
        List<JCVariableDecl> defs = List.nil();
        Set<Name> proxyNames = new HashSet<>();
        for (List<VarSymbol> l = freevars; l.nonEmpty(); l = l.tail) {
            VarSymbol v = l.head;
            int index = 0;
            Name proxyName;
            do {
                proxyName = proxyName(v.name, index++);
            } while (!proxyNames.add(proxyName));
            VarSymbol proxy = new VarSymbol(
                flags, proxyName, v.erasure(types), owner);
            proxies.put(v, proxy);
            JCVariableDecl vd = make.at(pos).VarDef(proxy, null);
            vd.vartype = access(vd.vartype);
            defs = defs.prepend(vd);
        }
        return defs;
    }"
390,7426271.txt,none,"    @Override
    public String toString()
    {
        return description.toString();
    }"
391,3719020.txt,none,"        private ClassDefItemConsumer(String name, Future<ClassDefItem> futureClazz,
                int maxMethodIdsInClass, int maxFieldIdsInClass) {
            this.name = name;
            this.futureClazz = futureClazz;
            this.maxMethodIdsInClass = maxMethodIdsInClass;
            this.maxFieldIdsInClass = maxFieldIdsInClass;
        }"
392,5749626.txt,none,"  private int calculateFanout(int remainInputChunks, int inputNum, int outputNum, int startIdx) {
    int computedFanout = Math.min(remainInputChunks, defaultFanout);

    // Why should we detect an opportunity for unbalanced merge?
    //
    // Assume that a fanout is given by 8 and there are 10 chunks.
    // If we firstly merge 3 chunks into one chunk, there remain only 8 chunks.
    // Then, we can just finish the merge phase even though we don't complete merge phase on all chunks.
    if (checkIfCanBeUnbalancedMerged(inputNum - (startIdx + computedFanout), outputNum + 1)) {
      int candidateFanout = computedFanout;
      while (checkIfCanBeUnbalancedMerged(inputNum - (startIdx + candidateFanout), outputNum + 1)) {
        candidateFanout--;
      }
      int beforeFanout = computedFanout;
      if (computedFanout > candidateFanout + 1) {
        computedFanout = candidateFanout + 1;
        info(LOG, ""Fanout reduced for unbalanced merge: "" + beforeFanout + "" -> "" + computedFanout);
      }
    }

    return computedFanout;
  }"
393,5180986.txt,none,"  public JavaCharStream(java.io.Reader dstream,
                 int startline, int startcolumn, int buffersize)
  {
    inputStream = dstream;
    line = startline;
    column = startcolumn - 1;

    available = bufsize = buffersize;
    buffer = new char[buffersize];
    bufline = new int[buffersize];
    bufcolumn = new int[buffersize];
    nextCharBuf = new char[4096];
  }"
394,7386739.txt,none,"		private void addMethod(Method method) {
			addMethodIfPossible(method, ""get"", 0, BeanProperty::addGetter);
			addMethodIfPossible(method, ""is"", 0, BeanProperty::addGetter);
			addMethodIfPossible(method, ""set"", 1, BeanProperty::addSetter);
		}"
395,8783754.txt,none,"  @Override
  public final short getFsPermissionShort() {
    return referred.getFsPermissionShort();
  }"
396,6840071.txt,none,"	protected void sequence_JSXSpreadAttribute(ISerializationContext context, JSXSpreadAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}"
397,6946489.txt,none,"    public final void mAsteriskEqualsSign() throws RecognitionException {
        try {
            int _type = AsteriskEqualsSign;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            {
            match(""*=""); 


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }"
398,6323354.txt,none,"    @Override
    public KapuaResponseMessage<?, ?> publish(KapuaDataMessage requestMessage, Long timeout)
            throws KapuaException {
        //
        // Argument validation
        ArgumentValidator.notNull(requestMessage.getScopeId(), ""scopeId"");
        ArgumentValidator.notNull(requestMessage.getDeviceId(), ""deviceId"");
        ArgumentValidator.notNull(requestMessage.getClientId(), ""clientId"");

        //
        // Check Access
        AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(StreamDomains.STREAM_DOMAIN, Actions.write, requestMessage.getScopeId()));

        //
        // Do publish
        TransportFacade<?, ?, TransportMessage<?, ?>, ?> transportFacade = null;
        try {

            Device device = DEVICE_REGISTRY_SERVICE.find(requestMessage.getScopeId(), requestMessage.getDeviceId());

            if (device == null) {
                throw new KapuaEntityNotFoundException(Device.TYPE, requestMessage.getDeviceId());
            }

            String nodeUri = device.getConnection().getServerIp();

            //
            // Borrow a KapuaClient
            transportFacade = borrowClient(nodeUri);

            //
            // Get Kura to transport translator for the request and vice versa
            Translator<KapuaDataMessage, KuraDataMessage> translatorKapuaKura = getTranslator(KapuaDataMessage.class, KuraDataMessage.class);
            Translator<KuraDataMessage, ?> translatorKuraTransport = getTranslator(KuraDataMessage.class, transportFacade.getMessageClass());

            KuraDataMessage kuraDataMessage = translatorKapuaKura.translate(requestMessage);

            //
            // Do send
            try {
                // Set current timestamp
                kuraDataMessage.setTimestamp(new Date());

                // Send
                transportFacade.sendAsync((TransportMessage<?, ?>) translatorKuraTransport.translate(kuraDataMessage));

            } catch (KapuaException e) {
                throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CLIENT_SEND_ERROR,
                        e,
                        (Object[]) null);
            }
        } catch (KapuaException ke) {
            throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,
                    ke,
                    (Object[]) null);
        } finally {
            if (transportFacade != null) {
                transportFacade.clean();
            }
        }

        return null;
    }"
399,7928090.txt,none,"		@Override
		protected void handleError(Exception exception) {
			if (!(exception instanceof RollbackException))
				super.handleError(exception);
		}"
400,8455135.txt,none,"    public GoraEndpoint(final String uri,
                        final GoraComponent goraComponent,
                        final GoraConfiguration config,
                        final DataStore<Object, Persistent> dataStore) {

        super(uri, goraComponent);
        this.configuration = config;
        this.dataStore = dataStore;
    }"
401,3961246.txt,none,"        @Override
        public Consumer build(BlockingQueue<JsonNode> queue) {
            return (isResuming)
                    ? new ResumingConsumer(queue, graph, bulkLoadGraph, parseElement, batchSize)
                    : new Consumer(queue, graph, bulkLoadGraph, parseElement, batchSize);
        }"
402,6017172.txt,none,"    private ModelAndView getUserApprovalPageResponse(Map<String, Object> model,
                                                     AuthorizationRequest authorizationRequest, Authentication principal) {
        logger.debug(""Loading user approval page: "" + userApprovalPage);
        model.putAll(userApprovalHandler.getUserApprovalRequest(authorizationRequest, principal));
        return new ModelAndView(userApprovalPage, model);
    }"
403,5723559.txt,none,"    protected static void copyBlobStoreKeys(BlobStore bsFrom, Subject whoFrom, BlobStore bsTo, Subject whoTo) throws AuthorizationException, KeyAlreadyExistsException, IOException, KeyNotFoundException {
        Iterable<String> lfsKeys = () -> bsFrom.listKeys();
        for(String key : lfsKeys) {
            ReadableBlobMeta readable_meta = bsFrom.getBlobMeta(key, whoFrom);
            SettableBlobMeta meta = readable_meta.get_settable();
            InputStream in = bsFrom.getBlob(key, whoFrom);
            System.out.println(""COPYING BLOB "" + key + "" FROM "" + bsFrom + "" TO "" + bsTo);
            bsTo.createBlob(key, in, meta, whoTo);
            System.out.println(""DONE CREATING BLOB "" + key);
        }
    }"
404,7792077.txt,none,"		Provision resolve()
		{

			if (pageId != null)
			{
				IRequestablePage stored = getPageSource().getPageInstance(pageId);
				if (stored != null && (pageClass == null || pageClass.equals(stored.getClass())))
				{

					page = stored;

					if (renderCount != null && page.getRenderCount() != renderCount)
						throw new StalePageException(page);
				}

				failedToFindStoredPage = page == null;
			}

			return this;
		}"
405,4092105.txt,minor,"    public List<Long> getOrderedLogFileIds() {
        File fileLogDir = new File(logDir);
        String[] logFileNames = null;
        List<Long> logFileIds = null;
        if (!fileLogDir.exists()) {
            LOGGER.log(Level.INFO, ""log dir "" + logDir + "" doesn't exist.  returning empty list"");
            return Collections.emptyList();
        }
        if (!fileLogDir.isDirectory()) {
            throw new IllegalStateException(""log dir "" + logDir + "" exists but it is not a directory"");
        }
        logFileNames = fileLogDir.list((dir, name) -> name.startsWith(logFilePrefix));
        if (logFileNames == null) {
            throw new IllegalStateException(""listing of log dir ("" + logDir + "") files returned null. ""
                    + ""Either an IO error occurred or the dir was just deleted by another process/thread"");
        }
        if (logFileNames.length == 0) {
            LOGGER.log(Level.INFO, ""the log dir ("" + logDir + "") is empty. returning empty list"");
            return Collections.emptyList();
        }
        logFileIds = new ArrayList<>();
        for (String fileName : logFileNames) {
            logFileIds.add(Long.parseLong(fileName.substring(logFilePrefix.length() + 1)));
        }
        logFileIds.sort(Long::compareTo);
        return logFileIds;
    }"
406,5535647.txt,none,"  default V get(K key) {
    try {
      return getAsync(key).get();
    } catch (InterruptedException | ExecutionException e) {
      throw new SamzaException(""GET failed for "" + key, e);
    }
  }"
407,8195539.txt,minor,"    public Future<?> monitorUntil(final ActiveAnnotationContext ctx, final CancelIndicator cancelIndicator, final Function0<? extends Boolean> isFinished) {
      Future<?> _xblockexpression = null;
      {
        final Runnable _function = () -> {
          try {
            while ((!(isFinished.apply()).booleanValue())) {
              {
                boolean _isCanceled = cancelIndicator.isCanceled();
                if (_isCanceled) {
                  CompilationUnitImpl _compilationUnit = ctx.getCompilationUnit();
                  _compilationUnit.setCanceled(true);
                  return;
                }
                Thread.sleep(100);
              }
            }
          } catch (Throwable _e) {
            throw Exceptions.sneakyThrow(_e);
          }
        };
        final Runnable r = _function;
        Future<?> _xtrycatchfinallyexpression = null;
        try {
          _xtrycatchfinallyexpression = this.pool.submit(r);
        } catch (final Throwable _t) {
          if (_t instanceof RejectedExecutionException) {
            final RejectedExecutionException e = (RejectedExecutionException)_t;
            AnnotationProcessor.CancellationObserver.log.debug(e.getMessage(), e);
            new Thread(r).start();
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
        _xblockexpression = _xtrycatchfinallyexpression;
      }
      return _xblockexpression;
    }"
408,5278260.txt,critical,"    protected void refreshInternal(Collection objs, OpCallbacks call) {
    	if (objs == null || objs.isEmpty())
    		return;
        List<Exception> exceps = null;
        try {
            // collect instances that need a refresh
            Collection<OpenJPAStateManager> load = null;
            StateManagerImpl sm;
            Object obj;
            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {
                obj = itr.next();
                if (obj == null)
                    continue;

                try {
                    sm = getStateManagerImpl(obj, true);
                    if ((processArgument(OpCallbacks.OP_REFRESH, obj, sm, call)
                        & OpCallbacks.ACT_RUN) == 0)
                        continue;

                    if (sm != null) {
                        if (sm.isDetached())
                            throw newDetachedException(obj, ""refresh"");
                        else if (sm.beforeRefresh(true)) {
                        	if (load == null)
                        		load = new ArrayList<>(objs.size());
                            load.add(sm);
                        }
                        int level = _fc.getReadLockLevel();
                        int timeout = _fc.getLockTimeout();
                        _lm.refreshLock(sm, level, timeout, null);
                        sm.readLocked(level, level);
                    } else if (assertPersistenceCapable(obj).pcIsDetached()
                        == Boolean.TRUE)
                        throw newDetachedException(obj, ""refresh"");
                } catch (OpenJPAException ke) {
                    exceps = add(exceps, ke);
                }
            }

            // refresh all
            if (load != null) {
                Collection<Object> failed = _store.loadAll(load, null,
                    StoreManager.FORCE_LOAD_REFRESH, _fc, null);
                if (failed != null && !failed.isEmpty())
                    exceps = add(exceps, newObjectNotFoundException(failed));

                // perform post-refresh transitions and make sure all fetch
                // group fields are loaded
                for (Iterator<OpenJPAStateManager> itr = load.iterator(); itr.hasNext();) {
                    sm = (StateManagerImpl) itr.next();
                    if (failed != null && failed.contains(sm.getId()))
                        continue;

                    try {
                        sm.afterRefresh();
                        sm.load(_fc, StateManagerImpl.LOAD_FGS, null, null,
                            false);
                    } catch (OpenJPAException ke) {
                        exceps = add(exceps, ke);
                    }
                }
            }

            // now invoke postRefresh on all the instances
            for (Iterator<?> itr = objs.iterator(); itr.hasNext();) {
                try {
                    sm = getStateManagerImpl(itr.next(), true);
                    if (sm != null && !sm.isDetached())
                        fireLifecycleEvent(sm.getManagedInstance(), null,
                            sm.getMetaData(), LifecycleEvent.AFTER_REFRESH);
                } catch (OpenJPAException ke) {
                    exceps = add(exceps, ke);
                }
            }
        } catch (OpenJPAException ke) {
            throw ke;
        } catch (RuntimeException re) {
            throw new GeneralException(re);
        }
        throwNestedExceptions(exceps, false);
    }"
409,8087321.txt,none,"    public final EObject ruleModel() throws RecognitionException {
        EObject current = null;

        Token lv_name_0_0=null;


        	enterRule();

        try {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:77:2: ( ( (lv_name_0_0= RULE_ID ) ) )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )
            {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:78:2: ( (lv_name_0_0= RULE_ID ) )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )
            {
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:79:3: (lv_name_0_0= RULE_ID )
            // InternalLiveContainerBuilderIntegerationTestLanguage.g:80:4: lv_name_0_0= RULE_ID
            {
            lv_name_0_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2); 

            				newLeafNode(lv_name_0_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0());
            			

            				if (current==null) {
            					current = createModelElement(grammarAccess.getModelRule());
            				}
            				setWithLastConsumed(
            					current,
            					""name"",
            					lv_name_0_0,
            					""org.eclipse.xtext.common.Terminals.ID"");
            			

            }


            }


            }


            	leaveRule();

        }

            catch (RecognitionException re) {
                recover(input,re);
                appendSkippedTokens();
            }
        finally {
        }
        return current;
    }"
410,5420605.txt,none,"    @Test
    public void testImmutableKeywordAndProperty() throws Exception {
        Properties props = PropertiesUtil.deepCopy(TEST_PROPERTIES);
        String immutableDataTableFullName = SchemaUtil.getTableName("""", generateUniqueName());
        String mutableDataTableFullName = SchemaUtil.getTableName("""", generateUniqueName());
        try (Connection conn = DriverManager.getConnection(getUrl(), props);) {
            Statement stmt = conn.createStatement();
            try {
                // create immutable table with immutable table property set to true 
                String ddl = ""CREATE IMMUTABLE TABLE  "" + immutableDataTableFullName +
                        ""  (a_string varchar not null, col1 integer"" +
                        ""  CONSTRAINT pk PRIMARY KEY (a_string)) IMMUTABLE_ROWS=true"";
                stmt.execute(ddl);
                fail();
            }
            catch (SQLException e) {
                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());
            }
            
            try {
                // create immutable table with immutable table property set to false
                String ddl = ""CREATE IMMUTABLE TABLE  "" + mutableDataTableFullName +
                        ""  (a_string varchar not null, col1 integer"" +
                        ""  CONSTRAINT pk PRIMARY KEY (a_string))  IMMUTABLE_ROWS=false"";
                stmt.execute(ddl);
                fail();
            }
            catch (SQLException e) {
                assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(), e.getErrorCode());
            }
            
        } 
    }"
411,6567017.txt,none,"	public SWTFocusCellManager(ColumnViewer viewer,
			FocusCellHighlighter focusDrawingDelegate,
			CellNavigationStrategy navigationDelegate) {
		this.viewer = viewer;
		this.cellHighlighter = focusDrawingDelegate;
		if( this.cellHighlighter != null ) {
			this.cellHighlighter.setMgr(this);
		}

		this.navigationStrategy = navigationDelegate;
		hookListener(viewer);
	}"
412,7306229.txt,none,"    public void setServiceHost(final IBuildServiceHost value) {
        serviceHost = value;

        if (serviceHost != null) {
            getWebServiceObject().setServiceHostUri(serviceHost.getURI());
        } else {
            getWebServiceObject().setServiceHostUri(null);
        }
    }"
413,4073835.txt,none,"    public GetLastLogMarkService(ServerConfiguration conf) {
        checkNotNull(conf);
        this.conf = conf;
    }"
414,4932887.txt,minor,"    public Map< String, String > listLanguages(PageContext pageContext)
    {
        Map< String, String > resultMap = new LinkedHashMap<>();
        String clientLanguage = ((HttpServletRequest) pageContext.getRequest()).getLocale().toString();

        List< String > entries = ClassUtil.classpathEntriesUnder( DIRECTORY );
        for( String name : entries ) {
            if ( name.equals( I18NRESOURCE_EN ) ||
                    (name.startsWith( I18NRESOURCE_PREFIX ) && name.endsWith( I18NRESOURCE_SUFFIX ) ) )
            {
                if (name.equals( I18NRESOURCE_EN )) {
                    name = I18NRESOURCE_EN_ID;
                }    else {
                    name = name.substring(I18NRESOURCE_PREFIX.length(), name.lastIndexOf(I18NRESOURCE_SUFFIX));
                }
                Locale locale = new Locale(name.substring(0, 2), ((name.indexOf(""_"") == -1) ? """" : name.substring(3, 5)));
                String defaultLanguage = """";
                if (clientLanguage.startsWith(name))
                {
                    defaultLanguage = LocaleSupport.getLocalizedMessage(pageContext, I18NDEFAULT_LOCALE);
                }
                resultMap.put(name, locale.getDisplayName(locale) + "" "" + defaultLanguage);
            }
        }

        return resultMap;
    }"
415,4222354.txt,none,"        public Builder add(TableMetadata table)
        {
            tables.put(table.name, table);

            tablesById.put(table.id, table);

            table.indexes
                 .stream()
                 .filter(i -> !i.isCustom())
                 .map(i -> CassandraIndex.indexCfsMetadata(table, i))
                 .forEach(i -> indexTables.put(i.indexName().get(), i));

            return this;
        }"
416,6207209.txt,none,"  private void initializePages() {
    initialCommandName = editedCommand.getName();

    pages.forEach(
        page -> {
          page.edit(editedCommand);
          page.setDirtyStateListener(
              () -> {
                updateDirtyState(isDirtyPage());
                view.setSaveEnabled(isDirtyPage());
              });
        });
  }"
417,7888064.txt,none,"  private static Collection<Path> collectBasePaths(Iterable<? extends BuildTarget> targets) {
    return StreamSupport.stream(targets.spliterator(), false)
        .map(BuildTarget::getBasePath)
        .collect(ImmutableSet.toImmutableSet());
  }"
418,4386725.txt,none,"    private void validate()
    {
        setPageComplete( getApplyOnDns() != null || spw.isValid() );
        setErrorMessage( searchButton.getSelection() ? spw.getErrorMessage() : null );
    }"
419,9350950.txt,none,"    @Override
    public int compareTo(OffsetDateTime other) {
        int cmp = compareInstant(this, other);
        if (cmp == 0) {
            cmp = toLocalDateTime().compareTo(other.toLocalDateTime());
        }
        return cmp;
    }"
420,7074267.txt,none,"    @Override
    public TypeKind getKind() {
      return TypeKind.DECLARED;
    }"
421,8660303.txt,none,"    @Override public void restartNodes(Collection<UUID> ids) throws IgniteException {
        guard();

        try {
            ctx.grid().compute(forNodeIds(ids)).execute(IgniteKillTask.class, true);
        }
        finally {
            unguard();
        }
    }"
422,5319003.txt,none,"    @Override
    public List<E> subList(int fromIndex, int toIndex)
    {
        return actual.subList( fromIndex, toIndex );
    }"
423,6351518.txt,minor,"    @Override
    public void setDefaults(ILaunchConfigurationWorkingCopy configuration) {
        launchConfigurationWorkingCopy = configuration;

        if (noToolCombo)
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_TOOL, tool);
        else
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_TOOL, LaunchConfigurationConstants.DEFAULT_TOOL);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_TRACECHILD, LaunchConfigurationConstants.DEFAULT_GENERAL_TRACECHILD);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_FREERES, LaunchConfigurationConstants.DEFAULT_GENERAL_FREERES);

        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_DEMANGLE, LaunchConfigurationConstants.DEFAULT_GENERAL_DEMANGLE);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_NUMCALLERS, LaunchConfigurationConstants.DEFAULT_GENERAL_NUMCALLERS);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_ERRLIMIT, LaunchConfigurationConstants.DEFAULT_GENERAL_ERRLIMIT);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_BELOWMAIN, LaunchConfigurationConstants.DEFAULT_GENERAL_BELOWMAIN);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_MAXFRAME, LaunchConfigurationConstants.DEFAULT_GENERAL_MAXFRAME);
        configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_SUPPFILES, LaunchConfigurationConstants.DEFAULT_GENERAL_SUPPFILES);

        // 3.4.0 specific
        if (valgrindVersion == null || valgrindVersion.compareTo(ValgrindLaunchPlugin.VER_3_4_0) >= 0) {
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_MAINSTACK_BOOL, LaunchConfigurationConstants.DEFAULT_GENERAL_MAINSTACK_BOOL);
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_MAINSTACK, LaunchConfigurationConstants.DEFAULT_GENERAL_MAINSTACK);
        }

        // 3.6.0 specific
        if (valgrindVersion == null || valgrindVersion.compareTo(ValgrindLaunchPlugin.VER_3_6_0) >= 0) {
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_GENERAL_DSYMUTIL, LaunchConfigurationConstants.DEFAULT_GENERAL_DSYMUTIL);
            configuration.setAttribute(LaunchConfigurationConstants.ATTR_FULLPATH_AFTER, LaunchConfigurationConstants.DEFAULT_FULLPATH_AFTER);
        }

        if (dynamicTab != null) {
            dynamicTab.setDefaults(configuration);
            initDefaults = false;
        }
    }"
424,9022124.txt,none,"    @Override
    public void finish() throws IOException {
      if (logDebug) { log.debug(""PRE_UPDATE FINISH "" + req); }
      if (next != null) next.finish();

      // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)

      if (log.isInfoEnabled()) {
        log.info(getLogStringAndClearRspToLog());
      }

      if (log.isWarnEnabled() && slowUpdateThresholdMillis >= 0) {
        final long elapsed = (long) req.getRequestTimer().getTime();
        if (elapsed >= slowUpdateThresholdMillis) {
          log.warn(""slow: "" + getLogStringAndClearRspToLog());
        }
      }
    }"
425,7065127.txt,none,"    @Override
    public int getActualMinimum(int field) {
        if (field == DAY_OF_MONTH) {
            GregorianCalendar gc = getNormalizedCalendar();
            int year = gc.cdate.getNormalizedYear();
            if (year == gregorianCutoverYear || year == gregorianCutoverYearJulian) {
                long month1 = getFixedDateMonth1(gc.cdate, gc.calsys.getFixedDate(gc.cdate));
                BaseCalendar.Date d = getCalendarDate(month1);
                return d.getDayOfMonth();
            }
        }
        return getMinimum(field);
    }"
426,6191994.txt,none,"	@Override
	public <T> T getAdapter(Class<T> adapter) {
		if (adapter.isInstance(this)) {
			return adapter.cast(this);
		} else if (Repository.class.equals(adapter)) {
			return adapter.cast(getRepository());
		}
		return null;
	}"
427,5634327.txt,none,"    public boolean equals(Object object)
    {
        boolean isEqual = false;

        if (super.equals(object) && (object instanceof DefineShape))
        {
            DefineShape defineShape = (DefineShape) object;

            if ( equals(defineShape.bounds, this.bounds) &&
                 equals(defineShape.shapeWithStyle, this.shapeWithStyle) &&
                 equals(defineShape.edgeBounds, this.edgeBounds) &&
                 (defineShape.usesFillWindingRule == this.usesFillWindingRule) &&
                 (defineShape.usesNonScalingStrokes == this.usesNonScalingStrokes) &&
                  (defineShape.usesScalingStrokes == this.usesScalingStrokes))
            {
                isEqual = true;
            }
        }

        return isEqual;
    }"
428,6296221.txt,minor,"    public AsyncContextEvent(Context context,AsyncContextState asyncContext, HttpChannelState state, Request baseRequest, ServletRequest request, ServletResponse response)
    {
        super(null,request,response,null);
        _context=context;
        _asyncContext=asyncContext;
        _state=state;

        // If we haven't been async dispatched before
        if (baseRequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI)==null)
        {
            // We are setting these attributes during startAsync, when the spec implies that
            // they are only available after a call to AsyncContext.dispatch(...);

            // have we been forwarded before?
            String uri=(String)baseRequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);
            if (uri!=null)
            {
                baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,uri);
                baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH));
                baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH));
                baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getAttribute(RequestDispatcher.FORWARD_PATH_INFO));
                baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING));
            }
            else
            {
                baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,baseRequest.getRequestURI());
                baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getContextPath());
                baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getServletPath());
                baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getPathInfo());
                baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getQueryString());
            }
        }
    }"
429,7542000.txt,none,"	public static long run() {
		Foo f = null;
		f = (i) -> i*33;
		return f.m(3);
	}"
430,8333175.txt,none,"	private void doAggressiveInner(LazyClassGen gen) {
		// agressively generate the inner interface if any
		// Note: we do so because of the bug #75442 that leads to have this interface implemented by all classes and not
		// only those matched by the per clause, which fails under LTW since the very first class
		// gets weaved and impl this interface that is still not defined.
		if (!hasGeneratedInner) {
			if (kind == PerClause.PEROBJECT) {// redundant test - see constructor, but safer
				// inner class
				UnresolvedType interfaceTypeX = AjcMemberMaker.perObjectInterfaceType(aspectType);
				LazyClassGen interfaceGen = new LazyClassGen(interfaceTypeX.getName(), ""java.lang.Object"", null,
						Constants.ACC_INTERFACE + Constants.ACC_PUBLIC + Constants.ACC_ABSTRACT, new String[0], getWorld());
				interfaceGen.addMethodGen(makeMethodGen(interfaceGen, AjcMemberMaker.perObjectInterfaceGet(aspectType)));
				interfaceGen.addMethodGen(makeMethodGen(interfaceGen, AjcMemberMaker.perObjectInterfaceSet(aspectType)));
				// not really an inner class of it but that does not matter, we pass back to the LTW
				gen.addGeneratedInner(interfaceGen);
			}
			hasGeneratedInner = true;
		}
	}"
431,8727139.txt,none,"void setLineJustify(int startLine, int count, boolean justify) {
	if (lines == null) lines = new LineInfo[lineCount];
	for (int i = startLine; i < startLine + count; i++) {
		if (lines[i] == null) {
			lines[i] = new LineInfo();
		}
		lines[i].flags |= JUSTIFY;
		lines[i].justify = justify;
	}
}"
432,9044996.txt,none,"@Override
public String toString() {
	StringBuilder buffer = new StringBuilder(""[""); //$NON-NLS-1$
	for (int i = 0; i < this.size; i++) {
		buffer.append(""\n""); //$NON-NLS-1$
		buffer.append(this.elements[i]);
	}
	buffer.append(""\n]""); //$NON-NLS-1$
	return buffer.toString();
}"
433,8092397.txt,none,"	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Bug250313Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Bug250313Package.CHILD1:
				sequence_Child1(context, (Child1) semanticObject); 
				return; 
			case Bug250313Package.CHILD2:
				sequence_Child2(context, (Child2) semanticObject); 
				return; 
			case Bug250313Package.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}"
434,4453471.txt,none,"  public Wrapper get(Fragment node) {
    Wrapper wrapper = fragmentMap.get(node);
    if (wrapper == null) {

      int majorFragmentId = 0;

      // If there is a sending exchange, we need to number other than zero.
      if (node.getSendingExchange() != null) {

        // assign the upper 16 bits as the major fragment id.
        majorFragmentId = node.getSendingExchange().getChild().getOperatorId() >> 16;

        // if they are not assigned, that means we mostly likely have an externally generated plan.  in this case, come up with a major fragmentid.
        if (majorFragmentId == 0) {
          majorFragmentId = majorFragmentIdIndex;
        }
      }
      wrapper = new Wrapper(node, majorFragmentId);
      fragmentMap.put(node, wrapper);
      majorFragmentIdIndex++;
    }
    return wrapper;
  }"
435,5893533.txt,none,"    @Override
    public Collection<Class> getMessageTypes() {
        return new ArrayList() {{
            add( QueueGetRequest.class );
            add( QueueInitRequest.class );
            add( QueueRefreshRequest.class );
            add( QueueTimeoutRequest.class );
            add( ShardCheckRequest.class );
        }};
    }"
436,8573637.txt,none,"  synchronized void remoteOperationDone(MasterProcedureEnv env, Throwable error) {
    if (this.isFinished()) {
      LOG.info(""This procedure {} is already finished, skip the rest processes"", this.getProcId());
      return;
    }
    if (event == null) {
      LOG.warn(""procedure event for {} is null, maybe the procedure is created when recovery"",
          getProcId());
      return;
    }
    complete(env, error);
    event.wake(env.getProcedureScheduler());
    event = null;
  }"
437,6961928.txt,none,"  @Override
  public final boolean equals(@Nullable Object object) {
    if (object instanceof HashCode) {
      HashCode that = (HashCode) object;
      return bits() == that.bits() && equalsSameBits(that);
    }
    return false;
  }"
438,7402299.txt,none,"        @Override
        public void add(int arg0, Element arg1) {
            elementsInSegment.add(arg0, arg1);
        }"
439,8719445.txt,minor,"	public static void main(String[] args) {
		Display display = new Display();
		Shell shell = new Shell(display);
		shell.setText(""Excel Sheet Selection Example"");
		shell.setLayout(new FillLayout());
		OleAutomation application;
		try {
			OleFrame frame = new OleFrame(shell, SWT.NONE);
			OleControlSite controlSite = new OleControlSite(frame, SWT.NONE, ""Excel.Sheet"");
			controlSite.doVerb(OLE.OLEIVERB_INPLACEACTIVATE);
			
			OleAutomation excelSheet = new OleAutomation(controlSite);
			int[] dispIDs = excelSheet.getIDsOfNames(new String[] { ""Application"" });
			Variant pVarResult = excelSheet.getProperty(dispIDs[0]);
			application = pVarResult.getAutomation();
			pVarResult.dispose();
			excelSheet.dispose();
			
			OleListener listener = new OleListener() {
				@Override
				public void handleEvent(OleEvent e) {
					// SheetSelectionChange(ByVal Sh As Object, ByVal Target As Excel.Range)
					Variant[] args = e.arguments;
					// OleAutomation sheet = args[1].getAutomation(); // Excel.Sheet
					OleAutomation range = args[0].getAutomation(); // Excel.Range
					int[] dispIDs = range.getIDsOfNames(new String[] { ""Row"" });
					Variant pVarResult = range.getProperty(dispIDs[0]);
					int row = pVarResult.getInt();
					dispIDs = range.getIDsOfNames(new String[] { ""Column"" });
					pVarResult = range.getProperty(dispIDs[0]);
					int column = pVarResult.getInt();
					range.dispose();
					System.out.println(""row="" + row + "" column="" + column);
				}
			};
			controlSite.addEventListener(application, IID_AppEvents, SheetSelectionChange, listener);
		} catch (SWTError e) {
			System.out.println(""Unable to open activeX control"");
			display.dispose();
			return;
		}
		shell.setSize(800, 600);
		shell.open();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
		if (application != null) application.dispose();
		display.dispose();
	}"
440,3844294.txt,none,"    public listNamespaceIterators_result setOuch1(@org.apache.thrift.annotation.Nullable AccumuloException ouch1) {
      this.ouch1 = ouch1;
      return this;
    }"
441,5882133.txt,none,"    @Inject
    public CandidateIdFilter( final EntityCollectionManagerFactory entityCollectionManagerFactory,
                              final EntityIndexFactory entityIndexFactory,
                              final IndexLocationStrategyFactory indexLocationStrategyFactory,
                              final IndexProducer indexProducer) {
        this.entityCollectionManagerFactory = entityCollectionManagerFactory;
        this.entityIndexFactory = entityIndexFactory;
        this.indexLocationStrategyFactory = indexLocationStrategyFactory;
        this.indexProducer = indexProducer;
    }"
442,9215037.txt,none,"    public ProfileBranchNode(ResolvedJavaMethod method, int freqLog, int probabilityLog, int bci, int targetBci) {
        super(TYPE, method, freqLog, probabilityLog);
        assert targetBci <= bci;
        this.branchCondition = null;
        this.bci = bci;
        this.targetBci = targetBci;
    }"
443,7962366.txt,none,"    public final void ruleXDoWhileExpression() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalXImportSectionTestLang.g:1067:2: ( ( ( rule__XDoWhileExpression__Group__0 ) ) )
            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )
            {
            // InternalXImportSectionTestLang.g:1068:2: ( ( rule__XDoWhileExpression__Group__0 ) )
            // InternalXImportSectionTestLang.g:1069:3: ( rule__XDoWhileExpression__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }
            // InternalXImportSectionTestLang.g:1070:3: ( rule__XDoWhileExpression__Group__0 )
            // InternalXImportSectionTestLang.g:1070:4: rule__XDoWhileExpression__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__XDoWhileExpression__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getXDoWhileExpressionAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }"
444,6419181.txt,minor,"    private Class getCommonResourceClass(List objects) {
        if (objects == null || objects.isEmpty()) {
            return null;
        }
        Class resourceClass = LegacyResourceSupport.getResourceClass();
        if (resourceClass == null) {
            // resources plug-in not loaded - no resources. period.
            return null;
        }

        List testList = new ArrayList(objects.size());

        for (int i = 0; i < objects.size(); i++) {
            Object object = objects.get(i);

            if (object instanceof IAdaptable) {
                if (resourceClass.isInstance(object)) {
                    continue;
                }

                Object resource = LegacyResourceSupport
                        .getAdaptedContributorResource(object);

                if (resource == null) {
                    //Not a resource and does not adapt. No common resource class
                    return null;
                }
                testList.add(resource);
            } else {
                return null;
            }
        }

        return getCommonClass(testList);
    }"
445,4371368.txt,none,"    public Set<String> keySet() {
        return wrappedService.keySet();
    }"
446,9014548.txt,none,"  @Override
  public PostingsEnum postings(PostingsEnum reuse, int flags) throws IOException {
    assert !eof;
    //if (DEBUG) {
    //System.out.println(""BTTR.docs seg="" + segment);
    //}
    currentFrame.decodeMetaData();
    //if (DEBUG) {
    //System.out.println(""  state="" + currentFrame.state);
    //}
    return fr.parent.postingsReader.postings(fr.fieldInfo, currentFrame.state, reuse, flags);
  }"
447,7420655.txt,none,"	public boolean isPartition() {
		return name().contains(""PARTITION"");
	}"
448,3858217.txt,none,"  @DELETE
  @Path(""{requestScheduleId}"")
  @Produces(MediaType.TEXT_PLAIN)
  @ApiOperation(value = ""Delete a request schedule"", notes = ""Changes status from COMPLETED to DISABLED"")
  @ApiResponses({
          @ApiResponse(code = HttpStatus.SC_OK, message = MSG_SUCCESSFUL_OPERATION),
          @ApiResponse(code = HttpStatus.SC_NOT_FOUND, message = MSG_CLUSTER_OR_HOST_NOT_FOUND),
          @ApiResponse(code = HttpStatus.SC_UNAUTHORIZED, message = MSG_NOT_AUTHENTICATED),
          @ApiResponse(code = HttpStatus.SC_FORBIDDEN, message = MSG_PERMISSION_DENIED),
          @ApiResponse(code = HttpStatus.SC_INTERNAL_SERVER_ERROR, message = MSG_SERVER_ERROR),
  })
  public Response deleteRequestSchedule(@Context HttpHeaders headers,
                                        @Context UriInfo ui,
                                        @PathParam(""requestScheduleId"") String requestScheduleId) {
    return handleRequest(headers, null, ui, Request.Type.DELETE,
      createRequestSchedule(m_clusterName, requestScheduleId));
  }"
449,4195808.txt,none,"    public String toString(TableMetadata metadata)
    {
        return String.format(""slice(slices=%s, reversed=%b)"", slices, reversed);
    }"
450,4773397.txt,none,"    @Override
    public CloseableIteration<BindingSet, QueryEvaluationException> evaluate(BindingSet bindings)
            throws QueryEvaluationException {
        return evaluate(Collections.singleton(bindings));
    }"
451,8984803.txt,none,"  public int maxDoc() {
    if (this.maxDoc == -1) {
      throw new IllegalStateException(""maxDoc isn't set yet"");
    }
    return maxDoc;
  }"
452,4600851.txt,none,"    @Override
    public void postSuperstep() { }"
453,9291749.txt,none,"    public Shape createTransformedShape(Shape pSrc) {
        if (pSrc == null) {
            return null;
        }
        return new Path2D.Double(pSrc, this);
    }"
454,8785914.txt,none,"    @Override
    public void transition(JobImpl job, JobEvent event) {
      job.addDiagnostic(((JobDiagnosticsUpdateEvent) event)
          .getDiagnosticUpdate());
    }"
455,9542718.txt,none,"  @Override
  public KillTaskAttemptResponse killTaskAttempt(
      KillTaskAttemptRequest request) throws IOException {
    KillTaskAttemptResponse resp =
      recordFactory.newRecordInstance(KillTaskAttemptResponse.class);
    return resp;
  }"
456,7530504.txt,none,"	public S userFlag(String userFlag) {
		assertReceiver();
		this.receiver.setUserFlag(userFlag);
		return _this();
	}"
457,8978350.txt,minor,"  @Override
  public void close() throws IOException {
    boolean success = false;
    try {
      if (meta != null) {
        meta.writeInt(-1); // write EOF marker
        CodecUtil.writeFooter(meta); // write checksum
      }
      if (data != null) {
        CodecUtil.writeFooter(data); // write checksum
      }
      success = true;
    } finally {
      if (success) {
        IOUtils.close(data, meta);
      } else {
        IOUtils.closeWhileHandlingException(data, meta);
      }
      meta = data = null;
    }
  }"
458,8182379.txt,none,"    public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException {

        MessageDispatchNotification info = (MessageDispatchNotification)o;

        int rc = super.tightMarshal1(wireFormat, o, bs);
        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getConsumerId(), bs);
        rc += tightMarshalCachedObject1(wireFormat, (DataStructure)info.getDestination(), bs);
        rc += tightMarshalLong1(wireFormat, info.getDeliverySequenceId(), bs);
        rc += tightMarshalNestedObject1(wireFormat, (DataStructure)info.getMessageId(), bs);

        return rc + 0;
    }"
459,6613429.txt,none,"  @Override
  protected void onDestroy() {
    super.onDestroy();
    mMapView.dispose();
  }"
460,5314955.txt,none,"    @Override
    public void closePath()
    {
        linePath.closePath();
    }"
461,8841762.txt,none,"      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntity_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSre()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSre()) {
          struct.sre.write(oprot);
        }
      }"
462,5280072.txt,none,"    public void addAdditionalQualifier(Class<? extends Annotation> qualifier)
    {
        if (!additionalQualifiers.contains(qualifier))
        {
            additionalQualifiers.add(qualifier);
        }
    }"
463,6925834.txt,none,"  public void setPositionExt(GphotoPosition positionExt) {
    if (positionExt == null) {
      removeExtension(GphotoPosition.class);
    } else {
      setExtension(positionExt);
    }
  }"
464,4933953.txt,major,"    @Override
    public WikiPage getPageInfo( String page, int version )
        throws ProviderException
    {
        int latest = findLatestVersion(page);
        int realVersion;

        WikiPage p = null;

        if( version == WikiPageProvider.LATEST_VERSION ||
            version == latest ||
            (version == 1 && latest == -1) )
        {
            //
            // Yes, we need to talk to the top level directory
            // to get this version.
            //
            // I am listening to Press Play On Tape's guitar version of
            // the good old C64 ""Wizardry"" -tune at this moment.
            // Oh, the memories...
            //
            realVersion = (latest >= 0) ? latest : 1;

            p = super.getPageInfo( page, WikiPageProvider.LATEST_VERSION );

            if( p != null )
            {
                p.setVersion( realVersion );
            }
        }
        else
        {
            //
            //  The file is not the most recent, so we'll need to
            //  find it from the deep trenches of the ""OLD"" directory
            //  structure.
            //
            realVersion = version;
            File dir = findOldPageDir( page );

            if( !dir.exists() || !dir.isDirectory() )
            {
                return null;
            }

            File file = new File( dir, version+FILE_EXT );

            if( file.exists() )
            {
                p = new WikiPage( m_engine, page );

                p.setLastModified( new Date(file.lastModified()) );
                p.setVersion( version );
            }
        }

        //
        //  Get author and other metadata information
        //  (Modification date has already been set.)
        //
        if( p != null )
        {
            try
            {
                Properties props = getPageProperties( page );
                String author = props.getProperty( realVersion+"".author"" );
                if ( author == null )
                {
                    // we might not have a versioned author because the
                    // old page was last maintained by FileSystemProvider
                    Properties props2 = getHeritagePageProperties( page );
                    author = props2.getProperty( WikiPage.AUTHOR );
                }
                if ( author != null )
                {
                    p.setAuthor( author );
                }

                String changenote = props.getProperty( realVersion+"".changenote"" );
                if( changenote != null ) p.setAttribute( WikiPage.CHANGENOTE, changenote );

                // Set the props values to the page attributes
                setCustomProperties(p, props);
            }
            catch( IOException e )
            {
                log.error( ""Cannot get author for page""+page+"": "", e );
            }
        }

        return p;
    }"
465,5498738.txt,none,"    @RequestMapping(value = ""/producerConnection.query"", method = {RequestMethod.GET})
    @ResponseBody
    public Object producerConnection(@RequestParam String producerGroup, @RequestParam String topic) {
        ProducerConnection producerConnection = producerService.getProducerConnection(producerGroup, topic);
        producerConnection.setConnectionSet(ConnectionInfo.buildConnectionInfoHashSet(producerConnection.getConnectionSet()));
        return producerConnection;
    }"
466,9058891.txt,none,"@Override
protected IBinaryType createInfoFromClassFileInJar(Openable classFile) {
	String filePath = (((ClassFile)classFile).getType().getFullyQualifiedName('$')).replace('.', '/') + SuffixConstants.SUFFIX_STRING_class;
	IPackageFragmentRoot root = classFile.getPackageFragmentRoot();
	IPath path = root.getPath();
	// take the OS path for external jars, and the forward slash path for internal jars
	String rootPath = path.getDevice() == null ? path.toString() : path.toOSString();
	String documentPath = rootPath + IJavaSearchScope.JAR_FILE_ENTRY_SEPARATOR + filePath;
	IBinaryType binaryType = (IBinaryType)this.binariesFromIndexMatches.get(documentPath);
	if (binaryType != null) {
		this.infoToHandle.put(binaryType, classFile);
		return binaryType;
	} else {
		return super.createInfoFromClassFileInJar(classFile);
	}
}"
467,4716573.txt,none,"        public IDataType getElemType() {
            return elemType;
        }"
468,6614282.txt,none,"	private int countN4JSResourcesBuiltIn(ResourceSet resSet) {
		int n = 0;
		for (Resource res : resSet.getResources()) {
			if (isBuiltInResource(res)) {
				n++;
			}
		}
		return n;
	}"
469,4057674.txt,none,"    public static void serializeFrameSize(ByteBuffer outputFrame, int numberOfMinFrame) {
        serializeFrameSize(outputFrame, 0, numberOfMinFrame);
    }"
470,4901849.txt,none,"        @Override
        public void propertyChanged(PropertyState before, PropertyState after) throws CommitFailedException {
            String propertyName = after.getName();
            if (TOKEN_ATTRIBUTE_KEY.equals(propertyName)) {
                String msg = ""Attempt to change reserved token property "" + propertyName;
                throw constraintViolation(61, msg);
            } else if (TOKEN_ATTRIBUTE_EXPIRY.equals(propertyName)) {
                verifyCommitInfo();
            } else if (JcrConstants.JCR_PRIMARYTYPE.equals(propertyName)) {
                if (TOKEN_NT_NAME.equals(after.getValue(Type.STRING))) {
                    throw constraintViolation(62, ""Changing primary type of existing node to the reserved token node type."");
                }
                if (isTokensParent(parentAfter) && TOKENS_NT_NAME.equals(before.getValue(Type.STRING))) {
                    throw constraintViolation(69, ""Cannot change the primary type of an existing .tokens node."");
                }
            }
        }"
471,9329773.txt,none,"    PlainHttpConnection(InetSocketAddress addr, HttpClientImpl client) {
        super(addr, client);
        try {
            this.chan = SocketChannel.open();
            chan.configureBlocking(false);
            trySetReceiveBufferSize(client.getReceiveBufferSize());
            if (debug.on()) {
                int bufsize = getInitialBufferSize();
                debug.log(""Initial receive buffer size is: %d"", bufsize);
            }
            chan.setOption(StandardSocketOptions.TCP_NODELAY, true);
            // wrap the channel in a Tube for async reading and writing
            tube = new SocketTube(client(), chan, Utils::getBuffer);
        } catch (IOException e) {
            throw new InternalError(e);
        }
    }"
472,5321469.txt,none,"    public int peekUnsignedByte(int offset) throws IOException
    {
        int b = peek(offset);
        if (b < 0)
        {
            throw new EOFException();
        }
        return b;
    }"
473,9489211.txt,none,"  public void deleteLocalFiles(String subdir) throws IOException {
    String[] localDirs = getLocalDirs();
    for (int i = 0; i < localDirs.length; i++) {
      FileSystem.getLocal(this).delete(new Path(localDirs[i], subdir), true);
    }
  }"
474,6530870.txt,none,"    @Override
    public void setState(State state) {
        if (isAcceptedState(acceptedDataTypes, state)) {
            super.setState(state);
        } else {
            logSetTypeError(state);
        }
    }"
475,3785309.txt,none,"  @Override
  protected void runLater(State state, RandWalkEnv env) throws Exception {
    Text[] points = getRandomTabletRange(state);
    log.info(""merging "" + rangeToString(points));
    env.getAccumuloClient().tableOperations().merge(Setup.getTableName(), points[0], points[1]);
    log.info(""merging "" + rangeToString(points) + "" complete"");
  }"
476,7110627.txt,none,"    public ConcurrentMap<String, Double> getMeasurements() {
        if (this.measurements == null) {
            this.measurements = new ConcurrentHashMap<String, Double>();
        }
        return this.measurements;
    }"
477,7568142.txt,none,"	@Override
	protected boolean includeOperation(Method method, String beanKey) {
		PropertyDescriptor pd = BeanUtils.findPropertyForMethod(method);
		return (pd != null && hasManagedAttribute(method)) || hasManagedOperation(method);
	}"
478,7909952.txt,none,"  public static SourcePath createEmptyInitModule(
      BuildTarget buildTarget,
      ProjectFilesystem projectFilesystem,
      ActionGraphBuilder graphBuilder) {
    BuildTarget emptyInitTarget = getEmptyInitTarget(buildTarget);
    Path emptyInitPath =
        BuildTargetPaths.getGenPath(projectFilesystem, buildTarget, ""%s/__init__.py"");
    WriteFile rule =
        graphBuilder.addToIndex(
            new WriteFile(
                emptyInitTarget, projectFilesystem, """", emptyInitPath, /* executable */ false));
    return rule.getSourcePathToOutput();
  }"
479,5958765.txt,none,"    @Managed
    public void flush() {
        stats.flushes.record();
        poolVersion.incrementAndGet();
    }"
480,8211343.txt,none,"		public static IGrammarAwareElementType createModel_Group_5ElementType() {
			return new IGrammarAwareElementType(""Model_Group_5_ELEMENT_TYPE"", Bug289515TestLanguageLanguage.INSTANCE, GRAMMAR_ACCESS.getModelAccess().getGroup_5());
		}"
481,4959879.txt,none,"   public static Predicate<OperatingSystem> isUnix() {
      return new Predicate<OperatingSystem>() {
         @Override
         public boolean apply(OperatingSystem os) {
            if (os.getFamily() != null) {
               switch (os.getFamily()) {
                  case WINDOWS:
                     return false;
               }
            }
            for (String toMatch : searchStrings(os))
               if (toMatch != null && toMatch.toLowerCase().indexOf(""windows"") != -1)
                  return false;
            return true;
         }

         @Override
         public String toString() {
            return ""isUnix()"";
         }
      };
   }"
